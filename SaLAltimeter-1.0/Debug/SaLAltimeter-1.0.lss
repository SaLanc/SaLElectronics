
SaLAltimeter-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013a4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  000013a4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f14  20000438  000017dc  00010438  2**2
                  ALLOC
  3 .stack        00002004  2000334c  000046f0  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a61b  00000000  00000000  000104bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001365  00000000  00000000  0001aad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002191  00000000  00000000  0001be3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001d8  00000000  00000000  0001dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001d8  00000000  00000000  0001e1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001355d  00000000  00000000  0001e37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000498f  00000000  00000000  000318d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e060  00000000  00000000  00036268  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000059c  00000000  00000000  000a42c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20005350 	.word	0x20005350
       4:	000005a9 	.word	0x000005a9
       8:	000005a1 	.word	0x000005a1
       c:	000005a1 	.word	0x000005a1
	...
      2c:	000005a1 	.word	0x000005a1
	...
      38:	000005a1 	.word	0x000005a1
      3c:	000005a1 	.word	0x000005a1
      40:	000005a1 	.word	0x000005a1
      44:	000005a1 	.word	0x000005a1
      48:	000005a1 	.word	0x000005a1
      4c:	000005a1 	.word	0x000005a1
      50:	000005a1 	.word	0x000005a1
      54:	000005a1 	.word	0x000005a1
      58:	000005a1 	.word	0x000005a1
      5c:	000005a1 	.word	0x000005a1
      60:	000005a1 	.word	0x000005a1
      64:	000005a1 	.word	0x000005a1
      68:	000005a1 	.word	0x000005a1
      6c:	000005a1 	.word	0x000005a1
      70:	000005a1 	.word	0x000005a1
      74:	000005a1 	.word	0x000005a1
      78:	000005a1 	.word	0x000005a1
      7c:	000005a1 	.word	0x000005a1
      80:	000005a1 	.word	0x000005a1
      84:	000005a1 	.word	0x000005a1
      88:	000005a1 	.word	0x000005a1
      8c:	000005a1 	.word	0x000005a1
      90:	000005a1 	.word	0x000005a1
	...
      9c:	000005a1 	.word	0x000005a1
      a0:	000005a1 	.word	0x000005a1
      a4:	000005a1 	.word	0x000005a1
      a8:	000005a1 	.word	0x000005a1
      ac:	000005a1 	.word	0x000005a1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000438 	.word	0x20000438
      d4:	00000000 	.word	0x00000000
      d8:	000013a4 	.word	0x000013a4

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	000013a4 	.word	0x000013a4
     108:	2000043c 	.word	0x2000043c
     10c:	000013a4 	.word	0x000013a4
     110:	00000000 	.word	0x00000000

00000114 <getevents>:
    byteOut(module,ADXL345_REG_DATA_FORMAT);
    byteOut(module,_cmd);
    SaLDigitalOut(module->SS,true);
}

void getevents(struct spiModule *const module) {
     114:	b570      	push	{r4, r5, r6, lr}
     116:	b082      	sub	sp, #8
     118:	1c04      	adds	r4, r0, #0
    SaLDigitalOut(module->SS,false);
     11a:	78c3      	ldrb	r3, [r0, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     11c:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     11e:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     120:	2900      	cmp	r1, #0
     122:	d104      	bne.n	12e <getevents+0x1a>
        return &(ports[port_index]->Group[group_index]);
     124:	095a      	lsrs	r2, r3, #5
     126:	01d2      	lsls	r2, r2, #7
     128:	4945      	ldr	r1, [pc, #276]	; (240 <getevents+0x12c>)
     12a:	468c      	mov	ip, r1
     12c:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     12e:	211f      	movs	r1, #31
     130:	400b      	ands	r3, r1
     132:	391e      	subs	r1, #30
     134:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     136:	6151      	str	r1, [r2, #20]
    byteOut(module,ADXL345_REG_DATAX0 | 0x80 | 0x40);
     138:	1c20      	adds	r0, r4, #0
     13a:	21f2      	movs	r1, #242	; 0xf2
     13c:	4b41      	ldr	r3, [pc, #260]	; (244 <getevents+0x130>)
     13e:	4798      	blx	r3
    volatile uint8_t _byte1 = getByte(module);
     140:	1c20      	adds	r0, r4, #0
     142:	4d41      	ldr	r5, [pc, #260]	; (248 <getevents+0x134>)
     144:	47a8      	blx	r5
     146:	466b      	mov	r3, sp
     148:	71d8      	strb	r0, [r3, #7]
    volatile uint8_t _byte2 = getByte(module);
     14a:	1c20      	adds	r0, r4, #0
     14c:	47a8      	blx	r5
     14e:	466b      	mov	r3, sp
     150:	1d9e      	adds	r6, r3, #6
     152:	7198      	strb	r0, [r3, #6]
    volatile uint8_t _byte3 = getByte(module);
     154:	1c20      	adds	r0, r4, #0
     156:	47a8      	blx	r5
     158:	466b      	mov	r3, sp
     15a:	7158      	strb	r0, [r3, #5]
    volatile uint8_t _byte4 = getByte(module);
     15c:	1c20      	adds	r0, r4, #0
     15e:	47a8      	blx	r5
     160:	ab01      	add	r3, sp, #4
     162:	7018      	strb	r0, [r3, #0]
    volatile uint8_t _byte5 = getByte(module);
     164:	1c20      	adds	r0, r4, #0
     166:	47a8      	blx	r5
     168:	466b      	mov	r3, sp
     16a:	70d8      	strb	r0, [r3, #3]
    volatile uint8_t _byte6 = getByte(module);
     16c:	1c20      	adds	r0, r4, #0
     16e:	47a8      	blx	r5
     170:	466b      	mov	r3, sp
     172:	7098      	strb	r0, [r3, #2]


//check if last bit in second byte is 1 therefor negative number
    int16_t negative = (_byte2 & (1 <<7)) != 0;
     174:	7833      	ldrb	r3, [r6, #0]
    if (negative) {
     176:	b25b      	sxtb	r3, r3
     178:	2b00      	cmp	r3, #0
     17a:	da0c      	bge.n	196 <getevents+0x82>
		// if negative then preform 2's complement to int conversion 
        Xaccel = ((_byte2 | ~((1 << 8) - 1)) << 8 ) | _byte1;
     17c:	466b      	mov	r3, sp
     17e:	3306      	adds	r3, #6
     180:	781b      	ldrb	r3, [r3, #0]
     182:	466a      	mov	r2, sp
     184:	79d1      	ldrb	r1, [r2, #7]
     186:	4a31      	ldr	r2, [pc, #196]	; (24c <getevents+0x138>)
     188:	4313      	orrs	r3, r2
     18a:	021b      	lsls	r3, r3, #8
     18c:	430b      	orrs	r3, r1
     18e:	b29b      	uxth	r3, r3
     190:	4a2f      	ldr	r2, [pc, #188]	; (250 <getevents+0x13c>)
     192:	8013      	strh	r3, [r2, #0]
     194:	e00a      	b.n	1ac <getevents+0x98>
    } else {
        Xaccel = (_byte2 << 8) + _byte1;
     196:	466b      	mov	r3, sp
     198:	3306      	adds	r3, #6
     19a:	781b      	ldrb	r3, [r3, #0]
     19c:	466a      	mov	r2, sp
     19e:	3207      	adds	r2, #7
     1a0:	7812      	ldrb	r2, [r2, #0]
     1a2:	021b      	lsls	r3, r3, #8
     1a4:	18d3      	adds	r3, r2, r3
     1a6:	b29b      	uxth	r3, r3
     1a8:	4a29      	ldr	r2, [pc, #164]	; (250 <getevents+0x13c>)
     1aa:	8013      	strh	r3, [r2, #0]
    }

    negative = (_byte4 & (1 <<7)) != 0;
     1ac:	ab01      	add	r3, sp, #4
     1ae:	781b      	ldrb	r3, [r3, #0]
    if (negative) {
     1b0:	b25b      	sxtb	r3, r3
     1b2:	2b00      	cmp	r3, #0
     1b4:	da0a      	bge.n	1cc <getevents+0xb8>
        Yaccel = ((_byte4 | ~((1 << 8) - 1)) << 8 ) | _byte4;
     1b6:	aa01      	add	r2, sp, #4
     1b8:	7813      	ldrb	r3, [r2, #0]
     1ba:	7811      	ldrb	r1, [r2, #0]
     1bc:	4a23      	ldr	r2, [pc, #140]	; (24c <getevents+0x138>)
     1be:	4313      	orrs	r3, r2
     1c0:	021b      	lsls	r3, r3, #8
     1c2:	430b      	orrs	r3, r1
     1c4:	b29b      	uxth	r3, r3
     1c6:	4a23      	ldr	r2, [pc, #140]	; (254 <getevents+0x140>)
     1c8:	8013      	strh	r3, [r2, #0]
     1ca:	e009      	b.n	1e0 <getevents+0xcc>
    } else {
        Yaccel = (_byte4 * 256) + _byte3;
     1cc:	ab01      	add	r3, sp, #4
     1ce:	781b      	ldrb	r3, [r3, #0]
     1d0:	466a      	mov	r2, sp
     1d2:	3205      	adds	r2, #5
     1d4:	7812      	ldrb	r2, [r2, #0]
     1d6:	021b      	lsls	r3, r3, #8
     1d8:	18d3      	adds	r3, r2, r3
     1da:	b29b      	uxth	r3, r3
     1dc:	4a1d      	ldr	r2, [pc, #116]	; (254 <getevents+0x140>)
     1de:	8013      	strh	r3, [r2, #0]
    }

    negative = (_byte6 & (1 <<7)) != 0;
     1e0:	466b      	mov	r3, sp
     1e2:	3302      	adds	r3, #2
     1e4:	781b      	ldrb	r3, [r3, #0]
    if (negative) {
     1e6:	b25b      	sxtb	r3, r3
     1e8:	2b00      	cmp	r3, #0
     1ea:	da0c      	bge.n	206 <getevents+0xf2>
        Zaccel = ((_byte6 | ~((1 << 8) - 1)) << 8 ) | _byte5;
     1ec:	466b      	mov	r3, sp
     1ee:	3302      	adds	r3, #2
     1f0:	781b      	ldrb	r3, [r3, #0]
     1f2:	466a      	mov	r2, sp
     1f4:	78d1      	ldrb	r1, [r2, #3]
     1f6:	4a15      	ldr	r2, [pc, #84]	; (24c <getevents+0x138>)
     1f8:	4313      	orrs	r3, r2
     1fa:	021b      	lsls	r3, r3, #8
     1fc:	430b      	orrs	r3, r1
     1fe:	b29b      	uxth	r3, r3
     200:	4a15      	ldr	r2, [pc, #84]	; (258 <getevents+0x144>)
     202:	8013      	strh	r3, [r2, #0]
     204:	e00a      	b.n	21c <getevents+0x108>
    } else {
        Zaccel = (_byte6 * 256) + _byte5;
     206:	466b      	mov	r3, sp
     208:	3302      	adds	r3, #2
     20a:	781b      	ldrb	r3, [r3, #0]
     20c:	466a      	mov	r2, sp
     20e:	3203      	adds	r2, #3
     210:	7812      	ldrb	r2, [r2, #0]
     212:	021b      	lsls	r3, r3, #8
     214:	18d3      	adds	r3, r2, r3
     216:	b29b      	uxth	r3, r3
     218:	4a0f      	ldr	r2, [pc, #60]	; (258 <getevents+0x144>)
     21a:	8013      	strh	r3, [r2, #0]
    }

    SaLDigitalOut(module->SS,true);
     21c:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     21e:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     220:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     222:	2900      	cmp	r1, #0
     224:	d104      	bne.n	230 <getevents+0x11c>
        return &(ports[port_index]->Group[group_index]);
     226:	095a      	lsrs	r2, r3, #5
     228:	01d2      	lsls	r2, r2, #7
     22a:	4905      	ldr	r1, [pc, #20]	; (240 <getevents+0x12c>)
     22c:	468c      	mov	ip, r1
     22e:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     230:	211f      	movs	r1, #31
     232:	400b      	ands	r3, r1
     234:	391e      	subs	r1, #30
     236:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     238:	6191      	str	r1, [r2, #24]
}
     23a:	b002      	add	sp, #8
     23c:	bd70      	pop	{r4, r5, r6, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	41004400 	.word	0x41004400
     244:	00000395 	.word	0x00000395
     248:	00000429 	.word	0x00000429
     24c:	ffffff00 	.word	0xffffff00
     250:	2000045c 	.word	0x2000045c
     254:	20000458 	.word	0x20000458
     258:	2000045a 	.word	0x2000045a

0000025c <currentX>:

float currentX() {
     25c:	b510      	push	{r4, lr}
    return (Xaccel * ADXL345_MG2G_MULTIPLIER);
     25e:	4b06      	ldr	r3, [pc, #24]	; (278 <currentX+0x1c>)
     260:	8818      	ldrh	r0, [r3, #0]
     262:	b200      	sxth	r0, r0
     264:	4b05      	ldr	r3, [pc, #20]	; (27c <currentX+0x20>)
     266:	4798      	blx	r3
     268:	4a05      	ldr	r2, [pc, #20]	; (280 <currentX+0x24>)
     26a:	4b06      	ldr	r3, [pc, #24]	; (284 <currentX+0x28>)
     26c:	4c06      	ldr	r4, [pc, #24]	; (288 <currentX+0x2c>)
     26e:	47a0      	blx	r4
     270:	4b06      	ldr	r3, [pc, #24]	; (28c <currentX+0x30>)
     272:	4798      	blx	r3
}
     274:	bd10      	pop	{r4, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	2000045c 	.word	0x2000045c
     27c:	00000fed 	.word	0x00000fed
     280:	8e8a71de 	.word	0x8e8a71de
     284:	3f6ff2e4 	.word	0x3f6ff2e4
     288:	00000ab9 	.word	0x00000ab9
     28c:	00001065 	.word	0x00001065

00000290 <currentY>:
float currentY() {
     290:	b510      	push	{r4, lr}
    return (Yaccel * ADXL345_MG2G_MULTIPLIER);
     292:	4b06      	ldr	r3, [pc, #24]	; (2ac <currentY+0x1c>)
     294:	8818      	ldrh	r0, [r3, #0]
     296:	b200      	sxth	r0, r0
     298:	4b05      	ldr	r3, [pc, #20]	; (2b0 <currentY+0x20>)
     29a:	4798      	blx	r3
     29c:	4a05      	ldr	r2, [pc, #20]	; (2b4 <currentY+0x24>)
     29e:	4b06      	ldr	r3, [pc, #24]	; (2b8 <currentY+0x28>)
     2a0:	4c06      	ldr	r4, [pc, #24]	; (2bc <currentY+0x2c>)
     2a2:	47a0      	blx	r4
     2a4:	4b06      	ldr	r3, [pc, #24]	; (2c0 <currentY+0x30>)
     2a6:	4798      	blx	r3
}
     2a8:	bd10      	pop	{r4, pc}
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	20000458 	.word	0x20000458
     2b0:	00000fed 	.word	0x00000fed
     2b4:	8e8a71de 	.word	0x8e8a71de
     2b8:	3f6ff2e4 	.word	0x3f6ff2e4
     2bc:	00000ab9 	.word	0x00000ab9
     2c0:	00001065 	.word	0x00001065

000002c4 <currentZ>:
float currentZ() {
     2c4:	b510      	push	{r4, lr}
    return (Zaccel * ADXL345_MG2G_MULTIPLIER);
     2c6:	4b06      	ldr	r3, [pc, #24]	; (2e0 <currentZ+0x1c>)
     2c8:	8818      	ldrh	r0, [r3, #0]
     2ca:	b200      	sxth	r0, r0
     2cc:	4b05      	ldr	r3, [pc, #20]	; (2e4 <currentZ+0x20>)
     2ce:	4798      	blx	r3
     2d0:	4a05      	ldr	r2, [pc, #20]	; (2e8 <currentZ+0x24>)
     2d2:	4b06      	ldr	r3, [pc, #24]	; (2ec <currentZ+0x28>)
     2d4:	4c06      	ldr	r4, [pc, #24]	; (2f0 <currentZ+0x2c>)
     2d6:	47a0      	blx	r4
     2d8:	4b06      	ldr	r3, [pc, #24]	; (2f4 <currentZ+0x30>)
     2da:	4798      	blx	r3
     2dc:	bd10      	pop	{r4, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	2000045a 	.word	0x2000045a
     2e4:	00000fed 	.word	0x00000fed
     2e8:	8e8a71de 	.word	0x8e8a71de
     2ec:	3f6ff2e4 	.word	0x3f6ff2e4
     2f0:	00000ab9 	.word	0x00000ab9
     2f4:	00001065 	.word	0x00001065

000002f8 <read_coeff>:

	return _receive;

}

void read_coeff(struct spiModule *const module) {
     2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2fa:	464f      	mov	r7, r9
     2fc:	4646      	mov	r6, r8
     2fe:	b4c0      	push	{r6, r7}
     300:	1c04      	adds	r4, r0, #0
     302:	2500      	movs	r5, #0

	uint16_t coefficient;
	for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {

		uint8_t _cmd = cmdPromRd_ + ((coeff_num+1)*2);
		delay_us(300);
     304:	4b1e      	ldr	r3, [pc, #120]	; (380 <read_coeff+0x88>)
     306:	4698      	mov	r8, r3
		SaLDigitalOut(module->SS,false);
		byteOut(module,_cmd);
     308:	4f1e      	ldr	r7, [pc, #120]	; (384 <read_coeff+0x8c>)
		uint8_t _byte1 = getByte(module);
     30a:	4e1f      	ldr	r6, [pc, #124]	; (388 <read_coeff+0x90>)
     30c:	1c2b      	adds	r3, r5, #0
     30e:	3b5e      	subs	r3, #94	; 0x5e
     310:	b2db      	uxtb	r3, r3
     312:	4699      	mov	r9, r3

	uint16_t coefficient;
	for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {

		uint8_t _cmd = cmdPromRd_ + ((coeff_num+1)*2);
		delay_us(300);
     314:	2096      	movs	r0, #150	; 0x96
     316:	0040      	lsls	r0, r0, #1
     318:	47c0      	blx	r8
		SaLDigitalOut(module->SS,false);
     31a:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     31c:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     31e:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     320:	2900      	cmp	r1, #0
     322:	d104      	bne.n	32e <read_coeff+0x36>
        return &(ports[port_index]->Group[group_index]);
     324:	095a      	lsrs	r2, r3, #5
     326:	01d2      	lsls	r2, r2, #7
     328:	4918      	ldr	r1, [pc, #96]	; (38c <read_coeff+0x94>)
     32a:	468c      	mov	ip, r1
     32c:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     32e:	211f      	movs	r1, #31
     330:	400b      	ands	r3, r1
     332:	391e      	subs	r1, #30
     334:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     336:	6151      	str	r1, [r2, #20]
		byteOut(module,_cmd);
     338:	1c20      	adds	r0, r4, #0
     33a:	4649      	mov	r1, r9
     33c:	47b8      	blx	r7
		uint8_t _byte1 = getByte(module);
     33e:	1c20      	adds	r0, r4, #0
     340:	47b0      	blx	r6
     342:	4681      	mov	r9, r0
		uint8_t _byte2 = getByte(module);
     344:	1c20      	adds	r0, r4, #0
     346:	47b0      	blx	r6

		SaLDigitalOut(module->SS,true);
     348:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     34a:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     34c:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     34e:	2900      	cmp	r1, #0
     350:	d104      	bne.n	35c <read_coeff+0x64>
        return &(ports[port_index]->Group[group_index]);
     352:	095a      	lsrs	r2, r3, #5
     354:	01d2      	lsls	r2, r2, #7
     356:	490d      	ldr	r1, [pc, #52]	; (38c <read_coeff+0x94>)
     358:	468c      	mov	ip, r1
     35a:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     35c:	211f      	movs	r1, #31
     35e:	400b      	ands	r3, r1
     360:	391e      	subs	r1, #30
     362:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     364:	6191      	str	r1, [r2, #24]

		coefficient = _byte1;
		coefficient = (coefficient *256 )+ _byte2;
     366:	464b      	mov	r3, r9
     368:	021b      	lsls	r3, r3, #8
     36a:	1818      	adds	r0, r3, r0
		coefficients_[coeff_num] = coefficient;
     36c:	4b08      	ldr	r3, [pc, #32]	; (390 <read_coeff+0x98>)
     36e:	5358      	strh	r0, [r3, r5]
     370:	3502      	adds	r5, #2
}

void read_coeff(struct spiModule *const module) {

	uint16_t coefficient;
	for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     372:	2d0c      	cmp	r5, #12
     374:	d1ca      	bne.n	30c <read_coeff+0x14>

		coefficient = _byte1;
		coefficient = (coefficient *256 )+ _byte2;
		coefficients_[coeff_num] = coefficient;
	}
}
     376:	bc0c      	pop	{r2, r3}
     378:	4690      	mov	r8, r2
     37a:	4699      	mov	r9, r3
     37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	0000051d 	.word	0x0000051d
     384:	00000395 	.word	0x00000395
     388:	00000429 	.word	0x00000429
     38c:	41004400 	.word	0x41004400
     390:	20000460 	.word	0x20000460

00000394 <byteOut>:
#include "SaLBitBang.h"



void byteOut(struct spiModule *const module,
             uint8_t byte) {
     394:	b5f0      	push	{r4, r5, r6, r7, lr}
     396:	2408      	movs	r4, #8

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     398:	261f      	movs	r6, #31
     39a:	2501      	movs	r5, #1

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(module->SCK,PINLOW);
     39c:	7883      	ldrb	r3, [r0, #2]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     39e:	09da      	lsrs	r2, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     3a0:	2700      	movs	r7, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3a2:	2a00      	cmp	r2, #0
     3a4:	d104      	bne.n	3b0 <byteOut+0x1c>
        return &(ports[port_index]->Group[group_index]);
     3a6:	095f      	lsrs	r7, r3, #5
     3a8:	01ff      	lsls	r7, r7, #7
     3aa:	4a1e      	ldr	r2, [pc, #120]	; (424 <byteOut+0x90>)
     3ac:	4694      	mov	ip, r2
     3ae:	4467      	add	r7, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     3b0:	4033      	ands	r3, r6
     3b2:	1c2a      	adds	r2, r5, #0
     3b4:	409a      	lsls	r2, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     3b6:	617a      	str	r2, [r7, #20]
        if (byte & 0x80) {
     3b8:	b24b      	sxtb	r3, r1
     3ba:	2b00      	cmp	r3, #0
     3bc:	da0e      	bge.n	3dc <byteOut+0x48>
            SaLDigitalOut(module->MOSI,true);
     3be:	7843      	ldrb	r3, [r0, #1]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3c0:	09da      	lsrs	r2, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     3c2:	2700      	movs	r7, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3c4:	2a00      	cmp	r2, #0
     3c6:	d104      	bne.n	3d2 <byteOut+0x3e>
        return &(ports[port_index]->Group[group_index]);
     3c8:	095f      	lsrs	r7, r3, #5
     3ca:	01ff      	lsls	r7, r7, #7
     3cc:	4a15      	ldr	r2, [pc, #84]	; (424 <byteOut+0x90>)
     3ce:	4694      	mov	ip, r2
     3d0:	4467      	add	r7, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     3d2:	4033      	ands	r3, r6
     3d4:	1c2a      	adds	r2, r5, #0
     3d6:	409a      	lsls	r2, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     3d8:	61ba      	str	r2, [r7, #24]
     3da:	e00d      	b.n	3f8 <byteOut+0x64>
        } else {
            SaLDigitalOut(module->MOSI,false);
     3dc:	7843      	ldrb	r3, [r0, #1]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3de:	09da      	lsrs	r2, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     3e0:	2700      	movs	r7, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3e2:	2a00      	cmp	r2, #0
     3e4:	d104      	bne.n	3f0 <byteOut+0x5c>
        return &(ports[port_index]->Group[group_index]);
     3e6:	095f      	lsrs	r7, r3, #5
     3e8:	01ff      	lsls	r7, r7, #7
     3ea:	4a0e      	ldr	r2, [pc, #56]	; (424 <byteOut+0x90>)
     3ec:	4694      	mov	ip, r2
     3ee:	4467      	add	r7, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     3f0:	4033      	ands	r3, r6
     3f2:	1c2a      	adds	r2, r5, #0
     3f4:	409a      	lsls	r2, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     3f6:	617a      	str	r2, [r7, #20]
        }
        SaLDigitalOut(module->SCK,PINHIGH);
     3f8:	7883      	ldrb	r3, [r0, #2]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3fa:	09da      	lsrs	r2, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     3fc:	2700      	movs	r7, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3fe:	2a00      	cmp	r2, #0
     400:	d104      	bne.n	40c <byteOut+0x78>
        return &(ports[port_index]->Group[group_index]);
     402:	095f      	lsrs	r7, r3, #5
     404:	01ff      	lsls	r7, r7, #7
     406:	4a07      	ldr	r2, [pc, #28]	; (424 <byteOut+0x90>)
     408:	4694      	mov	ip, r2
     40a:	4467      	add	r7, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     40c:	4033      	ands	r3, r6
     40e:	1c2a      	adds	r2, r5, #0
     410:	409a      	lsls	r2, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     412:	61ba      	str	r2, [r7, #24]
        byte <<= 1;
     414:	0049      	lsls	r1, r1, #1
     416:	b2c9      	uxtb	r1, r1
     418:	3c01      	subs	r4, #1
     41a:	b2e4      	uxtb	r4, r4


void byteOut(struct spiModule *const module,
             uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     41c:	2c00      	cmp	r4, #0
     41e:	d1bd      	bne.n	39c <byteOut+0x8>
        }
        SaLDigitalOut(module->SCK,PINHIGH);
        byte <<= 1;
    }

}
     420:	bdf0      	pop	{r4, r5, r6, r7, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	41004400 	.word	0x41004400

00000428 <getByte>:
        dataBits <<= 1;
    }

}

uint8_t getByte(struct spiModule *const module) {
     428:	b5f0      	push	{r4, r5, r6, r7, lr}
     42a:	1c07      	adds	r7, r0, #0
     42c:	2408      	movs	r4, #8
    uint8_t byte = 0x00;
     42e:	2300      	movs	r3, #0

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     430:	261f      	movs	r6, #31
     432:	2501      	movs	r5, #1
    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(module->SCK,PINLOW);
     434:	78ba      	ldrb	r2, [r7, #2]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     436:	09d1      	lsrs	r1, r2, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     438:	2000      	movs	r0, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     43a:	2900      	cmp	r1, #0
     43c:	d104      	bne.n	448 <getByte+0x20>
        return &(ports[port_index]->Group[group_index]);
     43e:	0950      	lsrs	r0, r2, #5
     440:	01c0      	lsls	r0, r0, #7
     442:	4919      	ldr	r1, [pc, #100]	; (4a8 <getByte+0x80>)
     444:	468c      	mov	ip, r1
     446:	4460      	add	r0, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     448:	4032      	ands	r2, r6
     44a:	1c29      	adds	r1, r5, #0
     44c:	4091      	lsls	r1, r2
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     44e:	6141      	str	r1, [r0, #20]
        byte = (byte << 1 ) | SaLDigitalIn(module->MISO);
     450:	005b      	lsls	r3, r3, #1
     452:	b2d8      	uxtb	r0, r3
     454:	783b      	ldrb	r3, [r7, #0]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     456:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     458:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     45a:	2900      	cmp	r1, #0
     45c:	d104      	bne.n	468 <getByte+0x40>
        return &(ports[port_index]->Group[group_index]);
     45e:	095a      	lsrs	r2, r3, #5
     460:	01d2      	lsls	r2, r2, #7
     462:	4911      	ldr	r1, [pc, #68]	; (4a8 <getByte+0x80>)
     464:	468c      	mov	ip, r1
     466:	4462      	add	r2, ip
};

static inline bool SaLDigitalIn(uint8_t pin) {
	PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	bool level = (port->IN.reg & pin_mask);
     468:	6a11      	ldr	r1, [r2, #32]
	}
};

static inline bool SaLDigitalIn(uint8_t pin) {
	PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     46a:	4033      	ands	r3, r6
     46c:	1c1a      	adds	r2, r3, #0
     46e:	1c2b      	adds	r3, r5, #0
     470:	4093      	lsls	r3, r2
     472:	1c1a      	adds	r2, r3, #0
	bool level = (port->IN.reg & pin_mask);
     474:	1c0b      	adds	r3, r1, #0
     476:	4013      	ands	r3, r2
     478:	1e5a      	subs	r2, r3, #1
     47a:	4193      	sbcs	r3, r2
     47c:	4303      	orrs	r3, r0
        SaLDigitalOut(module->SCK,PINHIGH);
     47e:	78ba      	ldrb	r2, [r7, #2]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     480:	09d1      	lsrs	r1, r2, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     482:	2000      	movs	r0, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     484:	2900      	cmp	r1, #0
     486:	d104      	bne.n	492 <getByte+0x6a>
        return &(ports[port_index]->Group[group_index]);
     488:	0950      	lsrs	r0, r2, #5
     48a:	01c0      	lsls	r0, r0, #7
     48c:	4906      	ldr	r1, [pc, #24]	; (4a8 <getByte+0x80>)
     48e:	468c      	mov	ip, r1
     490:	4460      	add	r0, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     492:	4032      	ands	r2, r6
     494:	1c29      	adds	r1, r5, #0
     496:	4091      	lsls	r1, r2
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     498:	6181      	str	r1, [r0, #24]
     49a:	3c01      	subs	r4, #1
     49c:	b2e4      	uxtb	r4, r4

}

uint8_t getByte(struct spiModule *const module) {
    uint8_t byte = 0x00;
    for (uint8_t i = 0; i<8; ++i) {
     49e:	2c00      	cmp	r4, #0
     4a0:	d1c8      	bne.n	434 <getByte+0xc>
        SaLDigitalOut(module->SCK,PINLOW);
        byte = (byte << 1 ) | SaLDigitalIn(module->MISO);
        SaLDigitalOut(module->SCK,PINHIGH);
    }
    return byte;
}
     4a2:	1c18      	adds	r0, r3, #0
     4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	41004400 	.word	0x41004400

000004ac <SaLPlayTone>:

#include <SaLBuzzer.h>


void SaLPlayTone(int16_t tone_) {
     4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ae:	464f      	mov	r7, r9
     4b0:	4646      	mov	r6, r8
     4b2:	b4c0      	push	{r6, r7}
     4b4:	b083      	sub	sp, #12
     4b6:	4680      	mov	r8, r0
	int32_t duration = 100000;
	
    while (elapsed_time < duration) {
		
		SaLDigitalOut(BUZZER,true);
		delay_us(tone_/2);
     4b8:	0fc6      	lsrs	r6, r0, #31
     4ba:	4446      	add	r6, r8
     4bc:	1073      	asrs	r3, r6, #1
     4be:	9301      	str	r3, [sp, #4]


void SaLPlayTone(int16_t tone_) {

	
	int32_t elapsed_time = 0;
     4c0:	2400      	movs	r4, #0
     4c2:	4f0b      	ldr	r7, [pc, #44]	; (4f0 <SaLPlayTone+0x44>)
     4c4:	2380      	movs	r3, #128	; 0x80
     4c6:	015b      	lsls	r3, r3, #5
     4c8:	4699      	mov	r9, r3
     4ca:	1c1e      	adds	r6, r3, #0
     4cc:	61be      	str	r6, [r7, #24]
	int32_t duration = 100000;
	
    while (elapsed_time < duration) {
		
		SaLDigitalOut(BUZZER,true);
		delay_us(tone_/2);
     4ce:	9801      	ldr	r0, [sp, #4]
     4d0:	4d08      	ldr	r5, [pc, #32]	; (4f4 <SaLPlayTone+0x48>)
     4d2:	47a8      	blx	r5
		} else {
		port->OUTCLR.reg = pin_mask;
     4d4:	464b      	mov	r3, r9
     4d6:	617b      	str	r3, [r7, #20]
		
		 SaLDigitalOut(BUZZER, false);
		 delay_us(tone_/2);
     4d8:	9801      	ldr	r0, [sp, #4]
     4da:	47a8      	blx	r5
     4dc:	4444      	add	r4, r8

	
	int32_t elapsed_time = 0;
	int32_t duration = 100000;
	
    while (elapsed_time < duration) {
     4de:	4b06      	ldr	r3, [pc, #24]	; (4f8 <SaLPlayTone+0x4c>)
     4e0:	429c      	cmp	r4, r3
     4e2:	ddf3      	ble.n	4cc <SaLPlayTone+0x20>
	
	
	}


     4e4:	b003      	add	sp, #12
     4e6:	bc0c      	pop	{r2, r3}
     4e8:	4690      	mov	r8, r2
     4ea:	4699      	mov	r9, r3
     4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	41004400 	.word	0x41004400
     4f4:	0000051d 	.word	0x0000051d
     4f8:	0001869f 	.word	0x0001869f

000004fc <SaLDelayInit>:
static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void SaLDelayInit(void) {
    cycles_per_ms = 41900000UL;
    cycles_per_ms /= 1000;
     4fc:	4b04      	ldr	r3, [pc, #16]	; (510 <SaLDelayInit+0x14>)
     4fe:	4a05      	ldr	r2, [pc, #20]	; (514 <SaLDelayInit+0x18>)
     500:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     502:	2229      	movs	r2, #41	; 0x29
     504:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     506:	3a24      	subs	r2, #36	; 0x24
     508:	4b03      	ldr	r3, [pc, #12]	; (518 <SaLDelayInit+0x1c>)
     50a:	601a      	str	r2, [r3, #0]
}
     50c:	4770      	bx	lr
     50e:	46c0      	nop			; (mov r8, r8)
     510:	20000000 	.word	0x20000000
     514:	0000a3ac 	.word	0x0000a3ac
     518:	e000e010 	.word	0xe000e010

0000051c <delay_us>:
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
     51c:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     51e:	4b08      	ldr	r3, [pc, #32]	; (540 <delay_us+0x24>)
     520:	685c      	ldr	r4, [r3, #4]
void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     522:	4a08      	ldr	r2, [pc, #32]	; (544 <delay_us+0x28>)
        SysTick->VAL = 0;
     524:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     526:	2180      	movs	r1, #128	; 0x80
     528:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
    while (n--) {
     52a:	e006      	b.n	53a <delay_us+0x1e>

void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     52c:	2c00      	cmp	r4, #0
     52e:	d004      	beq.n	53a <delay_us+0x1e>
        SysTick->LOAD = n;
     530:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     532:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     534:	6813      	ldr	r3, [r2, #0]
     536:	420b      	tst	r3, r1
     538:	d0fc      	beq.n	534 <delay_us+0x18>
     53a:	3801      	subs	r0, #1
     53c:	d2f6      	bcs.n	52c <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     53e:	bd30      	pop	{r4, r5, pc}
     540:	20000000 	.word	0x20000000
     544:	e000e010 	.word	0xe000e010

00000548 <SaLPinMode>:


#include <SaLPort.h>

void SaLPinMode(uint8_t pin,uint8_t DIR) {
     548:	b510      	push	{r4, lr}
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     54a:	09c2      	lsrs	r2, r0, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     54c:	2300      	movs	r3, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     54e:	2a00      	cmp	r2, #0
     550:	d104      	bne.n	55c <SaLPinMode+0x14>
        return &(ports[port_index]->Group[group_index]);
     552:	0943      	lsrs	r3, r0, #5
     554:	01db      	lsls	r3, r3, #7
     556:	4a11      	ldr	r2, [pc, #68]	; (59c <SaLPinMode+0x54>)
     558:	4694      	mov	ip, r2
     55a:	4463      	add	r3, ip
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     55c:	221f      	movs	r2, #31
     55e:	4002      	ands	r2, r0
     560:	2401      	movs	r4, #1
     562:	4094      	lsls	r4, r2

    if ( DIR == OUTPUT) {
     564:	2901      	cmp	r1, #1
     566:	d105      	bne.n	574 <SaLPinMode+0x2c>
        port->DIRSET.reg = pin_mask;
     568:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0;
     56a:	1818      	adds	r0, r3, r0
     56c:	3040      	adds	r0, #64	; 0x40
     56e:	2300      	movs	r3, #0
     570:	7003      	strb	r3, [r0, #0]
     572:	e012      	b.n	59a <SaLPinMode+0x52>

    } else if(DIR == INPUT) {
     574:	2900      	cmp	r1, #0
     576:	d109      	bne.n	58c <SaLPinMode+0x44>
        port->DIRCLR.reg = pin_mask;
     578:	605c      	str	r4, [r3, #4]
        port->PINCFG[pin].reg = PORT_PINCFG_INEN;
     57a:	1818      	adds	r0, r3, r0
     57c:	3040      	adds	r0, #64	; 0x40
     57e:	2302      	movs	r3, #2
     580:	7003      	strb	r3, [r0, #0]
        port->PINCFG[pin].reg |= PORT_PINCFG_PULLEN;
     582:	7802      	ldrb	r2, [r0, #0]
     584:	3302      	adds	r3, #2
     586:	4313      	orrs	r3, r2
     588:	7003      	strb	r3, [r0, #0]
     58a:	e006      	b.n	59a <SaLPinMode+0x52>
    } else if (DIR == OUTSTRONG) {
     58c:	2903      	cmp	r1, #3
     58e:	d104      	bne.n	59a <SaLPinMode+0x52>
        port->DIRSET.reg = pin_mask;
     590:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0x40;
     592:	1818      	adds	r0, r3, r0
     594:	3040      	adds	r0, #64	; 0x40
     596:	2340      	movs	r3, #64	; 0x40
     598:	7003      	strb	r3, [r0, #0]

    }
     59a:	bd10      	pop	{r4, pc}
     59c:	41004400 	.word	0x41004400

000005a0 <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     5a0:	f3ef 8305 	mrs	r3, IPSR
     5a4:	e7fc      	b.n	5a0 <Dummy_Handler>
     5a6:	46c0      	nop			; (mov r8, r8)

000005a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     5a8:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     5aa:	4b2e      	ldr	r3, [pc, #184]	; (664 <Reset_Handler+0xbc>)
     5ac:	4a2e      	ldr	r2, [pc, #184]	; (668 <Reset_Handler+0xc0>)
     5ae:	429a      	cmp	r2, r3
     5b0:	d003      	beq.n	5ba <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     5b2:	4b2e      	ldr	r3, [pc, #184]	; (66c <Reset_Handler+0xc4>)
     5b4:	4a2b      	ldr	r2, [pc, #172]	; (664 <Reset_Handler+0xbc>)
     5b6:	429a      	cmp	r2, r3
     5b8:	d304      	bcc.n	5c4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     5ba:	4b2d      	ldr	r3, [pc, #180]	; (670 <Reset_Handler+0xc8>)
     5bc:	4a2d      	ldr	r2, [pc, #180]	; (674 <Reset_Handler+0xcc>)
     5be:	429a      	cmp	r2, r3
     5c0:	d310      	bcc.n	5e4 <Reset_Handler+0x3c>
     5c2:	e01e      	b.n	602 <Reset_Handler+0x5a>
     5c4:	4a2c      	ldr	r2, [pc, #176]	; (678 <Reset_Handler+0xd0>)
     5c6:	4b29      	ldr	r3, [pc, #164]	; (66c <Reset_Handler+0xc4>)
     5c8:	3303      	adds	r3, #3
     5ca:	1a9b      	subs	r3, r3, r2
     5cc:	089b      	lsrs	r3, r3, #2
     5ce:	3301      	adds	r3, #1
     5d0:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     5d2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     5d4:	4823      	ldr	r0, [pc, #140]	; (664 <Reset_Handler+0xbc>)
     5d6:	4924      	ldr	r1, [pc, #144]	; (668 <Reset_Handler+0xc0>)
     5d8:	588c      	ldr	r4, [r1, r2]
     5da:	5084      	str	r4, [r0, r2]
     5dc:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     5de:	429a      	cmp	r2, r3
     5e0:	d1fa      	bne.n	5d8 <Reset_Handler+0x30>
     5e2:	e7ea      	b.n	5ba <Reset_Handler+0x12>
     5e4:	4a25      	ldr	r2, [pc, #148]	; (67c <Reset_Handler+0xd4>)
     5e6:	4b22      	ldr	r3, [pc, #136]	; (670 <Reset_Handler+0xc8>)
     5e8:	3303      	adds	r3, #3
     5ea:	1a9b      	subs	r3, r3, r2
     5ec:	089b      	lsrs	r3, r3, #2
     5ee:	3301      	adds	r3, #1
     5f0:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     5f2:	2200      	movs	r2, #0
                *pDest++ = 0;
     5f4:	481f      	ldr	r0, [pc, #124]	; (674 <Reset_Handler+0xcc>)
     5f6:	2100      	movs	r1, #0
     5f8:	1814      	adds	r4, r2, r0
     5fa:	6021      	str	r1, [r4, #0]
     5fc:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     5fe:	429a      	cmp	r2, r3
     600:	d1fa      	bne.n	5f8 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     602:	4a1f      	ldr	r2, [pc, #124]	; (680 <Reset_Handler+0xd8>)
     604:	21ff      	movs	r1, #255	; 0xff
     606:	4b1f      	ldr	r3, [pc, #124]	; (684 <Reset_Handler+0xdc>)
     608:	438b      	bics	r3, r1
     60a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     60c:	39fd      	subs	r1, #253	; 0xfd
     60e:	2390      	movs	r3, #144	; 0x90
     610:	005b      	lsls	r3, r3, #1
     612:	4a1d      	ldr	r2, [pc, #116]	; (688 <Reset_Handler+0xe0>)
     614:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     616:	481d      	ldr	r0, [pc, #116]	; (68c <Reset_Handler+0xe4>)
     618:	78c3      	ldrb	r3, [r0, #3]
     61a:	2403      	movs	r4, #3
     61c:	43a3      	bics	r3, r4
     61e:	2202      	movs	r2, #2
     620:	4313      	orrs	r3, r2
     622:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     624:	78c3      	ldrb	r3, [r0, #3]
     626:	260c      	movs	r6, #12
     628:	43b3      	bics	r3, r6
     62a:	2108      	movs	r1, #8
     62c:	430b      	orrs	r3, r1
     62e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     630:	4b17      	ldr	r3, [pc, #92]	; (690 <Reset_Handler+0xe8>)
     632:	7b98      	ldrb	r0, [r3, #14]
     634:	2530      	movs	r5, #48	; 0x30
     636:	43a8      	bics	r0, r5
     638:	1c05      	adds	r5, r0, #0
     63a:	2020      	movs	r0, #32
     63c:	4328      	orrs	r0, r5
     63e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     640:	7b98      	ldrb	r0, [r3, #14]
     642:	43b0      	bics	r0, r6
     644:	4301      	orrs	r1, r0
     646:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     648:	7b99      	ldrb	r1, [r3, #14]
     64a:	43a1      	bics	r1, r4
     64c:	430a      	orrs	r2, r1
     64e:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     650:	4a10      	ldr	r2, [pc, #64]	; (694 <Reset_Handler+0xec>)
     652:	6851      	ldr	r1, [r2, #4]
     654:	2380      	movs	r3, #128	; 0x80
     656:	430b      	orrs	r3, r1
     658:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     65a:	4b0f      	ldr	r3, [pc, #60]	; (698 <Reset_Handler+0xf0>)
     65c:	4798      	blx	r3

        /* Branch to main function */
        main();
     65e:	4b0f      	ldr	r3, [pc, #60]	; (69c <Reset_Handler+0xf4>)
     660:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     662:	e7fe      	b.n	662 <Reset_Handler+0xba>
     664:	20000000 	.word	0x20000000
     668:	000013a4 	.word	0x000013a4
     66c:	20000438 	.word	0x20000438
     670:	2000334c 	.word	0x2000334c
     674:	20000438 	.word	0x20000438
     678:	20000004 	.word	0x20000004
     67c:	2000043c 	.word	0x2000043c
     680:	e000ed00 	.word	0xe000ed00
     684:	00000000 	.word	0x00000000
     688:	41007000 	.word	0x41007000
     68c:	41005000 	.word	0x41005000
     690:	41004800 	.word	0x41004800
     694:	41004000 	.word	0x41004000
     698:	000011c1 	.word	0x000011c1
     69c:	000009cd 	.word	0x000009cd

000006a0 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     6a0:	4a01      	ldr	r2, [pc, #4]	; (6a8 <SystemInit+0x8>)
     6a2:	4b02      	ldr	r3, [pc, #8]	; (6ac <SystemInit+0xc>)
     6a4:	601a      	str	r2, [r3, #0]
	return;
}
     6a6:	4770      	bx	lr
     6a8:	000f4240 	.word	0x000f4240
     6ac:	20000008 	.word	0x20000008

000006b0 <ClockInit>:



void ClockInit() {

    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     6b0:	491a      	ldr	r1, [pc, #104]	; (71c <ClockInit+0x6c>)
     6b2:	23c2      	movs	r3, #194	; 0xc2
     6b4:	00db      	lsls	r3, r3, #3
     6b6:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;

    NVMCTRL->CTRLB.bit.RWS = 1;
     6b8:	4819      	ldr	r0, [pc, #100]	; (720 <ClockInit+0x70>)
     6ba:	6843      	ldr	r3, [r0, #4]
     6bc:	221e      	movs	r2, #30
     6be:	4393      	bics	r3, r2
     6c0:	3a1c      	subs	r2, #28
     6c2:	4313      	orrs	r3, r2
     6c4:	6043      	str	r3, [r0, #4]

    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     6c6:	4b17      	ldr	r3, [pc, #92]	; (724 <ClockInit+0x74>)
     6c8:	828b      	strh	r3, [r1, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);
    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     6ca:	68cb      	ldr	r3, [r1, #12]
     6cc:	421a      	tst	r2, r3
     6ce:	d0fc      	beq.n	6ca <ClockInit+0x1a>
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(1) |
     6d0:	4b15      	ldr	r3, [pc, #84]	; (728 <ClockInit+0x78>)
     6d2:	2202      	movs	r2, #2
     6d4:	32ff      	adds	r2, #255	; 0xff
     6d6:	609a      	str	r2, [r3, #8]
                       GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) |
     6d8:	4a14      	ldr	r2, [pc, #80]	; (72c <ClockInit+0x7c>)
     6da:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_XOSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(1) |
     6dc:	2282      	movs	r2, #130	; 0x82
     6de:	01d2      	lsls	r2, r2, #7
     6e0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_ID_DFLL48;

    //Configure the FDLL48MHz FLL, we will use this to provide a clock to the CPU
    //Set the course and fine step sizes, these should be less than 50% of the values used for the course and fine values (P150)
    SYSCTRL->DFLLCTRL.reg = (SYSCTRL_DFLLCTRL_ENABLE); //Enable the DFLL
     6e2:	4b0e      	ldr	r3, [pc, #56]	; (71c <ClockInit+0x6c>)
     6e4:	2202      	movs	r2, #2
     6e6:	849a      	strh	r2, [r3, #36]	; 0x24
    SYSCTRL->DFLLMUL.reg = (SYSCTRL_DFLLMUL_CSTEP(7) | SYSCTRL_DFLLMUL_FSTEP(30));
     6e8:	4a11      	ldr	r2, [pc, #68]	; (730 <ClockInit+0x80>)
     6ea:	62da      	str	r2, [r3, #44]	; 0x2c
    SYSCTRL->DFLLMUL.reg |= (SYSCTRL_DFLLMUL_MUL(1280));
     6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     6ee:	21a0      	movs	r1, #160	; 0xa0
     6f0:	00c9      	lsls	r1, r1, #3
     6f2:	430a      	orrs	r2, r1
     6f4:	62da      	str	r2, [r3, #44]	; 0x2c
    SYSCTRL->DFLLCTRL.reg |= (SYSCTRL_DFLLCTRL_MODE);
     6f6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
     6f8:	2204      	movs	r2, #4
     6fa:	430a      	orrs	r2, r1
     6fc:	849a      	strh	r2, [r3, #36]	; 0x24

    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     6fe:	1c19      	adds	r1, r3, #0
     700:	2210      	movs	r2, #16
     702:	68cb      	ldr	r3, [r1, #12]
     704:	421a      	tst	r2, r3
     706:	d0fc      	beq.n	702 <ClockInit+0x52>

    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(2)  | GCLK_GENDIV_ID(0));
     708:	4b07      	ldr	r3, [pc, #28]	; (728 <ClockInit+0x78>)
     70a:	2280      	movs	r2, #128	; 0x80
     70c:	0092      	lsls	r2, r2, #2
     70e:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     710:	4a08      	ldr	r2, [pc, #32]	; (734 <ClockInit+0x84>)
     712:	605a      	str	r2, [r3, #4]
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN ) ;
     714:	2280      	movs	r2, #128	; 0x80
     716:	01d2      	lsls	r2, r2, #7
     718:	805a      	strh	r2, [r3, #2]

    //set up OSC8M
}
     71a:	4770      	bx	lr
     71c:	40000800 	.word	0x40000800
     720:	41004000 	.word	0x41004000
     724:	0000060e 	.word	0x0000060e
     728:	40000c00 	.word	0x40000c00
     72c:	00010501 	.word	0x00010501
     730:	1c1e0000 	.word	0x1c1e0000
     734:	00010700 	.word	0x00010700

00000738 <PinConfig>:

void PinConfig() {
     738:	b510      	push	{r4, lr}

    /* temp SS HIGH for other peripherals */
    SaLPinMode(PIN_PA07,INPUT);
     73a:	2007      	movs	r0, #7
     73c:	2100      	movs	r1, #0
     73e:	4c09      	ldr	r4, [pc, #36]	; (764 <PinConfig+0x2c>)
     740:	47a0      	blx	r4
    SaLPinMode(PIN_PA10,OUTPUT);
     742:	200a      	movs	r0, #10
     744:	2101      	movs	r1, #1
     746:	47a0      	blx	r4
    SaLPinMode(PIN_PA08,OUTPUT);
     748:	2008      	movs	r0, #8
     74a:	2101      	movs	r1, #1
     74c:	47a0      	blx	r4
    SaLPinMode(BUZZER,OUTSTRONG);
     74e:	200c      	movs	r0, #12
     750:	2103      	movs	r1, #3
     752:	47a0      	blx	r4
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     754:	4b04      	ldr	r3, [pc, #16]	; (768 <PinConfig+0x30>)
     756:	2280      	movs	r2, #128	; 0x80
     758:	00d2      	lsls	r2, r2, #3
     75a:	619a      	str	r2, [r3, #24]
     75c:	2280      	movs	r2, #128	; 0x80
     75e:	0052      	lsls	r2, r2, #1
     760:	619a      	str	r2, [r3, #24]
    SaLDigitalOut(PIN_PA10,true);
    SaLDigitalOut(PIN_PA08,true);
}
     762:	bd10      	pop	{r4, pc}
     764:	00000549 	.word	0x00000549
     768:	41004400 	.word	0x41004400

0000076c <baroModuleSetup>:

struct spiModule baroModuleSetup() {
     76c:	b538      	push	{r3, r4, r5, lr}
     76e:	1c04      	adds	r4, r0, #0
    module->MOSI		= MOSI_PIN;
    module->MISO		= MISO_pin;
    module->SCK		    = SCK_PIN;
    module->SS			= SS_PIN;

    SaLPinMode(module->MOSI,OUTPUT);
     770:	200d      	movs	r0, #13
     772:	2101      	movs	r1, #1
     774:	4d0d      	ldr	r5, [pc, #52]	; (7ac <baroModuleSetup+0x40>)
     776:	47a8      	blx	r5
    SaLPinMode(module->SCK ,OUTPUT);
     778:	200f      	movs	r0, #15
     77a:	2101      	movs	r1, #1
     77c:	47a8      	blx	r5
    SaLPinMode(module->SS,  OUTPUT);
     77e:	2009      	movs	r0, #9
     780:	2101      	movs	r1, #1
     782:	47a8      	blx	r5
    SaLPinMode(module->MISO,INPUT);
     784:	200e      	movs	r0, #14
     786:	2100      	movs	r1, #0
     788:	47a8      	blx	r5
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	0092      	lsls	r2, r2, #2
     78e:	4b08      	ldr	r3, [pc, #32]	; (7b0 <baroModuleSetup+0x44>)
     790:	619a      	str	r2, [r3, #24]
                    MS5607_MOSIPIN,
                    MS5607_MISOPIN,
                    MS5607_SCKPIN,
                    MS5607_SLAVE_SELECT_PIN);

    return baroModule;
     792:	230e      	movs	r3, #14
     794:	7023      	strb	r3, [r4, #0]
     796:	3b01      	subs	r3, #1
     798:	7063      	strb	r3, [r4, #1]
     79a:	3302      	adds	r3, #2
     79c:	70a3      	strb	r3, [r4, #2]
     79e:	3b06      	subs	r3, #6
     7a0:	70e3      	strb	r3, [r4, #3]
     7a2:	2300      	movs	r3, #0
     7a4:	7123      	strb	r3, [r4, #4]
     7a6:	7163      	strb	r3, [r4, #5]
}
     7a8:	1c20      	adds	r0, r4, #0
     7aa:	bd38      	pop	{r3, r4, r5, pc}
     7ac:	00000549 	.word	0x00000549
     7b0:	41004400 	.word	0x41004400

000007b4 <accelModuleSetup>:

struct spiModule accelModuleSetup() {
     7b4:	b538      	push	{r3, r4, r5, lr}
     7b6:	1c04      	adds	r4, r0, #0
    module->MOSI		= MOSI_PIN;
    module->MISO		= MISO_pin;
    module->SCK		    = SCK_PIN;
    module->SS			= SS_PIN;

    SaLPinMode(module->MOSI,OUTPUT);
     7b8:	200d      	movs	r0, #13
     7ba:	2101      	movs	r1, #1
     7bc:	4d0d      	ldr	r5, [pc, #52]	; (7f4 <accelModuleSetup+0x40>)
     7be:	47a8      	blx	r5
    SaLPinMode(module->SCK ,OUTPUT);
     7c0:	200f      	movs	r0, #15
     7c2:	2101      	movs	r1, #1
     7c4:	47a8      	blx	r5
    SaLPinMode(module->SS,  OUTPUT);
     7c6:	2010      	movs	r0, #16
     7c8:	2101      	movs	r1, #1
     7ca:	47a8      	blx	r5
    SaLPinMode(module->MISO,INPUT);
     7cc:	200e      	movs	r0, #14
     7ce:	2100      	movs	r1, #0
     7d0:	47a8      	blx	r5
     7d2:	2280      	movs	r2, #128	; 0x80
     7d4:	0252      	lsls	r2, r2, #9
     7d6:	4b08      	ldr	r3, [pc, #32]	; (7f8 <accelModuleSetup+0x44>)
     7d8:	619a      	str	r2, [r3, #24]
                    ADXL345_MOSIPIN,
                    ADXL345_MISOPIN,
                    ADXL345_SCKPIN,
                    ADXL345_SLAVE_SELECT_PIN);

    return accelModule;
     7da:	230e      	movs	r3, #14
     7dc:	7023      	strb	r3, [r4, #0]
     7de:	3b01      	subs	r3, #1
     7e0:	7063      	strb	r3, [r4, #1]
     7e2:	3302      	adds	r3, #2
     7e4:	70a3      	strb	r3, [r4, #2]
     7e6:	3301      	adds	r3, #1
     7e8:	70e3      	strb	r3, [r4, #3]
     7ea:	2300      	movs	r3, #0
     7ec:	7123      	strb	r3, [r4, #4]
     7ee:	7163      	strb	r3, [r4, #5]
}
     7f0:	1c20      	adds	r0, r4, #0
     7f2:	bd38      	pop	{r3, r4, r5, pc}
     7f4:	00000549 	.word	0x00000549
     7f8:	41004400 	.word	0x41004400

000007fc <GPSmoduleSetup>:

struct USARTModule GPSmoduleSetup() {
     7fc:	b538      	push	{r3, r4, r5, lr}
     7fe:	1c04      	adds	r4, r0, #0
    module->TX				= TX_PIN;
    module->RX				= RX_PIN;
    module->BAUD			= BAUDRATE;
    module->SERCOMNUMBER	= SERCOMNUM;

    SaLPinMode(module->TX,OUTPUT);
     800:	2037      	movs	r0, #55	; 0x37
     802:	2101      	movs	r1, #1
     804:	4d07      	ldr	r5, [pc, #28]	; (824 <GPSmoduleSetup+0x28>)
     806:	47a8      	blx	r5
    SaLPinMode(module->RX,INPUT);
     808:	2036      	movs	r0, #54	; 0x36
     80a:	2100      	movs	r1, #0
     80c:	47a8      	blx	r5
                      PIN_PB23,
                      PIN_PB22,
                      5700,
                      5);

    return gpsModule;
     80e:	2337      	movs	r3, #55	; 0x37
     810:	7023      	strb	r3, [r4, #0]
     812:	3b01      	subs	r3, #1
     814:	7063      	strb	r3, [r4, #1]
     816:	4b04      	ldr	r3, [pc, #16]	; (828 <GPSmoduleSetup+0x2c>)
     818:	8063      	strh	r3, [r4, #2]
     81a:	2305      	movs	r3, #5
     81c:	7123      	strb	r3, [r4, #4]
}
     81e:	1c20      	adds	r0, r4, #0
     820:	bd38      	pop	{r3, r4, r5, pc}
     822:	46c0      	nop			; (mov r8, r8)
     824:	00000549 	.word	0x00000549
     828:	00001644 	.word	0x00001644

0000082c <initAccelSensor>:

void initAccelSensor(struct spiModule *const module) {
     82c:	b538      	push	{r3, r4, r5, lr}
     82e:	1c04      	adds	r4, r0, #0
    /*=========================================================================
    					accel init stuff
    -----------------------------------------------------------------------*/
    SaLDigitalOut(module->SS,false);
     830:	78c3      	ldrb	r3, [r0, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     832:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     834:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     836:	2900      	cmp	r1, #0
     838:	d104      	bne.n	844 <initAccelSensor+0x18>
        return &(ports[port_index]->Group[group_index]);
     83a:	095a      	lsrs	r2, r3, #5
     83c:	01d2      	lsls	r2, r2, #7
     83e:	4947      	ldr	r1, [pc, #284]	; (95c <initAccelSensor+0x130>)
     840:	468c      	mov	ip, r1
     842:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     844:	211f      	movs	r1, #31
     846:	400b      	ands	r3, r1
     848:	391e      	subs	r1, #30
     84a:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     84c:	6151      	str	r1, [r2, #20]
    byteOut(module,ADXL345_REG_POWER_CTL);
     84e:	1c20      	adds	r0, r4, #0
     850:	212d      	movs	r1, #45	; 0x2d
     852:	4d43      	ldr	r5, [pc, #268]	; (960 <initAccelSensor+0x134>)
     854:	47a8      	blx	r5
    byteOut(module,0x00);
     856:	1c20      	adds	r0, r4, #0
     858:	2100      	movs	r1, #0
     85a:	47a8      	blx	r5
    SaLDigitalOut(module->SS,true);
     85c:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     85e:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     860:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     862:	2900      	cmp	r1, #0
     864:	d104      	bne.n	870 <initAccelSensor+0x44>
        return &(ports[port_index]->Group[group_index]);
     866:	095a      	lsrs	r2, r3, #5
     868:	01d2      	lsls	r2, r2, #7
     86a:	493c      	ldr	r1, [pc, #240]	; (95c <initAccelSensor+0x130>)
     86c:	468c      	mov	ip, r1
     86e:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     870:	211f      	movs	r1, #31
     872:	400b      	ands	r3, r1
     874:	391e      	subs	r1, #30
     876:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     878:	6191      	str	r1, [r2, #24]

    SaLDigitalOut(module->SS,false);
     87a:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     87c:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     87e:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     880:	2900      	cmp	r1, #0
     882:	d104      	bne.n	88e <initAccelSensor+0x62>
        return &(ports[port_index]->Group[group_index]);
     884:	095a      	lsrs	r2, r3, #5
     886:	01d2      	lsls	r2, r2, #7
     888:	4934      	ldr	r1, [pc, #208]	; (95c <initAccelSensor+0x130>)
     88a:	468c      	mov	ip, r1
     88c:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     88e:	211f      	movs	r1, #31
     890:	400b      	ands	r3, r1
     892:	391e      	subs	r1, #30
     894:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     896:	6151      	str	r1, [r2, #20]
    byteOut(module,ADXL345_REG_BW_RATE);
     898:	1c20      	adds	r0, r4, #0
     89a:	212c      	movs	r1, #44	; 0x2c
     89c:	4d30      	ldr	r5, [pc, #192]	; (960 <initAccelSensor+0x134>)
     89e:	47a8      	blx	r5
    byteOut(module,ADXL345_DATARATE_1600_HZ);
     8a0:	1c20      	adds	r0, r4, #0
     8a2:	210e      	movs	r1, #14
     8a4:	47a8      	blx	r5
    SaLDigitalOut(module->SS,true);
     8a6:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     8a8:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     8aa:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     8ac:	2900      	cmp	r1, #0
     8ae:	d104      	bne.n	8ba <initAccelSensor+0x8e>
        return &(ports[port_index]->Group[group_index]);
     8b0:	095a      	lsrs	r2, r3, #5
     8b2:	01d2      	lsls	r2, r2, #7
     8b4:	4929      	ldr	r1, [pc, #164]	; (95c <initAccelSensor+0x130>)
     8b6:	468c      	mov	ip, r1
     8b8:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     8ba:	211f      	movs	r1, #31
     8bc:	400b      	ands	r3, r1
     8be:	391e      	subs	r1, #30
     8c0:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     8c2:	6191      	str	r1, [r2, #24]


    SaLDigitalOut(module->SS,false);
     8c4:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     8c6:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     8c8:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     8ca:	2900      	cmp	r1, #0
     8cc:	d104      	bne.n	8d8 <initAccelSensor+0xac>
        return &(ports[port_index]->Group[group_index]);
     8ce:	095a      	lsrs	r2, r3, #5
     8d0:	01d2      	lsls	r2, r2, #7
     8d2:	4922      	ldr	r1, [pc, #136]	; (95c <initAccelSensor+0x130>)
     8d4:	468c      	mov	ip, r1
     8d6:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     8d8:	211f      	movs	r1, #31
     8da:	400b      	ands	r3, r1
     8dc:	391e      	subs	r1, #30
     8de:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     8e0:	6151      	str	r1, [r2, #20]
    byteOut(module,ADXL345_REG_DATA_FORMAT);
     8e2:	1c20      	adds	r0, r4, #0
     8e4:	2131      	movs	r1, #49	; 0x31
     8e6:	4d1e      	ldr	r5, [pc, #120]	; (960 <initAccelSensor+0x134>)
     8e8:	47a8      	blx	r5
    byteOut(module,0b00 | 0b1000);
     8ea:	1c20      	adds	r0, r4, #0
     8ec:	2108      	movs	r1, #8
     8ee:	47a8      	blx	r5
    SaLDigitalOut(module->SS,true);
     8f0:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     8f2:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     8f4:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     8f6:	2900      	cmp	r1, #0
     8f8:	d104      	bne.n	904 <initAccelSensor+0xd8>
        return &(ports[port_index]->Group[group_index]);
     8fa:	095a      	lsrs	r2, r3, #5
     8fc:	01d2      	lsls	r2, r2, #7
     8fe:	4917      	ldr	r1, [pc, #92]	; (95c <initAccelSensor+0x130>)
     900:	468c      	mov	ip, r1
     902:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     904:	211f      	movs	r1, #31
     906:	400b      	ands	r3, r1
     908:	391e      	subs	r1, #30
     90a:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     90c:	6191      	str	r1, [r2, #24]

    SaLDigitalOut(module->SS,false);
     90e:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     910:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     912:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     914:	2900      	cmp	r1, #0
     916:	d104      	bne.n	922 <initAccelSensor+0xf6>
        return &(ports[port_index]->Group[group_index]);
     918:	095a      	lsrs	r2, r3, #5
     91a:	01d2      	lsls	r2, r2, #7
     91c:	490f      	ldr	r1, [pc, #60]	; (95c <initAccelSensor+0x130>)
     91e:	468c      	mov	ip, r1
     920:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     922:	211f      	movs	r1, #31
     924:	400b      	ands	r3, r1
     926:	391e      	subs	r1, #30
     928:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     92a:	6151      	str	r1, [r2, #20]
    byteOut(module,ADXL345_REG_POWER_CTL);
     92c:	1c20      	adds	r0, r4, #0
     92e:	212d      	movs	r1, #45	; 0x2d
     930:	4d0b      	ldr	r5, [pc, #44]	; (960 <initAccelSensor+0x134>)
     932:	47a8      	blx	r5
    byteOut(module,0x08);
     934:	1c20      	adds	r0, r4, #0
     936:	2108      	movs	r1, #8
     938:	47a8      	blx	r5
    SaLDigitalOut(module->SS,true);
     93a:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     93c:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     93e:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     940:	2900      	cmp	r1, #0
     942:	d104      	bne.n	94e <initAccelSensor+0x122>
        return &(ports[port_index]->Group[group_index]);
     944:	095a      	lsrs	r2, r3, #5
     946:	01d2      	lsls	r2, r2, #7
     948:	4904      	ldr	r1, [pc, #16]	; (95c <initAccelSensor+0x130>)
     94a:	468c      	mov	ip, r1
     94c:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     94e:	211f      	movs	r1, #31
     950:	400b      	ands	r3, r1
     952:	391e      	subs	r1, #30
     954:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     956:	6191      	str	r1, [r2, #24]
    /*=========================================================================*/
}
     958:	bd38      	pop	{r3, r4, r5, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	41004400 	.word	0x41004400
     960:	00000395 	.word	0x00000395

00000964 <initBaroSensor>:

void initBaroSensor(struct spiModule *const module ) {
     964:	b510      	push	{r4, lr}
     966:	1c04      	adds	r4, r0, #0
    /*=========================================================================
    			baro init stuff
    -----------------------------------------------------------------------*/
    SaLDigitalOut(module->SS,false);
     968:	78c3      	ldrb	r3, [r0, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     96a:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     96c:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     96e:	2900      	cmp	r1, #0
     970:	d104      	bne.n	97c <initBaroSensor+0x18>
        return &(ports[port_index]->Group[group_index]);
     972:	095a      	lsrs	r2, r3, #5
     974:	01d2      	lsls	r2, r2, #7
     976:	4911      	ldr	r1, [pc, #68]	; (9bc <initBaroSensor+0x58>)
     978:	468c      	mov	ip, r1
     97a:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     97c:	211f      	movs	r1, #31
     97e:	400b      	ands	r3, r1
     980:	391e      	subs	r1, #30
     982:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     984:	6151      	str	r1, [r2, #20]
    byteOut(module,cmdReset_);
     986:	1c20      	adds	r0, r4, #0
     988:	211e      	movs	r1, #30
     98a:	4b0d      	ldr	r3, [pc, #52]	; (9c0 <initBaroSensor+0x5c>)
     98c:	4798      	blx	r3
    SaLDigitalOut(module->SS,true);
     98e:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     990:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     992:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     994:	2900      	cmp	r1, #0
     996:	d104      	bne.n	9a2 <initBaroSensor+0x3e>
        return &(ports[port_index]->Group[group_index]);
     998:	095a      	lsrs	r2, r3, #5
     99a:	01d2      	lsls	r2, r2, #7
     99c:	4907      	ldr	r1, [pc, #28]	; (9bc <initBaroSensor+0x58>)
     99e:	468c      	mov	ip, r1
     9a0:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     9a2:	211f      	movs	r1, #31
     9a4:	400b      	ands	r3, r1
     9a6:	391e      	subs	r1, #30
     9a8:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     9aa:	6191      	str	r1, [r2, #24]
    delay_us(30);
     9ac:	201e      	movs	r0, #30
     9ae:	4b05      	ldr	r3, [pc, #20]	; (9c4 <initBaroSensor+0x60>)
     9b0:	4798      	blx	r3
    read_coeff(module);
     9b2:	1c20      	adds	r0, r4, #0
     9b4:	4b04      	ldr	r3, [pc, #16]	; (9c8 <initBaroSensor+0x64>)
     9b6:	4798      	blx	r3
    /*=========================================================================*/
}
     9b8:	bd10      	pop	{r4, pc}
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	41004400 	.word	0x41004400
     9c0:	00000395 	.word	0x00000395
     9c4:	0000051d 	.word	0x0000051d
     9c8:	000002f9 	.word	0x000002f9

000009cc <main>:

}

volatile uint32_t counter = 0;

int main(void) {
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	b08b      	sub	sp, #44	; 0x2c
    /* Initialize the SAM system */
    SystemInit();
     9d0:	4b26      	ldr	r3, [pc, #152]	; (a6c <main+0xa0>)
     9d2:	4798      	blx	r3
    ClockInit();
     9d4:	4b26      	ldr	r3, [pc, #152]	; (a70 <main+0xa4>)
     9d6:	4798      	blx	r3
    SaLDelayInit();
     9d8:	4b26      	ldr	r3, [pc, #152]	; (a74 <main+0xa8>)
     9da:	4798      	blx	r3
    PinConfig();
     9dc:	4b26      	ldr	r3, [pc, #152]	; (a78 <main+0xac>)
     9de:	4798      	blx	r3
    struct spiModule baroModule =baroModuleSetup();
     9e0:	a808      	add	r0, sp, #32
     9e2:	4b26      	ldr	r3, [pc, #152]	; (a7c <main+0xb0>)
     9e4:	4798      	blx	r3
    struct spiModule accelModule =accelModuleSetup();
     9e6:	a806      	add	r0, sp, #24
     9e8:	4b25      	ldr	r3, [pc, #148]	; (a80 <main+0xb4>)
     9ea:	4798      	blx	r3
    struct USARTModule gpsModule =GPSmoduleSetup();
     9ec:	a804      	add	r0, sp, #16
     9ee:	4b25      	ldr	r3, [pc, #148]	; (a84 <main+0xb8>)
     9f0:	4798      	blx	r3

    initAccelSensor(&accelModule);
     9f2:	a806      	add	r0, sp, #24
     9f4:	4b24      	ldr	r3, [pc, #144]	; (a88 <main+0xbc>)
     9f6:	4798      	blx	r3
    initBaroSensor(&baroModule);
     9f8:	a808      	add	r0, sp, #32
     9fa:	4b24      	ldr	r3, [pc, #144]	; (a8c <main+0xc0>)
     9fc:	4798      	blx	r3
    initGPS(&gpsModule);



    volatile float accelX = 0;
     9fe:	2300      	movs	r3, #0
     a00:	9303      	str	r3, [sp, #12]
    volatile float accelY = 0;
     a02:	9302      	str	r3, [sp, #8]
    volatile float accelZ = 0;
     a04:	9301      	str	r3, [sp, #4]

    SaLPlayTone(900);
     a06:	20e1      	movs	r0, #225	; 0xe1
     a08:	0080      	lsls	r0, r0, #2
     a0a:	4c21      	ldr	r4, [pc, #132]	; (a90 <main+0xc4>)
     a0c:	47a0      	blx	r4
    SaLPlayTone(800);
     a0e:	20c8      	movs	r0, #200	; 0xc8
     a10:	0080      	lsls	r0, r0, #2
     a12:	47a0      	blx	r4
    SaLPlayTone(700);
     a14:	20af      	movs	r0, #175	; 0xaf
     a16:	0080      	lsls	r0, r0, #2
     a18:	47a0      	blx	r4
    SaLPlayTone(600);
     a1a:	2096      	movs	r0, #150	; 0x96
     a1c:	0080      	lsls	r0, r0, #2
     a1e:	47a0      	blx	r4
    SaLPlayTone(500);
     a20:	20fa      	movs	r0, #250	; 0xfa
     a22:	0040      	lsls	r0, r0, #1
     a24:	47a0      	blx	r4

    uint32_t index = 0;
     a26:	2400      	movs	r4, #0
    while (1) {
      //  delay_us(100);
        counter++;
     a28:	4d1a      	ldr	r5, [pc, #104]	; (a94 <main+0xc8>)
        getevents(&accelModule);
     a2a:	4f1b      	ldr	r7, [pc, #108]	; (a98 <main+0xcc>)
        accelX = currentX();
     a2c:	4e1b      	ldr	r6, [pc, #108]	; (a9c <main+0xd0>)
    SaLPlayTone(500);

    uint32_t index = 0;
    while (1) {
      //  delay_us(100);
        counter++;
     a2e:	682b      	ldr	r3, [r5, #0]
     a30:	3301      	adds	r3, #1
     a32:	602b      	str	r3, [r5, #0]
        getevents(&accelModule);
     a34:	a806      	add	r0, sp, #24
     a36:	47b8      	blx	r7
        accelX = currentX();
     a38:	47b0      	blx	r6
     a3a:	9003      	str	r0, [sp, #12]
        accelY = currentY();
     a3c:	4b18      	ldr	r3, [pc, #96]	; (aa0 <main+0xd4>)
     a3e:	4798      	blx	r3
     a40:	9002      	str	r0, [sp, #8]
        accelZ = currentZ();
     a42:	4b18      	ldr	r3, [pc, #96]	; (aa4 <main+0xd8>)
     a44:	4798      	blx	r3
     a46:	9001      	str	r0, [sp, #4]

        accelDataX[index] = accelX;
     a48:	9903      	ldr	r1, [sp, #12]
     a4a:	00a3      	lsls	r3, r4, #2
     a4c:	4a16      	ldr	r2, [pc, #88]	; (aa8 <main+0xdc>)
     a4e:	5099      	str	r1, [r3, r2]
        accelDataY[index] = accelY;
     a50:	9902      	ldr	r1, [sp, #8]
     a52:	4a16      	ldr	r2, [pc, #88]	; (aac <main+0xe0>)
     a54:	5099      	str	r1, [r3, r2]
        accelDataZ[index] = accelZ;
     a56:	9901      	ldr	r1, [sp, #4]
     a58:	4a15      	ldr	r2, [pc, #84]	; (ab0 <main+0xe4>)
     a5a:	5099      	str	r1, [r3, r2]
        index++;
     a5c:	3401      	adds	r4, #1
        if (index == 1000) {
            index = 0;
     a5e:	4b15      	ldr	r3, [pc, #84]	; (ab4 <main+0xe8>)
     a60:	18e3      	adds	r3, r4, r3
     a62:	1e5a      	subs	r2, r3, #1
     a64:	4193      	sbcs	r3, r2
     a66:	425b      	negs	r3, r3
     a68:	401c      	ands	r4, r3
     a6a:	e7e0      	b.n	a2e <main+0x62>
     a6c:	000006a1 	.word	0x000006a1
     a70:	000006b1 	.word	0x000006b1
     a74:	000004fd 	.word	0x000004fd
     a78:	00000739 	.word	0x00000739
     a7c:	0000076d 	.word	0x0000076d
     a80:	000007b5 	.word	0x000007b5
     a84:	000007fd 	.word	0x000007fd
     a88:	0000082d 	.word	0x0000082d
     a8c:	00000965 	.word	0x00000965
     a90:	000004ad 	.word	0x000004ad
     a94:	20000454 	.word	0x20000454
     a98:	00000115 	.word	0x00000115
     a9c:	0000025d 	.word	0x0000025d
     aa0:	00000291 	.word	0x00000291
     aa4:	000002c5 	.word	0x000002c5
     aa8:	200023ac 	.word	0x200023ac
     aac:	2000046c 	.word	0x2000046c
     ab0:	2000140c 	.word	0x2000140c
     ab4:	fffffc18 	.word	0xfffffc18

00000ab8 <__aeabi_dmul>:
     ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aba:	465f      	mov	r7, fp
     abc:	4656      	mov	r6, sl
     abe:	464d      	mov	r5, r9
     ac0:	4644      	mov	r4, r8
     ac2:	b4f0      	push	{r4, r5, r6, r7}
     ac4:	1c05      	adds	r5, r0, #0
     ac6:	1c06      	adds	r6, r0, #0
     ac8:	0308      	lsls	r0, r1, #12
     aca:	b087      	sub	sp, #28
     acc:	4699      	mov	r9, r3
     ace:	004f      	lsls	r7, r1, #1
     ad0:	0b03      	lsrs	r3, r0, #12
     ad2:	0fcc      	lsrs	r4, r1, #31
     ad4:	4692      	mov	sl, r2
     ad6:	469b      	mov	fp, r3
     ad8:	0d7f      	lsrs	r7, r7, #21
     ada:	9401      	str	r4, [sp, #4]
     adc:	d067      	beq.n	bae <__aeabi_dmul+0xf6>
     ade:	4b6c      	ldr	r3, [pc, #432]	; (c90 <__aeabi_dmul+0x1d8>)
     ae0:	429f      	cmp	r7, r3
     ae2:	d036      	beq.n	b52 <__aeabi_dmul+0x9a>
     ae4:	2080      	movs	r0, #128	; 0x80
     ae6:	465b      	mov	r3, fp
     ae8:	0340      	lsls	r0, r0, #13
     aea:	4318      	orrs	r0, r3
     aec:	00c0      	lsls	r0, r0, #3
     aee:	0f6b      	lsrs	r3, r5, #29
     af0:	4318      	orrs	r0, r3
     af2:	4b68      	ldr	r3, [pc, #416]	; (c94 <__aeabi_dmul+0x1dc>)
     af4:	4683      	mov	fp, r0
     af6:	469c      	mov	ip, r3
     af8:	2300      	movs	r3, #0
     afa:	4698      	mov	r8, r3
     afc:	00ee      	lsls	r6, r5, #3
     afe:	4467      	add	r7, ip
     b00:	9300      	str	r3, [sp, #0]
     b02:	464b      	mov	r3, r9
     b04:	4649      	mov	r1, r9
     b06:	031d      	lsls	r5, r3, #12
     b08:	0fc9      	lsrs	r1, r1, #31
     b0a:	005b      	lsls	r3, r3, #1
     b0c:	4652      	mov	r2, sl
     b0e:	0b2d      	lsrs	r5, r5, #12
     b10:	0d5b      	lsrs	r3, r3, #21
     b12:	4689      	mov	r9, r1
     b14:	d100      	bne.n	b18 <__aeabi_dmul+0x60>
     b16:	e06e      	b.n	bf6 <__aeabi_dmul+0x13e>
     b18:	495d      	ldr	r1, [pc, #372]	; (c90 <__aeabi_dmul+0x1d8>)
     b1a:	428b      	cmp	r3, r1
     b1c:	d064      	beq.n	be8 <__aeabi_dmul+0x130>
     b1e:	2080      	movs	r0, #128	; 0x80
     b20:	495c      	ldr	r1, [pc, #368]	; (c94 <__aeabi_dmul+0x1dc>)
     b22:	0340      	lsls	r0, r0, #13
     b24:	468c      	mov	ip, r1
     b26:	2100      	movs	r1, #0
     b28:	4305      	orrs	r5, r0
     b2a:	00ed      	lsls	r5, r5, #3
     b2c:	0f50      	lsrs	r0, r2, #29
     b2e:	4305      	orrs	r5, r0
     b30:	00d2      	lsls	r2, r2, #3
     b32:	4463      	add	r3, ip
     b34:	4648      	mov	r0, r9
     b36:	18ff      	adds	r7, r7, r3
     b38:	1c7b      	adds	r3, r7, #1
     b3a:	469a      	mov	sl, r3
     b3c:	9b00      	ldr	r3, [sp, #0]
     b3e:	4060      	eors	r0, r4
     b40:	9002      	str	r0, [sp, #8]
     b42:	430b      	orrs	r3, r1
     b44:	2b0f      	cmp	r3, #15
     b46:	d900      	bls.n	b4a <__aeabi_dmul+0x92>
     b48:	e0ac      	b.n	ca4 <__aeabi_dmul+0x1ec>
     b4a:	4853      	ldr	r0, [pc, #332]	; (c98 <__aeabi_dmul+0x1e0>)
     b4c:	009b      	lsls	r3, r3, #2
     b4e:	58c3      	ldr	r3, [r0, r3]
     b50:	469f      	mov	pc, r3
     b52:	465b      	mov	r3, fp
     b54:	431d      	orrs	r5, r3
     b56:	d000      	beq.n	b5a <__aeabi_dmul+0xa2>
     b58:	e082      	b.n	c60 <__aeabi_dmul+0x1a8>
     b5a:	2308      	movs	r3, #8
     b5c:	9300      	str	r3, [sp, #0]
     b5e:	2300      	movs	r3, #0
     b60:	469b      	mov	fp, r3
     b62:	3302      	adds	r3, #2
     b64:	2600      	movs	r6, #0
     b66:	4698      	mov	r8, r3
     b68:	e7cb      	b.n	b02 <__aeabi_dmul+0x4a>
     b6a:	9b02      	ldr	r3, [sp, #8]
     b6c:	9301      	str	r3, [sp, #4]
     b6e:	4643      	mov	r3, r8
     b70:	2b02      	cmp	r3, #2
     b72:	d159      	bne.n	c28 <__aeabi_dmul+0x170>
     b74:	2401      	movs	r4, #1
     b76:	2500      	movs	r5, #0
     b78:	2600      	movs	r6, #0
     b7a:	9b01      	ldr	r3, [sp, #4]
     b7c:	401c      	ands	r4, r3
     b7e:	4b44      	ldr	r3, [pc, #272]	; (c90 <__aeabi_dmul+0x1d8>)
     b80:	2100      	movs	r1, #0
     b82:	032d      	lsls	r5, r5, #12
     b84:	0d0a      	lsrs	r2, r1, #20
     b86:	0512      	lsls	r2, r2, #20
     b88:	0b2d      	lsrs	r5, r5, #12
     b8a:	4315      	orrs	r5, r2
     b8c:	4a43      	ldr	r2, [pc, #268]	; (c9c <__aeabi_dmul+0x1e4>)
     b8e:	051b      	lsls	r3, r3, #20
     b90:	4015      	ands	r5, r2
     b92:	431d      	orrs	r5, r3
     b94:	006d      	lsls	r5, r5, #1
     b96:	07e4      	lsls	r4, r4, #31
     b98:	086d      	lsrs	r5, r5, #1
     b9a:	4325      	orrs	r5, r4
     b9c:	1c30      	adds	r0, r6, #0
     b9e:	1c29      	adds	r1, r5, #0
     ba0:	b007      	add	sp, #28
     ba2:	bc3c      	pop	{r2, r3, r4, r5}
     ba4:	4690      	mov	r8, r2
     ba6:	4699      	mov	r9, r3
     ba8:	46a2      	mov	sl, r4
     baa:	46ab      	mov	fp, r5
     bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bae:	432b      	orrs	r3, r5
     bb0:	d04e      	beq.n	c50 <__aeabi_dmul+0x198>
     bb2:	465b      	mov	r3, fp
     bb4:	2b00      	cmp	r3, #0
     bb6:	d100      	bne.n	bba <__aeabi_dmul+0x102>
     bb8:	e185      	b.n	ec6 <__aeabi_dmul+0x40e>
     bba:	4658      	mov	r0, fp
     bbc:	f000 fae2 	bl	1184 <__clzsi2>
     bc0:	1c02      	adds	r2, r0, #0
     bc2:	2328      	movs	r3, #40	; 0x28
     bc4:	1c29      	adds	r1, r5, #0
     bc6:	1a9b      	subs	r3, r3, r2
     bc8:	1c16      	adds	r6, r2, #0
     bca:	4658      	mov	r0, fp
     bcc:	40d9      	lsrs	r1, r3
     bce:	3e08      	subs	r6, #8
     bd0:	40b0      	lsls	r0, r6
     bd2:	1c0b      	adds	r3, r1, #0
     bd4:	40b5      	lsls	r5, r6
     bd6:	4303      	orrs	r3, r0
     bd8:	469b      	mov	fp, r3
     bda:	1c2e      	adds	r6, r5, #0
     bdc:	2300      	movs	r3, #0
     bde:	4f30      	ldr	r7, [pc, #192]	; (ca0 <__aeabi_dmul+0x1e8>)
     be0:	9300      	str	r3, [sp, #0]
     be2:	1abf      	subs	r7, r7, r2
     be4:	4698      	mov	r8, r3
     be6:	e78c      	b.n	b02 <__aeabi_dmul+0x4a>
     be8:	4651      	mov	r1, sl
     bea:	4329      	orrs	r1, r5
     bec:	d12e      	bne.n	c4c <__aeabi_dmul+0x194>
     bee:	2500      	movs	r5, #0
     bf0:	2200      	movs	r2, #0
     bf2:	2102      	movs	r1, #2
     bf4:	e79e      	b.n	b34 <__aeabi_dmul+0x7c>
     bf6:	4651      	mov	r1, sl
     bf8:	4329      	orrs	r1, r5
     bfa:	d023      	beq.n	c44 <__aeabi_dmul+0x18c>
     bfc:	2d00      	cmp	r5, #0
     bfe:	d100      	bne.n	c02 <__aeabi_dmul+0x14a>
     c00:	e154      	b.n	eac <__aeabi_dmul+0x3f4>
     c02:	1c28      	adds	r0, r5, #0
     c04:	f000 fabe 	bl	1184 <__clzsi2>
     c08:	1c03      	adds	r3, r0, #0
     c0a:	2128      	movs	r1, #40	; 0x28
     c0c:	4650      	mov	r0, sl
     c0e:	1ac9      	subs	r1, r1, r3
     c10:	1c1a      	adds	r2, r3, #0
     c12:	40c8      	lsrs	r0, r1
     c14:	4651      	mov	r1, sl
     c16:	3a08      	subs	r2, #8
     c18:	4091      	lsls	r1, r2
     c1a:	4095      	lsls	r5, r2
     c1c:	1c0a      	adds	r2, r1, #0
     c1e:	4305      	orrs	r5, r0
     c20:	481f      	ldr	r0, [pc, #124]	; (ca0 <__aeabi_dmul+0x1e8>)
     c22:	2100      	movs	r1, #0
     c24:	1ac3      	subs	r3, r0, r3
     c26:	e785      	b.n	b34 <__aeabi_dmul+0x7c>
     c28:	2b03      	cmp	r3, #3
     c2a:	d100      	bne.n	c2e <__aeabi_dmul+0x176>
     c2c:	e1c2      	b.n	fb4 <__aeabi_dmul+0x4fc>
     c2e:	2b01      	cmp	r3, #1
     c30:	d000      	beq.n	c34 <__aeabi_dmul+0x17c>
     c32:	e16d      	b.n	f10 <__aeabi_dmul+0x458>
     c34:	4644      	mov	r4, r8
     c36:	9b01      	ldr	r3, [sp, #4]
     c38:	2500      	movs	r5, #0
     c3a:	401c      	ands	r4, r3
     c3c:	b2e4      	uxtb	r4, r4
     c3e:	2300      	movs	r3, #0
     c40:	2600      	movs	r6, #0
     c42:	e79d      	b.n	b80 <__aeabi_dmul+0xc8>
     c44:	2500      	movs	r5, #0
     c46:	2200      	movs	r2, #0
     c48:	2101      	movs	r1, #1
     c4a:	e773      	b.n	b34 <__aeabi_dmul+0x7c>
     c4c:	2103      	movs	r1, #3
     c4e:	e771      	b.n	b34 <__aeabi_dmul+0x7c>
     c50:	2304      	movs	r3, #4
     c52:	9300      	str	r3, [sp, #0]
     c54:	2300      	movs	r3, #0
     c56:	469b      	mov	fp, r3
     c58:	3301      	adds	r3, #1
     c5a:	2600      	movs	r6, #0
     c5c:	4698      	mov	r8, r3
     c5e:	e750      	b.n	b02 <__aeabi_dmul+0x4a>
     c60:	230c      	movs	r3, #12
     c62:	9300      	str	r3, [sp, #0]
     c64:	3b09      	subs	r3, #9
     c66:	4698      	mov	r8, r3
     c68:	e74b      	b.n	b02 <__aeabi_dmul+0x4a>
     c6a:	2580      	movs	r5, #128	; 0x80
     c6c:	2400      	movs	r4, #0
     c6e:	032d      	lsls	r5, r5, #12
     c70:	2600      	movs	r6, #0
     c72:	4b07      	ldr	r3, [pc, #28]	; (c90 <__aeabi_dmul+0x1d8>)
     c74:	e784      	b.n	b80 <__aeabi_dmul+0xc8>
     c76:	464b      	mov	r3, r9
     c78:	46ab      	mov	fp, r5
     c7a:	1c16      	adds	r6, r2, #0
     c7c:	9301      	str	r3, [sp, #4]
     c7e:	4688      	mov	r8, r1
     c80:	e775      	b.n	b6e <__aeabi_dmul+0xb6>
     c82:	9b02      	ldr	r3, [sp, #8]
     c84:	46ab      	mov	fp, r5
     c86:	1c16      	adds	r6, r2, #0
     c88:	9301      	str	r3, [sp, #4]
     c8a:	4688      	mov	r8, r1
     c8c:	e76f      	b.n	b6e <__aeabi_dmul+0xb6>
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	000007ff 	.word	0x000007ff
     c94:	fffffc01 	.word	0xfffffc01
     c98:	00001338 	.word	0x00001338
     c9c:	800fffff 	.word	0x800fffff
     ca0:	fffffc0d 	.word	0xfffffc0d
     ca4:	0c33      	lsrs	r3, r6, #16
     ca6:	0436      	lsls	r6, r6, #16
     ca8:	0c36      	lsrs	r6, r6, #16
     caa:	469c      	mov	ip, r3
     cac:	1c33      	adds	r3, r6, #0
     cae:	0c14      	lsrs	r4, r2, #16
     cb0:	0412      	lsls	r2, r2, #16
     cb2:	0c12      	lsrs	r2, r2, #16
     cb4:	4353      	muls	r3, r2
     cb6:	4698      	mov	r8, r3
     cb8:	4663      	mov	r3, ip
     cba:	4353      	muls	r3, r2
     cbc:	4699      	mov	r9, r3
     cbe:	4663      	mov	r3, ip
     cc0:	4363      	muls	r3, r4
     cc2:	9301      	str	r3, [sp, #4]
     cc4:	1c33      	adds	r3, r6, #0
     cc6:	4641      	mov	r1, r8
     cc8:	4363      	muls	r3, r4
     cca:	0c09      	lsrs	r1, r1, #16
     ccc:	444b      	add	r3, r9
     cce:	185b      	adds	r3, r3, r1
     cd0:	4599      	cmp	r9, r3
     cd2:	d905      	bls.n	ce0 <__aeabi_dmul+0x228>
     cd4:	2080      	movs	r0, #128	; 0x80
     cd6:	0240      	lsls	r0, r0, #9
     cd8:	4681      	mov	r9, r0
     cda:	9901      	ldr	r1, [sp, #4]
     cdc:	4449      	add	r1, r9
     cde:	9101      	str	r1, [sp, #4]
     ce0:	0c19      	lsrs	r1, r3, #16
     ce2:	9103      	str	r1, [sp, #12]
     ce4:	4641      	mov	r1, r8
     ce6:	0409      	lsls	r1, r1, #16
     ce8:	0c09      	lsrs	r1, r1, #16
     cea:	041b      	lsls	r3, r3, #16
     cec:	185b      	adds	r3, r3, r1
     cee:	9304      	str	r3, [sp, #16]
     cf0:	0c2b      	lsrs	r3, r5, #16
     cf2:	4698      	mov	r8, r3
     cf4:	1c33      	adds	r3, r6, #0
     cf6:	042d      	lsls	r5, r5, #16
     cf8:	0c29      	lsrs	r1, r5, #16
     cfa:	434b      	muls	r3, r1
     cfc:	4660      	mov	r0, ip
     cfe:	9300      	str	r3, [sp, #0]
     d00:	4643      	mov	r3, r8
     d02:	4665      	mov	r5, ip
     d04:	4358      	muls	r0, r3
     d06:	435e      	muls	r6, r3
     d08:	9b00      	ldr	r3, [sp, #0]
     d0a:	434d      	muls	r5, r1
     d0c:	0c1b      	lsrs	r3, r3, #16
     d0e:	4699      	mov	r9, r3
     d10:	19ae      	adds	r6, r5, r6
     d12:	444e      	add	r6, r9
     d14:	4684      	mov	ip, r0
     d16:	42b5      	cmp	r5, r6
     d18:	d903      	bls.n	d22 <__aeabi_dmul+0x26a>
     d1a:	2380      	movs	r3, #128	; 0x80
     d1c:	025b      	lsls	r3, r3, #9
     d1e:	4699      	mov	r9, r3
     d20:	44cc      	add	ip, r9
     d22:	0c35      	lsrs	r5, r6, #16
     d24:	1c2b      	adds	r3, r5, #0
     d26:	9803      	ldr	r0, [sp, #12]
     d28:	4463      	add	r3, ip
     d2a:	4684      	mov	ip, r0
     d2c:	9305      	str	r3, [sp, #20]
     d2e:	9b00      	ldr	r3, [sp, #0]
     d30:	0436      	lsls	r6, r6, #16
     d32:	041b      	lsls	r3, r3, #16
     d34:	0c1b      	lsrs	r3, r3, #16
     d36:	18f3      	adds	r3, r6, r3
     d38:	449c      	add	ip, r3
     d3a:	4660      	mov	r0, ip
     d3c:	9003      	str	r0, [sp, #12]
     d3e:	4658      	mov	r0, fp
     d40:	0405      	lsls	r5, r0, #16
     d42:	0c06      	lsrs	r6, r0, #16
     d44:	0c28      	lsrs	r0, r5, #16
     d46:	4684      	mov	ip, r0
     d48:	4350      	muls	r0, r2
     d4a:	1c35      	adds	r5, r6, #0
     d4c:	4681      	mov	r9, r0
     d4e:	4660      	mov	r0, ip
     d50:	4365      	muls	r5, r4
     d52:	4344      	muls	r4, r0
     d54:	4648      	mov	r0, r9
     d56:	0c00      	lsrs	r0, r0, #16
     d58:	4683      	mov	fp, r0
     d5a:	4372      	muls	r2, r6
     d5c:	1914      	adds	r4, r2, r4
     d5e:	445c      	add	r4, fp
     d60:	42a2      	cmp	r2, r4
     d62:	d903      	bls.n	d6c <__aeabi_dmul+0x2b4>
     d64:	2280      	movs	r2, #128	; 0x80
     d66:	0252      	lsls	r2, r2, #9
     d68:	4693      	mov	fp, r2
     d6a:	445d      	add	r5, fp
     d6c:	0c22      	lsrs	r2, r4, #16
     d6e:	18ad      	adds	r5, r5, r2
     d70:	464a      	mov	r2, r9
     d72:	0412      	lsls	r2, r2, #16
     d74:	0c12      	lsrs	r2, r2, #16
     d76:	0424      	lsls	r4, r4, #16
     d78:	4640      	mov	r0, r8
     d7a:	18a4      	adds	r4, r4, r2
     d7c:	4662      	mov	r2, ip
     d7e:	434a      	muls	r2, r1
     d80:	4371      	muls	r1, r6
     d82:	4346      	muls	r6, r0
     d84:	4660      	mov	r0, ip
     d86:	9600      	str	r6, [sp, #0]
     d88:	4646      	mov	r6, r8
     d8a:	4370      	muls	r0, r6
     d8c:	4680      	mov	r8, r0
     d8e:	0c10      	lsrs	r0, r2, #16
     d90:	4684      	mov	ip, r0
     d92:	4488      	add	r8, r1
     d94:	44e0      	add	r8, ip
     d96:	4541      	cmp	r1, r8
     d98:	d905      	bls.n	da6 <__aeabi_dmul+0x2ee>
     d9a:	2180      	movs	r1, #128	; 0x80
     d9c:	0249      	lsls	r1, r1, #9
     d9e:	468c      	mov	ip, r1
     da0:	9900      	ldr	r1, [sp, #0]
     da2:	4461      	add	r1, ip
     da4:	9100      	str	r1, [sp, #0]
     da6:	9801      	ldr	r0, [sp, #4]
     da8:	9903      	ldr	r1, [sp, #12]
     daa:	4684      	mov	ip, r0
     dac:	4461      	add	r1, ip
     dae:	4299      	cmp	r1, r3
     db0:	419b      	sbcs	r3, r3
     db2:	425b      	negs	r3, r3
     db4:	4699      	mov	r9, r3
     db6:	9805      	ldr	r0, [sp, #20]
     db8:	4643      	mov	r3, r8
     dba:	4684      	mov	ip, r0
     dbc:	0412      	lsls	r2, r2, #16
     dbe:	0c12      	lsrs	r2, r2, #16
     dc0:	041b      	lsls	r3, r3, #16
     dc2:	189b      	adds	r3, r3, r2
     dc4:	4463      	add	r3, ip
     dc6:	469c      	mov	ip, r3
     dc8:	46ab      	mov	fp, r5
     dca:	4283      	cmp	r3, r0
     dcc:	419b      	sbcs	r3, r3
     dce:	4640      	mov	r0, r8
     dd0:	190a      	adds	r2, r1, r4
     dd2:	44cc      	add	ip, r9
     dd4:	42a2      	cmp	r2, r4
     dd6:	4189      	sbcs	r1, r1
     dd8:	44e3      	add	fp, ip
     dda:	45cc      	cmp	ip, r9
     ddc:	41b6      	sbcs	r6, r6
     dde:	465c      	mov	r4, fp
     de0:	0c00      	lsrs	r0, r0, #16
     de2:	4680      	mov	r8, r0
     de4:	4249      	negs	r1, r1
     de6:	4276      	negs	r6, r6
     de8:	425b      	negs	r3, r3
     dea:	1864      	adds	r4, r4, r1
     dec:	4333      	orrs	r3, r6
     dee:	4498      	add	r8, r3
     df0:	428c      	cmp	r4, r1
     df2:	4189      	sbcs	r1, r1
     df4:	45ab      	cmp	fp, r5
     df6:	419b      	sbcs	r3, r3
     df8:	4249      	negs	r1, r1
     dfa:	425b      	negs	r3, r3
     dfc:	4319      	orrs	r1, r3
     dfe:	1c0d      	adds	r5, r1, #0
     e00:	9b00      	ldr	r3, [sp, #0]
     e02:	4445      	add	r5, r8
     e04:	18ee      	adds	r6, r5, r3
     e06:	0276      	lsls	r6, r6, #9
     e08:	0de5      	lsrs	r5, r4, #23
     e0a:	432e      	orrs	r6, r5
     e0c:	46b3      	mov	fp, r6
     e0e:	9b04      	ldr	r3, [sp, #16]
     e10:	0256      	lsls	r6, r2, #9
     e12:	431e      	orrs	r6, r3
     e14:	1e73      	subs	r3, r6, #1
     e16:	419e      	sbcs	r6, r3
     e18:	465b      	mov	r3, fp
     e1a:	0dd2      	lsrs	r2, r2, #23
     e1c:	4332      	orrs	r2, r6
     e1e:	0266      	lsls	r6, r4, #9
     e20:	4316      	orrs	r6, r2
     e22:	01db      	lsls	r3, r3, #7
     e24:	d50a      	bpl.n	e3c <__aeabi_dmul+0x384>
     e26:	2301      	movs	r3, #1
     e28:	4033      	ands	r3, r6
     e2a:	0876      	lsrs	r6, r6, #1
     e2c:	431e      	orrs	r6, r3
     e2e:	465b      	mov	r3, fp
     e30:	07db      	lsls	r3, r3, #31
     e32:	431e      	orrs	r6, r3
     e34:	465b      	mov	r3, fp
     e36:	085b      	lsrs	r3, r3, #1
     e38:	469b      	mov	fp, r3
     e3a:	4657      	mov	r7, sl
     e3c:	4b63      	ldr	r3, [pc, #396]	; (fcc <__aeabi_dmul+0x514>)
     e3e:	18fb      	adds	r3, r7, r3
     e40:	2b00      	cmp	r3, #0
     e42:	dd5a      	ble.n	efa <__aeabi_dmul+0x442>
     e44:	0772      	lsls	r2, r6, #29
     e46:	d009      	beq.n	e5c <__aeabi_dmul+0x3a4>
     e48:	220f      	movs	r2, #15
     e4a:	4032      	ands	r2, r6
     e4c:	2a04      	cmp	r2, #4
     e4e:	d005      	beq.n	e5c <__aeabi_dmul+0x3a4>
     e50:	1d32      	adds	r2, r6, #4
     e52:	42b2      	cmp	r2, r6
     e54:	41b6      	sbcs	r6, r6
     e56:	4276      	negs	r6, r6
     e58:	44b3      	add	fp, r6
     e5a:	1c16      	adds	r6, r2, #0
     e5c:	465a      	mov	r2, fp
     e5e:	01d2      	lsls	r2, r2, #7
     e60:	d506      	bpl.n	e70 <__aeabi_dmul+0x3b8>
     e62:	465a      	mov	r2, fp
     e64:	4b5a      	ldr	r3, [pc, #360]	; (fd0 <__aeabi_dmul+0x518>)
     e66:	401a      	ands	r2, r3
     e68:	2380      	movs	r3, #128	; 0x80
     e6a:	4693      	mov	fp, r2
     e6c:	00db      	lsls	r3, r3, #3
     e6e:	18fb      	adds	r3, r7, r3
     e70:	4a58      	ldr	r2, [pc, #352]	; (fd4 <__aeabi_dmul+0x51c>)
     e72:	4293      	cmp	r3, r2
     e74:	dd34      	ble.n	ee0 <__aeabi_dmul+0x428>
     e76:	2401      	movs	r4, #1
     e78:	9b02      	ldr	r3, [sp, #8]
     e7a:	2500      	movs	r5, #0
     e7c:	401c      	ands	r4, r3
     e7e:	2600      	movs	r6, #0
     e80:	4b55      	ldr	r3, [pc, #340]	; (fd8 <__aeabi_dmul+0x520>)
     e82:	e67d      	b.n	b80 <__aeabi_dmul+0xc8>
     e84:	2080      	movs	r0, #128	; 0x80
     e86:	465b      	mov	r3, fp
     e88:	0300      	lsls	r0, r0, #12
     e8a:	4203      	tst	r3, r0
     e8c:	d008      	beq.n	ea0 <__aeabi_dmul+0x3e8>
     e8e:	4205      	tst	r5, r0
     e90:	d106      	bne.n	ea0 <__aeabi_dmul+0x3e8>
     e92:	4305      	orrs	r5, r0
     e94:	032d      	lsls	r5, r5, #12
     e96:	0b2d      	lsrs	r5, r5, #12
     e98:	464c      	mov	r4, r9
     e9a:	1c16      	adds	r6, r2, #0
     e9c:	4b4e      	ldr	r3, [pc, #312]	; (fd8 <__aeabi_dmul+0x520>)
     e9e:	e66f      	b.n	b80 <__aeabi_dmul+0xc8>
     ea0:	465d      	mov	r5, fp
     ea2:	4305      	orrs	r5, r0
     ea4:	032d      	lsls	r5, r5, #12
     ea6:	0b2d      	lsrs	r5, r5, #12
     ea8:	4b4b      	ldr	r3, [pc, #300]	; (fd8 <__aeabi_dmul+0x520>)
     eaa:	e669      	b.n	b80 <__aeabi_dmul+0xc8>
     eac:	4650      	mov	r0, sl
     eae:	f000 f969 	bl	1184 <__clzsi2>
     eb2:	1c03      	adds	r3, r0, #0
     eb4:	3320      	adds	r3, #32
     eb6:	2b27      	cmp	r3, #39	; 0x27
     eb8:	dc00      	bgt.n	ebc <__aeabi_dmul+0x404>
     eba:	e6a6      	b.n	c0a <__aeabi_dmul+0x152>
     ebc:	4655      	mov	r5, sl
     ebe:	3808      	subs	r0, #8
     ec0:	4085      	lsls	r5, r0
     ec2:	2200      	movs	r2, #0
     ec4:	e6ac      	b.n	c20 <__aeabi_dmul+0x168>
     ec6:	1c28      	adds	r0, r5, #0
     ec8:	f000 f95c 	bl	1184 <__clzsi2>
     ecc:	1c02      	adds	r2, r0, #0
     ece:	3220      	adds	r2, #32
     ed0:	2a27      	cmp	r2, #39	; 0x27
     ed2:	dc00      	bgt.n	ed6 <__aeabi_dmul+0x41e>
     ed4:	e675      	b.n	bc2 <__aeabi_dmul+0x10a>
     ed6:	3808      	subs	r0, #8
     ed8:	4085      	lsls	r5, r0
     eda:	2600      	movs	r6, #0
     edc:	46ab      	mov	fp, r5
     ede:	e67d      	b.n	bdc <__aeabi_dmul+0x124>
     ee0:	465a      	mov	r2, fp
     ee2:	08f6      	lsrs	r6, r6, #3
     ee4:	0752      	lsls	r2, r2, #29
     ee6:	4316      	orrs	r6, r2
     ee8:	465a      	mov	r2, fp
     eea:	2401      	movs	r4, #1
     eec:	0255      	lsls	r5, r2, #9
     eee:	9a02      	ldr	r2, [sp, #8]
     ef0:	055b      	lsls	r3, r3, #21
     ef2:	0b2d      	lsrs	r5, r5, #12
     ef4:	0d5b      	lsrs	r3, r3, #21
     ef6:	4014      	ands	r4, r2
     ef8:	e642      	b.n	b80 <__aeabi_dmul+0xc8>
     efa:	4d38      	ldr	r5, [pc, #224]	; (fdc <__aeabi_dmul+0x524>)
     efc:	1bed      	subs	r5, r5, r7
     efe:	2d38      	cmp	r5, #56	; 0x38
     f00:	dd0a      	ble.n	f18 <__aeabi_dmul+0x460>
     f02:	2401      	movs	r4, #1
     f04:	9b02      	ldr	r3, [sp, #8]
     f06:	2500      	movs	r5, #0
     f08:	401c      	ands	r4, r3
     f0a:	2600      	movs	r6, #0
     f0c:	2300      	movs	r3, #0
     f0e:	e637      	b.n	b80 <__aeabi_dmul+0xc8>
     f10:	9b01      	ldr	r3, [sp, #4]
     f12:	4657      	mov	r7, sl
     f14:	9302      	str	r3, [sp, #8]
     f16:	e791      	b.n	e3c <__aeabi_dmul+0x384>
     f18:	2d1f      	cmp	r5, #31
     f1a:	dc25      	bgt.n	f68 <__aeabi_dmul+0x4b0>
     f1c:	4b30      	ldr	r3, [pc, #192]	; (fe0 <__aeabi_dmul+0x528>)
     f1e:	1c32      	adds	r2, r6, #0
     f20:	469c      	mov	ip, r3
     f22:	4467      	add	r7, ip
     f24:	40be      	lsls	r6, r7
     f26:	465b      	mov	r3, fp
     f28:	40bb      	lsls	r3, r7
     f2a:	1c37      	adds	r7, r6, #0
     f2c:	40ea      	lsrs	r2, r5
     f2e:	1e7e      	subs	r6, r7, #1
     f30:	41b7      	sbcs	r7, r6
     f32:	4313      	orrs	r3, r2
     f34:	433b      	orrs	r3, r7
     f36:	1c1e      	adds	r6, r3, #0
     f38:	465b      	mov	r3, fp
     f3a:	40eb      	lsrs	r3, r5
     f3c:	1c1d      	adds	r5, r3, #0
     f3e:	0773      	lsls	r3, r6, #29
     f40:	d009      	beq.n	f56 <__aeabi_dmul+0x49e>
     f42:	230f      	movs	r3, #15
     f44:	4033      	ands	r3, r6
     f46:	2b04      	cmp	r3, #4
     f48:	d005      	beq.n	f56 <__aeabi_dmul+0x49e>
     f4a:	1d33      	adds	r3, r6, #4
     f4c:	42b3      	cmp	r3, r6
     f4e:	41b6      	sbcs	r6, r6
     f50:	4276      	negs	r6, r6
     f52:	19ad      	adds	r5, r5, r6
     f54:	1c1e      	adds	r6, r3, #0
     f56:	022b      	lsls	r3, r5, #8
     f58:	d520      	bpl.n	f9c <__aeabi_dmul+0x4e4>
     f5a:	2401      	movs	r4, #1
     f5c:	9b02      	ldr	r3, [sp, #8]
     f5e:	2500      	movs	r5, #0
     f60:	401c      	ands	r4, r3
     f62:	2600      	movs	r6, #0
     f64:	2301      	movs	r3, #1
     f66:	e60b      	b.n	b80 <__aeabi_dmul+0xc8>
     f68:	465a      	mov	r2, fp
     f6a:	4b1e      	ldr	r3, [pc, #120]	; (fe4 <__aeabi_dmul+0x52c>)
     f6c:	1bdb      	subs	r3, r3, r7
     f6e:	40da      	lsrs	r2, r3
     f70:	1c13      	adds	r3, r2, #0
     f72:	2d20      	cmp	r5, #32
     f74:	d01c      	beq.n	fb0 <__aeabi_dmul+0x4f8>
     f76:	4a1c      	ldr	r2, [pc, #112]	; (fe8 <__aeabi_dmul+0x530>)
     f78:	4694      	mov	ip, r2
     f7a:	465a      	mov	r2, fp
     f7c:	4467      	add	r7, ip
     f7e:	40ba      	lsls	r2, r7
     f80:	1c17      	adds	r7, r2, #0
     f82:	433e      	orrs	r6, r7
     f84:	1e72      	subs	r2, r6, #1
     f86:	4196      	sbcs	r6, r2
     f88:	431e      	orrs	r6, r3
     f8a:	2307      	movs	r3, #7
     f8c:	2500      	movs	r5, #0
     f8e:	4033      	ands	r3, r6
     f90:	d007      	beq.n	fa2 <__aeabi_dmul+0x4ea>
     f92:	230f      	movs	r3, #15
     f94:	2500      	movs	r5, #0
     f96:	4033      	ands	r3, r6
     f98:	2b04      	cmp	r3, #4
     f9a:	d1d6      	bne.n	f4a <__aeabi_dmul+0x492>
     f9c:	076b      	lsls	r3, r5, #29
     f9e:	026d      	lsls	r5, r5, #9
     fa0:	0b2d      	lsrs	r5, r5, #12
     fa2:	2401      	movs	r4, #1
     fa4:	08f6      	lsrs	r6, r6, #3
     fa6:	431e      	orrs	r6, r3
     fa8:	9b02      	ldr	r3, [sp, #8]
     faa:	401c      	ands	r4, r3
     fac:	2300      	movs	r3, #0
     fae:	e5e7      	b.n	b80 <__aeabi_dmul+0xc8>
     fb0:	2700      	movs	r7, #0
     fb2:	e7e6      	b.n	f82 <__aeabi_dmul+0x4ca>
     fb4:	2580      	movs	r5, #128	; 0x80
     fb6:	465b      	mov	r3, fp
     fb8:	2401      	movs	r4, #1
     fba:	032d      	lsls	r5, r5, #12
     fbc:	431d      	orrs	r5, r3
     fbe:	9b01      	ldr	r3, [sp, #4]
     fc0:	032d      	lsls	r5, r5, #12
     fc2:	4023      	ands	r3, r4
     fc4:	1c1c      	adds	r4, r3, #0
     fc6:	0b2d      	lsrs	r5, r5, #12
     fc8:	4b03      	ldr	r3, [pc, #12]	; (fd8 <__aeabi_dmul+0x520>)
     fca:	e5d9      	b.n	b80 <__aeabi_dmul+0xc8>
     fcc:	000003ff 	.word	0x000003ff
     fd0:	feffffff 	.word	0xfeffffff
     fd4:	000007fe 	.word	0x000007fe
     fd8:	000007ff 	.word	0x000007ff
     fdc:	fffffc02 	.word	0xfffffc02
     fe0:	0000041e 	.word	0x0000041e
     fe4:	fffffbe2 	.word	0xfffffbe2
     fe8:	0000043e 	.word	0x0000043e

00000fec <__aeabi_i2d>:
     fec:	b538      	push	{r3, r4, r5, lr}
     fee:	1e04      	subs	r4, r0, #0
     ff0:	d016      	beq.n	1020 <__aeabi_i2d+0x34>
     ff2:	0fc5      	lsrs	r5, r0, #31
     ff4:	d000      	beq.n	ff8 <__aeabi_i2d+0xc>
     ff6:	4244      	negs	r4, r0
     ff8:	1c20      	adds	r0, r4, #0
     ffa:	f000 f8c3 	bl	1184 <__clzsi2>
     ffe:	4b17      	ldr	r3, [pc, #92]	; (105c <__aeabi_i2d+0x70>)
    1000:	1a1b      	subs	r3, r3, r0
    1002:	280a      	cmp	r0, #10
    1004:	dc21      	bgt.n	104a <__aeabi_i2d+0x5e>
    1006:	1c02      	adds	r2, r0, #0
    1008:	1c21      	adds	r1, r4, #0
    100a:	3215      	adds	r2, #21
    100c:	4091      	lsls	r1, r2
    100e:	1c0a      	adds	r2, r1, #0
    1010:	210b      	movs	r1, #11
    1012:	1a08      	subs	r0, r1, r0
    1014:	40c4      	lsrs	r4, r0
    1016:	055b      	lsls	r3, r3, #21
    1018:	0324      	lsls	r4, r4, #12
    101a:	0b24      	lsrs	r4, r4, #12
    101c:	0d5b      	lsrs	r3, r3, #21
    101e:	e003      	b.n	1028 <__aeabi_i2d+0x3c>
    1020:	2500      	movs	r5, #0
    1022:	2300      	movs	r3, #0
    1024:	2400      	movs	r4, #0
    1026:	2200      	movs	r2, #0
    1028:	2100      	movs	r1, #0
    102a:	1c10      	adds	r0, r2, #0
    102c:	0324      	lsls	r4, r4, #12
    102e:	0d0a      	lsrs	r2, r1, #20
    1030:	0512      	lsls	r2, r2, #20
    1032:	0b24      	lsrs	r4, r4, #12
    1034:	4314      	orrs	r4, r2
    1036:	4a0a      	ldr	r2, [pc, #40]	; (1060 <__aeabi_i2d+0x74>)
    1038:	051b      	lsls	r3, r3, #20
    103a:	4014      	ands	r4, r2
    103c:	431c      	orrs	r4, r3
    103e:	0064      	lsls	r4, r4, #1
    1040:	07ed      	lsls	r5, r5, #31
    1042:	0864      	lsrs	r4, r4, #1
    1044:	432c      	orrs	r4, r5
    1046:	1c21      	adds	r1, r4, #0
    1048:	bd38      	pop	{r3, r4, r5, pc}
    104a:	380b      	subs	r0, #11
    104c:	4084      	lsls	r4, r0
    104e:	055b      	lsls	r3, r3, #21
    1050:	0324      	lsls	r4, r4, #12
    1052:	0b24      	lsrs	r4, r4, #12
    1054:	0d5b      	lsrs	r3, r3, #21
    1056:	2200      	movs	r2, #0
    1058:	e7e6      	b.n	1028 <__aeabi_i2d+0x3c>
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	0000041e 	.word	0x0000041e
    1060:	800fffff 	.word	0x800fffff

00001064 <__aeabi_d2f>:
    1064:	b570      	push	{r4, r5, r6, lr}
    1066:	030b      	lsls	r3, r1, #12
    1068:	004d      	lsls	r5, r1, #1
    106a:	0f44      	lsrs	r4, r0, #29
    106c:	0d6d      	lsrs	r5, r5, #21
    106e:	0a5b      	lsrs	r3, r3, #9
    1070:	4323      	orrs	r3, r4
    1072:	1c6c      	adds	r4, r5, #1
    1074:	0564      	lsls	r4, r4, #21
    1076:	0fc9      	lsrs	r1, r1, #31
    1078:	00c2      	lsls	r2, r0, #3
    107a:	0d64      	lsrs	r4, r4, #21
    107c:	2c01      	cmp	r4, #1
    107e:	dd2a      	ble.n	10d6 <__aeabi_d2f+0x72>
    1080:	4c3b      	ldr	r4, [pc, #236]	; (1170 <__aeabi_d2f+0x10c>)
    1082:	192c      	adds	r4, r5, r4
    1084:	2cfe      	cmp	r4, #254	; 0xfe
    1086:	dc1a      	bgt.n	10be <__aeabi_d2f+0x5a>
    1088:	2c00      	cmp	r4, #0
    108a:	dd35      	ble.n	10f8 <__aeabi_d2f+0x94>
    108c:	0180      	lsls	r0, r0, #6
    108e:	1e45      	subs	r5, r0, #1
    1090:	41a8      	sbcs	r0, r5
    1092:	00db      	lsls	r3, r3, #3
    1094:	4303      	orrs	r3, r0
    1096:	0f52      	lsrs	r2, r2, #29
    1098:	4313      	orrs	r3, r2
    109a:	075a      	lsls	r2, r3, #29
    109c:	d004      	beq.n	10a8 <__aeabi_d2f+0x44>
    109e:	220f      	movs	r2, #15
    10a0:	401a      	ands	r2, r3
    10a2:	2a04      	cmp	r2, #4
    10a4:	d000      	beq.n	10a8 <__aeabi_d2f+0x44>
    10a6:	3304      	adds	r3, #4
    10a8:	2280      	movs	r2, #128	; 0x80
    10aa:	04d2      	lsls	r2, r2, #19
    10ac:	401a      	ands	r2, r3
    10ae:	d027      	beq.n	1100 <__aeabi_d2f+0x9c>
    10b0:	3401      	adds	r4, #1
    10b2:	2cff      	cmp	r4, #255	; 0xff
    10b4:	d003      	beq.n	10be <__aeabi_d2f+0x5a>
    10b6:	019b      	lsls	r3, r3, #6
    10b8:	0a5b      	lsrs	r3, r3, #9
    10ba:	b2e4      	uxtb	r4, r4
    10bc:	e001      	b.n	10c2 <__aeabi_d2f+0x5e>
    10be:	24ff      	movs	r4, #255	; 0xff
    10c0:	2300      	movs	r3, #0
    10c2:	025b      	lsls	r3, r3, #9
    10c4:	05e4      	lsls	r4, r4, #23
    10c6:	0a5b      	lsrs	r3, r3, #9
    10c8:	4323      	orrs	r3, r4
    10ca:	005b      	lsls	r3, r3, #1
    10cc:	07c9      	lsls	r1, r1, #31
    10ce:	085b      	lsrs	r3, r3, #1
    10d0:	430b      	orrs	r3, r1
    10d2:	1c18      	adds	r0, r3, #0
    10d4:	bd70      	pop	{r4, r5, r6, pc}
    10d6:	2d00      	cmp	r5, #0
    10d8:	d106      	bne.n	10e8 <__aeabi_d2f+0x84>
    10da:	4313      	orrs	r3, r2
    10dc:	d10e      	bne.n	10fc <__aeabi_d2f+0x98>
    10de:	2400      	movs	r4, #0
    10e0:	025b      	lsls	r3, r3, #9
    10e2:	0a5b      	lsrs	r3, r3, #9
    10e4:	b2e4      	uxtb	r4, r4
    10e6:	e7ec      	b.n	10c2 <__aeabi_d2f+0x5e>
    10e8:	431a      	orrs	r2, r3
    10ea:	d0e8      	beq.n	10be <__aeabi_d2f+0x5a>
    10ec:	2080      	movs	r0, #128	; 0x80
    10ee:	00db      	lsls	r3, r3, #3
    10f0:	0480      	lsls	r0, r0, #18
    10f2:	4303      	orrs	r3, r0
    10f4:	24ff      	movs	r4, #255	; 0xff
    10f6:	e7d0      	b.n	109a <__aeabi_d2f+0x36>
    10f8:	3417      	adds	r4, #23
    10fa:	da0c      	bge.n	1116 <__aeabi_d2f+0xb2>
    10fc:	2305      	movs	r3, #5
    10fe:	2400      	movs	r4, #0
    1100:	08db      	lsrs	r3, r3, #3
    1102:	2cff      	cmp	r4, #255	; 0xff
    1104:	d1ec      	bne.n	10e0 <__aeabi_d2f+0x7c>
    1106:	2b00      	cmp	r3, #0
    1108:	d02d      	beq.n	1166 <__aeabi_d2f+0x102>
    110a:	2280      	movs	r2, #128	; 0x80
    110c:	03d2      	lsls	r2, r2, #15
    110e:	4313      	orrs	r3, r2
    1110:	025b      	lsls	r3, r3, #9
    1112:	0a5b      	lsrs	r3, r3, #9
    1114:	e7d5      	b.n	10c2 <__aeabi_d2f+0x5e>
    1116:	2480      	movs	r4, #128	; 0x80
    1118:	4816      	ldr	r0, [pc, #88]	; (1174 <__aeabi_d2f+0x110>)
    111a:	0424      	lsls	r4, r4, #16
    111c:	4323      	orrs	r3, r4
    111e:	1b40      	subs	r0, r0, r5
    1120:	281f      	cmp	r0, #31
    1122:	dc0d      	bgt.n	1140 <__aeabi_d2f+0xdc>
    1124:	4c14      	ldr	r4, [pc, #80]	; (1178 <__aeabi_d2f+0x114>)
    1126:	46a4      	mov	ip, r4
    1128:	4465      	add	r5, ip
    112a:	40ab      	lsls	r3, r5
    112c:	1c1c      	adds	r4, r3, #0
    112e:	1c13      	adds	r3, r2, #0
    1130:	40ab      	lsls	r3, r5
    1132:	1e5d      	subs	r5, r3, #1
    1134:	41ab      	sbcs	r3, r5
    1136:	40c2      	lsrs	r2, r0
    1138:	4323      	orrs	r3, r4
    113a:	4313      	orrs	r3, r2
    113c:	2400      	movs	r4, #0
    113e:	e7ac      	b.n	109a <__aeabi_d2f+0x36>
    1140:	1c1e      	adds	r6, r3, #0
    1142:	4c0e      	ldr	r4, [pc, #56]	; (117c <__aeabi_d2f+0x118>)
    1144:	1b64      	subs	r4, r4, r5
    1146:	40e6      	lsrs	r6, r4
    1148:	1c34      	adds	r4, r6, #0
    114a:	2820      	cmp	r0, #32
    114c:	d00d      	beq.n	116a <__aeabi_d2f+0x106>
    114e:	480c      	ldr	r0, [pc, #48]	; (1180 <__aeabi_d2f+0x11c>)
    1150:	4684      	mov	ip, r0
    1152:	4465      	add	r5, ip
    1154:	40ab      	lsls	r3, r5
    1156:	1c1d      	adds	r5, r3, #0
    1158:	432a      	orrs	r2, r5
    115a:	1e53      	subs	r3, r2, #1
    115c:	419a      	sbcs	r2, r3
    115e:	1c13      	adds	r3, r2, #0
    1160:	4323      	orrs	r3, r4
    1162:	2400      	movs	r4, #0
    1164:	e799      	b.n	109a <__aeabi_d2f+0x36>
    1166:	2300      	movs	r3, #0
    1168:	e7ab      	b.n	10c2 <__aeabi_d2f+0x5e>
    116a:	2500      	movs	r5, #0
    116c:	e7f4      	b.n	1158 <__aeabi_d2f+0xf4>
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	fffffc80 	.word	0xfffffc80
    1174:	0000039e 	.word	0x0000039e
    1178:	fffffc82 	.word	0xfffffc82
    117c:	0000037e 	.word	0x0000037e
    1180:	fffffca2 	.word	0xfffffca2

00001184 <__clzsi2>:
    1184:	211c      	movs	r1, #28
    1186:	2301      	movs	r3, #1
    1188:	041b      	lsls	r3, r3, #16
    118a:	4298      	cmp	r0, r3
    118c:	d301      	bcc.n	1192 <__clzsi2+0xe>
    118e:	0c00      	lsrs	r0, r0, #16
    1190:	3910      	subs	r1, #16
    1192:	0a1b      	lsrs	r3, r3, #8
    1194:	4298      	cmp	r0, r3
    1196:	d301      	bcc.n	119c <__clzsi2+0x18>
    1198:	0a00      	lsrs	r0, r0, #8
    119a:	3908      	subs	r1, #8
    119c:	091b      	lsrs	r3, r3, #4
    119e:	4298      	cmp	r0, r3
    11a0:	d301      	bcc.n	11a6 <__clzsi2+0x22>
    11a2:	0900      	lsrs	r0, r0, #4
    11a4:	3904      	subs	r1, #4
    11a6:	a202      	add	r2, pc, #8	; (adr r2, 11b0 <__clzsi2+0x2c>)
    11a8:	5c10      	ldrb	r0, [r2, r0]
    11aa:	1840      	adds	r0, r0, r1
    11ac:	4770      	bx	lr
    11ae:	46c0      	nop			; (mov r8, r8)
    11b0:	02020304 	.word	0x02020304
    11b4:	01010101 	.word	0x01010101
	...

000011c0 <__libc_init_array>:
    11c0:	b570      	push	{r4, r5, r6, lr}
    11c2:	4e0d      	ldr	r6, [pc, #52]	; (11f8 <__libc_init_array+0x38>)
    11c4:	4d0d      	ldr	r5, [pc, #52]	; (11fc <__libc_init_array+0x3c>)
    11c6:	2400      	movs	r4, #0
    11c8:	1bad      	subs	r5, r5, r6
    11ca:	10ad      	asrs	r5, r5, #2
    11cc:	d005      	beq.n	11da <__libc_init_array+0x1a>
    11ce:	00a3      	lsls	r3, r4, #2
    11d0:	58f3      	ldr	r3, [r6, r3]
    11d2:	3401      	adds	r4, #1
    11d4:	4798      	blx	r3
    11d6:	42a5      	cmp	r5, r4
    11d8:	d1f9      	bne.n	11ce <__libc_init_array+0xe>
    11da:	f000 f8d1 	bl	1380 <_init>
    11de:	4e08      	ldr	r6, [pc, #32]	; (1200 <__libc_init_array+0x40>)
    11e0:	4d08      	ldr	r5, [pc, #32]	; (1204 <__libc_init_array+0x44>)
    11e2:	2400      	movs	r4, #0
    11e4:	1bad      	subs	r5, r5, r6
    11e6:	10ad      	asrs	r5, r5, #2
    11e8:	d005      	beq.n	11f6 <__libc_init_array+0x36>
    11ea:	00a3      	lsls	r3, r4, #2
    11ec:	58f3      	ldr	r3, [r6, r3]
    11ee:	3401      	adds	r4, #1
    11f0:	4798      	blx	r3
    11f2:	42a5      	cmp	r5, r4
    11f4:	d1f9      	bne.n	11ea <__libc_init_array+0x2a>
    11f6:	bd70      	pop	{r4, r5, r6, pc}
    11f8:	0000138c 	.word	0x0000138c
    11fc:	0000138c 	.word	0x0000138c
    1200:	0000138c 	.word	0x0000138c
    1204:	00001394 	.word	0x00001394

00001208 <register_fini>:
    1208:	b508      	push	{r3, lr}
    120a:	4b03      	ldr	r3, [pc, #12]	; (1218 <register_fini+0x10>)
    120c:	2b00      	cmp	r3, #0
    120e:	d002      	beq.n	1216 <register_fini+0xe>
    1210:	4802      	ldr	r0, [pc, #8]	; (121c <register_fini+0x14>)
    1212:	f000 f805 	bl	1220 <atexit>
    1216:	bd08      	pop	{r3, pc}
    1218:	00000000 	.word	0x00000000
    121c:	00001231 	.word	0x00001231

00001220 <atexit>:
    1220:	b508      	push	{r3, lr}
    1222:	1c01      	adds	r1, r0, #0
    1224:	2200      	movs	r2, #0
    1226:	2000      	movs	r0, #0
    1228:	2300      	movs	r3, #0
    122a:	f000 f81b 	bl	1264 <__register_exitproc>
    122e:	bd08      	pop	{r3, pc}

00001230 <__libc_fini_array>:
    1230:	b538      	push	{r3, r4, r5, lr}
    1232:	4b09      	ldr	r3, [pc, #36]	; (1258 <__libc_fini_array+0x28>)
    1234:	4c09      	ldr	r4, [pc, #36]	; (125c <__libc_fini_array+0x2c>)
    1236:	1ae4      	subs	r4, r4, r3
    1238:	10a4      	asrs	r4, r4, #2
    123a:	d009      	beq.n	1250 <__libc_fini_array+0x20>
    123c:	4a08      	ldr	r2, [pc, #32]	; (1260 <__libc_fini_array+0x30>)
    123e:	18a5      	adds	r5, r4, r2
    1240:	00ad      	lsls	r5, r5, #2
    1242:	18ed      	adds	r5, r5, r3
    1244:	682b      	ldr	r3, [r5, #0]
    1246:	3c01      	subs	r4, #1
    1248:	4798      	blx	r3
    124a:	3d04      	subs	r5, #4
    124c:	2c00      	cmp	r4, #0
    124e:	d1f9      	bne.n	1244 <__libc_fini_array+0x14>
    1250:	f000 f8a0 	bl	1394 <_fini>
    1254:	bd38      	pop	{r3, r4, r5, pc}
    1256:	46c0      	nop			; (mov r8, r8)
    1258:	000013a0 	.word	0x000013a0
    125c:	000013a4 	.word	0x000013a4
    1260:	3fffffff 	.word	0x3fffffff

00001264 <__register_exitproc>:
    1264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1266:	4644      	mov	r4, r8
    1268:	465f      	mov	r7, fp
    126a:	4656      	mov	r6, sl
    126c:	464d      	mov	r5, r9
    126e:	469b      	mov	fp, r3
    1270:	4b2f      	ldr	r3, [pc, #188]	; (1330 <__register_exitproc+0xcc>)
    1272:	b4f0      	push	{r4, r5, r6, r7}
    1274:	681c      	ldr	r4, [r3, #0]
    1276:	23a4      	movs	r3, #164	; 0xa4
    1278:	005b      	lsls	r3, r3, #1
    127a:	1c05      	adds	r5, r0, #0
    127c:	58e0      	ldr	r0, [r4, r3]
    127e:	1c0e      	adds	r6, r1, #0
    1280:	4690      	mov	r8, r2
    1282:	2800      	cmp	r0, #0
    1284:	d04b      	beq.n	131e <__register_exitproc+0xba>
    1286:	6843      	ldr	r3, [r0, #4]
    1288:	2b1f      	cmp	r3, #31
    128a:	dc0d      	bgt.n	12a8 <__register_exitproc+0x44>
    128c:	1c5c      	adds	r4, r3, #1
    128e:	2d00      	cmp	r5, #0
    1290:	d121      	bne.n	12d6 <__register_exitproc+0x72>
    1292:	3302      	adds	r3, #2
    1294:	009b      	lsls	r3, r3, #2
    1296:	6044      	str	r4, [r0, #4]
    1298:	501e      	str	r6, [r3, r0]
    129a:	2000      	movs	r0, #0
    129c:	bc3c      	pop	{r2, r3, r4, r5}
    129e:	4690      	mov	r8, r2
    12a0:	4699      	mov	r9, r3
    12a2:	46a2      	mov	sl, r4
    12a4:	46ab      	mov	fp, r5
    12a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12a8:	4b22      	ldr	r3, [pc, #136]	; (1334 <__register_exitproc+0xd0>)
    12aa:	2b00      	cmp	r3, #0
    12ac:	d03c      	beq.n	1328 <__register_exitproc+0xc4>
    12ae:	20c8      	movs	r0, #200	; 0xc8
    12b0:	0040      	lsls	r0, r0, #1
    12b2:	e000      	b.n	12b6 <__register_exitproc+0x52>
    12b4:	bf00      	nop
    12b6:	2800      	cmp	r0, #0
    12b8:	d036      	beq.n	1328 <__register_exitproc+0xc4>
    12ba:	22a4      	movs	r2, #164	; 0xa4
    12bc:	2300      	movs	r3, #0
    12be:	0052      	lsls	r2, r2, #1
    12c0:	58a1      	ldr	r1, [r4, r2]
    12c2:	6043      	str	r3, [r0, #4]
    12c4:	6001      	str	r1, [r0, #0]
    12c6:	50a0      	str	r0, [r4, r2]
    12c8:	3240      	adds	r2, #64	; 0x40
    12ca:	5083      	str	r3, [r0, r2]
    12cc:	3204      	adds	r2, #4
    12ce:	5083      	str	r3, [r0, r2]
    12d0:	2401      	movs	r4, #1
    12d2:	2d00      	cmp	r5, #0
    12d4:	d0dd      	beq.n	1292 <__register_exitproc+0x2e>
    12d6:	009a      	lsls	r2, r3, #2
    12d8:	4691      	mov	r9, r2
    12da:	4481      	add	r9, r0
    12dc:	4642      	mov	r2, r8
    12de:	2188      	movs	r1, #136	; 0x88
    12e0:	464f      	mov	r7, r9
    12e2:	507a      	str	r2, [r7, r1]
    12e4:	22c4      	movs	r2, #196	; 0xc4
    12e6:	0052      	lsls	r2, r2, #1
    12e8:	4690      	mov	r8, r2
    12ea:	4480      	add	r8, r0
    12ec:	4642      	mov	r2, r8
    12ee:	3987      	subs	r1, #135	; 0x87
    12f0:	4099      	lsls	r1, r3
    12f2:	6812      	ldr	r2, [r2, #0]
    12f4:	468a      	mov	sl, r1
    12f6:	430a      	orrs	r2, r1
    12f8:	4694      	mov	ip, r2
    12fa:	4642      	mov	r2, r8
    12fc:	4661      	mov	r1, ip
    12fe:	6011      	str	r1, [r2, #0]
    1300:	2284      	movs	r2, #132	; 0x84
    1302:	4649      	mov	r1, r9
    1304:	465f      	mov	r7, fp
    1306:	0052      	lsls	r2, r2, #1
    1308:	508f      	str	r7, [r1, r2]
    130a:	2d02      	cmp	r5, #2
    130c:	d1c1      	bne.n	1292 <__register_exitproc+0x2e>
    130e:	1c02      	adds	r2, r0, #0
    1310:	4655      	mov	r5, sl
    1312:	328d      	adds	r2, #141	; 0x8d
    1314:	32ff      	adds	r2, #255	; 0xff
    1316:	6811      	ldr	r1, [r2, #0]
    1318:	430d      	orrs	r5, r1
    131a:	6015      	str	r5, [r2, #0]
    131c:	e7b9      	b.n	1292 <__register_exitproc+0x2e>
    131e:	1c20      	adds	r0, r4, #0
    1320:	304d      	adds	r0, #77	; 0x4d
    1322:	30ff      	adds	r0, #255	; 0xff
    1324:	50e0      	str	r0, [r4, r3]
    1326:	e7ae      	b.n	1286 <__register_exitproc+0x22>
    1328:	2001      	movs	r0, #1
    132a:	4240      	negs	r0, r0
    132c:	e7b6      	b.n	129c <__register_exitproc+0x38>
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	0000137c 	.word	0x0000137c
    1334:	00000000 	.word	0x00000000
    1338:	00000ca4 	.word	0x00000ca4
    133c:	00000c82 	.word	0x00000c82
    1340:	00000c82 	.word	0x00000c82
    1344:	00000c76 	.word	0x00000c76
    1348:	00000b6a 	.word	0x00000b6a
    134c:	00000b6a 	.word	0x00000b6a
    1350:	00000c6a 	.word	0x00000c6a
    1354:	00000c76 	.word	0x00000c76
    1358:	00000b6a 	.word	0x00000b6a
    135c:	00000c6a 	.word	0x00000c6a
    1360:	00000b6a 	.word	0x00000b6a
    1364:	00000c76 	.word	0x00000c76
    1368:	00000b6e 	.word	0x00000b6e
    136c:	00000b6e 	.word	0x00000b6e
    1370:	00000b6e 	.word	0x00000b6e
    1374:	00000e84 	.word	0x00000e84
    1378:	00000043 	.word	0x00000043

0000137c <_global_impure_ptr>:
    137c:	20000010                                ... 

00001380 <_init>:
    1380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1382:	46c0      	nop			; (mov r8, r8)
    1384:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1386:	bc08      	pop	{r3}
    1388:	469e      	mov	lr, r3
    138a:	4770      	bx	lr

0000138c <__init_array_start>:
    138c:	00001209 	.word	0x00001209

00001390 <__frame_dummy_init_array_entry>:
    1390:	000000dd                                ....

00001394 <_fini>:
    1394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	bcf8      	pop	{r3, r4, r5, r6, r7}
    139a:	bc08      	pop	{r3}
    139c:	469e      	mov	lr, r3
    139e:	4770      	bx	lr

000013a0 <__fini_array_start>:
    13a0:	000000b5 	.word	0x000000b5

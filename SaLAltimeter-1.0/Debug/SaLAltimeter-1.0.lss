
SaLAltimeter-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003418  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00003418  00003418  0000b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000008  20000000  00003420  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005710  20000008  00003428  00010008  2**2
                  ALLOC
  4 .stack        00002000  20005718  00008b38  00010008  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY
  7 .debug_info   00013c48  00000000  00000000  0001008b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e06  00000000  00000000  00023cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001e37  00000000  00000000  00025ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000300  00000000  00000000  00027910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000350  00000000  00000000  00027c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000151c6  00000000  00000000  00027f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000075b6  00000000  00000000  0003d126  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006fc9d  00000000  00000000  000446dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000acc  00000000  00000000  000b437c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20007718 	.word	0x20007718
       4:	00000f45 	.word	0x00000f45
       8:	00000f3d 	.word	0x00000f3d
       c:	00000f3d 	.word	0x00000f3d
	...
      2c:	00000f3d 	.word	0x00000f3d
	...
      38:	00000f3d 	.word	0x00000f3d
      3c:	00000f3d 	.word	0x00000f3d
      40:	00000f3d 	.word	0x00000f3d
      44:	00000f3d 	.word	0x00000f3d
      48:	00000f3d 	.word	0x00000f3d
      4c:	00000a71 	.word	0x00000a71
      50:	00000f3d 	.word	0x00000f3d
      54:	00000f3d 	.word	0x00000f3d
      58:	00000f3d 	.word	0x00000f3d
      5c:	00000f3d 	.word	0x00000f3d
      60:	00000f3d 	.word	0x00000f3d
      64:	00000f3d 	.word	0x00000f3d
      68:	00000f3d 	.word	0x00000f3d
      6c:	00000f3d 	.word	0x00000f3d
      70:	00000f3d 	.word	0x00000f3d
      74:	00000f3d 	.word	0x00000f3d
      78:	00000f3d 	.word	0x00000f3d
      7c:	00000f3d 	.word	0x00000f3d
      80:	00000f3d 	.word	0x00000f3d
      84:	00000f3d 	.word	0x00000f3d
      88:	00000f3d 	.word	0x00000f3d
      8c:	000010a1 	.word	0x000010a1
      90:	0000107d 	.word	0x0000107d
	...
      9c:	00000f3d 	.word	0x00000f3d
      a0:	00000f3d 	.word	0x00000f3d
      a4:	00000f3d 	.word	0x00000f3d
      a8:	00000f3d 	.word	0x00000f3d
      ac:	00000f3d 	.word	0x00000f3d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	00003420 	.word	0x00003420

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00003420 	.word	0x00003420
     108:	2000000c 	.word	0x2000000c
     10c:	00003420 	.word	0x00003420
     110:	00000000 	.word	0x00000000

00000114 <getADXL345Event>:
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATA_FORMAT);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,_cmd);
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
}

void getADXL345Event(uint8_t *values) {
     114:	b570      	push	{r4, r5, r6, lr}
     116:	1c05      	adds	r5, r0, #0


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     118:	2280      	movs	r2, #128	; 0x80
     11a:	0252      	lsls	r2, r2, #9
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <getADXL345Event+0x34>)
     11e:	615a      	str	r2, [r3, #20]

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
     120:	200f      	movs	r0, #15
     122:	210d      	movs	r1, #13
     124:	22f2      	movs	r2, #242	; 0xf2
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <getADXL345Event+0x38>)
     128:	4798      	blx	r3
     12a:	1c2c      	adds	r4, r5, #0
     12c:	3506      	adds	r5, #6
    for (uint8_t i = 0; i < 6; i++) {
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
     12e:	4e08      	ldr	r6, [pc, #32]	; (150 <getADXL345Event+0x3c>)
     130:	200f      	movs	r0, #15
     132:	210e      	movs	r1, #14
     134:	47b0      	blx	r6
     136:	7020      	strb	r0, [r4, #0]
     138:	3401      	adds	r4, #1

void getADXL345Event(uint8_t *values) {

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
    for (uint8_t i = 0; i < 6; i++) {
     13a:	42ac      	cmp	r4, r5
     13c:	d1f8      	bne.n	130 <getADXL345Event+0x1c>
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     13e:	2280      	movs	r2, #128	; 0x80
     140:	0252      	lsls	r2, r2, #9
     142:	4b01      	ldr	r3, [pc, #4]	; (148 <getADXL345Event+0x34>)
     144:	619a      	str	r2, [r3, #24]
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
    }
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
}
     146:	bd70      	pop	{r4, r5, r6, pc}
     148:	41004400 	.word	0x41004400
     14c:	00000815 	.word	0x00000815
     150:	00000875 	.word	0x00000875

00000154 <readMS5607AdcResults>:

    return _receive;

}

uint32_t readMS5607AdcResults(){
     154:	b5f0      	push	{r4, r5, r6, r7, lr}
     156:	4647      	mov	r7, r8
     158:	b480      	push	{r7}
    } else {
        port->OUTCLR.reg = pin_mask;
     15a:	4f0f      	ldr	r7, [pc, #60]	; (198 <readMS5607AdcResults+0x44>)
     15c:	2480      	movs	r4, #128	; 0x80
     15e:	00a4      	lsls	r4, r4, #2
     160:	617c      	str	r4, [r7, #20]
	
	 SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
	 byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,cmdAdcRead_);
     162:	200f      	movs	r0, #15
     164:	210d      	movs	r1, #13
     166:	2200      	movs	r2, #0
     168:	4b0c      	ldr	r3, [pc, #48]	; (19c <readMS5607AdcResults+0x48>)
     16a:	4798      	blx	r3
	  uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     16c:	200f      	movs	r0, #15
     16e:	210e      	movs	r1, #14
     170:	4e0b      	ldr	r6, [pc, #44]	; (1a0 <readMS5607AdcResults+0x4c>)
     172:	47b0      	blx	r6
     174:	1c05      	adds	r5, r0, #0
	  uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     176:	200f      	movs	r0, #15
     178:	210e      	movs	r1, #14
     17a:	47b0      	blx	r6
     17c:	4680      	mov	r8, r0
	  uint8_t _byte3 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     17e:	200f      	movs	r0, #15
     180:	210e      	movs	r1, #14
     182:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     184:	61bc      	str	r4, [r7, #24]
	 SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
	 
	 uint32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     186:	042d      	lsls	r5, r5, #16
     188:	4643      	mov	r3, r8
     18a:	021c      	lsls	r4, r3, #8
     18c:	432c      	orrs	r4, r5
     18e:	4320      	orrs	r0, r4
	 return _receive;
}
     190:	bc04      	pop	{r2}
     192:	4690      	mov	r8, r2
     194:	bdf0      	pop	{r4, r5, r6, r7, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	41004400 	.word	0x41004400
     19c:	00000815 	.word	0x00000815
     1a0:	00000875 	.word	0x00000875

000001a4 <getMS5607Coeff>:

void getMS5607Coeff(uint16_t *coefficients) {
     1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1a6:	465f      	mov	r7, fp
     1a8:	4656      	mov	r6, sl
     1aa:	464d      	mov	r5, r9
     1ac:	4644      	mov	r4, r8
     1ae:	b4f0      	push	{r4, r5, r6, r7}
     1b0:	4681      	mov	r9, r0
     1b2:	2400      	movs	r4, #0

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     1b4:	4f15      	ldr	r7, [pc, #84]	; (20c <getMS5607Coeff+0x68>)
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <getMS5607Coeff+0x6c>)
     1b8:	4698      	mov	r8, r3
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1ba:	4e16      	ldr	r6, [pc, #88]	; (214 <getMS5607Coeff+0x70>)
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     1bc:	2596      	movs	r5, #150	; 0x96
     1be:	00ad      	lsls	r5, r5, #2
     1c0:	1c28      	adds	r0, r5, #0
     1c2:	47b8      	blx	r7
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     1c4:	1c28      	adds	r0, r5, #0
     1c6:	47b8      	blx	r7
    } else {
        port->OUTCLR.reg = pin_mask;
     1c8:	4d13      	ldr	r5, [pc, #76]	; (218 <getMS5607Coeff+0x74>)
     1ca:	2380      	movs	r3, #128	; 0x80
     1cc:	009b      	lsls	r3, r3, #2
     1ce:	469b      	mov	fp, r3
     1d0:	616b      	str	r3, [r5, #20]
     1d2:	1c22      	adds	r2, r4, #0
     1d4:	3a5e      	subs	r2, #94	; 0x5e
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     1d6:	b2d2      	uxtb	r2, r2
     1d8:	200f      	movs	r0, #15
     1da:	210d      	movs	r1, #13
     1dc:	47c0      	blx	r8
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1de:	200f      	movs	r0, #15
     1e0:	210e      	movs	r1, #14
     1e2:	47b0      	blx	r6
     1e4:	4682      	mov	sl, r0
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1e6:	200f      	movs	r0, #15
     1e8:	210e      	movs	r1, #14
     1ea:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     1ec:	465b      	mov	r3, fp
     1ee:	61ab      	str	r3, [r5, #24]
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
     1f0:	4653      	mov	r3, sl
     1f2:	021d      	lsls	r5, r3, #8
     1f4:	4328      	orrs	r0, r5
     1f6:	464b      	mov	r3, r9
     1f8:	5318      	strh	r0, [r3, r4]
     1fa:	3402      	adds	r4, #2
	 return _receive;
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     1fc:	2c0c      	cmp	r4, #12
     1fe:	d1dd      	bne.n	1bc <getMS5607Coeff+0x18>
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
     200:	bc3c      	pop	{r2, r3, r4, r5}
     202:	4690      	mov	r8, r2
     204:	4699      	mov	r9, r3
     206:	46a2      	mov	sl, r4
     208:	46ab      	mov	fp, r5
     20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     20c:	00000aed 	.word	0x00000aed
     210:	00000815 	.word	0x00000815
     214:	00000875 	.word	0x00000875
     218:	41004400 	.word	0x41004400

0000021c <ConvertPressureTemperature>:
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	4647      	mov	r7, r8
     220:	b480      	push	{r7}
     222:	b082      	sub	sp, #8
     224:	4690      	mov	r8, r2
    const uint64_t C4 = (uint64_t)(*(coefficients + 3));
    const uint64_t C5 = (uint64_t)(*(coefficients + 4));
    const uint64_t C6 = (uint64_t)(*(coefficients + 5));

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
     226:	8917      	ldrh	r7, [r2, #8]
     228:	023f      	lsls	r7, r7, #8
     22a:	680b      	ldr	r3, [r1, #0]
     22c:	1bdf      	subs	r7, r3, r7
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     22e:	17fb      	asrs	r3, r7, #31
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     230:	6804      	ldr	r4, [r0, #0]
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
    const uint64_t C3 = (uint64_t)(*(coefficients + 2));
     232:	8892      	ldrh	r2, [r2, #4]
    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
     234:	4e1c      	ldr	r6, [pc, #112]	; (2a8 <ConvertPressureTemperature+0x8c>)
     236:	1c38      	adds	r0, r7, #0
     238:	9301      	str	r3, [sp, #4]
     23a:	1c19      	adds	r1, r3, #0
     23c:	2300      	movs	r3, #0
     23e:	47b0      	blx	r6
     240:	064d      	lsls	r5, r1, #25
     242:	09c2      	lsrs	r2, r0, #7
     244:	432a      	orrs	r2, r5
     246:	09cb      	lsrs	r3, r1, #7
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
     248:	4640      	mov	r0, r8
     24a:	8805      	ldrh	r5, [r0, #0]
    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
     24c:	2100      	movs	r1, #0
     24e:	0428      	lsls	r0, r5, #16
     250:	1812      	adds	r2, r2, r0
     252:	414b      	adcs	r3, r1
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     254:	1c20      	adds	r0, r4, #0
     256:	2100      	movs	r1, #0
     258:	47b0      	blx	r6
     25a:	17cc      	asrs	r4, r1, #31
     25c:	0ae2      	lsrs	r2, r4, #11
     25e:	2300      	movs	r3, #0
     260:	1880      	adds	r0, r0, r2
     262:	4159      	adcs	r1, r3
     264:	02cb      	lsls	r3, r1, #11
     266:	0d44      	lsrs	r4, r0, #21
     268:	431c      	orrs	r4, r3
     26a:	154d      	asrs	r5, r1, #21
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
    const uint64_t C3 = (uint64_t)(*(coefficients + 2));
    const uint64_t C4 = (uint64_t)(*(coefficients + 3));
     26c:	4642      	mov	r2, r8
     26e:	88d2      	ldrh	r2, [r2, #6]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     270:	1c38      	adds	r0, r7, #0
     272:	9901      	ldr	r1, [sp, #4]
     274:	2300      	movs	r3, #0
     276:	47b0      	blx	r6
     278:	068b      	lsls	r3, r1, #26
     27a:	0986      	lsrs	r6, r0, #6
     27c:	431e      	orrs	r6, r3
     27e:	098f      	lsrs	r7, r1, #6
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
     280:	4643      	mov	r3, r8
     282:	8859      	ldrh	r1, [r3, #2]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     284:	0bcb      	lsrs	r3, r1, #15
     286:	044a      	lsls	r2, r1, #17
     288:	1992      	adds	r2, r2, r6
     28a:	417b      	adcs	r3, r7
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     28c:	1aa4      	subs	r4, r4, r2
     28e:	419d      	sbcs	r5, r3
     290:	17eb      	asrs	r3, r5, #31
     292:	0c58      	lsrs	r0, r3, #17
     294:	2100      	movs	r1, #0
     296:	1824      	adds	r4, r4, r0
     298:	414d      	adcs	r5, r1
     29a:	046b      	lsls	r3, r5, #17
     29c:	0be0      	lsrs	r0, r4, #15
     29e:	4318      	orrs	r0, r3
    return press;
}
     2a0:	b002      	add	sp, #8
     2a2:	bc04      	pop	{r2}
     2a4:	4690      	mov	r8, r2
     2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a8:	0000143d 	.word	0x0000143d

000002ac <pascalToCent>:

    double altFeet = (1-pow((pressMillibar/1013.25),(0.190284)))*145366.45;
    return (float)altFeet;
}

uint32_t pascalToCent(const int32_t pressurePa) {
     2ac:	b530      	push	{r4, r5, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    if (pressurePa > PA_INIT)
     2ae:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <pascalToCent+0x38>)
     2b0:	4298      	cmp	r0, r3
     2b2:	dc12      	bgt.n	2da <pascalToCent+0x2e>
        return lookupTable[0];
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
     2b4:	1a1b      	subs	r3, r3, r0
     2b6:	129b      	asrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     2b8:	2b4b      	cmp	r3, #75	; 0x4b
     2ba:	dc10      	bgt.n	2de <pascalToCent+0x32>
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     2bc:	4c0a      	ldr	r4, [pc, #40]	; (2e8 <pascalToCent+0x3c>)
     2be:	009a      	lsls	r2, r3, #2
     2c0:	5912      	ldr	r2, [r2, r4]
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
     2c2:	029d      	lsls	r5, r3, #10
     2c4:	4907      	ldr	r1, [pc, #28]	; (2e4 <pascalToCent+0x38>)
     2c6:	1b49      	subs	r1, r1, r5
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
     2c8:	1a08      	subs	r0, r1, r0
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     2ca:	3301      	adds	r3, #1
     2cc:	009b      	lsls	r3, r3, #2
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
     2ce:	591b      	ldr	r3, [r3, r4]
     2d0:	1a9b      	subs	r3, r3, r2
     2d2:	4358      	muls	r0, r3
     2d4:	1280      	asrs	r0, r0, #10
     2d6:	1880      	adds	r0, r0, r2
     2d8:	e002      	b.n	2e0 <pascalToCent+0x34>
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    if (pressurePa > PA_INIT)
        return lookupTable[0];
     2da:	4804      	ldr	r0, [pc, #16]	; (2ec <pascalToCent+0x40>)
     2dc:	e000      	b.n	2e0 <pascalToCent+0x34>
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
     2de:	4804      	ldr	r0, [pc, #16]	; (2f0 <pascalToCent+0x44>)
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
        }
    }
     2e0:	bd30      	pop	{r4, r5, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	000199cc 	.word	0x000199cc
     2e8:	00003200 	.word	0x00003200
     2ec:	ffff8d20 	.word	0xffff8d20
     2f0:	000f048e 	.word	0x000f048e

000002f4 <accelSample>:
int16_t Z;
float Xf;
float Yf;
float Zf;

bool accelSample() {
     2f4:	b510      	push	{r4, lr}

    switch(accelSampleState) {
     2f6:	4b4b      	ldr	r3, [pc, #300]	; (424 <accelSample+0x130>)
     2f8:	781a      	ldrb	r2, [r3, #0]
     2fa:	2a07      	cmp	r2, #7
     2fc:	d803      	bhi.n	306 <accelSample+0x12>
     2fe:	0093      	lsls	r3, r2, #2
     300:	4a49      	ldr	r2, [pc, #292]	; (428 <accelSample+0x134>)
     302:	58d3      	ldr	r3, [r2, r3]
     304:	469f      	mov	pc, r3

        return true;
        break;
		
    default:
        return false;
     306:	2000      	movs	r0, #0
     308:	e08a      	b.n	420 <accelSample+0x12c>

bool accelSample() {

    switch(accelSampleState) {
    case accelSampleEmpty:
        getADXL345Event(&regAccelData[0]);
     30a:	4848      	ldr	r0, [pc, #288]	; (42c <accelSample+0x138>)
     30c:	4b48      	ldr	r3, [pc, #288]	; (430 <accelSample+0x13c>)
     30e:	4798      	blx	r3
        accelSampleState++;
     310:	4a44      	ldr	r2, [pc, #272]	; (424 <accelSample+0x130>)
     312:	7813      	ldrb	r3, [r2, #0]
     314:	3301      	adds	r3, #1
     316:	7013      	strb	r3, [r2, #0]
        return false;
     318:	2000      	movs	r0, #0
     31a:	e081      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     31c:	4b43      	ldr	r3, [pc, #268]	; (42c <accelSample+0x138>)
     31e:	785b      	ldrb	r3, [r3, #1]
    if (negative) {
     320:	b25a      	sxtb	r2, r3
     322:	2a00      	cmp	r2, #0
     324:	da07      	bge.n	336 <accelSample+0x42>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     326:	4a43      	ldr	r2, [pc, #268]	; (434 <accelSample+0x140>)
     328:	4313      	orrs	r3, r2
     32a:	021b      	lsls	r3, r3, #8
     32c:	4a3f      	ldr	r2, [pc, #252]	; (42c <accelSample+0x138>)
     32e:	7812      	ldrb	r2, [r2, #0]
     330:	4313      	orrs	r3, r2
     332:	b29b      	uxth	r3, r3
     334:	e004      	b.n	340 <accelSample+0x4c>
    } else {
        result = (*(values + 1) << 8) + *values;
     336:	021b      	lsls	r3, r3, #8
     338:	4a3c      	ldr	r2, [pc, #240]	; (42c <accelSample+0x138>)
     33a:	7812      	ldrb	r2, [r2, #0]
     33c:	18d3      	adds	r3, r2, r3
     33e:	b29b      	uxth	r3, r3
        break;
    case accelSampleretreaved:
        X = Convert2C(&regAccelData[0]);
     340:	4a3d      	ldr	r2, [pc, #244]	; (438 <accelSample+0x144>)
     342:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     344:	2202      	movs	r2, #2
     346:	4b37      	ldr	r3, [pc, #220]	; (424 <accelSample+0x130>)
     348:	701a      	strb	r2, [r3, #0]
        return false;
     34a:	2000      	movs	r0, #0
     34c:	e068      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     34e:	4b37      	ldr	r3, [pc, #220]	; (42c <accelSample+0x138>)
     350:	78db      	ldrb	r3, [r3, #3]
    if (negative) {
     352:	b25a      	sxtb	r2, r3
     354:	2a00      	cmp	r2, #0
     356:	da07      	bge.n	368 <accelSample+0x74>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     358:	4a36      	ldr	r2, [pc, #216]	; (434 <accelSample+0x140>)
     35a:	4313      	orrs	r3, r2
     35c:	021b      	lsls	r3, r3, #8
     35e:	4a33      	ldr	r2, [pc, #204]	; (42c <accelSample+0x138>)
     360:	7892      	ldrb	r2, [r2, #2]
     362:	4313      	orrs	r3, r2
     364:	b29b      	uxth	r3, r3
     366:	e004      	b.n	372 <accelSample+0x7e>
    } else {
        result = (*(values + 1) << 8) + *values;
     368:	021b      	lsls	r3, r3, #8
     36a:	4a30      	ldr	r2, [pc, #192]	; (42c <accelSample+0x138>)
     36c:	7892      	ldrb	r2, [r2, #2]
     36e:	18d3      	adds	r3, r2, r3
     370:	b29b      	uxth	r3, r3
        break;
    case accelSampleXIntConverted:
        Y = Convert2C(&regAccelData[2]);
     372:	4a32      	ldr	r2, [pc, #200]	; (43c <accelSample+0x148>)
     374:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     376:	2203      	movs	r2, #3
     378:	4b2a      	ldr	r3, [pc, #168]	; (424 <accelSample+0x130>)
     37a:	701a      	strb	r2, [r3, #0]
        return false;
     37c:	2000      	movs	r0, #0
     37e:	e04f      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     380:	4b2a      	ldr	r3, [pc, #168]	; (42c <accelSample+0x138>)
     382:	795b      	ldrb	r3, [r3, #5]
    if (negative) {
     384:	b25a      	sxtb	r2, r3
     386:	2a00      	cmp	r2, #0
     388:	da07      	bge.n	39a <accelSample+0xa6>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     38a:	4a2a      	ldr	r2, [pc, #168]	; (434 <accelSample+0x140>)
     38c:	4313      	orrs	r3, r2
     38e:	021b      	lsls	r3, r3, #8
     390:	4a26      	ldr	r2, [pc, #152]	; (42c <accelSample+0x138>)
     392:	7912      	ldrb	r2, [r2, #4]
     394:	4313      	orrs	r3, r2
     396:	b29b      	uxth	r3, r3
     398:	e004      	b.n	3a4 <accelSample+0xb0>
    } else {
        result = (*(values + 1) << 8) + *values;
     39a:	021b      	lsls	r3, r3, #8
     39c:	4a23      	ldr	r2, [pc, #140]	; (42c <accelSample+0x138>)
     39e:	7912      	ldrb	r2, [r2, #4]
     3a0:	18d3      	adds	r3, r2, r3
     3a2:	b29b      	uxth	r3, r3
        break;
    case accelSampleYIntConverted:
        Z = Convert2C(&regAccelData[4]);
     3a4:	4a26      	ldr	r2, [pc, #152]	; (440 <accelSample+0x14c>)
     3a6:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     3a8:	2204      	movs	r2, #4
     3aa:	4b1e      	ldr	r3, [pc, #120]	; (424 <accelSample+0x130>)
     3ac:	701a      	strb	r2, [r3, #0]
        return false;
     3ae:	2000      	movs	r0, #0
     3b0:	e036      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleZIntConverted:
        Xf = X * ADXL345_MG2G_MULTIPLIER;
     3b2:	4b21      	ldr	r3, [pc, #132]	; (438 <accelSample+0x144>)
     3b4:	2000      	movs	r0, #0
     3b6:	5e18      	ldrsh	r0, [r3, r0]
     3b8:	4b22      	ldr	r3, [pc, #136]	; (444 <accelSample+0x150>)
     3ba:	4798      	blx	r3
     3bc:	4a22      	ldr	r2, [pc, #136]	; (448 <accelSample+0x154>)
     3be:	4b23      	ldr	r3, [pc, #140]	; (44c <accelSample+0x158>)
     3c0:	4c23      	ldr	r4, [pc, #140]	; (450 <accelSample+0x15c>)
     3c2:	47a0      	blx	r4
     3c4:	4b23      	ldr	r3, [pc, #140]	; (454 <accelSample+0x160>)
     3c6:	4798      	blx	r3
     3c8:	4b23      	ldr	r3, [pc, #140]	; (458 <accelSample+0x164>)
     3ca:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     3cc:	2205      	movs	r2, #5
     3ce:	4b15      	ldr	r3, [pc, #84]	; (424 <accelSample+0x130>)
     3d0:	701a      	strb	r2, [r3, #0]
        return false;
     3d2:	2000      	movs	r0, #0
     3d4:	e024      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleXFloatConverted:
        Yf = Y * ADXL345_MG2G_MULTIPLIER;
     3d6:	4b19      	ldr	r3, [pc, #100]	; (43c <accelSample+0x148>)
     3d8:	2000      	movs	r0, #0
     3da:	5e18      	ldrsh	r0, [r3, r0]
     3dc:	4b19      	ldr	r3, [pc, #100]	; (444 <accelSample+0x150>)
     3de:	4798      	blx	r3
     3e0:	4a19      	ldr	r2, [pc, #100]	; (448 <accelSample+0x154>)
     3e2:	4b1a      	ldr	r3, [pc, #104]	; (44c <accelSample+0x158>)
     3e4:	4c1a      	ldr	r4, [pc, #104]	; (450 <accelSample+0x15c>)
     3e6:	47a0      	blx	r4
     3e8:	4b1a      	ldr	r3, [pc, #104]	; (454 <accelSample+0x160>)
     3ea:	4798      	blx	r3
     3ec:	4b1b      	ldr	r3, [pc, #108]	; (45c <accelSample+0x168>)
     3ee:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     3f0:	2206      	movs	r2, #6
     3f2:	4b0c      	ldr	r3, [pc, #48]	; (424 <accelSample+0x130>)
     3f4:	701a      	strb	r2, [r3, #0]
        return false;
     3f6:	2000      	movs	r0, #0
     3f8:	e012      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleYFloatConverted:
        Zf = Z * ADXL345_MG2G_MULTIPLIER;
     3fa:	4b11      	ldr	r3, [pc, #68]	; (440 <accelSample+0x14c>)
     3fc:	2000      	movs	r0, #0
     3fe:	5e18      	ldrsh	r0, [r3, r0]
     400:	4b10      	ldr	r3, [pc, #64]	; (444 <accelSample+0x150>)
     402:	4798      	blx	r3
     404:	4a10      	ldr	r2, [pc, #64]	; (448 <accelSample+0x154>)
     406:	4b11      	ldr	r3, [pc, #68]	; (44c <accelSample+0x158>)
     408:	4c11      	ldr	r4, [pc, #68]	; (450 <accelSample+0x15c>)
     40a:	47a0      	blx	r4
     40c:	4b11      	ldr	r3, [pc, #68]	; (454 <accelSample+0x160>)
     40e:	4798      	blx	r3
     410:	4b13      	ldr	r3, [pc, #76]	; (460 <accelSample+0x16c>)
     412:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     414:	2207      	movs	r2, #7
     416:	4b03      	ldr	r3, [pc, #12]	; (424 <accelSample+0x130>)
     418:	701a      	strb	r2, [r3, #0]
        return false;
     41a:	2000      	movs	r0, #0
     41c:	e000      	b.n	420 <accelSample+0x12c>
        break;
    case accelSapleCooked:

        return true;
     41e:	2001      	movs	r0, #1
        return false;
        break;

    }

}
     420:	bd10      	pop	{r4, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	2000005e 	.word	0x2000005e
     428:	00003334 	.word	0x00003334
     42c:	20000058 	.word	0x20000058
     430:	00000115 	.word	0x00000115
     434:	ffffff00 	.word	0xffffff00
     438:	20000060 	.word	0x20000060
     43c:	20000044 	.word	0x20000044
     440:	20000054 	.word	0x20000054
     444:	000029d9 	.word	0x000029d9
     448:	8e8a71de 	.word	0x8e8a71de
     44c:	3f6ff2e4 	.word	0x3f6ff2e4
     450:	000024a5 	.word	0x000024a5
     454:	00002b5d 	.word	0x00002b5d
     458:	2000004c 	.word	0x2000004c
     45c:	20000050 	.word	0x20000050
     460:	20000048 	.word	0x20000048

00000464 <initAccelerometer>:





void initAccelerometer(struct AccelerometerModule *myAccelerometer) {
     464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     466:	1c07      	adds	r7, r0, #0

    accelSampleState = accelSampleEmpty;
     468:	2200      	movs	r2, #0
     46a:	4b20      	ldr	r3, [pc, #128]	; (4ec <initAccelerometer+0x88>)
     46c:	701a      	strb	r2, [r3, #0]



#ifdef HAS_ADXL345

    SaLPinMode(ADXL345_SLAVE_SELECT_PIN,OUTPUT);
     46e:	2010      	movs	r0, #16
     470:	2101      	movs	r1, #1
     472:	4e1f      	ldr	r6, [pc, #124]	; (4f0 <initAccelerometer+0x8c>)
     474:	47b0      	blx	r6
     476:	4c1f      	ldr	r4, [pc, #124]	; (4f4 <initAccelerometer+0x90>)
     478:	2580      	movs	r5, #128	; 0x80
     47a:	026d      	lsls	r5, r5, #9
     47c:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
    SaLPinMode(ADXL345_MOSI_PIN,OUTPUT);
     47e:	200d      	movs	r0, #13
     480:	2101      	movs	r1, #1
     482:	47b0      	blx	r6
    SaLPinMode(ADXL345_SCK_PIN,OUTPUT);
     484:	200f      	movs	r0, #15
     486:	2101      	movs	r1, #1
     488:	47b0      	blx	r6
    SaLPinMode(ADXL345_MISO_PIN,INPUT);
     48a:	200e      	movs	r0, #14
     48c:	2100      	movs	r1, #0
     48e:	47b0      	blx	r6

    myAccelerometer->rate_ = MY_ADXL345_DATA_RATE;
     490:	230e      	movs	r3, #14
     492:	707b      	strb	r3, [r7, #1]
    myAccelerometer->range_ = MY_ADXL345_RANGE;
     494:	3b06      	subs	r3, #6
     496:	703b      	strb	r3, [r7, #0]
    } else {
        port->OUTCLR.reg = pin_mask;
     498:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     49a:	200f      	movs	r0, #15
     49c:	210d      	movs	r1, #13
     49e:	222d      	movs	r2, #45	; 0x2d
     4a0:	4e15      	ldr	r6, [pc, #84]	; (4f8 <initAccelerometer+0x94>)
     4a2:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x00); // disable
     4a4:	200f      	movs	r0, #15
     4a6:	210d      	movs	r1, #13
     4a8:	2200      	movs	r2, #0
     4aa:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4ac:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4ae:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     4b0:	200f      	movs	r0, #15
     4b2:	210d      	movs	r1, #13
     4b4:	222c      	movs	r2, #44	; 0x2c
     4b6:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->rate_);
     4b8:	787a      	ldrb	r2, [r7, #1]
     4ba:	200f      	movs	r0, #15
     4bc:	210d      	movs	r1, #13
     4be:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4c0:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4c2:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     4c4:	200f      	movs	r0, #15
     4c6:	210d      	movs	r1, #13
     4c8:	222c      	movs	r2, #44	; 0x2c
     4ca:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->range_);
     4cc:	783a      	ldrb	r2, [r7, #0]
     4ce:	200f      	movs	r0, #15
     4d0:	210d      	movs	r1, #13
     4d2:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4d4:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4d6:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     4d8:	200f      	movs	r0, #15
     4da:	210d      	movs	r1, #13
     4dc:	222d      	movs	r2, #45	; 0x2d
     4de:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x08); // enable
     4e0:	200f      	movs	r0, #15
     4e2:	210d      	movs	r1, #13
     4e4:	2208      	movs	r2, #8
     4e6:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4e8:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

#endif

}
     4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4ec:	2000005e 	.word	0x2000005e
     4f0:	00000b6d 	.word	0x00000b6d
     4f4:	41004400 	.word	0x41004400
     4f8:	00000815 	.word	0x00000815

000004fc <getAccelEvent>:

void getAccelEvent(struct AccelerometerModule *myAccelerometer) {
     4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4fe:	464f      	mov	r7, r9
     500:	4646      	mov	r6, r8
     502:	b4c0      	push	{r6, r7}
     504:	b083      	sub	sp, #12
     506:	1c06      	adds	r6, r0, #0

#ifdef HAS_ADXL345

    uint8_t regAccelData[6];
    getADXL345Event(&regAccelData[0]);
     508:	4668      	mov	r0, sp
     50a:	4b2d      	ldr	r3, [pc, #180]	; (5c0 <getAccelEvent+0xc4>)
     50c:	4798      	blx	r3
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     50e:	466b      	mov	r3, sp
     510:	785b      	ldrb	r3, [r3, #1]
    if (negative) {
     512:	b25a      	sxtb	r2, r3
     514:	2a00      	cmp	r2, #0
     516:	da07      	bge.n	528 <getAccelEvent+0x2c>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     518:	482a      	ldr	r0, [pc, #168]	; (5c4 <getAccelEvent+0xc8>)
     51a:	4303      	orrs	r3, r0
     51c:	021b      	lsls	r3, r3, #8
     51e:	466a      	mov	r2, sp
     520:	7810      	ldrb	r0, [r2, #0]
     522:	4303      	orrs	r3, r0
     524:	b29b      	uxth	r3, r3
     526:	e004      	b.n	532 <getAccelEvent+0x36>
    } else {
        result = (*(values + 1) << 8) + *values;
     528:	021b      	lsls	r3, r3, #8
     52a:	466a      	mov	r2, sp
     52c:	7810      	ldrb	r0, [r2, #0]
     52e:	18c3      	adds	r3, r0, r3
     530:	b29b      	uxth	r3, r3
    myAccelerometer->acceleration.X = Convert2C(&regAccelData[0]);
     532:	80b3      	strh	r3, [r6, #4]
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     534:	466a      	mov	r2, sp
     536:	78d4      	ldrb	r4, [r2, #3]
    if (negative) {
     538:	b262      	sxtb	r2, r4
     53a:	2a00      	cmp	r2, #0
     53c:	da07      	bge.n	54e <getAccelEvent+0x52>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     53e:	4821      	ldr	r0, [pc, #132]	; (5c4 <getAccelEvent+0xc8>)
     540:	4304      	orrs	r4, r0
     542:	0224      	lsls	r4, r4, #8
     544:	466a      	mov	r2, sp
     546:	7890      	ldrb	r0, [r2, #2]
     548:	4304      	orrs	r4, r0
     54a:	b2a4      	uxth	r4, r4
     54c:	e004      	b.n	558 <getAccelEvent+0x5c>
    } else {
        result = (*(values + 1) << 8) + *values;
     54e:	0224      	lsls	r4, r4, #8
     550:	466a      	mov	r2, sp
     552:	7890      	ldrb	r0, [r2, #2]
     554:	1904      	adds	r4, r0, r4
     556:	b2a4      	uxth	r4, r4
    myAccelerometer->acceleration.Y = Convert2C(&regAccelData[2]);
     558:	80f4      	strh	r4, [r6, #6]
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     55a:	466a      	mov	r2, sp
     55c:	7955      	ldrb	r5, [r2, #5]
    if (negative) {
     55e:	b26a      	sxtb	r2, r5
     560:	2a00      	cmp	r2, #0
     562:	da07      	bge.n	574 <getAccelEvent+0x78>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     564:	4817      	ldr	r0, [pc, #92]	; (5c4 <getAccelEvent+0xc8>)
     566:	4305      	orrs	r5, r0
     568:	022d      	lsls	r5, r5, #8
     56a:	466a      	mov	r2, sp
     56c:	7910      	ldrb	r0, [r2, #4]
     56e:	4305      	orrs	r5, r0
     570:	b2ad      	uxth	r5, r5
     572:	e004      	b.n	57e <getAccelEvent+0x82>
    } else {
        result = (*(values + 1) << 8) + *values;
     574:	022d      	lsls	r5, r5, #8
     576:	466a      	mov	r2, sp
     578:	7910      	ldrb	r0, [r2, #4]
     57a:	1945      	adds	r5, r0, r5
     57c:	b2ad      	uxth	r5, r5
    myAccelerometer->acceleration.Z = Convert2C(&regAccelData[4]);
     57e:	8135      	strh	r5, [r6, #8]

    myAccelerometer->acceleration.Xf = myAccelerometer->acceleration.X * ADXL345_MG2G_MULTIPLIER;
     580:	b218      	sxth	r0, r3
     582:	4b11      	ldr	r3, [pc, #68]	; (5c8 <getAccelEvent+0xcc>)
     584:	4698      	mov	r8, r3
     586:	4798      	blx	r3
     588:	4b10      	ldr	r3, [pc, #64]	; (5cc <getAccelEvent+0xd0>)
     58a:	4699      	mov	r9, r3
     58c:	4a10      	ldr	r2, [pc, #64]	; (5d0 <getAccelEvent+0xd4>)
     58e:	4b11      	ldr	r3, [pc, #68]	; (5d4 <getAccelEvent+0xd8>)
     590:	47c8      	blx	r9
     592:	4f11      	ldr	r7, [pc, #68]	; (5d8 <getAccelEvent+0xdc>)
     594:	47b8      	blx	r7
     596:	60f0      	str	r0, [r6, #12]
    myAccelerometer->acceleration.Yf = myAccelerometer->acceleration.Y * ADXL345_MG2G_MULTIPLIER;
     598:	b220      	sxth	r0, r4
     59a:	47c0      	blx	r8
     59c:	4a0c      	ldr	r2, [pc, #48]	; (5d0 <getAccelEvent+0xd4>)
     59e:	4b0d      	ldr	r3, [pc, #52]	; (5d4 <getAccelEvent+0xd8>)
     5a0:	47c8      	blx	r9
     5a2:	47b8      	blx	r7
     5a4:	6130      	str	r0, [r6, #16]
    myAccelerometer->acceleration.Zf = myAccelerometer->acceleration.Z * ADXL345_MG2G_MULTIPLIER;
     5a6:	b228      	sxth	r0, r5
     5a8:	47c0      	blx	r8
     5aa:	4a09      	ldr	r2, [pc, #36]	; (5d0 <getAccelEvent+0xd4>)
     5ac:	4b09      	ldr	r3, [pc, #36]	; (5d4 <getAccelEvent+0xd8>)
     5ae:	47c8      	blx	r9
     5b0:	47b8      	blx	r7
     5b2:	6170      	str	r0, [r6, #20]

#endif

}
     5b4:	b003      	add	sp, #12
     5b6:	bc0c      	pop	{r2, r3}
     5b8:	4690      	mov	r8, r2
     5ba:	4699      	mov	r9, r3
     5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	00000115 	.word	0x00000115
     5c4:	ffffff00 	.word	0xffffff00
     5c8:	000029d9 	.word	0x000029d9
     5cc:	000024a5 	.word	0x000024a5
     5d0:	8e8a71de 	.word	0x8e8a71de
     5d4:	3f6ff2e4 	.word	0x3f6ff2e4
     5d8:	00002b5d 	.word	0x00002b5d

000005dc <SaLGetAccelX>:

float SaLGetAccelX(){
	return Xf;
     5dc:	4b01      	ldr	r3, [pc, #4]	; (5e4 <SaLGetAccelX+0x8>)
     5de:	6818      	ldr	r0, [r3, #0]
}
     5e0:	4770      	bx	lr
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	2000004c 	.word	0x2000004c

000005e8 <SaLGetAccelY>:
float SaLGetAccelY(){
	return Yf;
     5e8:	4b01      	ldr	r3, [pc, #4]	; (5f0 <SaLGetAccelY+0x8>)
     5ea:	6818      	ldr	r0, [r3, #0]
}
     5ec:	4770      	bx	lr
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	20000050 	.word	0x20000050

000005f4 <SaLGetAccelZ>:
float SaLGetAccelZ(){
	return Zf;
     5f4:	4b01      	ldr	r3, [pc, #4]	; (5fc <SaLGetAccelZ+0x8>)
     5f6:	6818      	ldr	r0, [r3, #0]
     5f8:	4770      	bx	lr
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	20000048 	.word	0x20000048

00000600 <initBarometer>:
        break;
    };
};


void initBarometer(struct BarometerModule *const myBarometer) {
     600:	b538      	push	{r3, r4, r5, lr}

    baroSampleState = baroSampleEmpty;
     602:	2200      	movs	r2, #0
     604:	4b11      	ldr	r3, [pc, #68]	; (64c <initBarometer+0x4c>)
     606:	701a      	strb	r2, [r3, #0]

#ifdef HAS_MS5607
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     608:	2009      	movs	r0, #9
     60a:	2101      	movs	r1, #1
     60c:	4c10      	ldr	r4, [pc, #64]	; (650 <initBarometer+0x50>)
     60e:	47a0      	blx	r4
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,TRUE);
     610:	2009      	movs	r0, #9
     612:	2101      	movs	r1, #1
     614:	47a0      	blx	r4
    SaLPinMode(MS5607_MOSI_PIN,OUTPUT);
     616:	200d      	movs	r0, #13
     618:	2101      	movs	r1, #1
     61a:	47a0      	blx	r4
    SaLPinMode(MS5607_SCK_PIN,OUTPUT);
     61c:	200f      	movs	r0, #15
     61e:	2101      	movs	r1, #1
     620:	47a0      	blx	r4
    SaLPinMode(MS5607_MISO_PIN,INPUT);
     622:	200e      	movs	r0, #14
     624:	2100      	movs	r1, #0
     626:	47a0      	blx	r4
    } else {
        port->OUTCLR.reg = pin_mask;
     628:	4c0a      	ldr	r4, [pc, #40]	; (654 <initBarometer+0x54>)
     62a:	2580      	movs	r5, #128	; 0x80
     62c:	00ad      	lsls	r5, r5, #2
     62e:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,MS5607_CMD_RES);
     630:	200f      	movs	r0, #15
     632:	210d      	movs	r1, #13
     634:	221e      	movs	r2, #30
     636:	4b08      	ldr	r3, [pc, #32]	; (658 <initBarometer+0x58>)
     638:	4798      	blx	r3
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     63a:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
    delay_us(600);
     63c:	2096      	movs	r0, #150	; 0x96
     63e:	0080      	lsls	r0, r0, #2
     640:	4b06      	ldr	r3, [pc, #24]	; (65c <initBarometer+0x5c>)
     642:	4798      	blx	r3
    getMS5607Coeff(&coefficients_[0]);
     644:	4806      	ldr	r0, [pc, #24]	; (660 <initBarometer+0x60>)
     646:	4b07      	ldr	r3, [pc, #28]	; (664 <initBarometer+0x64>)
     648:	4798      	blx	r3
#endif

}
     64a:	bd38      	pop	{r3, r4, r5, pc}
     64c:	20000074 	.word	0x20000074
     650:	00000b6d 	.word	0x00000b6d
     654:	41004400 	.word	0x41004400
     658:	00000815 	.word	0x00000815
     65c:	00000aed 	.word	0x00000aed
     660:	20000038 	.word	0x20000038
     664:	000001a5 	.word	0x000001a5

00000668 <sendMS5607D2ReadReq>:

void sendMS5607D2ReadReq(uint8_t _cmd) {
     668:	b538      	push	{r3, r4, r5, lr}
     66a:	1c02      	adds	r2, r0, #0
    } else {
        port->OUTCLR.reg = pin_mask;
     66c:	4c04      	ldr	r4, [pc, #16]	; (680 <sendMS5607D2ReadReq+0x18>)
     66e:	2580      	movs	r5, #128	; 0x80
     670:	00ad      	lsls	r5, r5, #2
     672:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     674:	200f      	movs	r0, #15
     676:	210d      	movs	r1, #13
     678:	4b02      	ldr	r3, [pc, #8]	; (684 <sendMS5607D2ReadReq+0x1c>)
     67a:	4798      	blx	r3
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     67c:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
     67e:	bd38      	pop	{r3, r4, r5, pc}
     680:	41004400 	.word	0x41004400
     684:	00000815 	.word	0x00000815

00000688 <baroSample>:
uint32_t mills;
enum baroSampleState baroSampleState;

uint16_t hits;

bool baroSample(void) {
     688:	b508      	push	{r3, lr}

    switch (baroSampleState) {
     68a:	4b3c      	ldr	r3, [pc, #240]	; (77c <baroSample+0xf4>)
     68c:	781a      	ldrb	r2, [r3, #0]
     68e:	2a08      	cmp	r2, #8
     690:	d803      	bhi.n	69a <baroSample+0x12>
     692:	0093      	lsls	r3, r2, #2
     694:	4a3a      	ldr	r2, [pc, #232]	; (780 <baroSample+0xf8>)
     696:	58d3      	ldr	r3, [r2, r3]
     698:	469f      	mov	pc, r3
    case baroSampleHeightCalculated:
        //some kind of baroSamplePut(currentAltinCm);
        return true;
        break;
    default:
        return false;
     69a:	2000      	movs	r0, #0
     69c:	e06d      	b.n	77a <baroSample+0xf2>

bool baroSample(void) {

    switch (baroSampleState) {
    case baroSampleEmpty:
        sendMS5607D2ReadReq(cmdAdcD1_);
     69e:	2040      	movs	r0, #64	; 0x40
     6a0:	4b38      	ldr	r3, [pc, #224]	; (784 <baroSample+0xfc>)
     6a2:	4798      	blx	r3
        baroSampleState++;
     6a4:	4a35      	ldr	r2, [pc, #212]	; (77c <baroSample+0xf4>)
     6a6:	7813      	ldrb	r3, [r2, #0]
     6a8:	3301      	adds	r3, #1
     6aa:	7013      	strb	r3, [r2, #0]
        mills = millis();
     6ac:	4b36      	ldr	r3, [pc, #216]	; (788 <baroSample+0x100>)
     6ae:	4798      	blx	r3
     6b0:	4b36      	ldr	r3, [pc, #216]	; (78c <baroSample+0x104>)
     6b2:	6018      	str	r0, [r3, #0]
        return false;
     6b4:	2000      	movs	r0, #0
     6b6:	e060      	b.n	77a <baroSample+0xf2>
        break;
    case baroSamplePressureRequested:
        //timer interrupt will send baroSampleState++
        if (millis() - mills > 22) {
     6b8:	4b33      	ldr	r3, [pc, #204]	; (788 <baroSample+0x100>)
     6ba:	4798      	blx	r3
     6bc:	4b33      	ldr	r3, [pc, #204]	; (78c <baroSample+0x104>)
     6be:	681b      	ldr	r3, [r3, #0]
     6c0:	1ac0      	subs	r0, r0, r3
     6c2:	2816      	cmp	r0, #22
     6c4:	d905      	bls.n	6d2 <baroSample+0x4a>
            baroSampleState++;
     6c6:	4a2d      	ldr	r2, [pc, #180]	; (77c <baroSample+0xf4>)
     6c8:	7813      	ldrb	r3, [r2, #0]
     6ca:	3301      	adds	r3, #1
     6cc:	7013      	strb	r3, [r2, #0]
        } else {
            hits++;
        }
        return false;
     6ce:	2000      	movs	r0, #0
     6d0:	e053      	b.n	77a <baroSample+0xf2>
    case baroSamplePressureRequested:
        //timer interrupt will send baroSampleState++
        if (millis() - mills > 22) {
            baroSampleState++;
        } else {
            hits++;
     6d2:	4a2f      	ldr	r2, [pc, #188]	; (790 <baroSample+0x108>)
     6d4:	8813      	ldrh	r3, [r2, #0]
     6d6:	3301      	adds	r3, #1
     6d8:	8013      	strh	r3, [r2, #0]
        }
        return false;
     6da:	2000      	movs	r0, #0
     6dc:	e04d      	b.n	77a <baroSample+0xf2>
        break;
    case baroSamplePressureReady:
        pressure = readMS5607AdcResults();
     6de:	4b2d      	ldr	r3, [pc, #180]	; (794 <baroSample+0x10c>)
     6e0:	4798      	blx	r3
     6e2:	4b2d      	ldr	r3, [pc, #180]	; (798 <baroSample+0x110>)
     6e4:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     6e6:	4a25      	ldr	r2, [pc, #148]	; (77c <baroSample+0xf4>)
     6e8:	7813      	ldrb	r3, [r2, #0]
     6ea:	3301      	adds	r3, #1
     6ec:	7013      	strb	r3, [r2, #0]
        return false;
     6ee:	2000      	movs	r0, #0
     6f0:	e043      	b.n	77a <baroSample+0xf2>
        break;
    case baroSamplePressureRetreaved:
        sendMS5607D2ReadReq(cmdAdcD2_);
     6f2:	2050      	movs	r0, #80	; 0x50
     6f4:	4b23      	ldr	r3, [pc, #140]	; (784 <baroSample+0xfc>)
     6f6:	4798      	blx	r3
        baroSampleState++;
     6f8:	4a20      	ldr	r2, [pc, #128]	; (77c <baroSample+0xf4>)
     6fa:	7813      	ldrb	r3, [r2, #0]
     6fc:	3301      	adds	r3, #1
     6fe:	7013      	strb	r3, [r2, #0]
        mills = millis();
     700:	4b21      	ldr	r3, [pc, #132]	; (788 <baroSample+0x100>)
     702:	4798      	blx	r3
     704:	4b21      	ldr	r3, [pc, #132]	; (78c <baroSample+0x104>)
     706:	6018      	str	r0, [r3, #0]
        return false;
     708:	2000      	movs	r0, #0
     70a:	e036      	b.n	77a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRequested:
        if (millis() - mills > 22) {
     70c:	4b1e      	ldr	r3, [pc, #120]	; (788 <baroSample+0x100>)
     70e:	4798      	blx	r3
     710:	4b1e      	ldr	r3, [pc, #120]	; (78c <baroSample+0x104>)
     712:	681b      	ldr	r3, [r3, #0]
     714:	1ac0      	subs	r0, r0, r3
     716:	2816      	cmp	r0, #22
     718:	d905      	bls.n	726 <baroSample+0x9e>
            baroSampleState++;
     71a:	4a18      	ldr	r2, [pc, #96]	; (77c <baroSample+0xf4>)
     71c:	7813      	ldrb	r3, [r2, #0]
     71e:	3301      	adds	r3, #1
     720:	7013      	strb	r3, [r2, #0]
        } else {
            hits++;
        }
        return false;
     722:	2000      	movs	r0, #0
     724:	e029      	b.n	77a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRequested:
        if (millis() - mills > 22) {
            baroSampleState++;
        } else {
            hits++;
     726:	4a1a      	ldr	r2, [pc, #104]	; (790 <baroSample+0x108>)
     728:	8813      	ldrh	r3, [r2, #0]
     72a:	3301      	adds	r3, #1
     72c:	8013      	strh	r3, [r2, #0]
        }
        return false;
     72e:	2000      	movs	r0, #0
     730:	e023      	b.n	77a <baroSample+0xf2>
        break;
    case baroSampleTemperatureReady:
        temperature = readMS5607AdcResults();
     732:	4b18      	ldr	r3, [pc, #96]	; (794 <baroSample+0x10c>)
     734:	4798      	blx	r3
     736:	4b19      	ldr	r3, [pc, #100]	; (79c <baroSample+0x114>)
     738:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     73a:	4a10      	ldr	r2, [pc, #64]	; (77c <baroSample+0xf4>)
     73c:	7813      	ldrb	r3, [r2, #0]
     73e:	3301      	adds	r3, #1
     740:	7013      	strb	r3, [r2, #0]
        return false;
     742:	2000      	movs	r0, #0
     744:	e019      	b.n	77a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRetreaved:
        pascelFromPresTempConv = ConvertPressureTemperature(&pressure, &temperature,&coefficients_[0]);
     746:	4814      	ldr	r0, [pc, #80]	; (798 <baroSample+0x110>)
     748:	4914      	ldr	r1, [pc, #80]	; (79c <baroSample+0x114>)
     74a:	4a15      	ldr	r2, [pc, #84]	; (7a0 <baroSample+0x118>)
     74c:	4b15      	ldr	r3, [pc, #84]	; (7a4 <baroSample+0x11c>)
     74e:	4798      	blx	r3
     750:	4b15      	ldr	r3, [pc, #84]	; (7a8 <baroSample+0x120>)
     752:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     754:	4a09      	ldr	r2, [pc, #36]	; (77c <baroSample+0xf4>)
     756:	7813      	ldrb	r3, [r2, #0]
     758:	3301      	adds	r3, #1
     75a:	7013      	strb	r3, [r2, #0]
        return false;
     75c:	2000      	movs	r0, #0
     75e:	e00c      	b.n	77a <baroSample+0xf2>
        break;
    case baroSamplePascelCalculated:
        currentAltinCm = pascalToCent(pascelFromPresTempConv);
     760:	4b11      	ldr	r3, [pc, #68]	; (7a8 <baroSample+0x120>)
     762:	6818      	ldr	r0, [r3, #0]
     764:	4b11      	ldr	r3, [pc, #68]	; (7ac <baroSample+0x124>)
     766:	4798      	blx	r3
     768:	4b11      	ldr	r3, [pc, #68]	; (7b0 <baroSample+0x128>)
     76a:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     76c:	4a03      	ldr	r2, [pc, #12]	; (77c <baroSample+0xf4>)
     76e:	7813      	ldrb	r3, [r2, #0]
     770:	3301      	adds	r3, #1
     772:	7013      	strb	r3, [r2, #0]
        return false;
     774:	2000      	movs	r0, #0
     776:	e000      	b.n	77a <baroSample+0xf2>
        break;
    case baroSampleHeightCalculated:
        //some kind of baroSamplePut(currentAltinCm);
        return true;
     778:	2001      	movs	r0, #1
        break;
    default:
        return false;
        break;
    };
};
     77a:	bd08      	pop	{r3, pc}
     77c:	20000074 	.word	0x20000074
     780:	00003354 	.word	0x00003354
     784:	00000669 	.word	0x00000669
     788:	00000a91 	.word	0x00000a91
     78c:	20000070 	.word	0x20000070
     790:	2000006c 	.word	0x2000006c
     794:	00000155 	.word	0x00000155
     798:	20000068 	.word	0x20000068
     79c:	20000064 	.word	0x20000064
     7a0:	20000038 	.word	0x20000038
     7a4:	0000021d 	.word	0x0000021d
     7a8:	2000007c 	.word	0x2000007c
     7ac:	000002ad 	.word	0x000002ad
     7b0:	20000078 	.word	0x20000078

000007b4 <getMS5607PressureSlow>:
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}

void getMS5607PressureSlow(struct BarometerModule *const myBarometer) {
     7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     7b6:	1c04      	adds	r4, r0, #0

    sendMS5607D2ReadReq(cmdAdcD1_);
     7b8:	2040      	movs	r0, #64	; 0x40
     7ba:	4f0d      	ldr	r7, [pc, #52]	; (7f0 <getMS5607PressureSlow+0x3c>)
     7bc:	47b8      	blx	r7
    delay_us(700);
     7be:	20af      	movs	r0, #175	; 0xaf
     7c0:	0080      	lsls	r0, r0, #2
     7c2:	4e0c      	ldr	r6, [pc, #48]	; (7f4 <getMS5607PressureSlow+0x40>)
     7c4:	47b0      	blx	r6
    myBarometer->pressure = readMS5607AdcResults();
     7c6:	4d0c      	ldr	r5, [pc, #48]	; (7f8 <getMS5607PressureSlow+0x44>)
     7c8:	47a8      	blx	r5
     7ca:	60a0      	str	r0, [r4, #8]

    sendMS5607D2ReadReq(cmdAdcD2_);
     7cc:	2050      	movs	r0, #80	; 0x50
     7ce:	47b8      	blx	r7
    delay_us(700);
     7d0:	20af      	movs	r0, #175	; 0xaf
     7d2:	0080      	lsls	r0, r0, #2
     7d4:	47b0      	blx	r6
    myBarometer->temperature = readMS5607AdcResults();
     7d6:	47a8      	blx	r5
     7d8:	6060      	str	r0, [r4, #4]

    const uint32_t pressConv   = ConvertPressureTemperature(&myBarometer->pressure, &myBarometer->temperature,&coefficients_[0]);
     7da:	1c20      	adds	r0, r4, #0
     7dc:	3008      	adds	r0, #8
     7de:	1d21      	adds	r1, r4, #4
     7e0:	4a06      	ldr	r2, [pc, #24]	; (7fc <getMS5607PressureSlow+0x48>)
     7e2:	4b07      	ldr	r3, [pc, #28]	; (800 <getMS5607PressureSlow+0x4c>)
     7e4:	4798      	blx	r3

    myBarometer->currentAltInFt = pascalToCent(pressConv);
     7e6:	4b07      	ldr	r3, [pc, #28]	; (804 <getMS5607PressureSlow+0x50>)
     7e8:	4798      	blx	r3
     7ea:	60e0      	str	r0, [r4, #12]
    //myBarometer->currentAltInFt = paToFeetNOAA(pressConv);
}
     7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	00000669 	.word	0x00000669
     7f4:	00000aed 	.word	0x00000aed
     7f8:	00000155 	.word	0x00000155
     7fc:	20000038 	.word	0x20000038
     800:	0000021d 	.word	0x0000021d
     804:	000002ad 	.word	0x000002ad

00000808 <SaLBaroGetHeight>:

uint32_t SaLBaroGetHeight() {
    return currentAltinCm;
     808:	4b01      	ldr	r3, [pc, #4]	; (810 <SaLBaroGetHeight+0x8>)
     80a:	6818      	ldr	r0, [r3, #0]
     80c:	4770      	bx	lr
     80e:	46c0      	nop			; (mov r8, r8)
     810:	20000078 	.word	0x20000078

00000814 <byteOut>:



void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {
     814:	b570      	push	{r4, r5, r6, lr}
     816:	09c3      	lsrs	r3, r0, #7
     818:	2400      	movs	r4, #0
     81a:	2b00      	cmp	r3, #0
     81c:	d104      	bne.n	828 <byteOut+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     81e:	0944      	lsrs	r4, r0, #5
     820:	01e4      	lsls	r4, r4, #7
     822:	4b13      	ldr	r3, [pc, #76]	; (870 <byteOut+0x5c>)
     824:	469c      	mov	ip, r3
     826:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     828:	231f      	movs	r3, #31
     82a:	4018      	ands	r0, r3
     82c:	3b1e      	subs	r3, #30
     82e:	4083      	lsls	r3, r0
     830:	1c18      	adds	r0, r3, #0
     832:	09cb      	lsrs	r3, r1, #7
     834:	2600      	movs	r6, #0
     836:	2b00      	cmp	r3, #0
     838:	d104      	bne.n	844 <byteOut+0x30>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     83a:	094e      	lsrs	r6, r1, #5
     83c:	01f6      	lsls	r6, r6, #7
     83e:	4b0c      	ldr	r3, [pc, #48]	; (870 <byteOut+0x5c>)
     840:	469c      	mov	ip, r3
     842:	4466      	add	r6, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     844:	231f      	movs	r3, #31
     846:	4019      	ands	r1, r3
     848:	3b1e      	subs	r3, #30
     84a:	408b      	lsls	r3, r1
     84c:	1c19      	adds	r1, r3, #0
     84e:	2308      	movs	r3, #8


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     850:	6160      	str	r0, [r4, #20]

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        if (byte & 0x80) {
     852:	b255      	sxtb	r5, r2
     854:	2d00      	cmp	r5, #0
     856:	da01      	bge.n	85c <byteOut+0x48>
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     858:	61b1      	str	r1, [r6, #24]
     85a:	e000      	b.n	85e <byteOut+0x4a>
    } else {
        port->OUTCLR.reg = pin_mask;
     85c:	6171      	str	r1, [r6, #20]
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     85e:	61a0      	str	r0, [r4, #24]
            SaLDigitalOut(MOSI_PIN,true);
        } else {
            SaLDigitalOut(MOSI_PIN,false);
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
     860:	0052      	lsls	r2, r2, #1
     862:	b2d2      	uxtb	r2, r2
     864:	3b01      	subs	r3, #1
     866:	b2db      	uxtb	r3, r3

void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     868:	2b00      	cmp	r3, #0
     86a:	d1f1      	bne.n	850 <byteOut+0x3c>
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
    }

}
     86c:	bd70      	pop	{r4, r5, r6, pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	41004400 	.word	0x41004400

00000874 <getByte>:
    }

}

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
     874:	b5f0      	push	{r4, r5, r6, r7, lr}
     876:	09c3      	lsrs	r3, r0, #7
     878:	2400      	movs	r4, #0
     87a:	2b00      	cmp	r3, #0
     87c:	d104      	bne.n	888 <getByte+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     87e:	0944      	lsrs	r4, r0, #5
     880:	01e4      	lsls	r4, r4, #7
     882:	4b12      	ldr	r3, [pc, #72]	; (8cc <getByte+0x58>)
     884:	469c      	mov	ip, r3
     886:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     888:	251f      	movs	r5, #31
     88a:	4028      	ands	r0, r5
     88c:	3d1e      	subs	r5, #30
     88e:	4085      	lsls	r5, r0
     890:	09cb      	lsrs	r3, r1, #7
     892:	2600      	movs	r6, #0
     894:	2b00      	cmp	r3, #0
     896:	d104      	bne.n	8a2 <getByte+0x2e>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     898:	094e      	lsrs	r6, r1, #5
     89a:	01f6      	lsls	r6, r6, #7
     89c:	4b0b      	ldr	r3, [pc, #44]	; (8cc <getByte+0x58>)
     89e:	469c      	mov	ip, r3
     8a0:	4466      	add	r6, ip
    }
}

static inline bool SaLDigitalIn(uint8_t pin) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     8a2:	231f      	movs	r3, #31
     8a4:	4019      	ands	r1, r3
     8a6:	3b1e      	subs	r3, #30
     8a8:	408b      	lsls	r3, r1
     8aa:	1c19      	adds	r1, r3, #0
     8ac:	2208      	movs	r2, #8
    uint8_t byte = 0x00;
     8ae:	2000      	movs	r0, #0


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     8b0:	6165      	str	r5, [r4, #20]
}

static inline bool SaLDigitalIn(uint8_t pin) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
    bool level = (port->IN.reg & pin_mask);
     8b2:	6a33      	ldr	r3, [r6, #32]
     8b4:	400b      	ands	r3, r1
     8b6:	1e5f      	subs	r7, r3, #1
     8b8:	41bb      	sbcs	r3, r7

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
     8ba:	0040      	lsls	r0, r0, #1
     8bc:	4318      	orrs	r0, r3
     8be:	b2c0      	uxtb	r0, r0
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     8c0:	61a5      	str	r5, [r4, #24]
     8c2:	3a01      	subs	r2, #1
     8c4:	b2d2      	uxtb	r2, r2

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
    uint8_t byte = 0x00;

    for (uint8_t i = 0; i<8; ++i) {
     8c6:	2a00      	cmp	r2, #0
     8c8:	d1f2      	bne.n	8b0 <getByte+0x3c>
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
        SaLDigitalOut(SCK_PIN,TRUE);
    }
    return byte;
}
     8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8cc:	41004400 	.word	0x41004400

000008d0 <SalGclkInit>:

#include <SaLClocks.h>


void SalGclkInit() {
     8d0:	b510      	push	{r4, lr}

    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     8d2:	4a2a      	ldr	r2, [pc, #168]	; (97c <SalGclkInit+0xac>)
     8d4:	23c2      	movs	r3, #194	; 0xc2
     8d6:	00db      	lsls	r3, r3, #3
     8d8:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     8da:	4929      	ldr	r1, [pc, #164]	; (980 <SalGclkInit+0xb0>)
     8dc:	6848      	ldr	r0, [r1, #4]
     8de:	2302      	movs	r3, #2
     8e0:	4303      	orrs	r3, r0
     8e2:	604b      	str	r3, [r1, #4]

// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     8e4:	4b27      	ldr	r3, [pc, #156]	; (984 <SalGclkInit+0xb4>)
     8e6:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);
//wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     8e8:	1c11      	adds	r1, r2, #0
     8ea:	2202      	movs	r2, #2
     8ec:	68cb      	ldr	r3, [r1, #12]
     8ee:	421a      	tst	r2, r3
     8f0:	d0fc      	beq.n	8ec <SalGclkInit+0x1c>

//config xosc32k for the dfll via gen1
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(1) |
     8f2:	4b25      	ldr	r3, [pc, #148]	; (988 <SalGclkInit+0xb8>)
     8f4:	2202      	movs	r2, #2
     8f6:	32ff      	adds	r2, #255	; 0xff
     8f8:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) |
     8fa:	4a24      	ldr	r2, [pc, #144]	; (98c <SalGclkInit+0xbc>)
     8fc:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_XOSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(1) |
     8fe:	2282      	movs	r2, #130	; 0x82
     900:	01d2      	lsls	r2, r2, #7
     902:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_ID_DFLL48;

    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(2) |
     904:	2281      	movs	r2, #129	; 0x81
     906:	0052      	lsls	r2, r2, #1
     908:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     90a:	4a21      	ldr	r2, [pc, #132]	; (990 <SalGclkInit+0xc0>)
     90c:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(2) |
     90e:	4a21      	ldr	r2, [pc, #132]	; (994 <SalGclkInit+0xc4>)
     910:	805a      	strh	r2, [r3, #2]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     912:	4b21      	ldr	r3, [pc, #132]	; (998 <SalGclkInit+0xc8>)
     914:	681b      	ldr	r3, [r3, #0]
     916:	0e9b      	lsrs	r3, r3, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     918:	2b3f      	cmp	r3, #63	; 0x3f
     91a:	d100      	bne.n	91e <SalGclkInit+0x4e>
        coarse = 0x1f;
     91c:	3b20      	subs	r3, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     91e:	4a1f      	ldr	r2, [pc, #124]	; (99c <SalGclkInit+0xcc>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     920:	6812      	ldr	r2, [r2, #0]
     922:	0592      	lsls	r2, r2, #22
     924:	0d92      	lsrs	r2, r2, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     926:	491e      	ldr	r1, [pc, #120]	; (9a0 <SalGclkInit+0xd0>)
     928:	428a      	cmp	r2, r1
     92a:	d100      	bne.n	92e <SalGclkInit+0x5e>
        fine = 0x1ff;
     92c:	4a1d      	ldr	r2, [pc, #116]	; (9a4 <SalGclkInit+0xd4>)
    }
//For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     92e:	4916      	ldr	r1, [pc, #88]	; (988 <SalGclkInit+0xb8>)
     930:	2080      	movs	r0, #128	; 0x80
     932:	0040      	lsls	r0, r0, #1
     934:	6088      	str	r0, [r1, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     936:	481c      	ldr	r0, [pc, #112]	; (9a8 <SalGclkInit+0xd8>)
     938:	6048      	str	r0, [r1, #4]
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN ) ;
     93a:	2080      	movs	r0, #128	; 0x80
     93c:	01c0      	lsls	r0, r0, #7
     93e:	8048      	strh	r0, [r1, #2]

    SYSCTRL->DFLLCTRL.reg = (SYSCTRL_DFLLCTRL_ENABLE); //Enable the DFLL
     940:	490e      	ldr	r1, [pc, #56]	; (97c <SalGclkInit+0xac>)
     942:	2002      	movs	r0, #2
     944:	8488      	strh	r0, [r1, #36]	; 0x24
    SYSCTRL->DFLLCTRL.reg |= (SYSCTRL_DFLLCTRL_MODE);
     946:	8c8c      	ldrh	r4, [r1, #36]	; 0x24
     948:	3002      	adds	r0, #2
     94a:	4320      	orrs	r0, r4
     94c:	8488      	strh	r0, [r1, #36]	; 0x24
    SYSCTRL->DFLLMUL.reg = (SYSCTRL_DFLLMUL_CSTEP(coarse) | SYSCTRL_DFLLMUL_FSTEP(fine));
     94e:	0412      	lsls	r2, r2, #16
     950:	069b      	lsls	r3, r3, #26
     952:	431a      	orrs	r2, r3
     954:	62ca      	str	r2, [r1, #44]	; 0x2c
    SYSCTRL->DFLLMUL.reg |= (SYSCTRL_DFLLMUL_MUL(1280));
     956:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     958:	22a0      	movs	r2, #160	; 0xa0
     95a:	00d2      	lsls	r2, r2, #3
     95c:	4313      	orrs	r3, r2
     95e:	62cb      	str	r3, [r1, #44]	; 0x2c

//Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     960:	2210      	movs	r2, #16
     962:	68cb      	ldr	r3, [r1, #12]
     964:	421a      	tst	r2, r3
     966:	d0fc      	beq.n	962 <SalGclkInit+0x92>


    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(4) |
     968:	4b07      	ldr	r3, [pc, #28]	; (988 <SalGclkInit+0xb8>)
     96a:	2282      	movs	r2, #130	; 0x82
     96c:	0052      	lsls	r2, r2, #1
     96e:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(4) |
     970:	4a0e      	ldr	r2, [pc, #56]	; (9ac <SalGclkInit+0xdc>)
     972:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC4_TC5 |
     974:	4a0e      	ldr	r2, [pc, #56]	; (9b0 <SalGclkInit+0xe0>)
     976:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_GEN_GCLK3 |
                        GCLK_CLKCTRL_CLKEN;

}
     978:	bd10      	pop	{r4, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	40000800 	.word	0x40000800
     980:	41004000 	.word	0x41004000
     984:	0000060e 	.word	0x0000060e
     988:	40000c00 	.word	0x40000c00
     98c:	00010501 	.word	0x00010501
     990:	00010402 	.word	0x00010402
     994:	0000421b 	.word	0x0000421b
     998:	00806024 	.word	0x00806024
     99c:	00806028 	.word	0x00806028
     9a0:	000003ff 	.word	0x000003ff
     9a4:	000001ff 	.word	0x000001ff
     9a8:	00010700 	.word	0x00010700
     9ac:	00230604 	.word	0x00230604
     9b0:	0000431c 	.word	0x0000431c

000009b4 <SaLTC4Init>:

void SaLTC4Init() {

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     9b4:	4a0a      	ldr	r2, [pc, #40]	; (9e0 <SaLTC4Init+0x2c>)
     9b6:	6a13      	ldr	r3, [r2, #32]
     9b8:	2180      	movs	r1, #128	; 0x80
     9ba:	0149      	lsls	r1, r1, #5
     9bc:	430b      	orrs	r3, r1
     9be:	6213      	str	r3, [r2, #32]

    TC4->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 |
     9c0:	4b08      	ldr	r3, [pc, #32]	; (9e4 <SaLTC4Init+0x30>)
     9c2:	22b0      	movs	r2, #176	; 0xb0
     9c4:	0112      	lsls	r2, r2, #4
     9c6:	801a      	strh	r2, [r3, #0]
                             TC_CTRLA_RUNSTDBY |
                             TC_CTRLA_PRESCALER_DIV8;
    //  TC3->COUNT16.PER.reg = 0xFE;

    TC4->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
     9c8:	2201      	movs	r2, #1
     9ca:	735a      	strb	r2, [r3, #13]

    TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     9cc:	8819      	ldrh	r1, [r3, #0]
     9ce:	3201      	adds	r2, #1
     9d0:	430a      	orrs	r2, r1
     9d2:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     9d4:	2280      	movs	r2, #128	; 0x80
     9d6:	0312      	lsls	r2, r2, #12
     9d8:	4b03      	ldr	r3, [pc, #12]	; (9e8 <SaLTC4Init+0x34>)
     9da:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     9dc:	4770      	bx	lr
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	40000400 	.word	0x40000400
     9e4:	42003000 	.word	0x42003000
     9e8:	e000e100 	.word	0xe000e100

000009ec <SaLRtcInit>:
}



void SaLRtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     9ec:	4b19      	ldr	r3, [pc, #100]	; (a54 <SaLRtcInit+0x68>)
     9ee:	2281      	movs	r2, #129	; 0x81
     9f0:	0052      	lsls	r2, r2, #1
     9f2:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     9f4:	4a18      	ldr	r2, [pc, #96]	; (a58 <SaLRtcInit+0x6c>)
     9f6:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     9f8:	1c1a      	adds	r2, r3, #0
     9fa:	7853      	ldrb	r3, [r2, #1]
     9fc:	b25b      	sxtb	r3, r3
     9fe:	2b00      	cmp	r3, #0
     a00:	dbfb      	blt.n	9fa <SaLRtcInit+0xe>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     a02:	4a16      	ldr	r2, [pc, #88]	; (a5c <SaLRtcInit+0x70>)
     a04:	4b13      	ldr	r3, [pc, #76]	; (a54 <SaLRtcInit+0x68>)
     a06:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16 |
     a08:	2204      	movs	r2, #4
     a0a:	4b15      	ldr	r3, [pc, #84]	; (a60 <SaLRtcInit+0x74>)
     a0c:	801a      	strh	r2, [r3, #0]
                          RTC_MODE1_CTRL_PRESCALER_DIV1;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     a0e:	1c1a      	adds	r2, r3, #0
     a10:	7a93      	ldrb	r3, [r2, #10]
     a12:	09db      	lsrs	r3, r3, #7
     a14:	d1fc      	bne.n	a10 <SaLRtcInit+0x24>

// Prescaler needs to be enabled separately from the mode for some reason
//  RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV1;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     a16:	4a12      	ldr	r2, [pc, #72]	; (a60 <SaLRtcInit+0x74>)
     a18:	7a93      	ldrb	r3, [r2, #10]
     a1a:	09db      	lsrs	r3, r3, #7
     a1c:	d1fc      	bne.n	a18 <SaLRtcInit+0x2c>

    RTC->MODE1.PER.reg = 998;
     a1e:	4a11      	ldr	r2, [pc, #68]	; (a64 <SaLRtcInit+0x78>)
     a20:	4b0f      	ldr	r3, [pc, #60]	; (a60 <SaLRtcInit+0x74>)
     a22:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     a24:	1c1a      	adds	r2, r3, #0
     a26:	7a93      	ldrb	r3, [r2, #10]
     a28:	09db      	lsrs	r3, r3, #7
     a2a:	d1fc      	bne.n	a26 <SaLRtcInit+0x3a>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     a2c:	4b0c      	ldr	r3, [pc, #48]	; (a60 <SaLRtcInit+0x74>)
     a2e:	8859      	ldrh	r1, [r3, #2]
     a30:	4a0d      	ldr	r2, [pc, #52]	; (a68 <SaLRtcInit+0x7c>)
     a32:	430a      	orrs	r2, r1
     a34:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     a36:	2280      	movs	r2, #128	; 0x80
     a38:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     a3a:	8819      	ldrh	r1, [r3, #0]
     a3c:	2202      	movs	r2, #2
     a3e:	430a      	orrs	r2, r1
     a40:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     a42:	1c1a      	adds	r2, r3, #0
     a44:	7a93      	ldrb	r3, [r2, #10]
     a46:	09db      	lsrs	r3, r3, #7
     a48:	d1fc      	bne.n	a44 <SaLRtcInit+0x58>
     a4a:	2208      	movs	r2, #8
     a4c:	4b07      	ldr	r3, [pc, #28]	; (a6c <SaLRtcInit+0x80>)
     a4e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     a50:	4770      	bx	lr
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	40000c00 	.word	0x40000c00
     a58:	00230002 	.word	0x00230002
     a5c:	00004204 	.word	0x00004204
     a60:	40001400 	.word	0x40001400
     a64:	000003e6 	.word	0x000003e6
     a68:	00004010 	.word	0x00004010
     a6c:	e000e100 	.word	0xe000e100

00000a70 <RTC_Handler>:

volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     a70:	4a05      	ldr	r2, [pc, #20]	; (a88 <RTC_Handler+0x18>)
     a72:	6813      	ldr	r3, [r2, #0]
     a74:	21fa      	movs	r1, #250	; 0xfa
     a76:	0089      	lsls	r1, r1, #2
     a78:	468c      	mov	ip, r1
     a7a:	4463      	add	r3, ip
     a7c:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     a7e:	22ff      	movs	r2, #255	; 0xff
     a80:	4b02      	ldr	r3, [pc, #8]	; (a8c <RTC_Handler+0x1c>)
     a82:	721a      	strb	r2, [r3, #8]
}
     a84:	4770      	bx	lr
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	20000024 	.word	0x20000024
     a8c:	40001400 	.word	0x40001400

00000a90 <millis>:

uint32_t millis(void) {
	uint32_t ms;
	ATOMIC_SECTION_ENTER
     a90:	f3ef 8110 	mrs	r1, PRIMASK
     a94:	b672      	cpsid	i
	ms = time_ms + RTC->MODE1.COUNT.reg;
     a96:	4a0b      	ldr	r2, [pc, #44]	; (ac4 <millis+0x34>)
     a98:	8a10      	ldrh	r0, [r2, #16]
     a9a:	b280      	uxth	r0, r0
     a9c:	4b0a      	ldr	r3, [pc, #40]	; (ac8 <millis+0x38>)
     a9e:	681b      	ldr	r3, [r3, #0]
	if (RTC->MODE1.INTFLAG.bit.OVF)
     aa0:	7a12      	ldrb	r2, [r2, #8]
     aa2:	09d2      	lsrs	r2, r2, #7
}

uint32_t millis(void) {
	uint32_t ms;
	ATOMIC_SECTION_ENTER
	ms = time_ms + RTC->MODE1.COUNT.reg;
     aa4:	18c0      	adds	r0, r0, r3
	if (RTC->MODE1.INTFLAG.bit.OVF)
     aa6:	2a00      	cmp	r2, #0
     aa8:	d008      	beq.n	abc <millis+0x2c>
	ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     aaa:	4b06      	ldr	r3, [pc, #24]	; (ac4 <millis+0x34>)
     aac:	8a1b      	ldrh	r3, [r3, #16]
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <millis+0x38>)
     ab0:	6810      	ldr	r0, [r2, #0]
     ab2:	22fa      	movs	r2, #250	; 0xfa
     ab4:	0092      	lsls	r2, r2, #2
     ab6:	4694      	mov	ip, r2
     ab8:	4460      	add	r0, ip
     aba:	1818      	adds	r0, r3, r0
	ATOMIC_SECTION_LEAVE
     abc:	f381 8810 	msr	PRIMASK, r1
	return ms;
}
     ac0:	4770      	bx	lr
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	40001400 	.word	0x40001400
     ac8:	20000024 	.word	0x20000024

00000acc <SaLDelayInit>:
static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void SaLDelayInit(void) {
    cycles_per_ms = 41900000UL;
    cycles_per_ms /= 1000;
     acc:	4b04      	ldr	r3, [pc, #16]	; (ae0 <SaLDelayInit+0x14>)
     ace:	4a05      	ldr	r2, [pc, #20]	; (ae4 <SaLDelayInit+0x18>)
     ad0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     ad2:	2229      	movs	r2, #41	; 0x29
     ad4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     ad6:	3a24      	subs	r2, #36	; 0x24
     ad8:	4b03      	ldr	r3, [pc, #12]	; (ae8 <SaLDelayInit+0x1c>)
     ada:	601a      	str	r2, [r3, #0]
}
     adc:	4770      	bx	lr
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	20000000 	.word	0x20000000
     ae4:	0000a3ac 	.word	0x0000a3ac
     ae8:	e000e010 	.word	0xe000e010

00000aec <delay_us>:
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
     aec:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     aee:	4b08      	ldr	r3, [pc, #32]	; (b10 <delay_us+0x24>)
     af0:	685c      	ldr	r4, [r3, #4]
void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     af2:	4a08      	ldr	r2, [pc, #32]	; (b14 <delay_us+0x28>)
        SysTick->VAL = 0;
     af4:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     af6:	2180      	movs	r1, #128	; 0x80
     af8:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
    while (n--) {
     afa:	e006      	b.n	b0a <delay_us+0x1e>

void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     afc:	2c00      	cmp	r4, #0
     afe:	d004      	beq.n	b0a <delay_us+0x1e>
        SysTick->LOAD = n;
     b00:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     b02:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b04:	6813      	ldr	r3, [r2, #0]
     b06:	420b      	tst	r3, r1
     b08:	d0fc      	beq.n	b04 <delay_us+0x18>
     b0a:	3801      	subs	r0, #1
     b0c:	d2f6      	bcs.n	afc <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     b0e:	bd30      	pop	{r4, r5, pc}
     b10:	20000000 	.word	0x20000000
     b14:	e000e010 	.word	0xe000e010

00000b18 <addSampleToVariance>:

#include <SaLMath.h>


void addSampleToVariance(struct sVar *var, uint32_t newSample) {
     b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b1a:	1c05      	adds	r5, r0, #0
     b1c:	1c0f      	adds	r7, r1, #0
    int16_t delta = newSample - var->mean;
     b1e:	6806      	ldr	r6, [r0, #0]
     b20:	1b8c      	subs	r4, r1, r6
    var->numSamples++;
     b22:	8901      	ldrh	r1, [r0, #8]
     b24:	3101      	adds	r1, #1
     b26:	b289      	uxth	r1, r1
     b28:	8101      	strh	r1, [r0, #8]
    var->mean += delta/var->numSamples;
     b2a:	b224      	sxth	r4, r4
     b2c:	1c20      	adds	r0, r4, #0
     b2e:	4b05      	ldr	r3, [pc, #20]	; (b44 <addSampleToVariance+0x2c>)
     b30:	4798      	blx	r3
     b32:	1986      	adds	r6, r0, r6
     b34:	602e      	str	r6, [r5, #0]
    var->M2 += delta * (newSample - var->mean);
     b36:	1bbe      	subs	r6, r7, r6
     b38:	4374      	muls	r4, r6
     b3a:	686b      	ldr	r3, [r5, #4]
     b3c:	469c      	mov	ip, r3
     b3e:	4464      	add	r4, ip
     b40:	606c      	str	r4, [r5, #4]
}
     b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b44:	00001219 	.word	0x00001219

00000b48 <GetVariance>:

uint32_t GetVariance(struct sVar *var, uint32_t *average) {
     b48:	b538      	push	{r3, r4, r5, lr}
     b4a:	1c04      	adds	r4, r0, #0
     b4c:	1c0d      	adds	r5, r1, #0
    uint16_t variance = var->M2/var->numSamples;
     b4e:	8901      	ldrh	r1, [r0, #8]
     b50:	6840      	ldr	r0, [r0, #4]
     b52:	4b05      	ldr	r3, [pc, #20]	; (b68 <GetVariance+0x20>)
     b54:	4798      	blx	r3
    *average = var->mean;
     b56:	6823      	ldr	r3, [r4, #0]
     b58:	602b      	str	r3, [r5, #0]

    var->numSamples = 0;
     b5a:	2300      	movs	r3, #0
     b5c:	8123      	strh	r3, [r4, #8]
    var->mean = 0;
     b5e:	6023      	str	r3, [r4, #0]
    var->M2 = 0;
     b60:	6063      	str	r3, [r4, #4]
     b62:	0400      	lsls	r0, r0, #16
     b64:	0c00      	lsrs	r0, r0, #16

    return variance;
     b66:	bd38      	pop	{r3, r4, r5, pc}
     b68:	00001219 	.word	0x00001219

00000b6c <SaLPinMode>:


#include <SaLPort.h>

void SaLPinMode(uint8_t pin,uint8_t DIR) {
     b6c:	b510      	push	{r4, lr}
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     b6e:	09c2      	lsrs	r2, r0, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     b70:	2300      	movs	r3, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     b72:	2a00      	cmp	r2, #0
     b74:	d104      	bne.n	b80 <SaLPinMode+0x14>
        return &(ports[port_index]->Group[group_index]);
     b76:	0943      	lsrs	r3, r0, #5
     b78:	01db      	lsls	r3, r3, #7
     b7a:	4a11      	ldr	r2, [pc, #68]	; (bc0 <SaLPinMode+0x54>)
     b7c:	4694      	mov	ip, r2
     b7e:	4463      	add	r3, ip
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     b80:	221f      	movs	r2, #31
     b82:	4002      	ands	r2, r0
     b84:	2401      	movs	r4, #1
     b86:	4094      	lsls	r4, r2

    if ( DIR == OUTPUT) {
     b88:	2901      	cmp	r1, #1
     b8a:	d105      	bne.n	b98 <SaLPinMode+0x2c>
        port->DIRSET.reg = pin_mask;
     b8c:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0;
     b8e:	1818      	adds	r0, r3, r0
     b90:	3040      	adds	r0, #64	; 0x40
     b92:	2300      	movs	r3, #0
     b94:	7003      	strb	r3, [r0, #0]
     b96:	e012      	b.n	bbe <SaLPinMode+0x52>

    } else if(DIR == INPUT) {
     b98:	2900      	cmp	r1, #0
     b9a:	d109      	bne.n	bb0 <SaLPinMode+0x44>
        port->DIRCLR.reg = pin_mask;
     b9c:	605c      	str	r4, [r3, #4]
        port->PINCFG[pin].reg = PORT_PINCFG_INEN;
     b9e:	1818      	adds	r0, r3, r0
     ba0:	3040      	adds	r0, #64	; 0x40
     ba2:	2302      	movs	r3, #2
     ba4:	7003      	strb	r3, [r0, #0]
        port->PINCFG[pin].reg |= PORT_PINCFG_PULLEN;
     ba6:	7802      	ldrb	r2, [r0, #0]
     ba8:	3302      	adds	r3, #2
     baa:	4313      	orrs	r3, r2
     bac:	7003      	strb	r3, [r0, #0]
     bae:	e006      	b.n	bbe <SaLPinMode+0x52>
    } else if (DIR == OUTSTRONG) {
     bb0:	2903      	cmp	r1, #3
     bb2:	d104      	bne.n	bbe <SaLPinMode+0x52>
        port->DIRSET.reg = pin_mask;
     bb4:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0x40;
     bb6:	1818      	adds	r0, r3, r0
     bb8:	3040      	adds	r0, #64	; 0x40
     bba:	2340      	movs	r3, #64	; 0x40
     bbc:	7003      	strb	r3, [r0, #0]

    }
     bbe:	bd10      	pop	{r4, pc}
     bc0:	41004400 	.word	0x41004400

00000bc4 <sampleTick>:
uint16_t thisTime;
uint16_t lastTime;
uint16_t deltatt;
uint16_t deltaa[1000];

void sampleTick() {
     bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc6:	4657      	mov	r7, sl
     bc8:	b480      	push	{r7}
     bca:	b086      	sub	sp, #24

    if (!baroSampleReady) baroSampleReady = baroSample();
     bcc:	4b54      	ldr	r3, [pc, #336]	; (d20 <sampleTick+0x15c>)
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d000      	beq.n	bd6 <sampleTick+0x12>
     bd4:	e09a      	b.n	d0c <sampleTick+0x148>
     bd6:	4b53      	ldr	r3, [pc, #332]	; (d24 <sampleTick+0x160>)
     bd8:	4798      	blx	r3
     bda:	4b51      	ldr	r3, [pc, #324]	; (d20 <sampleTick+0x15c>)
     bdc:	7018      	strb	r0, [r3, #0]
    if (!accelSampleReady) accelSampleReady = accelSample();
     bde:	4b52      	ldr	r3, [pc, #328]	; (d28 <sampleTick+0x164>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b00      	cmp	r3, #0
     be4:	d000      	beq.n	be8 <sampleTick+0x24>
     be6:	e08b      	b.n	d00 <sampleTick+0x13c>
     be8:	4b50      	ldr	r3, [pc, #320]	; (d2c <sampleTick+0x168>)
     bea:	4798      	blx	r3
     bec:	4a4e      	ldr	r2, [pc, #312]	; (d28 <sampleTick+0x164>)
     bee:	7010      	strb	r0, [r2, #0]


    if (baroSampleReady && accelSampleReady) {
     bf0:	4a4b      	ldr	r2, [pc, #300]	; (d20 <sampleTick+0x15c>)
     bf2:	7812      	ldrb	r2, [r2, #0]
     bf4:	2a00      	cmp	r2, #0
     bf6:	d100      	bne.n	bfa <sampleTick+0x36>
     bf8:	e08e      	b.n	d18 <sampleTick+0x154>
     bfa:	2800      	cmp	r0, #0
     bfc:	d100      	bne.n	c00 <sampleTick+0x3c>
     bfe:	e08b      	b.n	d18 <sampleTick+0x154>
        index222++;
     c00:	4b4b      	ldr	r3, [pc, #300]	; (d30 <sampleTick+0x16c>)
     c02:	469a      	mov	sl, r3
     c04:	881b      	ldrh	r3, [r3, #0]
     c06:	3301      	adds	r3, #1
     c08:	4652      	mov	r2, sl
     c0a:	8013      	strh	r3, [r2, #0]
        sampleBeingCooked.sampleMills = millis();
     c0c:	4b49      	ldr	r3, [pc, #292]	; (d34 <sampleTick+0x170>)
     c0e:	4798      	blx	r3
     c10:	4f49      	ldr	r7, [pc, #292]	; (d38 <sampleTick+0x174>)
     c12:	62b8      	str	r0, [r7, #40]	; 0x28
        sampleBeingCooked.deltaT = sampleBeingCooked.sampleMills - cookedSample.sampleMills;
     c14:	4e49      	ldr	r6, [pc, #292]	; (d3c <sampleTick+0x178>)
     c16:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     c18:	1ac0      	subs	r0, r0, r3
     c1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        sampleBeingCooked.altitude = SaLBaroGetHeight();
     c1c:	4d48      	ldr	r5, [pc, #288]	; (d40 <sampleTick+0x17c>)
     c1e:	47a8      	blx	r5
     c20:	4c48      	ldr	r4, [pc, #288]	; (d44 <sampleTick+0x180>)
     c22:	47a0      	blx	r4
     c24:	6078      	str	r0, [r7, #4]
        sampleBeingCooked.accelerationInX = SaLGetAccelX();
     c26:	4b48      	ldr	r3, [pc, #288]	; (d48 <sampleTick+0x184>)
     c28:	4798      	blx	r3
     c2a:	60f8      	str	r0, [r7, #12]
        sampleBeingCooked.accelerationInY = SaLGetAccelY();
     c2c:	4b47      	ldr	r3, [pc, #284]	; (d4c <sampleTick+0x188>)
     c2e:	4798      	blx	r3
     c30:	6138      	str	r0, [r7, #16]
        sampleBeingCooked.accelerationInZ = SaLGetAccelZ();
     c32:	4b47      	ldr	r3, [pc, #284]	; (d50 <sampleTick+0x18c>)
     c34:	4798      	blx	r3
     c36:	6178      	str	r0, [r7, #20]
        sampleBeingCooked.position = SaLBaroGetHeight();
     c38:	47a8      	blx	r5
     c3a:	47a0      	blx	r4
     c3c:	63b8      	str	r0, [r7, #56]	; 0x38

        sampleBeingCooked.velocityStar = cookedSample.positionStar + sampleBeingCooked.accelerationInX*sampleBeingCooked.deltaT;
     c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c40:	9300      	str	r3, [sp, #0]
     c42:	1c18      	adds	r0, r3, #0
     c44:	47a0      	blx	r4
     c46:	4d43      	ldr	r5, [pc, #268]	; (d54 <sampleTick+0x190>)
     c48:	9002      	str	r0, [sp, #8]
     c4a:	68f9      	ldr	r1, [r7, #12]
     c4c:	47a8      	blx	r5
     c4e:	1c01      	adds	r1, r0, #0
     c50:	4c41      	ldr	r4, [pc, #260]	; (d58 <sampleTick+0x194>)
     c52:	6b30      	ldr	r0, [r6, #48]	; 0x30
     c54:	47a0      	blx	r4
     c56:	6378      	str	r0, [r7, #52]	; 0x34
        sampleBeingCooked.positionStar = cookedSample.position +
                                         cookedSample.velocityStar * sampleBeingCooked.deltaT +
                                         sampleBeingCooked.accelerationInZ *  (pow(sampleBeingCooked.deltaT,2)/2);
     c58:	9800      	ldr	r0, [sp, #0]
     c5a:	4b40      	ldr	r3, [pc, #256]	; (d5c <sampleTick+0x198>)
     c5c:	4798      	blx	r3
     c5e:	9000      	str	r0, [sp, #0]
     c60:	9101      	str	r1, [sp, #4]
        sampleBeingCooked.accelerationInZ = SaLGetAccelZ();
        sampleBeingCooked.position = SaLBaroGetHeight();

        sampleBeingCooked.velocityStar = cookedSample.positionStar + sampleBeingCooked.accelerationInX*sampleBeingCooked.deltaT;
        sampleBeingCooked.positionStar = cookedSample.position +
                                         cookedSample.velocityStar * sampleBeingCooked.deltaT +
     c62:	9802      	ldr	r0, [sp, #8]
     c64:	6b71      	ldr	r1, [r6, #52]	; 0x34
     c66:	47a8      	blx	r5
        sampleBeingCooked.accelerationInY = SaLGetAccelY();
        sampleBeingCooked.accelerationInZ = SaLGetAccelZ();
        sampleBeingCooked.position = SaLBaroGetHeight();

        sampleBeingCooked.velocityStar = cookedSample.positionStar + sampleBeingCooked.accelerationInX*sampleBeingCooked.deltaT;
        sampleBeingCooked.positionStar = cookedSample.position +
     c68:	6bb1      	ldr	r1, [r6, #56]	; 0x38
     c6a:	47a0      	blx	r4
                                         cookedSample.velocityStar * sampleBeingCooked.deltaT +
     c6c:	4c3c      	ldr	r4, [pc, #240]	; (d60 <sampleTick+0x19c>)
     c6e:	47a0      	blx	r4
     c70:	9002      	str	r0, [sp, #8]
     c72:	9103      	str	r1, [sp, #12]
                                         sampleBeingCooked.accelerationInZ *  (pow(sampleBeingCooked.deltaT,2)/2);
     c74:	6978      	ldr	r0, [r7, #20]
     c76:	47a0      	blx	r4
     c78:	9004      	str	r0, [sp, #16]
     c7a:	9105      	str	r1, [sp, #20]
     c7c:	4c39      	ldr	r4, [pc, #228]	; (d64 <sampleTick+0x1a0>)
     c7e:	9a00      	ldr	r2, [sp, #0]
     c80:	9b01      	ldr	r3, [sp, #4]
     c82:	1c10      	adds	r0, r2, #0
     c84:	1c19      	adds	r1, r3, #0
     c86:	47a0      	blx	r4
     c88:	2200      	movs	r2, #0
     c8a:	4b37      	ldr	r3, [pc, #220]	; (d68 <sampleTick+0x1a4>)
     c8c:	47a0      	blx	r4
     c8e:	1c02      	adds	r2, r0, #0
     c90:	1c0b      	adds	r3, r1, #0
     c92:	9804      	ldr	r0, [sp, #16]
     c94:	9905      	ldr	r1, [sp, #20]
     c96:	47a0      	blx	r4
     c98:	1c02      	adds	r2, r0, #0
     c9a:	1c0b      	adds	r3, r1, #0
        sampleBeingCooked.accelerationInZ = SaLGetAccelZ();
        sampleBeingCooked.position = SaLBaroGetHeight();

        sampleBeingCooked.velocityStar = cookedSample.positionStar + sampleBeingCooked.accelerationInX*sampleBeingCooked.deltaT;
        sampleBeingCooked.positionStar = cookedSample.position +
                                         cookedSample.velocityStar * sampleBeingCooked.deltaT +
     c9c:	9802      	ldr	r0, [sp, #8]
     c9e:	9903      	ldr	r1, [sp, #12]
     ca0:	4c32      	ldr	r4, [pc, #200]	; (d6c <sampleTick+0x1a8>)
     ca2:	47a0      	blx	r4
        sampleBeingCooked.accelerationInY = SaLGetAccelY();
        sampleBeingCooked.accelerationInZ = SaLGetAccelZ();
        sampleBeingCooked.position = SaLBaroGetHeight();

        sampleBeingCooked.velocityStar = cookedSample.positionStar + sampleBeingCooked.accelerationInX*sampleBeingCooked.deltaT;
        sampleBeingCooked.positionStar = cookedSample.position +
     ca4:	4b32      	ldr	r3, [pc, #200]	; (d70 <sampleTick+0x1ac>)
     ca6:	4798      	blx	r3
     ca8:	6338      	str	r0, [r7, #48]	; 0x30
                                         cookedSample.velocityStar * sampleBeingCooked.deltaT +
                                         sampleBeingCooked.accelerationInZ *  (pow(sampleBeingCooked.deltaT,2)/2);


        baroSampleState = 0;
     caa:	2300      	movs	r3, #0
     cac:	4a31      	ldr	r2, [pc, #196]	; (d74 <sampleTick+0x1b0>)
     cae:	7013      	strb	r3, [r2, #0]
        accelSampleState = 0;
     cb0:	4a31      	ldr	r2, [pc, #196]	; (d78 <sampleTick+0x1b4>)
     cb2:	7013      	strb	r3, [r2, #0]
        baroSampleReady = false;
     cb4:	4a1a      	ldr	r2, [pc, #104]	; (d20 <sampleTick+0x15c>)
     cb6:	7013      	strb	r3, [r2, #0]
        accelSampleReady = false;
     cb8:	4a1b      	ldr	r2, [pc, #108]	; (d28 <sampleTick+0x164>)
     cba:	7013      	strb	r3, [r2, #0]
        cookedSample = sampleBeingCooked;
     cbc:	1c30      	adds	r0, r6, #0
     cbe:	1c39      	adds	r1, r7, #0
     cc0:	2240      	movs	r2, #64	; 0x40
     cc2:	4b2e      	ldr	r3, [pc, #184]	; (d7c <sampleTick+0x1b8>)
     cc4:	4798      	blx	r3
        deltaa[index222] = cookedSample.altitude;
     cc6:	4653      	mov	r3, sl
     cc8:	2400      	movs	r4, #0
     cca:	5f1c      	ldrsh	r4, [r3, r4]
     ccc:	0065      	lsls	r5, r4, #1
     cce:	6870      	ldr	r0, [r6, #4]
     cd0:	4b2b      	ldr	r3, [pc, #172]	; (d80 <sampleTick+0x1bc>)
     cd2:	4798      	blx	r3
     cd4:	4b2b      	ldr	r3, [pc, #172]	; (d84 <sampleTick+0x1c0>)
     cd6:	52e8      	strh	r0, [r5, r3]
        if (index222 > 1000) {
     cd8:	23fa      	movs	r3, #250	; 0xfa
     cda:	009b      	lsls	r3, r3, #2
     cdc:	429c      	cmp	r4, r3
     cde:	dd1b      	ble.n	d18 <sampleTick+0x154>
            index222 = 0;
     ce0:	2200      	movs	r2, #0
     ce2:	4b13      	ldr	r3, [pc, #76]	; (d30 <sampleTick+0x16c>)
     ce4:	801a      	strh	r2, [r3, #0]
            thisTime = millis();
     ce6:	4d13      	ldr	r5, [pc, #76]	; (d34 <sampleTick+0x170>)
     ce8:	47a8      	blx	r5
     cea:	b280      	uxth	r0, r0
     cec:	4b26      	ldr	r3, [pc, #152]	; (d88 <sampleTick+0x1c4>)
     cee:	8018      	strh	r0, [r3, #0]
            deltatt = thisTime - lastTime;
     cf0:	4c26      	ldr	r4, [pc, #152]	; (d8c <sampleTick+0x1c8>)
     cf2:	8823      	ldrh	r3, [r4, #0]
     cf4:	1ac0      	subs	r0, r0, r3
     cf6:	4b26      	ldr	r3, [pc, #152]	; (d90 <sampleTick+0x1cc>)
     cf8:	8018      	strh	r0, [r3, #0]
            lastTime = millis();
     cfa:	47a8      	blx	r5
     cfc:	8020      	strh	r0, [r4, #0]
     cfe:	e00b      	b.n	d18 <sampleTick+0x154>

    if (!baroSampleReady) baroSampleReady = baroSample();
    if (!accelSampleReady) accelSampleReady = accelSample();


    if (baroSampleReady && accelSampleReady) {
     d00:	4b07      	ldr	r3, [pc, #28]	; (d20 <sampleTick+0x15c>)
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	2b00      	cmp	r3, #0
     d06:	d000      	beq.n	d0a <sampleTick+0x146>
     d08:	e77a      	b.n	c00 <sampleTick+0x3c>
     d0a:	e005      	b.n	d18 <sampleTick+0x154>
uint16_t deltaa[1000];

void sampleTick() {

    if (!baroSampleReady) baroSampleReady = baroSample();
    if (!accelSampleReady) accelSampleReady = accelSample();
     d0c:	4b06      	ldr	r3, [pc, #24]	; (d28 <sampleTick+0x164>)
     d0e:	781b      	ldrb	r3, [r3, #0]
     d10:	2b00      	cmp	r3, #0
     d12:	d000      	beq.n	d16 <sampleTick+0x152>
     d14:	e774      	b.n	c00 <sampleTick+0x3c>
     d16:	e767      	b.n	be8 <sampleTick+0x24>
            thisTime = millis();
            deltatt = thisTime - lastTime;
            lastTime = millis();
        }
    }
}
     d18:	b006      	add	sp, #24
     d1a:	bc04      	pop	{r2}
     d1c:	4692      	mov	sl, r2
     d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d20:	200000c6 	.word	0x200000c6
     d24:	00000689 	.word	0x00000689
     d28:	200000c5 	.word	0x200000c5
     d2c:	000002f5 	.word	0x000002f5
     d30:	20000028 	.word	0x20000028
     d34:	00000a91 	.word	0x00000a91
     d38:	20000084 	.word	0x20000084
     d3c:	200008a0 	.word	0x200008a0
     d40:	00000809 	.word	0x00000809
     d44:	00001dc5 	.word	0x00001dc5
     d48:	000005dd 	.word	0x000005dd
     d4c:	000005e9 	.word	0x000005e9
     d50:	000005f5 	.word	0x000005f5
     d54:	00001825 	.word	0x00001825
     d58:	0000152d 	.word	0x0000152d
     d5c:	00002a51 	.word	0x00002a51
     d60:	00002ab5 	.word	0x00002ab5
     d64:	000024a5 	.word	0x000024a5
     d68:	3fe00000 	.word	0x3fe00000
     d6c:	00001e55 	.word	0x00001e55
     d70:	00002b5d 	.word	0x00002b5d
     d74:	20000074 	.word	0x20000074
     d78:	2000005e 	.word	0x2000005e
     d7c:	00001205 	.word	0x00001205
     d80:	00001491 	.word	0x00001491
     d84:	200000cc 	.word	0x200000cc
     d88:	2000089e 	.word	0x2000089e
     d8c:	2000089c 	.word	0x2000089c
     d90:	20000080 	.word	0x20000080

00000d94 <uart_init>:


#include <SaLUSART.h>

void uart_init(uint32_t baud) {
     d94:	b510      	push	{r4, lr}

    uint32_t UART_CLKGEN_F = 8000000UL;
    uint64_t br = (uint64_t)65536 * (UART_CLKGEN_F - 16 * baud) / UART_CLKGEN_F;
     d96:	0100      	lsls	r0, r0, #4
     d98:	4b2c      	ldr	r3, [pc, #176]	; (e4c <uart_init+0xb8>)
     d9a:	1a18      	subs	r0, r3, r0
     d9c:	0c01      	lsrs	r1, r0, #16
     d9e:	0400      	lsls	r0, r0, #16
     da0:	4a2a      	ldr	r2, [pc, #168]	; (e4c <uart_init+0xb8>)
     da2:	2300      	movs	r3, #0
     da4:	4c2a      	ldr	r4, [pc, #168]	; (e50 <uart_init+0xbc>)
     da6:	47a0      	blx	r4

    //enable GPS pins
    //  SaLPinMode(MTK3339_RX_PIN,INPUT);
    //  SaLPinMode(MTK3339_TX_PIN,OUTPUT);
    SYSCTRL->OSC8M.reg -= SYSCTRL_OSC8M_ENABLE;
     da8:	4b2a      	ldr	r3, [pc, #168]	; (e54 <uart_init+0xc0>)
     daa:	6a1a      	ldr	r2, [r3, #32]
     dac:	3a02      	subs	r2, #2
     dae:	621a      	str	r2, [r3, #32]
    SYSCTRL->OSC8M.reg -= SYSCTRL_OSC8M_PRESC_3;
     db0:	6a1a      	ldr	r2, [r3, #32]
     db2:	4929      	ldr	r1, [pc, #164]	; (e58 <uart_init+0xc4>)
     db4:	468c      	mov	ip, r1
     db6:	4462      	add	r2, ip
     db8:	621a      	str	r2, [r3, #32]
    SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     dba:	6a19      	ldr	r1, [r3, #32]
     dbc:	2202      	movs	r2, #2
     dbe:	430a      	orrs	r2, r1
     dc0:	621a      	str	r2, [r3, #32]



    //portB22->PINCFG->reg = 0x44;
    // portB23->PINCFG->reg = 0x44;
    ((Port *)PORT)->Group[1].PINCFG[22].reg = 0x41;
     dc2:	4b26      	ldr	r3, [pc, #152]	; (e5c <uart_init+0xc8>)
     dc4:	2241      	movs	r2, #65	; 0x41
     dc6:	21d6      	movs	r1, #214	; 0xd6
     dc8:	545a      	strb	r2, [r3, r1]
    ((Port *)PORT)->Group[1].PINCFG[23].reg = 0x41;
     dca:	3101      	adds	r1, #1
     dcc:	545a      	strb	r2, [r3, r1]
    ((Port *)PORT)->Group[1].PMUX[11].reg = 0x32;
     dce:	39a5      	subs	r1, #165	; 0xa5
     dd0:	327a      	adds	r2, #122	; 0x7a
     dd2:	5499      	strb	r1, [r3, r2]



    //enable power to sercom 5 module
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
     dd4:	4a22      	ldr	r2, [pc, #136]	; (e60 <uart_init+0xcc>)
     dd6:	6a11      	ldr	r1, [r2, #32]
     dd8:	2380      	movs	r3, #128	; 0x80
     dda:	430b      	orrs	r3, r1
     ddc:	6213      	str	r3, [r2, #32]
    //enable and configure the sercom clock
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(3) |
     dde:	4b21      	ldr	r3, [pc, #132]	; (e64 <uart_init+0xd0>)
     de0:	2204      	movs	r2, #4
     de2:	32ff      	adds	r2, #255	; 0xff
     de4:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(3) |
     de6:	4a20      	ldr	r2, [pc, #128]	; (e68 <uart_init+0xd4>)
     de8:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOM5_CORE |
     dea:	4a20      	ldr	r2, [pc, #128]	; (e6c <uart_init+0xd8>)
     dec:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN;
    //     GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOMX_SLOW |
    //                         GCLK_CLKCTRL_GEN_GCLK3 |
    //                         GCLK_CLKCTRL_CLKEN;
    //configure the sercom module for the gps (sercom 5)
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_DORD |
     dee:	4a20      	ldr	r2, [pc, #128]	; (e70 <uart_init+0xdc>)
     df0:	4b20      	ldr	r3, [pc, #128]	; (e74 <uart_init+0xe0>)
     df2:	601a      	str	r2, [r3, #0]
#include <SaLIo.h>

typedef uint16_t SaLSercomUsartDataReg_t;

static inline void uart_sync(void) {
    while (SERCOM5->USART.SYNCBUSY.bit.CTRLB);
     df4:	1c19      	adds	r1, r3, #0
     df6:	2201      	movs	r2, #1
     df8:	69cb      	ldr	r3, [r1, #28]
     dfa:	089b      	lsrs	r3, r3, #2
     dfc:	421a      	tst	r2, r3
     dfe:	d1fb      	bne.n	df8 <uart_init+0x64>
                               SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_RXPO(3) |
                               SERCOM_USART_CTRLA_TXPO(1);
    uart_sync();
    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
     e00:	22c0      	movs	r2, #192	; 0xc0
     e02:	0292      	lsls	r2, r2, #10
     e04:	4b1b      	ldr	r3, [pc, #108]	; (e74 <uart_init+0xe0>)
     e06:	605a      	str	r2, [r3, #4]
     e08:	1c19      	adds	r1, r3, #0
     e0a:	2201      	movs	r2, #1
     e0c:	69cb      	ldr	r3, [r1, #28]
     e0e:	089b      	lsrs	r3, r3, #2
     e10:	421a      	tst	r2, r3
     e12:	d1fb      	bne.n	e0c <uart_init+0x78>
                               SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
    // SERCOM_USART_CTRLB_SFDE;
    uart_sync();
    SERCOM5->USART.BAUD.reg = (uint16_t)br;
     e14:	b280      	uxth	r0, r0
     e16:	4b17      	ldr	r3, [pc, #92]	; (e74 <uart_init+0xe0>)
     e18:	8198      	strh	r0, [r3, #12]
     e1a:	1c19      	adds	r1, r3, #0
     e1c:	2201      	movs	r2, #1
     e1e:	69cb      	ldr	r3, [r1, #28]
     e20:	089b      	lsrs	r3, r3, #2
     e22:	421a      	tst	r2, r3
     e24:	d1fb      	bne.n	e1e <uart_init+0x8a>
    uart_sync();
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     e26:	4a13      	ldr	r2, [pc, #76]	; (e74 <uart_init+0xe0>)
     e28:	6811      	ldr	r1, [r2, #0]
     e2a:	2302      	movs	r3, #2
     e2c:	430b      	orrs	r3, r1
     e2e:	6013      	str	r3, [r2, #0]
     e30:	1c11      	adds	r1, r2, #0
     e32:	2201      	movs	r2, #1
     e34:	69cb      	ldr	r3, [r1, #28]
     e36:	089b      	lsrs	r3, r3, #2
     e38:	421a      	tst	r2, r3
     e3a:	d1fb      	bne.n	e34 <uart_init+0xa0>
                                 const uint16_t length);

int32_t SaLInitUsart(struct SaLUsartDescriptor *const descr,
                     void *const hw) {

    descr->device.hw = hw;
     e3c:	4b0e      	ldr	r3, [pc, #56]	; (e78 <uart_init+0xe4>)
     e3e:	4a0d      	ldr	r2, [pc, #52]	; (e74 <uart_init+0xe0>)
     e40:	609a      	str	r2, [r3, #8]
    descr->io.read = SaLUsartDataRead;
     e42:	4a0e      	ldr	r2, [pc, #56]	; (e7c <uart_init+0xe8>)
     e44:	605a      	str	r2, [r3, #4]
    descr->io.write = SaLUsartDataWrite;
     e46:	4a0e      	ldr	r2, [pc, #56]	; (e80 <uart_init+0xec>)
     e48:	601a      	str	r2, [r3, #0]
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    uart_sync();

    SaLInitUsart(&USART_0,SERCOM5);

}
     e4a:	bd10      	pop	{r4, pc}
     e4c:	007a1200 	.word	0x007a1200
     e50:	000013fd 	.word	0x000013fd
     e54:	40000800 	.word	0x40000800
     e58:	fffffd00 	.word	0xfffffd00
     e5c:	41004400 	.word	0x41004400
     e60:	40000400 	.word	0x40000400
     e64:	40000c00 	.word	0x40000c00
     e68:	00230603 	.word	0x00230603
     e6c:	00004319 	.word	0x00004319
     e70:	40310004 	.word	0x40310004
     e74:	42001c00 	.word	0x42001c00
     e78:	200008e0 	.word	0x200008e0
     e7c:	00000e95 	.word	0x00000e95
     e80:	00000ee5 	.word	0x00000ee5

00000e84 <SaLSyncUsartIo>:
};


void SaLSyncUsartIo(struct SaLUsartDescriptor *const descr,
                    struct IoDescriptor **Io) {
    *Io = &descr->io;
     e84:	6008      	str	r0, [r1, #0]
};
     e86:	4770      	bx	lr

00000e88 <_usartByteRecieved>:

bool _usartByteRecieved(const struct _UsartDevice *const device) {
    return _usartGetInteruptRCX(device->hw);
     e88:	6803      	ldr	r3, [r0, #0]
static inline SaLSercomUsartDataReg_t _usartGetDataReg(const void *const hw) {
    return     ((Sercom *)hw)->USART.DATA.reg;
}

static inline bool _usartGetInteruptRCX(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     e8a:	7e18      	ldrb	r0, [r3, #24]
     e8c:	0740      	lsls	r0, r0, #29
     e8e:	0fc0      	lsrs	r0, r0, #31
};
     e90:	4770      	bx	lr
     e92:	46c0      	nop			; (mov r8, r8)

00000e94 <SaLUsartDataRead>:



static int32_t SaLUsartDataRead(struct IoDescriptor *const ioDescr,
                                uint8_t *const buf,
                                const uint16_t length) {
     e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e96:	464f      	mov	r7, r9
     e98:	4646      	mov	r6, r8
     e9a:	b4c0      	push	{r6, r7}
     e9c:	4680      	mov	r8, r0
     e9e:	4689      	mov	r9, r1
     ea0:	1c17      	adds	r7, r2, #0

    int32_t offset = 0;
     ea2:	2600      	movs	r6, #0
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    do {
        while (!_usartByteRecieved(&descr->device));
     ea4:	1c05      	adds	r5, r0, #0
     ea6:	3508      	adds	r5, #8
     ea8:	4c0a      	ldr	r4, [pc, #40]	; (ed4 <SaLUsartDataRead+0x40>)
     eaa:	1c28      	adds	r0, r5, #0
     eac:	47a0      	blx	r4
     eae:	2800      	cmp	r0, #0
     eb0:	d0fb      	beq.n	eaa <SaLUsartDataRead+0x16>
    ((Sercom *)hw)->USART.DATA.reg = data;
    ATOMIC_SECTION_LEAVE
}

static inline SaLSercomUsartDataReg_t _usartGetDataReg(const void *const hw) {
    return     ((Sercom *)hw)->USART.DATA.reg;
     eb2:	4643      	mov	r3, r8
     eb4:	689b      	ldr	r3, [r3, #8]
     eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
bool _usartByteRecieved(const struct _UsartDevice *const device) {
    return _usartGetInteruptRCX(device->hw);
};

uint8_t _usartGetData(const struct _UsartDevice *const device) {
    return _usartGetDataReg(device->hw);
     eb8:	464a      	mov	r2, r9
     eba:	5593      	strb	r3, [r2, r6]
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    do {
        while (!_usartByteRecieved(&descr->device));
        buf[offset] = _usartGetData(&descr->device);
    } while (++offset < length);
     ebc:	3601      	adds	r6, #1
     ebe:	1c38      	adds	r0, r7, #0
     ec0:	42be      	cmp	r6, r7
     ec2:	dbf2      	blt.n	eaa <SaLUsartDataRead+0x16>
     ec4:	2f00      	cmp	r7, #0
     ec6:	dc00      	bgt.n	eca <SaLUsartDataRead+0x36>
     ec8:	2001      	movs	r0, #1

    return (int32_t)offset;
}
     eca:	bc0c      	pop	{r2, r3}
     ecc:	4690      	mov	r8, r2
     ece:	4699      	mov	r9, r3
     ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ed2:	46c0      	nop			; (mov r8, r8)
     ed4:	00000e89 	.word	0x00000e89

00000ed8 <_usartGetDreInterupt>:
uint8_t _usartGetData(const struct _UsartDevice *const device) {
    return _usartGetDataReg(device->hw);
}

bool _usartGetDreInterupt(const struct _UsartDevice *const device) {
    return _usartGetDreInteruptReg(device->hw);
     ed8:	6803      	ldr	r3, [r0, #0]
static inline bool _usartGetInteruptRCX(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;

};
static inline bool _usartGetDreInteruptReg(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     eda:	7e18      	ldrb	r0, [r3, #24]
     edc:	2301      	movs	r3, #1
     ede:	4018      	ands	r0, r3
}
     ee0:	4770      	bx	lr
     ee2:	46c0      	nop			; (mov r8, r8)

00000ee4 <SaLUsartDataWrite>:
    return (int32_t)offset;
}

static int32_t SaLUsartDataWrite(struct IoDescriptor *const ioDescr,
                                 const uint8_t *const buf,
                                 const uint16_t length) {
     ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ee6:	464f      	mov	r7, r9
     ee8:	4646      	mov	r6, r8
     eea:	b4c0      	push	{r6, r7}
     eec:	4680      	mov	r8, r0
     eee:	4689      	mov	r9, r1
     ef0:	1c17      	adds	r7, r2, #0

    int32_t offset = 0;
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    while (!_usartGetDreInterupt(&descr->device));
     ef2:	1c05      	adds	r5, r0, #0
     ef4:	3508      	adds	r5, #8
     ef6:	4e10      	ldr	r6, [pc, #64]	; (f38 <SaLUsartDataWrite+0x54>)
     ef8:	1c2c      	adds	r4, r5, #0
     efa:	1c28      	adds	r0, r5, #0
     efc:	47b0      	blx	r6
     efe:	2800      	cmp	r0, #0
     f00:	d0fa      	beq.n	ef8 <SaLUsartDataWrite+0x14>
     f02:	2600      	movs	r6, #0
    do {
        _usartSetDataReg(&descr->device,buf[offset]);
        while (!_usartGetDreInterupt(&descr->device));
     f04:	4d0c      	ldr	r5, [pc, #48]	; (f38 <SaLUsartDataWrite+0x54>)

void SaLSyncUsartIo(struct SaLUsartDescriptor *const descr,
                    struct IoDescriptor **Io);

static inline void _usartSetDataReg(const void *const hw, uint8_t data ) {
    ATOMIC_SECTION_ENTER
     f06:	f3ef 8310 	mrs	r3, PRIMASK
     f0a:	b672      	cpsid	i
    ((Sercom *)hw)->USART.DATA.reg = data;
     f0c:	464a      	mov	r2, r9
     f0e:	5d92      	ldrb	r2, [r2, r6]
     f10:	4641      	mov	r1, r8
     f12:	860a      	strh	r2, [r1, #48]	; 0x30
    ATOMIC_SECTION_LEAVE
     f14:	f383 8810 	msr	PRIMASK, r3
     f18:	1c20      	adds	r0, r4, #0
     f1a:	47a8      	blx	r5
     f1c:	2800      	cmp	r0, #0
     f1e:	d0fb      	beq.n	f18 <SaLUsartDataWrite+0x34>
    } while (++offset < length);
     f20:	3601      	adds	r6, #1
     f22:	1c38      	adds	r0, r7, #0
     f24:	42be      	cmp	r6, r7
     f26:	dbee      	blt.n	f06 <SaLUsartDataWrite+0x22>
     f28:	2f00      	cmp	r7, #0
     f2a:	dc00      	bgt.n	f2e <SaLUsartDataWrite+0x4a>
     f2c:	2001      	movs	r0, #1
    return offset;

}
     f2e:	bc0c      	pop	{r2, r3}
     f30:	4690      	mov	r8, r2
     f32:	4699      	mov	r9, r3
     f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	00000ed9 	.word	0x00000ed9

00000f3c <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     f3c:	f3ef 8305 	mrs	r3, IPSR
     f40:	e7fc      	b.n	f3c <Dummy_Handler>
     f42:	46c0      	nop			; (mov r8, r8)

00000f44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     f44:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     f46:	4b2e      	ldr	r3, [pc, #184]	; (1000 <Reset_Handler+0xbc>)
     f48:	4a2e      	ldr	r2, [pc, #184]	; (1004 <Reset_Handler+0xc0>)
     f4a:	429a      	cmp	r2, r3
     f4c:	d003      	beq.n	f56 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     f4e:	4b2e      	ldr	r3, [pc, #184]	; (1008 <Reset_Handler+0xc4>)
     f50:	4a2b      	ldr	r2, [pc, #172]	; (1000 <Reset_Handler+0xbc>)
     f52:	429a      	cmp	r2, r3
     f54:	d304      	bcc.n	f60 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     f56:	4b2d      	ldr	r3, [pc, #180]	; (100c <Reset_Handler+0xc8>)
     f58:	4a2d      	ldr	r2, [pc, #180]	; (1010 <Reset_Handler+0xcc>)
     f5a:	429a      	cmp	r2, r3
     f5c:	d310      	bcc.n	f80 <Reset_Handler+0x3c>
     f5e:	e01e      	b.n	f9e <Reset_Handler+0x5a>
     f60:	4a2c      	ldr	r2, [pc, #176]	; (1014 <Reset_Handler+0xd0>)
     f62:	4b29      	ldr	r3, [pc, #164]	; (1008 <Reset_Handler+0xc4>)
     f64:	3303      	adds	r3, #3
     f66:	1a9b      	subs	r3, r3, r2
     f68:	089b      	lsrs	r3, r3, #2
     f6a:	3301      	adds	r3, #1
     f6c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     f6e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     f70:	4823      	ldr	r0, [pc, #140]	; (1000 <Reset_Handler+0xbc>)
     f72:	4924      	ldr	r1, [pc, #144]	; (1004 <Reset_Handler+0xc0>)
     f74:	588c      	ldr	r4, [r1, r2]
     f76:	5084      	str	r4, [r0, r2]
     f78:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     f7a:	429a      	cmp	r2, r3
     f7c:	d1fa      	bne.n	f74 <Reset_Handler+0x30>
     f7e:	e7ea      	b.n	f56 <Reset_Handler+0x12>
     f80:	4a25      	ldr	r2, [pc, #148]	; (1018 <Reset_Handler+0xd4>)
     f82:	4b22      	ldr	r3, [pc, #136]	; (100c <Reset_Handler+0xc8>)
     f84:	3303      	adds	r3, #3
     f86:	1a9b      	subs	r3, r3, r2
     f88:	089b      	lsrs	r3, r3, #2
     f8a:	3301      	adds	r3, #1
     f8c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     f8e:	2200      	movs	r2, #0
                *pDest++ = 0;
     f90:	481f      	ldr	r0, [pc, #124]	; (1010 <Reset_Handler+0xcc>)
     f92:	2100      	movs	r1, #0
     f94:	1814      	adds	r4, r2, r0
     f96:	6021      	str	r1, [r4, #0]
     f98:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     f9a:	429a      	cmp	r2, r3
     f9c:	d1fa      	bne.n	f94 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     f9e:	4a1f      	ldr	r2, [pc, #124]	; (101c <Reset_Handler+0xd8>)
     fa0:	21ff      	movs	r1, #255	; 0xff
     fa2:	4b1f      	ldr	r3, [pc, #124]	; (1020 <Reset_Handler+0xdc>)
     fa4:	438b      	bics	r3, r1
     fa6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     fa8:	39fd      	subs	r1, #253	; 0xfd
     faa:	2390      	movs	r3, #144	; 0x90
     fac:	005b      	lsls	r3, r3, #1
     fae:	4a1d      	ldr	r2, [pc, #116]	; (1024 <Reset_Handler+0xe0>)
     fb0:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     fb2:	481d      	ldr	r0, [pc, #116]	; (1028 <Reset_Handler+0xe4>)
     fb4:	78c3      	ldrb	r3, [r0, #3]
     fb6:	2403      	movs	r4, #3
     fb8:	43a3      	bics	r3, r4
     fba:	2202      	movs	r2, #2
     fbc:	4313      	orrs	r3, r2
     fbe:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     fc0:	78c3      	ldrb	r3, [r0, #3]
     fc2:	260c      	movs	r6, #12
     fc4:	43b3      	bics	r3, r6
     fc6:	2108      	movs	r1, #8
     fc8:	430b      	orrs	r3, r1
     fca:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     fcc:	4b17      	ldr	r3, [pc, #92]	; (102c <Reset_Handler+0xe8>)
     fce:	7b98      	ldrb	r0, [r3, #14]
     fd0:	2530      	movs	r5, #48	; 0x30
     fd2:	43a8      	bics	r0, r5
     fd4:	1c05      	adds	r5, r0, #0
     fd6:	2020      	movs	r0, #32
     fd8:	4328      	orrs	r0, r5
     fda:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     fdc:	7b98      	ldrb	r0, [r3, #14]
     fde:	43b0      	bics	r0, r6
     fe0:	4301      	orrs	r1, r0
     fe2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     fe4:	7b99      	ldrb	r1, [r3, #14]
     fe6:	43a1      	bics	r1, r4
     fe8:	430a      	orrs	r2, r1
     fea:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     fec:	4a10      	ldr	r2, [pc, #64]	; (1030 <Reset_Handler+0xec>)
     fee:	6851      	ldr	r1, [r2, #4]
     ff0:	2380      	movs	r3, #128	; 0x80
     ff2:	430b      	orrs	r3, r1
     ff4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     ff6:	4b0f      	ldr	r3, [pc, #60]	; (1034 <Reset_Handler+0xf0>)
     ff8:	4798      	blx	r3

        /* Branch to main function */
        main();
     ffa:	4b0f      	ldr	r3, [pc, #60]	; (1038 <Reset_Handler+0xf4>)
     ffc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     ffe:	e7fe      	b.n	ffe <Reset_Handler+0xba>
    1000:	20000000 	.word	0x20000000
    1004:	00003420 	.word	0x00003420
    1008:	20000008 	.word	0x20000008
    100c:	20005718 	.word	0x20005718
    1010:	20000008 	.word	0x20000008
    1014:	20000004 	.word	0x20000004
    1018:	2000000c 	.word	0x2000000c
    101c:	e000ed00 	.word	0xe000ed00
    1020:	00000000 	.word	0x00000000
    1024:	41007000 	.word	0x41007000
    1028:	41005000 	.word	0x41005000
    102c:	41004800 	.word	0x41004800
    1030:	41004000 	.word	0x41004000
    1034:	000011b9 	.word	0x000011b9
    1038:	000010b9 	.word	0x000010b9

0000103c <PinConfig>:
uint8_t bytesRead;
bool retrieveSample;
uint32_t index2;


void PinConfig() {
    103c:	b538      	push	{r3, r4, r5, lr}
    /* temp SS HIGH for other peripherals */
    SaLPinMode(PIN_PA07,INPUT);
    103e:	2007      	movs	r0, #7
    1040:	2100      	movs	r1, #0
    1042:	4c0c      	ldr	r4, [pc, #48]	; (1074 <PinConfig+0x38>)
    1044:	47a0      	blx	r4
    SaLPinMode(PIN_PA10,OUTPUT);
    1046:	200a      	movs	r0, #10
    1048:	2101      	movs	r1, #1
    104a:	47a0      	blx	r4
    SaLPinMode(PIN_PA08,OUTPUT);
    104c:	2008      	movs	r0, #8
    104e:	2101      	movs	r1, #1
    1050:	47a0      	blx	r4
    SaLPinMode(BUZZER,OUTSTRONG);
    1052:	200c      	movs	r0, #12
    1054:	2103      	movs	r1, #3
    1056:	47a0      	blx	r4
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
    1058:	4d07      	ldr	r5, [pc, #28]	; (1078 <PinConfig+0x3c>)
    105a:	2380      	movs	r3, #128	; 0x80
    105c:	00db      	lsls	r3, r3, #3
    105e:	61ab      	str	r3, [r5, #24]
    1060:	2380      	movs	r3, #128	; 0x80
    1062:	005b      	lsls	r3, r3, #1
    1064:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(PIN_PA10,true);
    SaLDigitalOut(PIN_PA08,true);
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
    1066:	2009      	movs	r0, #9
    1068:	2101      	movs	r1, #1
    106a:	47a0      	blx	r4
    106c:	2380      	movs	r3, #128	; 0x80
    106e:	009b      	lsls	r3, r3, #2
    1070:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
    1072:	bd38      	pop	{r3, r4, r5, pc}
    1074:	00000b6d 	.word	0x00000b6d
    1078:	41004400 	.word	0x41004400

0000107c <TC5_Handler>:

void TC5_Handler(void) {
    //SaLPlayTone(400);
    ATOMIC_SECTION_ENTER
    107c:	f3ef 8310 	mrs	r3, PRIMASK
    1080:	b672      	cpsid	i
    index2++;
    1082:	4905      	ldr	r1, [pc, #20]	; (1098 <TC5_Handler+0x1c>)
    1084:	680a      	ldr	r2, [r1, #0]
    1086:	3201      	adds	r2, #1
    1088:	600a      	str	r2, [r1, #0]
    TC5->COUNT8.INTFLAG.reg = 0XFF;
    108a:	21ff      	movs	r1, #255	; 0xff
    108c:	4a03      	ldr	r2, [pc, #12]	; (109c <TC5_Handler+0x20>)
    108e:	7391      	strb	r1, [r2, #14]
    ATOMIC_SECTION_LEAVE
    1090:	f383 8810 	msr	PRIMASK, r3
}
    1094:	4770      	bx	lr
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	20002834 	.word	0x20002834
    109c:	42003400 	.word	0x42003400

000010a0 <TC4_Handler>:

void TC4_Handler(void) {
    retrieveSample = true;
    10a0:	2201      	movs	r2, #1
    10a2:	4b03      	ldr	r3, [pc, #12]	; (10b0 <TC4_Handler+0x10>)
    10a4:	701a      	strb	r2, [r3, #0]
    TC4->COUNT16.INTFLAG.reg = 0XFF;
    10a6:	32fe      	adds	r2, #254	; 0xfe
    10a8:	4b02      	ldr	r3, [pc, #8]	; (10b4 <TC4_Handler+0x14>)
    10aa:	739a      	strb	r2, [r3, #14]
}
    10ac:	4770      	bx	lr
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	20001890 	.word	0x20001890
    10b4:	42003000 	.word	0x42003000

000010b8 <main>:

volatile uint32_t counter = 0;

struct sample cookedSample;

int main(void) {
    10b8:	b570      	push	{r4, r5, r6, lr}
    10ba:	b094      	sub	sp, #80	; 0x50
    // SystemInit();
    SaLDelayInit();
    10bc:	4b2e      	ldr	r3, [pc, #184]	; (1178 <main+0xc0>)
    10be:	4798      	blx	r3
    SalGclkInit();
    10c0:	4b2e      	ldr	r3, [pc, #184]	; (117c <main+0xc4>)
    10c2:	4798      	blx	r3
    SaLRtcInit();
    10c4:	4b2e      	ldr	r3, [pc, #184]	; (1180 <main+0xc8>)
    10c6:	4798      	blx	r3
    PinConfig();
    10c8:	4b2e      	ldr	r3, [pc, #184]	; (1184 <main+0xcc>)
    10ca:	4798      	blx	r3
    uart_init(9600);
    10cc:	2096      	movs	r0, #150	; 0x96
    10ce:	0180      	lsls	r0, r0, #6
    10d0:	4b2d      	ldr	r3, [pc, #180]	; (1188 <main+0xd0>)
    10d2:	4798      	blx	r3
    SaLTC4Init();
    10d4:	4b2d      	ldr	r3, [pc, #180]	; (118c <main+0xd4>)
    10d6:	4798      	blx	r3
    struct MTK3329Module MTK3329Instance;
    struct AccelerometerModule myAccelerometer;
    struct BarometerModule myBarometer;
    struct AltimeterModule myAltimeter;

    SaLSyncUsartIo(&USART_0, &UsartIoModule);
    10d8:	482d      	ldr	r0, [pc, #180]	; (1190 <main+0xd8>)
    10da:	a913      	add	r1, sp, #76	; 0x4c
    10dc:	4b2d      	ldr	r3, [pc, #180]	; (1194 <main+0xdc>)
    10de:	4798      	blx	r3
    initAccelerometer(&myAccelerometer);
    10e0:	a80d      	add	r0, sp, #52	; 0x34
    10e2:	4b2d      	ldr	r3, [pc, #180]	; (1198 <main+0xe0>)
    10e4:	4798      	blx	r3
    initBarometer(&myBarometer);
    10e6:	a809      	add	r0, sp, #36	; 0x24
    10e8:	4b2c      	ldr	r3, [pc, #176]	; (119c <main+0xe4>)
    10ea:	4798      	blx	r3
    getAccelEvent(&myAccelerometer);
    10ec:	a80d      	add	r0, sp, #52	; 0x34
    10ee:	4b2c      	ldr	r3, [pc, #176]	; (11a0 <main+0xe8>)
    10f0:	4798      	blx	r3
    myAltimeter.myAltimetersGps = &myGPS;

    //startUpTone();

    //uint32_t index = 0;
    volatile uint32_t milliseconds = 0;
    10f2:	2300      	movs	r3, #0
    10f4:	9308      	str	r3, [sp, #32]
    10f6:	2464      	movs	r4, #100	; 0x64
    uint8_t message[255];

    struct sVar groundHeight;

    for (uint8_t i = 0; i < 100; i++) {
        getMS5607PressureSlow(&myBarometer);
    10f8:	4e2a      	ldr	r6, [pc, #168]	; (11a4 <main+0xec>)
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
    10fa:	4d2b      	ldr	r5, [pc, #172]	; (11a8 <main+0xf0>)
    uint8_t message[255];

    struct sVar groundHeight;

    for (uint8_t i = 0; i < 100; i++) {
        getMS5607PressureSlow(&myBarometer);
    10fc:	a809      	add	r0, sp, #36	; 0x24
    10fe:	47b0      	blx	r6
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
    1100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1102:	9301      	str	r3, [sp, #4]
    1104:	a805      	add	r0, sp, #20
    1106:	1c19      	adds	r1, r3, #0
    1108:	47a8      	blx	r5
    110a:	3c01      	subs	r4, #1
    110c:	b2e4      	uxtb	r4, r4

    uint8_t message[255];

    struct sVar groundHeight;

    for (uint8_t i = 0; i < 100; i++) {
    110e:	2c00      	cmp	r4, #0
    1110:	d1f4      	bne.n	10fc <main+0x44>
        getMS5607PressureSlow(&myBarometer);
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
    }
    volatile uint32_t variance = GetVariance(&groundHeight,&groundHeight.mean);
    1112:	a805      	add	r0, sp, #20
    1114:	1c01      	adds	r1, r0, #0
    1116:	4b25      	ldr	r3, [pc, #148]	; (11ac <main+0xf4>)
    1118:	4798      	blx	r3
    111a:	9004      	str	r0, [sp, #16]
    111c:	34c8      	adds	r4, #200	; 0xc8


    for (uint8_t i = 0; i < 200; i++) {
        getMS5607PressureSlow(&myBarometer);
    111e:	4e21      	ldr	r6, [pc, #132]	; (11a4 <main+0xec>)
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
    1120:	4d21      	ldr	r5, [pc, #132]	; (11a8 <main+0xf0>)
    }
    volatile uint32_t variance = GetVariance(&groundHeight,&groundHeight.mean);


    for (uint8_t i = 0; i < 200; i++) {
        getMS5607PressureSlow(&myBarometer);
    1122:	a809      	add	r0, sp, #36	; 0x24
    1124:	47b0      	blx	r6
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
    1126:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1128:	9301      	str	r3, [sp, #4]
    112a:	a805      	add	r0, sp, #20
    112c:	1c19      	adds	r1, r3, #0
    112e:	47a8      	blx	r5
    1130:	3c01      	subs	r4, #1
    1132:	b2e4      	uxtb	r4, r4
        addSampleToVariance(&groundHeight,tempheight);
    }
    volatile uint32_t variance = GetVariance(&groundHeight,&groundHeight.mean);


    for (uint8_t i = 0; i < 200; i++) {
    1134:	2c00      	cmp	r4, #0
    1136:	d1f4      	bne.n	1122 <main+0x6a>
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);

    }

    volatile int32_t groundAlt = groundHeight.mean;
    1138:	9b05      	ldr	r3, [sp, #20]
    113a:	9303      	str	r3, [sp, #12]
    variance = GetVariance(&groundHeight,&groundHeight.mean);
    113c:	a805      	add	r0, sp, #20
    113e:	1c01      	adds	r1, r0, #0
    1140:	4b1a      	ldr	r3, [pc, #104]	; (11ac <main+0xf4>)
    1142:	4798      	blx	r3
    1144:	9004      	str	r0, [sp, #16]

    volatile uint16_t ticks = 0;
    1146:	2200      	movs	r2, #0
    1148:	ab02      	add	r3, sp, #8
    114a:	805a      	strh	r2, [r3, #2]

    while (1) {
        ticks++;
    114c:	ab02      	add	r3, sp, #8
    114e:	1c9c      	adds	r4, r3, #2
        counter++;
    1150:	4d17      	ldr	r5, [pc, #92]	; (11b0 <main+0xf8>)
        // milliseconds = millis();

        sampleTick();
    1152:	4e18      	ldr	r6, [pc, #96]	; (11b4 <main+0xfc>)
    variance = GetVariance(&groundHeight,&groundHeight.mean);

    volatile uint16_t ticks = 0;

    while (1) {
        ticks++;
    1154:	8823      	ldrh	r3, [r4, #0]
    1156:	3301      	adds	r3, #1
    1158:	b29b      	uxth	r3, r3
    115a:	8023      	strh	r3, [r4, #0]
        counter++;
    115c:	682b      	ldr	r3, [r5, #0]
    115e:	3301      	adds	r3, #1
    1160:	602b      	str	r3, [r5, #0]
        // milliseconds = millis();

        sampleTick();
    1162:	47b0      	blx	r6
        if (ticks > 1000) {
    1164:	8823      	ldrh	r3, [r4, #0]
    1166:	b29b      	uxth	r3, r3
    1168:	22fa      	movs	r2, #250	; 0xfa
    116a:	0092      	lsls	r2, r2, #2
    116c:	4293      	cmp	r3, r2
    116e:	d9f1      	bls.n	1154 <main+0x9c>
            ticks = 0;
    1170:	2300      	movs	r3, #0
    1172:	8023      	strh	r3, [r4, #0]
    1174:	e7ee      	b.n	1154 <main+0x9c>
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00000acd 	.word	0x00000acd
    117c:	000008d1 	.word	0x000008d1
    1180:	000009ed 	.word	0x000009ed
    1184:	0000103d 	.word	0x0000103d
    1188:	00000d95 	.word	0x00000d95
    118c:	000009b5 	.word	0x000009b5
    1190:	200008e0 	.word	0x200008e0
    1194:	00000e85 	.word	0x00000e85
    1198:	00000465 	.word	0x00000465
    119c:	00000601 	.word	0x00000601
    11a0:	000004fd 	.word	0x000004fd
    11a4:	000007b5 	.word	0x000007b5
    11a8:	00000b19 	.word	0x00000b19
    11ac:	00000b49 	.word	0x00000b49
    11b0:	2000002c 	.word	0x2000002c
    11b4:	00000bc5 	.word	0x00000bc5

000011b8 <__libc_init_array>:
    11b8:	4b0e      	ldr	r3, [pc, #56]	; (11f4 <__libc_init_array+0x3c>)
    11ba:	b570      	push	{r4, r5, r6, lr}
    11bc:	2500      	movs	r5, #0
    11be:	1c1e      	adds	r6, r3, #0
    11c0:	4c0d      	ldr	r4, [pc, #52]	; (11f8 <__libc_init_array+0x40>)
    11c2:	1ae4      	subs	r4, r4, r3
    11c4:	10a4      	asrs	r4, r4, #2
    11c6:	42a5      	cmp	r5, r4
    11c8:	d004      	beq.n	11d4 <__libc_init_array+0x1c>
    11ca:	00ab      	lsls	r3, r5, #2
    11cc:	58f3      	ldr	r3, [r6, r3]
    11ce:	4798      	blx	r3
    11d0:	3501      	adds	r5, #1
    11d2:	e7f8      	b.n	11c6 <__libc_init_array+0xe>
    11d4:	f002 f910 	bl	33f8 <_init>
    11d8:	4b08      	ldr	r3, [pc, #32]	; (11fc <__libc_init_array+0x44>)
    11da:	2500      	movs	r5, #0
    11dc:	1c1e      	adds	r6, r3, #0
    11de:	4c08      	ldr	r4, [pc, #32]	; (1200 <__libc_init_array+0x48>)
    11e0:	1ae4      	subs	r4, r4, r3
    11e2:	10a4      	asrs	r4, r4, #2
    11e4:	42a5      	cmp	r5, r4
    11e6:	d004      	beq.n	11f2 <__libc_init_array+0x3a>
    11e8:	00ab      	lsls	r3, r5, #2
    11ea:	58f3      	ldr	r3, [r6, r3]
    11ec:	4798      	blx	r3
    11ee:	3501      	adds	r5, #1
    11f0:	e7f8      	b.n	11e4 <__libc_init_array+0x2c>
    11f2:	bd70      	pop	{r4, r5, r6, pc}
    11f4:	00003404 	.word	0x00003404
    11f8:	00003404 	.word	0x00003404
    11fc:	00003404 	.word	0x00003404
    1200:	00003408 	.word	0x00003408

00001204 <memcpy>:
    1204:	2300      	movs	r3, #0
    1206:	b510      	push	{r4, lr}
    1208:	4293      	cmp	r3, r2
    120a:	d003      	beq.n	1214 <memcpy+0x10>
    120c:	5ccc      	ldrb	r4, [r1, r3]
    120e:	54c4      	strb	r4, [r0, r3]
    1210:	3301      	adds	r3, #1
    1212:	e7f9      	b.n	1208 <memcpy+0x4>
    1214:	bd10      	pop	{r4, pc}
	...

00001218 <__aeabi_idiv>:
    1218:	4603      	mov	r3, r0
    121a:	430b      	orrs	r3, r1
    121c:	d47f      	bmi.n	131e <__aeabi_idiv+0x106>
    121e:	2200      	movs	r2, #0
    1220:	0843      	lsrs	r3, r0, #1
    1222:	428b      	cmp	r3, r1
    1224:	d374      	bcc.n	1310 <__aeabi_idiv+0xf8>
    1226:	0903      	lsrs	r3, r0, #4
    1228:	428b      	cmp	r3, r1
    122a:	d35f      	bcc.n	12ec <__aeabi_idiv+0xd4>
    122c:	0a03      	lsrs	r3, r0, #8
    122e:	428b      	cmp	r3, r1
    1230:	d344      	bcc.n	12bc <__aeabi_idiv+0xa4>
    1232:	0b03      	lsrs	r3, r0, #12
    1234:	428b      	cmp	r3, r1
    1236:	d328      	bcc.n	128a <__aeabi_idiv+0x72>
    1238:	0c03      	lsrs	r3, r0, #16
    123a:	428b      	cmp	r3, r1
    123c:	d30d      	bcc.n	125a <__aeabi_idiv+0x42>
    123e:	22ff      	movs	r2, #255	; 0xff
    1240:	0209      	lsls	r1, r1, #8
    1242:	ba12      	rev	r2, r2
    1244:	0c03      	lsrs	r3, r0, #16
    1246:	428b      	cmp	r3, r1
    1248:	d302      	bcc.n	1250 <__aeabi_idiv+0x38>
    124a:	1212      	asrs	r2, r2, #8
    124c:	0209      	lsls	r1, r1, #8
    124e:	d065      	beq.n	131c <__aeabi_idiv+0x104>
    1250:	0b03      	lsrs	r3, r0, #12
    1252:	428b      	cmp	r3, r1
    1254:	d319      	bcc.n	128a <__aeabi_idiv+0x72>
    1256:	e000      	b.n	125a <__aeabi_idiv+0x42>
    1258:	0a09      	lsrs	r1, r1, #8
    125a:	0bc3      	lsrs	r3, r0, #15
    125c:	428b      	cmp	r3, r1
    125e:	d301      	bcc.n	1264 <__aeabi_idiv+0x4c>
    1260:	03cb      	lsls	r3, r1, #15
    1262:	1ac0      	subs	r0, r0, r3
    1264:	4152      	adcs	r2, r2
    1266:	0b83      	lsrs	r3, r0, #14
    1268:	428b      	cmp	r3, r1
    126a:	d301      	bcc.n	1270 <__aeabi_idiv+0x58>
    126c:	038b      	lsls	r3, r1, #14
    126e:	1ac0      	subs	r0, r0, r3
    1270:	4152      	adcs	r2, r2
    1272:	0b43      	lsrs	r3, r0, #13
    1274:	428b      	cmp	r3, r1
    1276:	d301      	bcc.n	127c <__aeabi_idiv+0x64>
    1278:	034b      	lsls	r3, r1, #13
    127a:	1ac0      	subs	r0, r0, r3
    127c:	4152      	adcs	r2, r2
    127e:	0b03      	lsrs	r3, r0, #12
    1280:	428b      	cmp	r3, r1
    1282:	d301      	bcc.n	1288 <__aeabi_idiv+0x70>
    1284:	030b      	lsls	r3, r1, #12
    1286:	1ac0      	subs	r0, r0, r3
    1288:	4152      	adcs	r2, r2
    128a:	0ac3      	lsrs	r3, r0, #11
    128c:	428b      	cmp	r3, r1
    128e:	d301      	bcc.n	1294 <__aeabi_idiv+0x7c>
    1290:	02cb      	lsls	r3, r1, #11
    1292:	1ac0      	subs	r0, r0, r3
    1294:	4152      	adcs	r2, r2
    1296:	0a83      	lsrs	r3, r0, #10
    1298:	428b      	cmp	r3, r1
    129a:	d301      	bcc.n	12a0 <__aeabi_idiv+0x88>
    129c:	028b      	lsls	r3, r1, #10
    129e:	1ac0      	subs	r0, r0, r3
    12a0:	4152      	adcs	r2, r2
    12a2:	0a43      	lsrs	r3, r0, #9
    12a4:	428b      	cmp	r3, r1
    12a6:	d301      	bcc.n	12ac <__aeabi_idiv+0x94>
    12a8:	024b      	lsls	r3, r1, #9
    12aa:	1ac0      	subs	r0, r0, r3
    12ac:	4152      	adcs	r2, r2
    12ae:	0a03      	lsrs	r3, r0, #8
    12b0:	428b      	cmp	r3, r1
    12b2:	d301      	bcc.n	12b8 <__aeabi_idiv+0xa0>
    12b4:	020b      	lsls	r3, r1, #8
    12b6:	1ac0      	subs	r0, r0, r3
    12b8:	4152      	adcs	r2, r2
    12ba:	d2cd      	bcs.n	1258 <__aeabi_idiv+0x40>
    12bc:	09c3      	lsrs	r3, r0, #7
    12be:	428b      	cmp	r3, r1
    12c0:	d301      	bcc.n	12c6 <__aeabi_idiv+0xae>
    12c2:	01cb      	lsls	r3, r1, #7
    12c4:	1ac0      	subs	r0, r0, r3
    12c6:	4152      	adcs	r2, r2
    12c8:	0983      	lsrs	r3, r0, #6
    12ca:	428b      	cmp	r3, r1
    12cc:	d301      	bcc.n	12d2 <__aeabi_idiv+0xba>
    12ce:	018b      	lsls	r3, r1, #6
    12d0:	1ac0      	subs	r0, r0, r3
    12d2:	4152      	adcs	r2, r2
    12d4:	0943      	lsrs	r3, r0, #5
    12d6:	428b      	cmp	r3, r1
    12d8:	d301      	bcc.n	12de <__aeabi_idiv+0xc6>
    12da:	014b      	lsls	r3, r1, #5
    12dc:	1ac0      	subs	r0, r0, r3
    12de:	4152      	adcs	r2, r2
    12e0:	0903      	lsrs	r3, r0, #4
    12e2:	428b      	cmp	r3, r1
    12e4:	d301      	bcc.n	12ea <__aeabi_idiv+0xd2>
    12e6:	010b      	lsls	r3, r1, #4
    12e8:	1ac0      	subs	r0, r0, r3
    12ea:	4152      	adcs	r2, r2
    12ec:	08c3      	lsrs	r3, r0, #3
    12ee:	428b      	cmp	r3, r1
    12f0:	d301      	bcc.n	12f6 <__aeabi_idiv+0xde>
    12f2:	00cb      	lsls	r3, r1, #3
    12f4:	1ac0      	subs	r0, r0, r3
    12f6:	4152      	adcs	r2, r2
    12f8:	0883      	lsrs	r3, r0, #2
    12fa:	428b      	cmp	r3, r1
    12fc:	d301      	bcc.n	1302 <__aeabi_idiv+0xea>
    12fe:	008b      	lsls	r3, r1, #2
    1300:	1ac0      	subs	r0, r0, r3
    1302:	4152      	adcs	r2, r2
    1304:	0843      	lsrs	r3, r0, #1
    1306:	428b      	cmp	r3, r1
    1308:	d301      	bcc.n	130e <__aeabi_idiv+0xf6>
    130a:	004b      	lsls	r3, r1, #1
    130c:	1ac0      	subs	r0, r0, r3
    130e:	4152      	adcs	r2, r2
    1310:	1a41      	subs	r1, r0, r1
    1312:	d200      	bcs.n	1316 <__aeabi_idiv+0xfe>
    1314:	4601      	mov	r1, r0
    1316:	4152      	adcs	r2, r2
    1318:	4610      	mov	r0, r2
    131a:	4770      	bx	lr
    131c:	e05d      	b.n	13da <__aeabi_idiv+0x1c2>
    131e:	0fca      	lsrs	r2, r1, #31
    1320:	d000      	beq.n	1324 <__aeabi_idiv+0x10c>
    1322:	4249      	negs	r1, r1
    1324:	1003      	asrs	r3, r0, #32
    1326:	d300      	bcc.n	132a <__aeabi_idiv+0x112>
    1328:	4240      	negs	r0, r0
    132a:	4053      	eors	r3, r2
    132c:	2200      	movs	r2, #0
    132e:	469c      	mov	ip, r3
    1330:	0903      	lsrs	r3, r0, #4
    1332:	428b      	cmp	r3, r1
    1334:	d32d      	bcc.n	1392 <__aeabi_idiv+0x17a>
    1336:	0a03      	lsrs	r3, r0, #8
    1338:	428b      	cmp	r3, r1
    133a:	d312      	bcc.n	1362 <__aeabi_idiv+0x14a>
    133c:	22fc      	movs	r2, #252	; 0xfc
    133e:	0189      	lsls	r1, r1, #6
    1340:	ba12      	rev	r2, r2
    1342:	0a03      	lsrs	r3, r0, #8
    1344:	428b      	cmp	r3, r1
    1346:	d30c      	bcc.n	1362 <__aeabi_idiv+0x14a>
    1348:	0189      	lsls	r1, r1, #6
    134a:	1192      	asrs	r2, r2, #6
    134c:	428b      	cmp	r3, r1
    134e:	d308      	bcc.n	1362 <__aeabi_idiv+0x14a>
    1350:	0189      	lsls	r1, r1, #6
    1352:	1192      	asrs	r2, r2, #6
    1354:	428b      	cmp	r3, r1
    1356:	d304      	bcc.n	1362 <__aeabi_idiv+0x14a>
    1358:	0189      	lsls	r1, r1, #6
    135a:	d03a      	beq.n	13d2 <__aeabi_idiv+0x1ba>
    135c:	1192      	asrs	r2, r2, #6
    135e:	e000      	b.n	1362 <__aeabi_idiv+0x14a>
    1360:	0989      	lsrs	r1, r1, #6
    1362:	09c3      	lsrs	r3, r0, #7
    1364:	428b      	cmp	r3, r1
    1366:	d301      	bcc.n	136c <__aeabi_idiv+0x154>
    1368:	01cb      	lsls	r3, r1, #7
    136a:	1ac0      	subs	r0, r0, r3
    136c:	4152      	adcs	r2, r2
    136e:	0983      	lsrs	r3, r0, #6
    1370:	428b      	cmp	r3, r1
    1372:	d301      	bcc.n	1378 <__aeabi_idiv+0x160>
    1374:	018b      	lsls	r3, r1, #6
    1376:	1ac0      	subs	r0, r0, r3
    1378:	4152      	adcs	r2, r2
    137a:	0943      	lsrs	r3, r0, #5
    137c:	428b      	cmp	r3, r1
    137e:	d301      	bcc.n	1384 <__aeabi_idiv+0x16c>
    1380:	014b      	lsls	r3, r1, #5
    1382:	1ac0      	subs	r0, r0, r3
    1384:	4152      	adcs	r2, r2
    1386:	0903      	lsrs	r3, r0, #4
    1388:	428b      	cmp	r3, r1
    138a:	d301      	bcc.n	1390 <__aeabi_idiv+0x178>
    138c:	010b      	lsls	r3, r1, #4
    138e:	1ac0      	subs	r0, r0, r3
    1390:	4152      	adcs	r2, r2
    1392:	08c3      	lsrs	r3, r0, #3
    1394:	428b      	cmp	r3, r1
    1396:	d301      	bcc.n	139c <__aeabi_idiv+0x184>
    1398:	00cb      	lsls	r3, r1, #3
    139a:	1ac0      	subs	r0, r0, r3
    139c:	4152      	adcs	r2, r2
    139e:	0883      	lsrs	r3, r0, #2
    13a0:	428b      	cmp	r3, r1
    13a2:	d301      	bcc.n	13a8 <__aeabi_idiv+0x190>
    13a4:	008b      	lsls	r3, r1, #2
    13a6:	1ac0      	subs	r0, r0, r3
    13a8:	4152      	adcs	r2, r2
    13aa:	d2d9      	bcs.n	1360 <__aeabi_idiv+0x148>
    13ac:	0843      	lsrs	r3, r0, #1
    13ae:	428b      	cmp	r3, r1
    13b0:	d301      	bcc.n	13b6 <__aeabi_idiv+0x19e>
    13b2:	004b      	lsls	r3, r1, #1
    13b4:	1ac0      	subs	r0, r0, r3
    13b6:	4152      	adcs	r2, r2
    13b8:	1a41      	subs	r1, r0, r1
    13ba:	d200      	bcs.n	13be <__aeabi_idiv+0x1a6>
    13bc:	4601      	mov	r1, r0
    13be:	4663      	mov	r3, ip
    13c0:	4152      	adcs	r2, r2
    13c2:	105b      	asrs	r3, r3, #1
    13c4:	4610      	mov	r0, r2
    13c6:	d301      	bcc.n	13cc <__aeabi_idiv+0x1b4>
    13c8:	4240      	negs	r0, r0
    13ca:	2b00      	cmp	r3, #0
    13cc:	d500      	bpl.n	13d0 <__aeabi_idiv+0x1b8>
    13ce:	4249      	negs	r1, r1
    13d0:	4770      	bx	lr
    13d2:	4663      	mov	r3, ip
    13d4:	105b      	asrs	r3, r3, #1
    13d6:	d300      	bcc.n	13da <__aeabi_idiv+0x1c2>
    13d8:	4240      	negs	r0, r0
    13da:	b501      	push	{r0, lr}
    13dc:	2000      	movs	r0, #0
    13de:	f000 f80b 	bl	13f8 <__aeabi_idiv0>
    13e2:	bd02      	pop	{r1, pc}

000013e4 <__aeabi_idivmod>:
    13e4:	2900      	cmp	r1, #0
    13e6:	d0f8      	beq.n	13da <__aeabi_idiv+0x1c2>
    13e8:	b503      	push	{r0, r1, lr}
    13ea:	f7ff ff15 	bl	1218 <__aeabi_idiv>
    13ee:	bc0e      	pop	{r1, r2, r3}
    13f0:	4342      	muls	r2, r0
    13f2:	1a89      	subs	r1, r1, r2
    13f4:	4718      	bx	r3
    13f6:	46c0      	nop			; (mov r8, r8)

000013f8 <__aeabi_idiv0>:
    13f8:	4770      	bx	lr
    13fa:	46c0      	nop			; (mov r8, r8)

000013fc <__aeabi_uldivmod>:
    13fc:	2b00      	cmp	r3, #0
    13fe:	d111      	bne.n	1424 <__aeabi_uldivmod+0x28>
    1400:	2a00      	cmp	r2, #0
    1402:	d10f      	bne.n	1424 <__aeabi_uldivmod+0x28>
    1404:	2900      	cmp	r1, #0
    1406:	d100      	bne.n	140a <__aeabi_uldivmod+0xe>
    1408:	2800      	cmp	r0, #0
    140a:	d002      	beq.n	1412 <__aeabi_uldivmod+0x16>
    140c:	2100      	movs	r1, #0
    140e:	43c9      	mvns	r1, r1
    1410:	1c08      	adds	r0, r1, #0
    1412:	b407      	push	{r0, r1, r2}
    1414:	4802      	ldr	r0, [pc, #8]	; (1420 <__aeabi_uldivmod+0x24>)
    1416:	a102      	add	r1, pc, #8	; (adr r1, 1420 <__aeabi_uldivmod+0x24>)
    1418:	1840      	adds	r0, r0, r1
    141a:	9002      	str	r0, [sp, #8]
    141c:	bd03      	pop	{r0, r1, pc}
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	ffffffd9 	.word	0xffffffd9
    1424:	b403      	push	{r0, r1}
    1426:	4668      	mov	r0, sp
    1428:	b501      	push	{r0, lr}
    142a:	9802      	ldr	r0, [sp, #8]
    142c:	f000 f864 	bl	14f8 <__gnu_uldivmod_helper>
    1430:	9b01      	ldr	r3, [sp, #4]
    1432:	469e      	mov	lr, r3
    1434:	b002      	add	sp, #8
    1436:	bc0c      	pop	{r2, r3}
    1438:	4770      	bx	lr
    143a:	46c0      	nop			; (mov r8, r8)

0000143c <__aeabi_lmul>:
    143c:	b5f0      	push	{r4, r5, r6, r7, lr}
    143e:	464f      	mov	r7, r9
    1440:	4646      	mov	r6, r8
    1442:	0405      	lsls	r5, r0, #16
    1444:	0c2d      	lsrs	r5, r5, #16
    1446:	1c2c      	adds	r4, r5, #0
    1448:	b4c0      	push	{r6, r7}
    144a:	0417      	lsls	r7, r2, #16
    144c:	0c16      	lsrs	r6, r2, #16
    144e:	0c3f      	lsrs	r7, r7, #16
    1450:	4699      	mov	r9, r3
    1452:	0c03      	lsrs	r3, r0, #16
    1454:	437c      	muls	r4, r7
    1456:	4375      	muls	r5, r6
    1458:	435f      	muls	r7, r3
    145a:	4373      	muls	r3, r6
    145c:	197d      	adds	r5, r7, r5
    145e:	0c26      	lsrs	r6, r4, #16
    1460:	19ad      	adds	r5, r5, r6
    1462:	469c      	mov	ip, r3
    1464:	42af      	cmp	r7, r5
    1466:	d903      	bls.n	1470 <__aeabi_lmul+0x34>
    1468:	2380      	movs	r3, #128	; 0x80
    146a:	025b      	lsls	r3, r3, #9
    146c:	4698      	mov	r8, r3
    146e:	44c4      	add	ip, r8
    1470:	464b      	mov	r3, r9
    1472:	4351      	muls	r1, r2
    1474:	4343      	muls	r3, r0
    1476:	0424      	lsls	r4, r4, #16
    1478:	0c2e      	lsrs	r6, r5, #16
    147a:	0c24      	lsrs	r4, r4, #16
    147c:	042d      	lsls	r5, r5, #16
    147e:	4466      	add	r6, ip
    1480:	192c      	adds	r4, r5, r4
    1482:	1859      	adds	r1, r3, r1
    1484:	1989      	adds	r1, r1, r6
    1486:	1c20      	adds	r0, r4, #0
    1488:	bc0c      	pop	{r2, r3}
    148a:	4690      	mov	r8, r2
    148c:	4699      	mov	r9, r3
    148e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001490 <__aeabi_f2uiz>:
    1490:	219e      	movs	r1, #158	; 0x9e
    1492:	b510      	push	{r4, lr}
    1494:	05c9      	lsls	r1, r1, #23
    1496:	1c04      	adds	r4, r0, #0
    1498:	f001 fc20 	bl	2cdc <__aeabi_fcmpge>
    149c:	2800      	cmp	r0, #0
    149e:	d103      	bne.n	14a8 <__aeabi_f2uiz+0x18>
    14a0:	1c20      	adds	r0, r4, #0
    14a2:	f000 fc6f 	bl	1d84 <__aeabi_f2iz>
    14a6:	bd10      	pop	{r4, pc}
    14a8:	219e      	movs	r1, #158	; 0x9e
    14aa:	1c20      	adds	r0, r4, #0
    14ac:	05c9      	lsls	r1, r1, #23
    14ae:	f000 faeb 	bl	1a88 <__aeabi_fsub>
    14b2:	f000 fc67 	bl	1d84 <__aeabi_f2iz>
    14b6:	2380      	movs	r3, #128	; 0x80
    14b8:	061b      	lsls	r3, r3, #24
    14ba:	469c      	mov	ip, r3
    14bc:	4460      	add	r0, ip
    14be:	e7f2      	b.n	14a6 <__aeabi_f2uiz+0x16>

000014c0 <__gnu_ldivmod_helper>:
    14c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c2:	b083      	sub	sp, #12
    14c4:	1c16      	adds	r6, r2, #0
    14c6:	1c1f      	adds	r7, r3, #0
    14c8:	9000      	str	r0, [sp, #0]
    14ca:	9101      	str	r1, [sp, #4]
    14cc:	f001 fc2e 	bl	2d2c <__divdi3>
    14d0:	1c04      	adds	r4, r0, #0
    14d2:	1c0d      	adds	r5, r1, #0
    14d4:	1c22      	adds	r2, r4, #0
    14d6:	1c2b      	adds	r3, r5, #0
    14d8:	1c30      	adds	r0, r6, #0
    14da:	1c39      	adds	r1, r7, #0
    14dc:	f7ff ffae 	bl	143c <__aeabi_lmul>
    14e0:	9a00      	ldr	r2, [sp, #0]
    14e2:	9b01      	ldr	r3, [sp, #4]
    14e4:	1a12      	subs	r2, r2, r0
    14e6:	418b      	sbcs	r3, r1
    14e8:	9908      	ldr	r1, [sp, #32]
    14ea:	1c20      	adds	r0, r4, #0
    14ec:	600a      	str	r2, [r1, #0]
    14ee:	604b      	str	r3, [r1, #4]
    14f0:	1c29      	adds	r1, r5, #0
    14f2:	b003      	add	sp, #12
    14f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14f6:	46c0      	nop			; (mov r8, r8)

000014f8 <__gnu_uldivmod_helper>:
    14f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14fa:	1c14      	adds	r4, r2, #0
    14fc:	b083      	sub	sp, #12
    14fe:	1c1d      	adds	r5, r3, #0
    1500:	9000      	str	r0, [sp, #0]
    1502:	9101      	str	r1, [sp, #4]
    1504:	f001 fd0a 	bl	2f1c <__udivdi3>
    1508:	1c22      	adds	r2, r4, #0
    150a:	1c2b      	adds	r3, r5, #0
    150c:	1c06      	adds	r6, r0, #0
    150e:	1c0f      	adds	r7, r1, #0
    1510:	f7ff ff94 	bl	143c <__aeabi_lmul>
    1514:	9a00      	ldr	r2, [sp, #0]
    1516:	9b01      	ldr	r3, [sp, #4]
    1518:	1a12      	subs	r2, r2, r0
    151a:	418b      	sbcs	r3, r1
    151c:	9908      	ldr	r1, [sp, #32]
    151e:	1c30      	adds	r0, r6, #0
    1520:	600a      	str	r2, [r1, #0]
    1522:	604b      	str	r3, [r1, #4]
    1524:	1c39      	adds	r1, r7, #0
    1526:	b003      	add	sp, #12
    1528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    152a:	46c0      	nop			; (mov r8, r8)

0000152c <__aeabi_fadd>:
    152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    152e:	004a      	lsls	r2, r1, #1
    1530:	0243      	lsls	r3, r0, #9
    1532:	0044      	lsls	r4, r0, #1
    1534:	024e      	lsls	r6, r1, #9
    1536:	0fc5      	lsrs	r5, r0, #31
    1538:	0e24      	lsrs	r4, r4, #24
    153a:	1c28      	adds	r0, r5, #0
    153c:	099b      	lsrs	r3, r3, #6
    153e:	0e12      	lsrs	r2, r2, #24
    1540:	0fc9      	lsrs	r1, r1, #31
    1542:	09b7      	lsrs	r7, r6, #6
    1544:	428d      	cmp	r5, r1
    1546:	d040      	beq.n	15ca <__aeabi_fadd+0x9e>
    1548:	1aa0      	subs	r0, r4, r2
    154a:	2800      	cmp	r0, #0
    154c:	dc00      	bgt.n	1550 <__aeabi_fadd+0x24>
    154e:	e084      	b.n	165a <__aeabi_fadd+0x12e>
    1550:	2a00      	cmp	r2, #0
    1552:	d11c      	bne.n	158e <__aeabi_fadd+0x62>
    1554:	2f00      	cmp	r7, #0
    1556:	d15c      	bne.n	1612 <__aeabi_fadd+0xe6>
    1558:	075a      	lsls	r2, r3, #29
    155a:	d004      	beq.n	1566 <__aeabi_fadd+0x3a>
    155c:	220f      	movs	r2, #15
    155e:	401a      	ands	r2, r3
    1560:	2a04      	cmp	r2, #4
    1562:	d000      	beq.n	1566 <__aeabi_fadd+0x3a>
    1564:	3304      	adds	r3, #4
    1566:	2280      	movs	r2, #128	; 0x80
    1568:	04d2      	lsls	r2, r2, #19
    156a:	401a      	ands	r2, r3
    156c:	1c28      	adds	r0, r5, #0
    156e:	2a00      	cmp	r2, #0
    1570:	d024      	beq.n	15bc <__aeabi_fadd+0x90>
    1572:	3401      	adds	r4, #1
    1574:	2cff      	cmp	r4, #255	; 0xff
    1576:	d100      	bne.n	157a <__aeabi_fadd+0x4e>
    1578:	e07b      	b.n	1672 <__aeabi_fadd+0x146>
    157a:	019b      	lsls	r3, r3, #6
    157c:	0a5b      	lsrs	r3, r3, #9
    157e:	b2e4      	uxtb	r4, r4
    1580:	025b      	lsls	r3, r3, #9
    1582:	05e4      	lsls	r4, r4, #23
    1584:	0a5b      	lsrs	r3, r3, #9
    1586:	4323      	orrs	r3, r4
    1588:	07c0      	lsls	r0, r0, #31
    158a:	4318      	orrs	r0, r3
    158c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    158e:	2cff      	cmp	r4, #255	; 0xff
    1590:	d0e2      	beq.n	1558 <__aeabi_fadd+0x2c>
    1592:	2280      	movs	r2, #128	; 0x80
    1594:	04d2      	lsls	r2, r2, #19
    1596:	4317      	orrs	r7, r2
    1598:	2601      	movs	r6, #1
    159a:	281b      	cmp	r0, #27
    159c:	dc08      	bgt.n	15b0 <__aeabi_fadd+0x84>
    159e:	1c39      	adds	r1, r7, #0
    15a0:	2220      	movs	r2, #32
    15a2:	1c3e      	adds	r6, r7, #0
    15a4:	40c1      	lsrs	r1, r0
    15a6:	1a10      	subs	r0, r2, r0
    15a8:	4086      	lsls	r6, r0
    15aa:	1e77      	subs	r7, r6, #1
    15ac:	41be      	sbcs	r6, r7
    15ae:	430e      	orrs	r6, r1
    15b0:	1b9b      	subs	r3, r3, r6
    15b2:	015a      	lsls	r2, r3, #5
    15b4:	d433      	bmi.n	161e <__aeabi_fadd+0xf2>
    15b6:	1c28      	adds	r0, r5, #0
    15b8:	075a      	lsls	r2, r3, #29
    15ba:	d1cf      	bne.n	155c <__aeabi_fadd+0x30>
    15bc:	08db      	lsrs	r3, r3, #3
    15be:	2cff      	cmp	r4, #255	; 0xff
    15c0:	d01e      	beq.n	1600 <__aeabi_fadd+0xd4>
    15c2:	025b      	lsls	r3, r3, #9
    15c4:	0a5b      	lsrs	r3, r3, #9
    15c6:	b2e4      	uxtb	r4, r4
    15c8:	e7da      	b.n	1580 <__aeabi_fadd+0x54>
    15ca:	1aa1      	subs	r1, r4, r2
    15cc:	2900      	cmp	r1, #0
    15ce:	dd57      	ble.n	1680 <__aeabi_fadd+0x154>
    15d0:	2a00      	cmp	r2, #0
    15d2:	d03a      	beq.n	164a <__aeabi_fadd+0x11e>
    15d4:	2cff      	cmp	r4, #255	; 0xff
    15d6:	d0bf      	beq.n	1558 <__aeabi_fadd+0x2c>
    15d8:	2280      	movs	r2, #128	; 0x80
    15da:	04d2      	lsls	r2, r2, #19
    15dc:	4317      	orrs	r7, r2
    15de:	2601      	movs	r6, #1
    15e0:	291b      	cmp	r1, #27
    15e2:	dd72      	ble.n	16ca <__aeabi_fadd+0x19e>
    15e4:	199b      	adds	r3, r3, r6
    15e6:	015a      	lsls	r2, r3, #5
    15e8:	d5e5      	bpl.n	15b6 <__aeabi_fadd+0x8a>
    15ea:	3401      	adds	r4, #1
    15ec:	2cff      	cmp	r4, #255	; 0xff
    15ee:	d100      	bne.n	15f2 <__aeabi_fadd+0xc6>
    15f0:	e087      	b.n	1702 <__aeabi_fadd+0x1d6>
    15f2:	2101      	movs	r1, #1
    15f4:	4a8a      	ldr	r2, [pc, #552]	; (1820 <__aeabi_fadd+0x2f4>)
    15f6:	4019      	ands	r1, r3
    15f8:	4013      	ands	r3, r2
    15fa:	085b      	lsrs	r3, r3, #1
    15fc:	430b      	orrs	r3, r1
    15fe:	e7ab      	b.n	1558 <__aeabi_fadd+0x2c>
    1600:	2b00      	cmp	r3, #0
    1602:	d036      	beq.n	1672 <__aeabi_fadd+0x146>
    1604:	2280      	movs	r2, #128	; 0x80
    1606:	03d2      	lsls	r2, r2, #15
    1608:	4313      	orrs	r3, r2
    160a:	025b      	lsls	r3, r3, #9
    160c:	0a5b      	lsrs	r3, r3, #9
    160e:	24ff      	movs	r4, #255	; 0xff
    1610:	e7b6      	b.n	1580 <__aeabi_fadd+0x54>
    1612:	3801      	subs	r0, #1
    1614:	2800      	cmp	r0, #0
    1616:	d13f      	bne.n	1698 <__aeabi_fadd+0x16c>
    1618:	1bdb      	subs	r3, r3, r7
    161a:	015a      	lsls	r2, r3, #5
    161c:	d5cb      	bpl.n	15b6 <__aeabi_fadd+0x8a>
    161e:	019b      	lsls	r3, r3, #6
    1620:	099e      	lsrs	r6, r3, #6
    1622:	1c30      	adds	r0, r6, #0
    1624:	f001 fb64 	bl	2cf0 <__clzsi2>
    1628:	3805      	subs	r0, #5
    162a:	4086      	lsls	r6, r0
    162c:	4284      	cmp	r4, r0
    162e:	dc23      	bgt.n	1678 <__aeabi_fadd+0x14c>
    1630:	1b00      	subs	r0, r0, r4
    1632:	241f      	movs	r4, #31
    1634:	1c32      	adds	r2, r6, #0
    1636:	1c43      	adds	r3, r0, #1
    1638:	1a20      	subs	r0, r4, r0
    163a:	40da      	lsrs	r2, r3
    163c:	4086      	lsls	r6, r0
    163e:	1c13      	adds	r3, r2, #0
    1640:	1e74      	subs	r4, r6, #1
    1642:	41a6      	sbcs	r6, r4
    1644:	2400      	movs	r4, #0
    1646:	4333      	orrs	r3, r6
    1648:	e786      	b.n	1558 <__aeabi_fadd+0x2c>
    164a:	2f00      	cmp	r7, #0
    164c:	d100      	bne.n	1650 <__aeabi_fadd+0x124>
    164e:	e783      	b.n	1558 <__aeabi_fadd+0x2c>
    1650:	3901      	subs	r1, #1
    1652:	2900      	cmp	r1, #0
    1654:	d150      	bne.n	16f8 <__aeabi_fadd+0x1cc>
    1656:	19db      	adds	r3, r3, r7
    1658:	e7c5      	b.n	15e6 <__aeabi_fadd+0xba>
    165a:	2800      	cmp	r0, #0
    165c:	d120      	bne.n	16a0 <__aeabi_fadd+0x174>
    165e:	1c62      	adds	r2, r4, #1
    1660:	b2d2      	uxtb	r2, r2
    1662:	2a01      	cmp	r2, #1
    1664:	dd5e      	ble.n	1724 <__aeabi_fadd+0x1f8>
    1666:	1bde      	subs	r6, r3, r7
    1668:	0172      	lsls	r2, r6, #5
    166a:	d528      	bpl.n	16be <__aeabi_fadd+0x192>
    166c:	1afe      	subs	r6, r7, r3
    166e:	1c0d      	adds	r5, r1, #0
    1670:	e7d7      	b.n	1622 <__aeabi_fadd+0xf6>
    1672:	24ff      	movs	r4, #255	; 0xff
    1674:	2300      	movs	r3, #0
    1676:	e783      	b.n	1580 <__aeabi_fadd+0x54>
    1678:	4b69      	ldr	r3, [pc, #420]	; (1820 <__aeabi_fadd+0x2f4>)
    167a:	1a24      	subs	r4, r4, r0
    167c:	4033      	ands	r3, r6
    167e:	e76b      	b.n	1558 <__aeabi_fadd+0x2c>
    1680:	2900      	cmp	r1, #0
    1682:	d158      	bne.n	1736 <__aeabi_fadd+0x20a>
    1684:	1c62      	adds	r2, r4, #1
    1686:	b2d1      	uxtb	r1, r2
    1688:	2901      	cmp	r1, #1
    168a:	dd3c      	ble.n	1706 <__aeabi_fadd+0x1da>
    168c:	2aff      	cmp	r2, #255	; 0xff
    168e:	d037      	beq.n	1700 <__aeabi_fadd+0x1d4>
    1690:	18fb      	adds	r3, r7, r3
    1692:	085b      	lsrs	r3, r3, #1
    1694:	1c14      	adds	r4, r2, #0
    1696:	e75f      	b.n	1558 <__aeabi_fadd+0x2c>
    1698:	2cff      	cmp	r4, #255	; 0xff
    169a:	d000      	beq.n	169e <__aeabi_fadd+0x172>
    169c:	e77c      	b.n	1598 <__aeabi_fadd+0x6c>
    169e:	e75b      	b.n	1558 <__aeabi_fadd+0x2c>
    16a0:	2c00      	cmp	r4, #0
    16a2:	d01e      	beq.n	16e2 <__aeabi_fadd+0x1b6>
    16a4:	2aff      	cmp	r2, #255	; 0xff
    16a6:	d023      	beq.n	16f0 <__aeabi_fadd+0x1c4>
    16a8:	2480      	movs	r4, #128	; 0x80
    16aa:	04e4      	lsls	r4, r4, #19
    16ac:	4240      	negs	r0, r0
    16ae:	4323      	orrs	r3, r4
    16b0:	281b      	cmp	r0, #27
    16b2:	dd5b      	ble.n	176c <__aeabi_fadd+0x240>
    16b4:	2301      	movs	r3, #1
    16b6:	1afb      	subs	r3, r7, r3
    16b8:	1c14      	adds	r4, r2, #0
    16ba:	1c0d      	adds	r5, r1, #0
    16bc:	e7ad      	b.n	161a <__aeabi_fadd+0xee>
    16be:	2e00      	cmp	r6, #0
    16c0:	d1af      	bne.n	1622 <__aeabi_fadd+0xf6>
    16c2:	2300      	movs	r3, #0
    16c4:	2000      	movs	r0, #0
    16c6:	2400      	movs	r4, #0
    16c8:	e778      	b.n	15bc <__aeabi_fadd+0x90>
    16ca:	1c3a      	adds	r2, r7, #0
    16cc:	40ca      	lsrs	r2, r1
    16ce:	4694      	mov	ip, r2
    16d0:	2220      	movs	r2, #32
    16d2:	1c3e      	adds	r6, r7, #0
    16d4:	1a51      	subs	r1, r2, r1
    16d6:	408e      	lsls	r6, r1
    16d8:	4662      	mov	r2, ip
    16da:	1e77      	subs	r7, r6, #1
    16dc:	41be      	sbcs	r6, r7
    16de:	4316      	orrs	r6, r2
    16e0:	e780      	b.n	15e4 <__aeabi_fadd+0xb8>
    16e2:	2b00      	cmp	r3, #0
    16e4:	d03e      	beq.n	1764 <__aeabi_fadd+0x238>
    16e6:	43c0      	mvns	r0, r0
    16e8:	2800      	cmp	r0, #0
    16ea:	d0e4      	beq.n	16b6 <__aeabi_fadd+0x18a>
    16ec:	2aff      	cmp	r2, #255	; 0xff
    16ee:	d1df      	bne.n	16b0 <__aeabi_fadd+0x184>
    16f0:	1c3b      	adds	r3, r7, #0
    16f2:	24ff      	movs	r4, #255	; 0xff
    16f4:	1c0d      	adds	r5, r1, #0
    16f6:	e72f      	b.n	1558 <__aeabi_fadd+0x2c>
    16f8:	2cff      	cmp	r4, #255	; 0xff
    16fa:	d000      	beq.n	16fe <__aeabi_fadd+0x1d2>
    16fc:	e76f      	b.n	15de <__aeabi_fadd+0xb2>
    16fe:	e72b      	b.n	1558 <__aeabi_fadd+0x2c>
    1700:	24ff      	movs	r4, #255	; 0xff
    1702:	2300      	movs	r3, #0
    1704:	e75a      	b.n	15bc <__aeabi_fadd+0x90>
    1706:	2c00      	cmp	r4, #0
    1708:	d15a      	bne.n	17c0 <__aeabi_fadd+0x294>
    170a:	2b00      	cmp	r3, #0
    170c:	d07f      	beq.n	180e <__aeabi_fadd+0x2e2>
    170e:	2f00      	cmp	r7, #0
    1710:	d100      	bne.n	1714 <__aeabi_fadd+0x1e8>
    1712:	e721      	b.n	1558 <__aeabi_fadd+0x2c>
    1714:	19db      	adds	r3, r3, r7
    1716:	015a      	lsls	r2, r3, #5
    1718:	d400      	bmi.n	171c <__aeabi_fadd+0x1f0>
    171a:	e74c      	b.n	15b6 <__aeabi_fadd+0x8a>
    171c:	4a40      	ldr	r2, [pc, #256]	; (1820 <__aeabi_fadd+0x2f4>)
    171e:	3401      	adds	r4, #1
    1720:	4013      	ands	r3, r2
    1722:	e719      	b.n	1558 <__aeabi_fadd+0x2c>
    1724:	2c00      	cmp	r4, #0
    1726:	d115      	bne.n	1754 <__aeabi_fadd+0x228>
    1728:	2b00      	cmp	r3, #0
    172a:	d12f      	bne.n	178c <__aeabi_fadd+0x260>
    172c:	2f00      	cmp	r7, #0
    172e:	d05d      	beq.n	17ec <__aeabi_fadd+0x2c0>
    1730:	1c3b      	adds	r3, r7, #0
    1732:	1c0d      	adds	r5, r1, #0
    1734:	e710      	b.n	1558 <__aeabi_fadd+0x2c>
    1736:	2c00      	cmp	r4, #0
    1738:	d121      	bne.n	177e <__aeabi_fadd+0x252>
    173a:	2b00      	cmp	r3, #0
    173c:	d053      	beq.n	17e6 <__aeabi_fadd+0x2ba>
    173e:	43c9      	mvns	r1, r1
    1740:	2900      	cmp	r1, #0
    1742:	d004      	beq.n	174e <__aeabi_fadd+0x222>
    1744:	2aff      	cmp	r2, #255	; 0xff
    1746:	d04b      	beq.n	17e0 <__aeabi_fadd+0x2b4>
    1748:	291b      	cmp	r1, #27
    174a:	dd57      	ble.n	17fc <__aeabi_fadd+0x2d0>
    174c:	2301      	movs	r3, #1
    174e:	19db      	adds	r3, r3, r7
    1750:	1c14      	adds	r4, r2, #0
    1752:	e748      	b.n	15e6 <__aeabi_fadd+0xba>
    1754:	2b00      	cmp	r3, #0
    1756:	d122      	bne.n	179e <__aeabi_fadd+0x272>
    1758:	2f00      	cmp	r7, #0
    175a:	d04a      	beq.n	17f2 <__aeabi_fadd+0x2c6>
    175c:	1c3b      	adds	r3, r7, #0
    175e:	1c0d      	adds	r5, r1, #0
    1760:	24ff      	movs	r4, #255	; 0xff
    1762:	e6f9      	b.n	1558 <__aeabi_fadd+0x2c>
    1764:	1c3b      	adds	r3, r7, #0
    1766:	1c14      	adds	r4, r2, #0
    1768:	1c0d      	adds	r5, r1, #0
    176a:	e6f5      	b.n	1558 <__aeabi_fadd+0x2c>
    176c:	1c1d      	adds	r5, r3, #0
    176e:	2420      	movs	r4, #32
    1770:	40c5      	lsrs	r5, r0
    1772:	1a20      	subs	r0, r4, r0
    1774:	4083      	lsls	r3, r0
    1776:	1e58      	subs	r0, r3, #1
    1778:	4183      	sbcs	r3, r0
    177a:	432b      	orrs	r3, r5
    177c:	e79b      	b.n	16b6 <__aeabi_fadd+0x18a>
    177e:	2aff      	cmp	r2, #255	; 0xff
    1780:	d02e      	beq.n	17e0 <__aeabi_fadd+0x2b4>
    1782:	2480      	movs	r4, #128	; 0x80
    1784:	04e4      	lsls	r4, r4, #19
    1786:	4249      	negs	r1, r1
    1788:	4323      	orrs	r3, r4
    178a:	e7dd      	b.n	1748 <__aeabi_fadd+0x21c>
    178c:	2f00      	cmp	r7, #0
    178e:	d100      	bne.n	1792 <__aeabi_fadd+0x266>
    1790:	e6e2      	b.n	1558 <__aeabi_fadd+0x2c>
    1792:	1bda      	subs	r2, r3, r7
    1794:	0150      	lsls	r0, r2, #5
    1796:	d53c      	bpl.n	1812 <__aeabi_fadd+0x2e6>
    1798:	1afb      	subs	r3, r7, r3
    179a:	1c0d      	adds	r5, r1, #0
    179c:	e6dc      	b.n	1558 <__aeabi_fadd+0x2c>
    179e:	24ff      	movs	r4, #255	; 0xff
    17a0:	2f00      	cmp	r7, #0
    17a2:	d100      	bne.n	17a6 <__aeabi_fadd+0x27a>
    17a4:	e6d8      	b.n	1558 <__aeabi_fadd+0x2c>
    17a6:	2280      	movs	r2, #128	; 0x80
    17a8:	08db      	lsrs	r3, r3, #3
    17aa:	03d2      	lsls	r2, r2, #15
    17ac:	4213      	tst	r3, r2
    17ae:	d004      	beq.n	17ba <__aeabi_fadd+0x28e>
    17b0:	08fe      	lsrs	r6, r7, #3
    17b2:	4216      	tst	r6, r2
    17b4:	d101      	bne.n	17ba <__aeabi_fadd+0x28e>
    17b6:	1c33      	adds	r3, r6, #0
    17b8:	1c0d      	adds	r5, r1, #0
    17ba:	00db      	lsls	r3, r3, #3
    17bc:	24ff      	movs	r4, #255	; 0xff
    17be:	e6cb      	b.n	1558 <__aeabi_fadd+0x2c>
    17c0:	2b00      	cmp	r3, #0
    17c2:	d00d      	beq.n	17e0 <__aeabi_fadd+0x2b4>
    17c4:	24ff      	movs	r4, #255	; 0xff
    17c6:	2f00      	cmp	r7, #0
    17c8:	d100      	bne.n	17cc <__aeabi_fadd+0x2a0>
    17ca:	e6c5      	b.n	1558 <__aeabi_fadd+0x2c>
    17cc:	2280      	movs	r2, #128	; 0x80
    17ce:	08db      	lsrs	r3, r3, #3
    17d0:	03d2      	lsls	r2, r2, #15
    17d2:	4213      	tst	r3, r2
    17d4:	d0f1      	beq.n	17ba <__aeabi_fadd+0x28e>
    17d6:	08fe      	lsrs	r6, r7, #3
    17d8:	4216      	tst	r6, r2
    17da:	d1ee      	bne.n	17ba <__aeabi_fadd+0x28e>
    17dc:	1c33      	adds	r3, r6, #0
    17de:	e7ec      	b.n	17ba <__aeabi_fadd+0x28e>
    17e0:	1c3b      	adds	r3, r7, #0
    17e2:	24ff      	movs	r4, #255	; 0xff
    17e4:	e6b8      	b.n	1558 <__aeabi_fadd+0x2c>
    17e6:	1c3b      	adds	r3, r7, #0
    17e8:	1c14      	adds	r4, r2, #0
    17ea:	e6b5      	b.n	1558 <__aeabi_fadd+0x2c>
    17ec:	1c23      	adds	r3, r4, #0
    17ee:	2000      	movs	r0, #0
    17f0:	e6e4      	b.n	15bc <__aeabi_fadd+0x90>
    17f2:	2380      	movs	r3, #128	; 0x80
    17f4:	2000      	movs	r0, #0
    17f6:	049b      	lsls	r3, r3, #18
    17f8:	24ff      	movs	r4, #255	; 0xff
    17fa:	e6df      	b.n	15bc <__aeabi_fadd+0x90>
    17fc:	1c1e      	adds	r6, r3, #0
    17fe:	2420      	movs	r4, #32
    1800:	40ce      	lsrs	r6, r1
    1802:	1a61      	subs	r1, r4, r1
    1804:	408b      	lsls	r3, r1
    1806:	1e59      	subs	r1, r3, #1
    1808:	418b      	sbcs	r3, r1
    180a:	4333      	orrs	r3, r6
    180c:	e79f      	b.n	174e <__aeabi_fadd+0x222>
    180e:	1c3b      	adds	r3, r7, #0
    1810:	e6a2      	b.n	1558 <__aeabi_fadd+0x2c>
    1812:	1e13      	subs	r3, r2, #0
    1814:	d000      	beq.n	1818 <__aeabi_fadd+0x2ec>
    1816:	e6ce      	b.n	15b6 <__aeabi_fadd+0x8a>
    1818:	2300      	movs	r3, #0
    181a:	2000      	movs	r0, #0
    181c:	e6ce      	b.n	15bc <__aeabi_fadd+0x90>
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	fbffffff 	.word	0xfbffffff

00001824 <__aeabi_fmul>:
    1824:	b5f0      	push	{r4, r5, r6, r7, lr}
    1826:	465f      	mov	r7, fp
    1828:	4656      	mov	r6, sl
    182a:	464d      	mov	r5, r9
    182c:	4644      	mov	r4, r8
    182e:	b4f0      	push	{r4, r5, r6, r7}
    1830:	0245      	lsls	r5, r0, #9
    1832:	0046      	lsls	r6, r0, #1
    1834:	0fc4      	lsrs	r4, r0, #31
    1836:	b083      	sub	sp, #12
    1838:	1c0f      	adds	r7, r1, #0
    183a:	0a6d      	lsrs	r5, r5, #9
    183c:	0e36      	lsrs	r6, r6, #24
    183e:	46a3      	mov	fp, r4
    1840:	d045      	beq.n	18ce <__aeabi_fmul+0xaa>
    1842:	2eff      	cmp	r6, #255	; 0xff
    1844:	d025      	beq.n	1892 <__aeabi_fmul+0x6e>
    1846:	2380      	movs	r3, #128	; 0x80
    1848:	041b      	lsls	r3, r3, #16
    184a:	431d      	orrs	r5, r3
    184c:	2300      	movs	r3, #0
    184e:	469a      	mov	sl, r3
    1850:	00ed      	lsls	r5, r5, #3
    1852:	3e7f      	subs	r6, #127	; 0x7f
    1854:	9301      	str	r3, [sp, #4]
    1856:	027b      	lsls	r3, r7, #9
    1858:	0a5b      	lsrs	r3, r3, #9
    185a:	4698      	mov	r8, r3
    185c:	0078      	lsls	r0, r7, #1
    185e:	0ffb      	lsrs	r3, r7, #31
    1860:	0e00      	lsrs	r0, r0, #24
    1862:	4699      	mov	r9, r3
    1864:	d040      	beq.n	18e8 <__aeabi_fmul+0xc4>
    1866:	28ff      	cmp	r0, #255	; 0xff
    1868:	d038      	beq.n	18dc <__aeabi_fmul+0xb8>
    186a:	2380      	movs	r3, #128	; 0x80
    186c:	4642      	mov	r2, r8
    186e:	041b      	lsls	r3, r3, #16
    1870:	4313      	orrs	r3, r2
    1872:	00db      	lsls	r3, r3, #3
    1874:	4698      	mov	r8, r3
    1876:	2300      	movs	r3, #0
    1878:	387f      	subs	r0, #127	; 0x7f
    187a:	464a      	mov	r2, r9
    187c:	9f01      	ldr	r7, [sp, #4]
    187e:	1830      	adds	r0, r6, r0
    1880:	4062      	eors	r2, r4
    1882:	1c41      	adds	r1, r0, #1
    1884:	431f      	orrs	r7, r3
    1886:	2f0f      	cmp	r7, #15
    1888:	d869      	bhi.n	195e <__aeabi_fmul+0x13a>
    188a:	4e7d      	ldr	r6, [pc, #500]	; (1a80 <__aeabi_fmul+0x25c>)
    188c:	00bf      	lsls	r7, r7, #2
    188e:	59f6      	ldr	r6, [r6, r7]
    1890:	46b7      	mov	pc, r6
    1892:	2d00      	cmp	r5, #0
    1894:	d145      	bne.n	1922 <__aeabi_fmul+0xfe>
    1896:	2308      	movs	r3, #8
    1898:	9301      	str	r3, [sp, #4]
    189a:	3b06      	subs	r3, #6
    189c:	469a      	mov	sl, r3
    189e:	e7da      	b.n	1856 <__aeabi_fmul+0x32>
    18a0:	4693      	mov	fp, r2
    18a2:	4653      	mov	r3, sl
    18a4:	2b02      	cmp	r3, #2
    18a6:	d12f      	bne.n	1908 <__aeabi_fmul+0xe4>
    18a8:	465b      	mov	r3, fp
    18aa:	2401      	movs	r4, #1
    18ac:	2500      	movs	r5, #0
    18ae:	401c      	ands	r4, r3
    18b0:	23ff      	movs	r3, #255	; 0xff
    18b2:	026d      	lsls	r5, r5, #9
    18b4:	05db      	lsls	r3, r3, #23
    18b6:	0a6d      	lsrs	r5, r5, #9
    18b8:	07e4      	lsls	r4, r4, #31
    18ba:	431d      	orrs	r5, r3
    18bc:	4325      	orrs	r5, r4
    18be:	1c28      	adds	r0, r5, #0
    18c0:	b003      	add	sp, #12
    18c2:	bc3c      	pop	{r2, r3, r4, r5}
    18c4:	4690      	mov	r8, r2
    18c6:	4699      	mov	r9, r3
    18c8:	46a2      	mov	sl, r4
    18ca:	46ab      	mov	fp, r5
    18cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ce:	2d00      	cmp	r5, #0
    18d0:	d12c      	bne.n	192c <__aeabi_fmul+0x108>
    18d2:	2304      	movs	r3, #4
    18d4:	9301      	str	r3, [sp, #4]
    18d6:	3b03      	subs	r3, #3
    18d8:	469a      	mov	sl, r3
    18da:	e7bc      	b.n	1856 <__aeabi_fmul+0x32>
    18dc:	4643      	mov	r3, r8
    18de:	425a      	negs	r2, r3
    18e0:	4153      	adcs	r3, r2
    18e2:	2203      	movs	r2, #3
    18e4:	1ad3      	subs	r3, r2, r3
    18e6:	e7c8      	b.n	187a <__aeabi_fmul+0x56>
    18e8:	4642      	mov	r2, r8
    18ea:	2301      	movs	r3, #1
    18ec:	2a00      	cmp	r2, #0
    18ee:	d0c4      	beq.n	187a <__aeabi_fmul+0x56>
    18f0:	4640      	mov	r0, r8
    18f2:	f001 f9fd 	bl	2cf0 <__clzsi2>
    18f6:	4642      	mov	r2, r8
    18f8:	1f43      	subs	r3, r0, #5
    18fa:	409a      	lsls	r2, r3
    18fc:	2376      	movs	r3, #118	; 0x76
    18fe:	425b      	negs	r3, r3
    1900:	1a18      	subs	r0, r3, r0
    1902:	4690      	mov	r8, r2
    1904:	2300      	movs	r3, #0
    1906:	e7b8      	b.n	187a <__aeabi_fmul+0x56>
    1908:	2b03      	cmp	r3, #3
    190a:	d100      	bne.n	190e <__aeabi_fmul+0xea>
    190c:	e0ad      	b.n	1a6a <__aeabi_fmul+0x246>
    190e:	2b01      	cmp	r3, #1
    1910:	d000      	beq.n	1914 <__aeabi_fmul+0xf0>
    1912:	e08c      	b.n	1a2e <__aeabi_fmul+0x20a>
    1914:	465b      	mov	r3, fp
    1916:	4654      	mov	r4, sl
    1918:	401c      	ands	r4, r3
    191a:	b2e4      	uxtb	r4, r4
    191c:	2300      	movs	r3, #0
    191e:	2500      	movs	r5, #0
    1920:	e7c7      	b.n	18b2 <__aeabi_fmul+0x8e>
    1922:	230c      	movs	r3, #12
    1924:	9301      	str	r3, [sp, #4]
    1926:	3b09      	subs	r3, #9
    1928:	469a      	mov	sl, r3
    192a:	e794      	b.n	1856 <__aeabi_fmul+0x32>
    192c:	1c28      	adds	r0, r5, #0
    192e:	f001 f9df 	bl	2cf0 <__clzsi2>
    1932:	2676      	movs	r6, #118	; 0x76
    1934:	1f43      	subs	r3, r0, #5
    1936:	409d      	lsls	r5, r3
    1938:	2300      	movs	r3, #0
    193a:	4276      	negs	r6, r6
    193c:	1a36      	subs	r6, r6, r0
    193e:	9301      	str	r3, [sp, #4]
    1940:	469a      	mov	sl, r3
    1942:	e788      	b.n	1856 <__aeabi_fmul+0x32>
    1944:	2580      	movs	r5, #128	; 0x80
    1946:	2400      	movs	r4, #0
    1948:	03ed      	lsls	r5, r5, #15
    194a:	23ff      	movs	r3, #255	; 0xff
    194c:	e7b1      	b.n	18b2 <__aeabi_fmul+0x8e>
    194e:	4645      	mov	r5, r8
    1950:	46cb      	mov	fp, r9
    1952:	469a      	mov	sl, r3
    1954:	e7a5      	b.n	18a2 <__aeabi_fmul+0x7e>
    1956:	4645      	mov	r5, r8
    1958:	4693      	mov	fp, r2
    195a:	469a      	mov	sl, r3
    195c:	e7a1      	b.n	18a2 <__aeabi_fmul+0x7e>
    195e:	4643      	mov	r3, r8
    1960:	042c      	lsls	r4, r5, #16
    1962:	0c1b      	lsrs	r3, r3, #16
    1964:	469c      	mov	ip, r3
    1966:	0c23      	lsrs	r3, r4, #16
    1968:	4644      	mov	r4, r8
    196a:	0426      	lsls	r6, r4, #16
    196c:	1c1c      	adds	r4, r3, #0
    196e:	0c36      	lsrs	r6, r6, #16
    1970:	0c2f      	lsrs	r7, r5, #16
    1972:	4374      	muls	r4, r6
    1974:	1c35      	adds	r5, r6, #0
    1976:	4666      	mov	r6, ip
    1978:	437d      	muls	r5, r7
    197a:	4373      	muls	r3, r6
    197c:	4377      	muls	r7, r6
    197e:	18eb      	adds	r3, r5, r3
    1980:	0c26      	lsrs	r6, r4, #16
    1982:	199e      	adds	r6, r3, r6
    1984:	42b5      	cmp	r5, r6
    1986:	d903      	bls.n	1990 <__aeabi_fmul+0x16c>
    1988:	2380      	movs	r3, #128	; 0x80
    198a:	025b      	lsls	r3, r3, #9
    198c:	469c      	mov	ip, r3
    198e:	4467      	add	r7, ip
    1990:	0424      	lsls	r4, r4, #16
    1992:	0433      	lsls	r3, r6, #16
    1994:	0c24      	lsrs	r4, r4, #16
    1996:	191b      	adds	r3, r3, r4
    1998:	019d      	lsls	r5, r3, #6
    199a:	1e6c      	subs	r4, r5, #1
    199c:	41a5      	sbcs	r5, r4
    199e:	0e9b      	lsrs	r3, r3, #26
    19a0:	0c36      	lsrs	r6, r6, #16
    19a2:	432b      	orrs	r3, r5
    19a4:	19bd      	adds	r5, r7, r6
    19a6:	01ad      	lsls	r5, r5, #6
    19a8:	431d      	orrs	r5, r3
    19aa:	012b      	lsls	r3, r5, #4
    19ac:	d504      	bpl.n	19b8 <__aeabi_fmul+0x194>
    19ae:	2301      	movs	r3, #1
    19b0:	0868      	lsrs	r0, r5, #1
    19b2:	401d      	ands	r5, r3
    19b4:	4305      	orrs	r5, r0
    19b6:	1c08      	adds	r0, r1, #0
    19b8:	1c03      	adds	r3, r0, #0
    19ba:	337f      	adds	r3, #127	; 0x7f
    19bc:	2b00      	cmp	r3, #0
    19be:	dd2c      	ble.n	1a1a <__aeabi_fmul+0x1f6>
    19c0:	0769      	lsls	r1, r5, #29
    19c2:	d004      	beq.n	19ce <__aeabi_fmul+0x1aa>
    19c4:	210f      	movs	r1, #15
    19c6:	4029      	ands	r1, r5
    19c8:	2904      	cmp	r1, #4
    19ca:	d000      	beq.n	19ce <__aeabi_fmul+0x1aa>
    19cc:	3504      	adds	r5, #4
    19ce:	0129      	lsls	r1, r5, #4
    19d0:	d503      	bpl.n	19da <__aeabi_fmul+0x1b6>
    19d2:	4b2c      	ldr	r3, [pc, #176]	; (1a84 <__aeabi_fmul+0x260>)
    19d4:	401d      	ands	r5, r3
    19d6:	1c03      	adds	r3, r0, #0
    19d8:	3380      	adds	r3, #128	; 0x80
    19da:	2bfe      	cmp	r3, #254	; 0xfe
    19dc:	dd17      	ble.n	1a0e <__aeabi_fmul+0x1ea>
    19de:	2401      	movs	r4, #1
    19e0:	23ff      	movs	r3, #255	; 0xff
    19e2:	4014      	ands	r4, r2
    19e4:	2500      	movs	r5, #0
    19e6:	e764      	b.n	18b2 <__aeabi_fmul+0x8e>
    19e8:	2080      	movs	r0, #128	; 0x80
    19ea:	03c0      	lsls	r0, r0, #15
    19ec:	4205      	tst	r5, r0
    19ee:	d009      	beq.n	1a04 <__aeabi_fmul+0x1e0>
    19f0:	4643      	mov	r3, r8
    19f2:	4203      	tst	r3, r0
    19f4:	d106      	bne.n	1a04 <__aeabi_fmul+0x1e0>
    19f6:	4645      	mov	r5, r8
    19f8:	4305      	orrs	r5, r0
    19fa:	026d      	lsls	r5, r5, #9
    19fc:	0a6d      	lsrs	r5, r5, #9
    19fe:	464c      	mov	r4, r9
    1a00:	23ff      	movs	r3, #255	; 0xff
    1a02:	e756      	b.n	18b2 <__aeabi_fmul+0x8e>
    1a04:	4305      	orrs	r5, r0
    1a06:	026d      	lsls	r5, r5, #9
    1a08:	0a6d      	lsrs	r5, r5, #9
    1a0a:	23ff      	movs	r3, #255	; 0xff
    1a0c:	e751      	b.n	18b2 <__aeabi_fmul+0x8e>
    1a0e:	2401      	movs	r4, #1
    1a10:	01ad      	lsls	r5, r5, #6
    1a12:	0a6d      	lsrs	r5, r5, #9
    1a14:	b2db      	uxtb	r3, r3
    1a16:	4014      	ands	r4, r2
    1a18:	e74b      	b.n	18b2 <__aeabi_fmul+0x8e>
    1a1a:	237e      	movs	r3, #126	; 0x7e
    1a1c:	425b      	negs	r3, r3
    1a1e:	1a1b      	subs	r3, r3, r0
    1a20:	2b1b      	cmp	r3, #27
    1a22:	dd07      	ble.n	1a34 <__aeabi_fmul+0x210>
    1a24:	2401      	movs	r4, #1
    1a26:	2300      	movs	r3, #0
    1a28:	4014      	ands	r4, r2
    1a2a:	2500      	movs	r5, #0
    1a2c:	e741      	b.n	18b2 <__aeabi_fmul+0x8e>
    1a2e:	1c08      	adds	r0, r1, #0
    1a30:	465a      	mov	r2, fp
    1a32:	e7c1      	b.n	19b8 <__aeabi_fmul+0x194>
    1a34:	309e      	adds	r0, #158	; 0x9e
    1a36:	1c29      	adds	r1, r5, #0
    1a38:	4085      	lsls	r5, r0
    1a3a:	40d9      	lsrs	r1, r3
    1a3c:	1e68      	subs	r0, r5, #1
    1a3e:	4185      	sbcs	r5, r0
    1a40:	430d      	orrs	r5, r1
    1a42:	076b      	lsls	r3, r5, #29
    1a44:	d004      	beq.n	1a50 <__aeabi_fmul+0x22c>
    1a46:	230f      	movs	r3, #15
    1a48:	402b      	ands	r3, r5
    1a4a:	2b04      	cmp	r3, #4
    1a4c:	d000      	beq.n	1a50 <__aeabi_fmul+0x22c>
    1a4e:	3504      	adds	r5, #4
    1a50:	016b      	lsls	r3, r5, #5
    1a52:	d504      	bpl.n	1a5e <__aeabi_fmul+0x23a>
    1a54:	2401      	movs	r4, #1
    1a56:	2301      	movs	r3, #1
    1a58:	4014      	ands	r4, r2
    1a5a:	2500      	movs	r5, #0
    1a5c:	e729      	b.n	18b2 <__aeabi_fmul+0x8e>
    1a5e:	2401      	movs	r4, #1
    1a60:	01ad      	lsls	r5, r5, #6
    1a62:	0a6d      	lsrs	r5, r5, #9
    1a64:	4014      	ands	r4, r2
    1a66:	2300      	movs	r3, #0
    1a68:	e723      	b.n	18b2 <__aeabi_fmul+0x8e>
    1a6a:	2380      	movs	r3, #128	; 0x80
    1a6c:	03db      	lsls	r3, r3, #15
    1a6e:	431d      	orrs	r5, r3
    1a70:	2401      	movs	r4, #1
    1a72:	465b      	mov	r3, fp
    1a74:	026d      	lsls	r5, r5, #9
    1a76:	4023      	ands	r3, r4
    1a78:	1c1c      	adds	r4, r3, #0
    1a7a:	0a6d      	lsrs	r5, r5, #9
    1a7c:	23ff      	movs	r3, #255	; 0xff
    1a7e:	e718      	b.n	18b2 <__aeabi_fmul+0x8e>
    1a80:	00003378 	.word	0x00003378
    1a84:	f7ffffff 	.word	0xf7ffffff

00001a88 <__aeabi_fsub>:
    1a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a8a:	004a      	lsls	r2, r1, #1
    1a8c:	0243      	lsls	r3, r0, #9
    1a8e:	0044      	lsls	r4, r0, #1
    1a90:	024d      	lsls	r5, r1, #9
    1a92:	0fc0      	lsrs	r0, r0, #31
    1a94:	0e24      	lsrs	r4, r4, #24
    1a96:	1c06      	adds	r6, r0, #0
    1a98:	099b      	lsrs	r3, r3, #6
    1a9a:	0e12      	lsrs	r2, r2, #24
    1a9c:	0fc9      	lsrs	r1, r1, #31
    1a9e:	09ad      	lsrs	r5, r5, #6
    1aa0:	2aff      	cmp	r2, #255	; 0xff
    1aa2:	d100      	bne.n	1aa6 <__aeabi_fsub+0x1e>
    1aa4:	e075      	b.n	1b92 <__aeabi_fsub+0x10a>
    1aa6:	2701      	movs	r7, #1
    1aa8:	4079      	eors	r1, r7
    1aaa:	4288      	cmp	r0, r1
    1aac:	d050      	beq.n	1b50 <__aeabi_fsub+0xc8>
    1aae:	1aa0      	subs	r0, r4, r2
    1ab0:	2800      	cmp	r0, #0
    1ab2:	dc00      	bgt.n	1ab6 <__aeabi_fsub+0x2e>
    1ab4:	e08f      	b.n	1bd6 <__aeabi_fsub+0x14e>
    1ab6:	2a00      	cmp	r2, #0
    1ab8:	d11e      	bne.n	1af8 <__aeabi_fsub+0x70>
    1aba:	2d00      	cmp	r5, #0
    1abc:	d000      	beq.n	1ac0 <__aeabi_fsub+0x38>
    1abe:	e075      	b.n	1bac <__aeabi_fsub+0x124>
    1ac0:	075a      	lsls	r2, r3, #29
    1ac2:	d004      	beq.n	1ace <__aeabi_fsub+0x46>
    1ac4:	220f      	movs	r2, #15
    1ac6:	401a      	ands	r2, r3
    1ac8:	2a04      	cmp	r2, #4
    1aca:	d000      	beq.n	1ace <__aeabi_fsub+0x46>
    1acc:	3304      	adds	r3, #4
    1ace:	2280      	movs	r2, #128	; 0x80
    1ad0:	2001      	movs	r0, #1
    1ad2:	04d2      	lsls	r2, r2, #19
    1ad4:	401a      	ands	r2, r3
    1ad6:	4030      	ands	r0, r6
    1ad8:	2a00      	cmp	r2, #0
    1ada:	d032      	beq.n	1b42 <__aeabi_fsub+0xba>
    1adc:	3401      	adds	r4, #1
    1ade:	2cff      	cmp	r4, #255	; 0xff
    1ae0:	d100      	bne.n	1ae4 <__aeabi_fsub+0x5c>
    1ae2:	e084      	b.n	1bee <__aeabi_fsub+0x166>
    1ae4:	019b      	lsls	r3, r3, #6
    1ae6:	0a5b      	lsrs	r3, r3, #9
    1ae8:	b2e4      	uxtb	r4, r4
    1aea:	025b      	lsls	r3, r3, #9
    1aec:	05e4      	lsls	r4, r4, #23
    1aee:	0a5b      	lsrs	r3, r3, #9
    1af0:	4323      	orrs	r3, r4
    1af2:	07c0      	lsls	r0, r0, #31
    1af4:	4318      	orrs	r0, r3
    1af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1af8:	2cff      	cmp	r4, #255	; 0xff
    1afa:	d0e1      	beq.n	1ac0 <__aeabi_fsub+0x38>
    1afc:	2280      	movs	r2, #128	; 0x80
    1afe:	04d2      	lsls	r2, r2, #19
    1b00:	4315      	orrs	r5, r2
    1b02:	281b      	cmp	r0, #27
    1b04:	dd7a      	ble.n	1bfc <__aeabi_fsub+0x174>
    1b06:	2501      	movs	r5, #1
    1b08:	1b5b      	subs	r3, r3, r5
    1b0a:	015a      	lsls	r2, r3, #5
    1b0c:	d55d      	bpl.n	1bca <__aeabi_fsub+0x142>
    1b0e:	019b      	lsls	r3, r3, #6
    1b10:	099f      	lsrs	r7, r3, #6
    1b12:	1c38      	adds	r0, r7, #0
    1b14:	f001 f8ec 	bl	2cf0 <__clzsi2>
    1b18:	3805      	subs	r0, #5
    1b1a:	4087      	lsls	r7, r0
    1b1c:	4284      	cmp	r4, r0
    1b1e:	dc69      	bgt.n	1bf4 <__aeabi_fsub+0x16c>
    1b20:	1b00      	subs	r0, r0, r4
    1b22:	241f      	movs	r4, #31
    1b24:	1c3a      	adds	r2, r7, #0
    1b26:	1c43      	adds	r3, r0, #1
    1b28:	1a20      	subs	r0, r4, r0
    1b2a:	40da      	lsrs	r2, r3
    1b2c:	4087      	lsls	r7, r0
    1b2e:	1c13      	adds	r3, r2, #0
    1b30:	1e7c      	subs	r4, r7, #1
    1b32:	41a7      	sbcs	r7, r4
    1b34:	2400      	movs	r4, #0
    1b36:	433b      	orrs	r3, r7
    1b38:	e7c2      	b.n	1ac0 <__aeabi_fsub+0x38>
    1b3a:	1e13      	subs	r3, r2, #0
    1b3c:	d145      	bne.n	1bca <__aeabi_fsub+0x142>
    1b3e:	2300      	movs	r3, #0
    1b40:	2000      	movs	r0, #0
    1b42:	08db      	lsrs	r3, r3, #3
    1b44:	2cff      	cmp	r4, #255	; 0xff
    1b46:	d028      	beq.n	1b9a <__aeabi_fsub+0x112>
    1b48:	025b      	lsls	r3, r3, #9
    1b4a:	0a5b      	lsrs	r3, r3, #9
    1b4c:	b2e4      	uxtb	r4, r4
    1b4e:	e7cc      	b.n	1aea <__aeabi_fsub+0x62>
    1b50:	1aa1      	subs	r1, r4, r2
    1b52:	2900      	cmp	r1, #0
    1b54:	dd5b      	ble.n	1c0e <__aeabi_fsub+0x186>
    1b56:	2a00      	cmp	r2, #0
    1b58:	d02e      	beq.n	1bb8 <__aeabi_fsub+0x130>
    1b5a:	2cff      	cmp	r4, #255	; 0xff
    1b5c:	d0b0      	beq.n	1ac0 <__aeabi_fsub+0x38>
    1b5e:	2280      	movs	r2, #128	; 0x80
    1b60:	04d2      	lsls	r2, r2, #19
    1b62:	4315      	orrs	r5, r2
    1b64:	291b      	cmp	r1, #27
    1b66:	dc74      	bgt.n	1c52 <__aeabi_fsub+0x1ca>
    1b68:	1c2f      	adds	r7, r5, #0
    1b6a:	2220      	movs	r2, #32
    1b6c:	40cf      	lsrs	r7, r1
    1b6e:	1a51      	subs	r1, r2, r1
    1b70:	408d      	lsls	r5, r1
    1b72:	1e69      	subs	r1, r5, #1
    1b74:	418d      	sbcs	r5, r1
    1b76:	433d      	orrs	r5, r7
    1b78:	195b      	adds	r3, r3, r5
    1b7a:	015a      	lsls	r2, r3, #5
    1b7c:	d525      	bpl.n	1bca <__aeabi_fsub+0x142>
    1b7e:	3401      	adds	r4, #1
    1b80:	2cff      	cmp	r4, #255	; 0xff
    1b82:	d074      	beq.n	1c6e <__aeabi_fsub+0x1e6>
    1b84:	2101      	movs	r1, #1
    1b86:	4a7e      	ldr	r2, [pc, #504]	; (1d80 <__aeabi_fsub+0x2f8>)
    1b88:	4019      	ands	r1, r3
    1b8a:	4013      	ands	r3, r2
    1b8c:	085b      	lsrs	r3, r3, #1
    1b8e:	430b      	orrs	r3, r1
    1b90:	e796      	b.n	1ac0 <__aeabi_fsub+0x38>
    1b92:	2d00      	cmp	r5, #0
    1b94:	d000      	beq.n	1b98 <__aeabi_fsub+0x110>
    1b96:	e788      	b.n	1aaa <__aeabi_fsub+0x22>
    1b98:	e785      	b.n	1aa6 <__aeabi_fsub+0x1e>
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d027      	beq.n	1bee <__aeabi_fsub+0x166>
    1b9e:	2280      	movs	r2, #128	; 0x80
    1ba0:	03d2      	lsls	r2, r2, #15
    1ba2:	4313      	orrs	r3, r2
    1ba4:	025b      	lsls	r3, r3, #9
    1ba6:	0a5b      	lsrs	r3, r3, #9
    1ba8:	24ff      	movs	r4, #255	; 0xff
    1baa:	e79e      	b.n	1aea <__aeabi_fsub+0x62>
    1bac:	3801      	subs	r0, #1
    1bae:	2800      	cmp	r0, #0
    1bb0:	d0aa      	beq.n	1b08 <__aeabi_fsub+0x80>
    1bb2:	2cff      	cmp	r4, #255	; 0xff
    1bb4:	d1a5      	bne.n	1b02 <__aeabi_fsub+0x7a>
    1bb6:	e783      	b.n	1ac0 <__aeabi_fsub+0x38>
    1bb8:	2d00      	cmp	r5, #0
    1bba:	d100      	bne.n	1bbe <__aeabi_fsub+0x136>
    1bbc:	e780      	b.n	1ac0 <__aeabi_fsub+0x38>
    1bbe:	3901      	subs	r1, #1
    1bc0:	2900      	cmp	r1, #0
    1bc2:	d0d9      	beq.n	1b78 <__aeabi_fsub+0xf0>
    1bc4:	2cff      	cmp	r4, #255	; 0xff
    1bc6:	d1cd      	bne.n	1b64 <__aeabi_fsub+0xdc>
    1bc8:	e77a      	b.n	1ac0 <__aeabi_fsub+0x38>
    1bca:	075a      	lsls	r2, r3, #29
    1bcc:	d000      	beq.n	1bd0 <__aeabi_fsub+0x148>
    1bce:	e779      	b.n	1ac4 <__aeabi_fsub+0x3c>
    1bd0:	2001      	movs	r0, #1
    1bd2:	4030      	ands	r0, r6
    1bd4:	e7b5      	b.n	1b42 <__aeabi_fsub+0xba>
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d125      	bne.n	1c26 <__aeabi_fsub+0x19e>
    1bda:	1c62      	adds	r2, r4, #1
    1bdc:	b2d2      	uxtb	r2, r2
    1bde:	2a01      	cmp	r2, #1
    1be0:	dd55      	ble.n	1c8e <__aeabi_fsub+0x206>
    1be2:	1b5f      	subs	r7, r3, r5
    1be4:	017a      	lsls	r2, r7, #5
    1be6:	d52d      	bpl.n	1c44 <__aeabi_fsub+0x1bc>
    1be8:	1aef      	subs	r7, r5, r3
    1bea:	1c0e      	adds	r6, r1, #0
    1bec:	e791      	b.n	1b12 <__aeabi_fsub+0x8a>
    1bee:	24ff      	movs	r4, #255	; 0xff
    1bf0:	2300      	movs	r3, #0
    1bf2:	e77a      	b.n	1aea <__aeabi_fsub+0x62>
    1bf4:	4b62      	ldr	r3, [pc, #392]	; (1d80 <__aeabi_fsub+0x2f8>)
    1bf6:	1a24      	subs	r4, r4, r0
    1bf8:	403b      	ands	r3, r7
    1bfa:	e761      	b.n	1ac0 <__aeabi_fsub+0x38>
    1bfc:	1c29      	adds	r1, r5, #0
    1bfe:	2220      	movs	r2, #32
    1c00:	40c1      	lsrs	r1, r0
    1c02:	1a10      	subs	r0, r2, r0
    1c04:	4085      	lsls	r5, r0
    1c06:	1e68      	subs	r0, r5, #1
    1c08:	4185      	sbcs	r5, r0
    1c0a:	430d      	orrs	r5, r1
    1c0c:	e77c      	b.n	1b08 <__aeabi_fsub+0x80>
    1c0e:	2900      	cmp	r1, #0
    1c10:	d146      	bne.n	1ca0 <__aeabi_fsub+0x218>
    1c12:	1c62      	adds	r2, r4, #1
    1c14:	b2d1      	uxtb	r1, r2
    1c16:	2901      	cmp	r1, #1
    1c18:	dd2b      	ble.n	1c72 <__aeabi_fsub+0x1ea>
    1c1a:	2aff      	cmp	r2, #255	; 0xff
    1c1c:	d026      	beq.n	1c6c <__aeabi_fsub+0x1e4>
    1c1e:	18eb      	adds	r3, r5, r3
    1c20:	085b      	lsrs	r3, r3, #1
    1c22:	1c14      	adds	r4, r2, #0
    1c24:	e74c      	b.n	1ac0 <__aeabi_fsub+0x38>
    1c26:	2c00      	cmp	r4, #0
    1c28:	d015      	beq.n	1c56 <__aeabi_fsub+0x1ce>
    1c2a:	2aff      	cmp	r2, #255	; 0xff
    1c2c:	d01a      	beq.n	1c64 <__aeabi_fsub+0x1dc>
    1c2e:	2480      	movs	r4, #128	; 0x80
    1c30:	04e4      	lsls	r4, r4, #19
    1c32:	4240      	negs	r0, r0
    1c34:	4323      	orrs	r3, r4
    1c36:	281b      	cmp	r0, #27
    1c38:	dd4d      	ble.n	1cd6 <__aeabi_fsub+0x24e>
    1c3a:	2301      	movs	r3, #1
    1c3c:	1aeb      	subs	r3, r5, r3
    1c3e:	1c14      	adds	r4, r2, #0
    1c40:	1c0e      	adds	r6, r1, #0
    1c42:	e762      	b.n	1b0a <__aeabi_fsub+0x82>
    1c44:	2f00      	cmp	r7, #0
    1c46:	d000      	beq.n	1c4a <__aeabi_fsub+0x1c2>
    1c48:	e763      	b.n	1b12 <__aeabi_fsub+0x8a>
    1c4a:	2300      	movs	r3, #0
    1c4c:	2000      	movs	r0, #0
    1c4e:	2400      	movs	r4, #0
    1c50:	e777      	b.n	1b42 <__aeabi_fsub+0xba>
    1c52:	2501      	movs	r5, #1
    1c54:	e790      	b.n	1b78 <__aeabi_fsub+0xf0>
    1c56:	2b00      	cmp	r3, #0
    1c58:	d039      	beq.n	1cce <__aeabi_fsub+0x246>
    1c5a:	43c0      	mvns	r0, r0
    1c5c:	2800      	cmp	r0, #0
    1c5e:	d0ed      	beq.n	1c3c <__aeabi_fsub+0x1b4>
    1c60:	2aff      	cmp	r2, #255	; 0xff
    1c62:	d1e8      	bne.n	1c36 <__aeabi_fsub+0x1ae>
    1c64:	1c2b      	adds	r3, r5, #0
    1c66:	24ff      	movs	r4, #255	; 0xff
    1c68:	1c0e      	adds	r6, r1, #0
    1c6a:	e729      	b.n	1ac0 <__aeabi_fsub+0x38>
    1c6c:	24ff      	movs	r4, #255	; 0xff
    1c6e:	2300      	movs	r3, #0
    1c70:	e767      	b.n	1b42 <__aeabi_fsub+0xba>
    1c72:	2c00      	cmp	r4, #0
    1c74:	d15a      	bne.n	1d2c <__aeabi_fsub+0x2a4>
    1c76:	2b00      	cmp	r3, #0
    1c78:	d07f      	beq.n	1d7a <__aeabi_fsub+0x2f2>
    1c7a:	2d00      	cmp	r5, #0
    1c7c:	d100      	bne.n	1c80 <__aeabi_fsub+0x1f8>
    1c7e:	e71f      	b.n	1ac0 <__aeabi_fsub+0x38>
    1c80:	195b      	adds	r3, r3, r5
    1c82:	015a      	lsls	r2, r3, #5
    1c84:	d5a1      	bpl.n	1bca <__aeabi_fsub+0x142>
    1c86:	4a3e      	ldr	r2, [pc, #248]	; (1d80 <__aeabi_fsub+0x2f8>)
    1c88:	3401      	adds	r4, #1
    1c8a:	4013      	ands	r3, r2
    1c8c:	e718      	b.n	1ac0 <__aeabi_fsub+0x38>
    1c8e:	2c00      	cmp	r4, #0
    1c90:	d115      	bne.n	1cbe <__aeabi_fsub+0x236>
    1c92:	2b00      	cmp	r3, #0
    1c94:	d12f      	bne.n	1cf6 <__aeabi_fsub+0x26e>
    1c96:	2d00      	cmp	r5, #0
    1c98:	d05e      	beq.n	1d58 <__aeabi_fsub+0x2d0>
    1c9a:	1c2b      	adds	r3, r5, #0
    1c9c:	1c0e      	adds	r6, r1, #0
    1c9e:	e70f      	b.n	1ac0 <__aeabi_fsub+0x38>
    1ca0:	2c00      	cmp	r4, #0
    1ca2:	d121      	bne.n	1ce8 <__aeabi_fsub+0x260>
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d054      	beq.n	1d52 <__aeabi_fsub+0x2ca>
    1ca8:	43c9      	mvns	r1, r1
    1caa:	2900      	cmp	r1, #0
    1cac:	d004      	beq.n	1cb8 <__aeabi_fsub+0x230>
    1cae:	2aff      	cmp	r2, #255	; 0xff
    1cb0:	d04c      	beq.n	1d4c <__aeabi_fsub+0x2c4>
    1cb2:	291b      	cmp	r1, #27
    1cb4:	dd58      	ble.n	1d68 <__aeabi_fsub+0x2e0>
    1cb6:	2301      	movs	r3, #1
    1cb8:	195b      	adds	r3, r3, r5
    1cba:	1c14      	adds	r4, r2, #0
    1cbc:	e75d      	b.n	1b7a <__aeabi_fsub+0xf2>
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d123      	bne.n	1d0a <__aeabi_fsub+0x282>
    1cc2:	2d00      	cmp	r5, #0
    1cc4:	d04b      	beq.n	1d5e <__aeabi_fsub+0x2d6>
    1cc6:	1c2b      	adds	r3, r5, #0
    1cc8:	1c0e      	adds	r6, r1, #0
    1cca:	24ff      	movs	r4, #255	; 0xff
    1ccc:	e6f8      	b.n	1ac0 <__aeabi_fsub+0x38>
    1cce:	1c2b      	adds	r3, r5, #0
    1cd0:	1c14      	adds	r4, r2, #0
    1cd2:	1c0e      	adds	r6, r1, #0
    1cd4:	e6f4      	b.n	1ac0 <__aeabi_fsub+0x38>
    1cd6:	1c1e      	adds	r6, r3, #0
    1cd8:	2420      	movs	r4, #32
    1cda:	40c6      	lsrs	r6, r0
    1cdc:	1a20      	subs	r0, r4, r0
    1cde:	4083      	lsls	r3, r0
    1ce0:	1e58      	subs	r0, r3, #1
    1ce2:	4183      	sbcs	r3, r0
    1ce4:	4333      	orrs	r3, r6
    1ce6:	e7a9      	b.n	1c3c <__aeabi_fsub+0x1b4>
    1ce8:	2aff      	cmp	r2, #255	; 0xff
    1cea:	d02f      	beq.n	1d4c <__aeabi_fsub+0x2c4>
    1cec:	2480      	movs	r4, #128	; 0x80
    1cee:	04e4      	lsls	r4, r4, #19
    1cf0:	4249      	negs	r1, r1
    1cf2:	4323      	orrs	r3, r4
    1cf4:	e7dd      	b.n	1cb2 <__aeabi_fsub+0x22a>
    1cf6:	2d00      	cmp	r5, #0
    1cf8:	d100      	bne.n	1cfc <__aeabi_fsub+0x274>
    1cfa:	e6e1      	b.n	1ac0 <__aeabi_fsub+0x38>
    1cfc:	1b5a      	subs	r2, r3, r5
    1cfe:	0150      	lsls	r0, r2, #5
    1d00:	d400      	bmi.n	1d04 <__aeabi_fsub+0x27c>
    1d02:	e71a      	b.n	1b3a <__aeabi_fsub+0xb2>
    1d04:	1aeb      	subs	r3, r5, r3
    1d06:	1c0e      	adds	r6, r1, #0
    1d08:	e6da      	b.n	1ac0 <__aeabi_fsub+0x38>
    1d0a:	24ff      	movs	r4, #255	; 0xff
    1d0c:	2d00      	cmp	r5, #0
    1d0e:	d100      	bne.n	1d12 <__aeabi_fsub+0x28a>
    1d10:	e6d6      	b.n	1ac0 <__aeabi_fsub+0x38>
    1d12:	2280      	movs	r2, #128	; 0x80
    1d14:	08db      	lsrs	r3, r3, #3
    1d16:	03d2      	lsls	r2, r2, #15
    1d18:	4213      	tst	r3, r2
    1d1a:	d004      	beq.n	1d26 <__aeabi_fsub+0x29e>
    1d1c:	08ed      	lsrs	r5, r5, #3
    1d1e:	4215      	tst	r5, r2
    1d20:	d101      	bne.n	1d26 <__aeabi_fsub+0x29e>
    1d22:	1c2b      	adds	r3, r5, #0
    1d24:	1c0e      	adds	r6, r1, #0
    1d26:	00db      	lsls	r3, r3, #3
    1d28:	24ff      	movs	r4, #255	; 0xff
    1d2a:	e6c9      	b.n	1ac0 <__aeabi_fsub+0x38>
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d00d      	beq.n	1d4c <__aeabi_fsub+0x2c4>
    1d30:	24ff      	movs	r4, #255	; 0xff
    1d32:	2d00      	cmp	r5, #0
    1d34:	d100      	bne.n	1d38 <__aeabi_fsub+0x2b0>
    1d36:	e6c3      	b.n	1ac0 <__aeabi_fsub+0x38>
    1d38:	2280      	movs	r2, #128	; 0x80
    1d3a:	08db      	lsrs	r3, r3, #3
    1d3c:	03d2      	lsls	r2, r2, #15
    1d3e:	4213      	tst	r3, r2
    1d40:	d0f1      	beq.n	1d26 <__aeabi_fsub+0x29e>
    1d42:	08ed      	lsrs	r5, r5, #3
    1d44:	4215      	tst	r5, r2
    1d46:	d1ee      	bne.n	1d26 <__aeabi_fsub+0x29e>
    1d48:	1c2b      	adds	r3, r5, #0
    1d4a:	e7ec      	b.n	1d26 <__aeabi_fsub+0x29e>
    1d4c:	1c2b      	adds	r3, r5, #0
    1d4e:	24ff      	movs	r4, #255	; 0xff
    1d50:	e6b6      	b.n	1ac0 <__aeabi_fsub+0x38>
    1d52:	1c2b      	adds	r3, r5, #0
    1d54:	1c14      	adds	r4, r2, #0
    1d56:	e6b3      	b.n	1ac0 <__aeabi_fsub+0x38>
    1d58:	1c23      	adds	r3, r4, #0
    1d5a:	2000      	movs	r0, #0
    1d5c:	e6f1      	b.n	1b42 <__aeabi_fsub+0xba>
    1d5e:	2380      	movs	r3, #128	; 0x80
    1d60:	2000      	movs	r0, #0
    1d62:	049b      	lsls	r3, r3, #18
    1d64:	24ff      	movs	r4, #255	; 0xff
    1d66:	e6ec      	b.n	1b42 <__aeabi_fsub+0xba>
    1d68:	1c1f      	adds	r7, r3, #0
    1d6a:	2420      	movs	r4, #32
    1d6c:	40cf      	lsrs	r7, r1
    1d6e:	1a61      	subs	r1, r4, r1
    1d70:	408b      	lsls	r3, r1
    1d72:	1e59      	subs	r1, r3, #1
    1d74:	418b      	sbcs	r3, r1
    1d76:	433b      	orrs	r3, r7
    1d78:	e79e      	b.n	1cb8 <__aeabi_fsub+0x230>
    1d7a:	1c2b      	adds	r3, r5, #0
    1d7c:	e6a0      	b.n	1ac0 <__aeabi_fsub+0x38>
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	fbffffff 	.word	0xfbffffff

00001d84 <__aeabi_f2iz>:
    1d84:	0242      	lsls	r2, r0, #9
    1d86:	0a51      	lsrs	r1, r2, #9
    1d88:	0042      	lsls	r2, r0, #1
    1d8a:	0fc3      	lsrs	r3, r0, #31
    1d8c:	0e12      	lsrs	r2, r2, #24
    1d8e:	2000      	movs	r0, #0
    1d90:	2a7e      	cmp	r2, #126	; 0x7e
    1d92:	dd0d      	ble.n	1db0 <__aeabi_f2iz+0x2c>
    1d94:	2a9d      	cmp	r2, #157	; 0x9d
    1d96:	dc0c      	bgt.n	1db2 <__aeabi_f2iz+0x2e>
    1d98:	2080      	movs	r0, #128	; 0x80
    1d9a:	0400      	lsls	r0, r0, #16
    1d9c:	4301      	orrs	r1, r0
    1d9e:	2a95      	cmp	r2, #149	; 0x95
    1da0:	dc0a      	bgt.n	1db8 <__aeabi_f2iz+0x34>
    1da2:	2096      	movs	r0, #150	; 0x96
    1da4:	1a82      	subs	r2, r0, r2
    1da6:	40d1      	lsrs	r1, r2
    1da8:	1c0a      	adds	r2, r1, #0
    1daa:	4258      	negs	r0, r3
    1dac:	4042      	eors	r2, r0
    1dae:	18d0      	adds	r0, r2, r3
    1db0:	4770      	bx	lr
    1db2:	4a03      	ldr	r2, [pc, #12]	; (1dc0 <__aeabi_f2iz+0x3c>)
    1db4:	1898      	adds	r0, r3, r2
    1db6:	e7fb      	b.n	1db0 <__aeabi_f2iz+0x2c>
    1db8:	3a96      	subs	r2, #150	; 0x96
    1dba:	4091      	lsls	r1, r2
    1dbc:	1c0a      	adds	r2, r1, #0
    1dbe:	e7f4      	b.n	1daa <__aeabi_f2iz+0x26>
    1dc0:	7fffffff 	.word	0x7fffffff

00001dc4 <__aeabi_ui2f>:
    1dc4:	b510      	push	{r4, lr}
    1dc6:	1e04      	subs	r4, r0, #0
    1dc8:	d035      	beq.n	1e36 <__aeabi_ui2f+0x72>
    1dca:	f000 ff91 	bl	2cf0 <__clzsi2>
    1dce:	219e      	movs	r1, #158	; 0x9e
    1dd0:	1a09      	subs	r1, r1, r0
    1dd2:	2996      	cmp	r1, #150	; 0x96
    1dd4:	dc09      	bgt.n	1dea <__aeabi_ui2f+0x26>
    1dd6:	2808      	cmp	r0, #8
    1dd8:	dd30      	ble.n	1e3c <__aeabi_ui2f+0x78>
    1dda:	1c02      	adds	r2, r0, #0
    1ddc:	1c23      	adds	r3, r4, #0
    1dde:	3a08      	subs	r2, #8
    1de0:	4093      	lsls	r3, r2
    1de2:	025b      	lsls	r3, r3, #9
    1de4:	0a5b      	lsrs	r3, r3, #9
    1de6:	b2c8      	uxtb	r0, r1
    1de8:	e020      	b.n	1e2c <__aeabi_ui2f+0x68>
    1dea:	2999      	cmp	r1, #153	; 0x99
    1dec:	dd0c      	ble.n	1e08 <__aeabi_ui2f+0x44>
    1dee:	2205      	movs	r2, #5
    1df0:	1c23      	adds	r3, r4, #0
    1df2:	1a12      	subs	r2, r2, r0
    1df4:	40d3      	lsrs	r3, r2
    1df6:	1c1a      	adds	r2, r3, #0
    1df8:	1c03      	adds	r3, r0, #0
    1dfa:	331b      	adds	r3, #27
    1dfc:	409c      	lsls	r4, r3
    1dfe:	1c23      	adds	r3, r4, #0
    1e00:	1e5c      	subs	r4, r3, #1
    1e02:	41a3      	sbcs	r3, r4
    1e04:	4313      	orrs	r3, r2
    1e06:	1c1c      	adds	r4, r3, #0
    1e08:	2805      	cmp	r0, #5
    1e0a:	dd01      	ble.n	1e10 <__aeabi_ui2f+0x4c>
    1e0c:	1f43      	subs	r3, r0, #5
    1e0e:	409c      	lsls	r4, r3
    1e10:	4b0f      	ldr	r3, [pc, #60]	; (1e50 <__aeabi_ui2f+0x8c>)
    1e12:	4023      	ands	r3, r4
    1e14:	0762      	lsls	r2, r4, #29
    1e16:	d004      	beq.n	1e22 <__aeabi_ui2f+0x5e>
    1e18:	220f      	movs	r2, #15
    1e1a:	4014      	ands	r4, r2
    1e1c:	2c04      	cmp	r4, #4
    1e1e:	d000      	beq.n	1e22 <__aeabi_ui2f+0x5e>
    1e20:	3304      	adds	r3, #4
    1e22:	015a      	lsls	r2, r3, #5
    1e24:	d40e      	bmi.n	1e44 <__aeabi_ui2f+0x80>
    1e26:	019b      	lsls	r3, r3, #6
    1e28:	0a5b      	lsrs	r3, r3, #9
    1e2a:	b2c8      	uxtb	r0, r1
    1e2c:	025b      	lsls	r3, r3, #9
    1e2e:	0a5b      	lsrs	r3, r3, #9
    1e30:	05c0      	lsls	r0, r0, #23
    1e32:	4318      	orrs	r0, r3
    1e34:	bd10      	pop	{r4, pc}
    1e36:	2000      	movs	r0, #0
    1e38:	2300      	movs	r3, #0
    1e3a:	e7f7      	b.n	1e2c <__aeabi_ui2f+0x68>
    1e3c:	0263      	lsls	r3, r4, #9
    1e3e:	0a5b      	lsrs	r3, r3, #9
    1e40:	b2c8      	uxtb	r0, r1
    1e42:	e7f3      	b.n	1e2c <__aeabi_ui2f+0x68>
    1e44:	219f      	movs	r1, #159	; 0x9f
    1e46:	4a02      	ldr	r2, [pc, #8]	; (1e50 <__aeabi_ui2f+0x8c>)
    1e48:	1a09      	subs	r1, r1, r0
    1e4a:	4013      	ands	r3, r2
    1e4c:	e7eb      	b.n	1e26 <__aeabi_ui2f+0x62>
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	fbffffff 	.word	0xfbffffff

00001e54 <__aeabi_dadd>:
    1e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e56:	4645      	mov	r5, r8
    1e58:	4657      	mov	r7, sl
    1e5a:	464e      	mov	r6, r9
    1e5c:	4694      	mov	ip, r2
    1e5e:	004c      	lsls	r4, r1, #1
    1e60:	030a      	lsls	r2, r1, #12
    1e62:	0fc9      	lsrs	r1, r1, #31
    1e64:	b4e0      	push	{r5, r6, r7}
    1e66:	4688      	mov	r8, r1
    1e68:	1c0e      	adds	r6, r1, #0
    1e6a:	0319      	lsls	r1, r3, #12
    1e6c:	0f47      	lsrs	r7, r0, #29
    1e6e:	00c5      	lsls	r5, r0, #3
    1e70:	0a48      	lsrs	r0, r1, #9
    1e72:	4661      	mov	r1, ip
    1e74:	0f49      	lsrs	r1, r1, #29
    1e76:	4301      	orrs	r1, r0
    1e78:	4660      	mov	r0, ip
    1e7a:	0a52      	lsrs	r2, r2, #9
    1e7c:	4317      	orrs	r7, r2
    1e7e:	00c0      	lsls	r0, r0, #3
    1e80:	005a      	lsls	r2, r3, #1
    1e82:	0d64      	lsrs	r4, r4, #21
    1e84:	0d52      	lsrs	r2, r2, #21
    1e86:	0fdb      	lsrs	r3, r3, #31
    1e88:	4684      	mov	ip, r0
    1e8a:	4598      	cmp	r8, r3
    1e8c:	d100      	bne.n	1e90 <__aeabi_dadd+0x3c>
    1e8e:	e0a7      	b.n	1fe0 <__aeabi_dadd+0x18c>
    1e90:	1aa0      	subs	r0, r4, r2
    1e92:	2800      	cmp	r0, #0
    1e94:	dc00      	bgt.n	1e98 <__aeabi_dadd+0x44>
    1e96:	e101      	b.n	209c <STACK_SIZE+0x9c>
    1e98:	2a00      	cmp	r2, #0
    1e9a:	d13d      	bne.n	1f18 <__aeabi_dadd+0xc4>
    1e9c:	4663      	mov	r3, ip
    1e9e:	430b      	orrs	r3, r1
    1ea0:	d000      	beq.n	1ea4 <__aeabi_dadd+0x50>
    1ea2:	e0d4      	b.n	204e <STACK_SIZE+0x4e>
    1ea4:	076b      	lsls	r3, r5, #29
    1ea6:	d100      	bne.n	1eaa <__aeabi_dadd+0x56>
    1ea8:	e088      	b.n	1fbc <__aeabi_dadd+0x168>
    1eaa:	230f      	movs	r3, #15
    1eac:	402b      	ands	r3, r5
    1eae:	2b04      	cmp	r3, #4
    1eb0:	d100      	bne.n	1eb4 <__aeabi_dadd+0x60>
    1eb2:	e083      	b.n	1fbc <__aeabi_dadd+0x168>
    1eb4:	1d2a      	adds	r2, r5, #4
    1eb6:	42aa      	cmp	r2, r5
    1eb8:	41ad      	sbcs	r5, r5
    1eba:	2380      	movs	r3, #128	; 0x80
    1ebc:	426d      	negs	r5, r5
    1ebe:	197f      	adds	r7, r7, r5
    1ec0:	041b      	lsls	r3, r3, #16
    1ec2:	403b      	ands	r3, r7
    1ec4:	4646      	mov	r6, r8
    1ec6:	1c15      	adds	r5, r2, #0
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d100      	bne.n	1ece <__aeabi_dadd+0x7a>
    1ecc:	e07c      	b.n	1fc8 <__aeabi_dadd+0x174>
    1ece:	4bcc      	ldr	r3, [pc, #816]	; (2200 <STACK_SIZE+0x200>)
    1ed0:	3401      	adds	r4, #1
    1ed2:	429c      	cmp	r4, r3
    1ed4:	d100      	bne.n	1ed8 <__aeabi_dadd+0x84>
    1ed6:	e0fd      	b.n	20d4 <STACK_SIZE+0xd4>
    1ed8:	1c3a      	adds	r2, r7, #0
    1eda:	4bca      	ldr	r3, [pc, #808]	; (2204 <STACK_SIZE+0x204>)
    1edc:	08ed      	lsrs	r5, r5, #3
    1ede:	401a      	ands	r2, r3
    1ee0:	0750      	lsls	r0, r2, #29
    1ee2:	0564      	lsls	r4, r4, #21
    1ee4:	0252      	lsls	r2, r2, #9
    1ee6:	4305      	orrs	r5, r0
    1ee8:	0b12      	lsrs	r2, r2, #12
    1eea:	0d64      	lsrs	r4, r4, #21
    1eec:	2100      	movs	r1, #0
    1eee:	0312      	lsls	r2, r2, #12
    1ef0:	0d0b      	lsrs	r3, r1, #20
    1ef2:	051b      	lsls	r3, r3, #20
    1ef4:	0564      	lsls	r4, r4, #21
    1ef6:	0b12      	lsrs	r2, r2, #12
    1ef8:	431a      	orrs	r2, r3
    1efa:	0863      	lsrs	r3, r4, #1
    1efc:	4cc2      	ldr	r4, [pc, #776]	; (2208 <STACK_SIZE+0x208>)
    1efe:	07f6      	lsls	r6, r6, #31
    1f00:	4014      	ands	r4, r2
    1f02:	431c      	orrs	r4, r3
    1f04:	0064      	lsls	r4, r4, #1
    1f06:	0864      	lsrs	r4, r4, #1
    1f08:	4334      	orrs	r4, r6
    1f0a:	1c28      	adds	r0, r5, #0
    1f0c:	1c21      	adds	r1, r4, #0
    1f0e:	bc1c      	pop	{r2, r3, r4}
    1f10:	4690      	mov	r8, r2
    1f12:	4699      	mov	r9, r3
    1f14:	46a2      	mov	sl, r4
    1f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f18:	4bb9      	ldr	r3, [pc, #740]	; (2200 <STACK_SIZE+0x200>)
    1f1a:	429c      	cmp	r4, r3
    1f1c:	d0c2      	beq.n	1ea4 <__aeabi_dadd+0x50>
    1f1e:	2380      	movs	r3, #128	; 0x80
    1f20:	041b      	lsls	r3, r3, #16
    1f22:	4319      	orrs	r1, r3
    1f24:	2838      	cmp	r0, #56	; 0x38
    1f26:	dd00      	ble.n	1f2a <__aeabi_dadd+0xd6>
    1f28:	e0ec      	b.n	2104 <STACK_SIZE+0x104>
    1f2a:	281f      	cmp	r0, #31
    1f2c:	dd00      	ble.n	1f30 <__aeabi_dadd+0xdc>
    1f2e:	e121      	b.n	2174 <STACK_SIZE+0x174>
    1f30:	2220      	movs	r2, #32
    1f32:	1c0e      	adds	r6, r1, #0
    1f34:	4663      	mov	r3, ip
    1f36:	1a12      	subs	r2, r2, r0
    1f38:	4096      	lsls	r6, r2
    1f3a:	40c3      	lsrs	r3, r0
    1f3c:	4333      	orrs	r3, r6
    1f3e:	4666      	mov	r6, ip
    1f40:	4096      	lsls	r6, r2
    1f42:	1c32      	adds	r2, r6, #0
    1f44:	1e56      	subs	r6, r2, #1
    1f46:	41b2      	sbcs	r2, r6
    1f48:	4313      	orrs	r3, r2
    1f4a:	1c0a      	adds	r2, r1, #0
    1f4c:	40c2      	lsrs	r2, r0
    1f4e:	1aeb      	subs	r3, r5, r3
    1f50:	429d      	cmp	r5, r3
    1f52:	41b6      	sbcs	r6, r6
    1f54:	1c1d      	adds	r5, r3, #0
    1f56:	1aba      	subs	r2, r7, r2
    1f58:	4276      	negs	r6, r6
    1f5a:	1b97      	subs	r7, r2, r6
    1f5c:	023b      	lsls	r3, r7, #8
    1f5e:	d400      	bmi.n	1f62 <__aeabi_dadd+0x10e>
    1f60:	e097      	b.n	2092 <STACK_SIZE+0x92>
    1f62:	027a      	lsls	r2, r7, #9
    1f64:	0a56      	lsrs	r6, r2, #9
    1f66:	2e00      	cmp	r6, #0
    1f68:	d100      	bne.n	1f6c <__aeabi_dadd+0x118>
    1f6a:	e0b6      	b.n	20da <STACK_SIZE+0xda>
    1f6c:	1c30      	adds	r0, r6, #0
    1f6e:	f000 febf 	bl	2cf0 <__clzsi2>
    1f72:	1c03      	adds	r3, r0, #0
    1f74:	3b08      	subs	r3, #8
    1f76:	2b1f      	cmp	r3, #31
    1f78:	dd00      	ble.n	1f7c <__aeabi_dadd+0x128>
    1f7a:	e0b7      	b.n	20ec <STACK_SIZE+0xec>
    1f7c:	409e      	lsls	r6, r3
    1f7e:	1c37      	adds	r7, r6, #0
    1f80:	2628      	movs	r6, #40	; 0x28
    1f82:	1c2a      	adds	r2, r5, #0
    1f84:	1a36      	subs	r6, r6, r0
    1f86:	40f2      	lsrs	r2, r6
    1f88:	1c16      	adds	r6, r2, #0
    1f8a:	409d      	lsls	r5, r3
    1f8c:	433e      	orrs	r6, r7
    1f8e:	429c      	cmp	r4, r3
    1f90:	dd00      	ble.n	1f94 <__aeabi_dadd+0x140>
    1f92:	e0b2      	b.n	20fa <STACK_SIZE+0xfa>
    1f94:	1b1c      	subs	r4, r3, r4
    1f96:	1c62      	adds	r2, r4, #1
    1f98:	2a1f      	cmp	r2, #31
    1f9a:	dd00      	ble.n	1f9e <__aeabi_dadd+0x14a>
    1f9c:	e0d8      	b.n	2150 <STACK_SIZE+0x150>
    1f9e:	231f      	movs	r3, #31
    1fa0:	1c29      	adds	r1, r5, #0
    1fa2:	1b1c      	subs	r4, r3, r4
    1fa4:	1c33      	adds	r3, r6, #0
    1fa6:	40a5      	lsls	r5, r4
    1fa8:	40a3      	lsls	r3, r4
    1faa:	40d1      	lsrs	r1, r2
    1fac:	1e6c      	subs	r4, r5, #1
    1fae:	41a5      	sbcs	r5, r4
    1fb0:	40d6      	lsrs	r6, r2
    1fb2:	4319      	orrs	r1, r3
    1fb4:	430d      	orrs	r5, r1
    1fb6:	1c37      	adds	r7, r6, #0
    1fb8:	2400      	movs	r4, #0
    1fba:	e773      	b.n	1ea4 <__aeabi_dadd+0x50>
    1fbc:	2380      	movs	r3, #128	; 0x80
    1fbe:	041b      	lsls	r3, r3, #16
    1fc0:	403b      	ands	r3, r7
    1fc2:	4646      	mov	r6, r8
    1fc4:	d000      	beq.n	1fc8 <__aeabi_dadd+0x174>
    1fc6:	e782      	b.n	1ece <__aeabi_dadd+0x7a>
    1fc8:	4b8d      	ldr	r3, [pc, #564]	; (2200 <STACK_SIZE+0x200>)
    1fca:	08ed      	lsrs	r5, r5, #3
    1fcc:	0778      	lsls	r0, r7, #29
    1fce:	4305      	orrs	r5, r0
    1fd0:	08fa      	lsrs	r2, r7, #3
    1fd2:	429c      	cmp	r4, r3
    1fd4:	d032      	beq.n	203c <STACK_SIZE+0x3c>
    1fd6:	0312      	lsls	r2, r2, #12
    1fd8:	0564      	lsls	r4, r4, #21
    1fda:	0b12      	lsrs	r2, r2, #12
    1fdc:	0d64      	lsrs	r4, r4, #21
    1fde:	e785      	b.n	1eec <__aeabi_dadd+0x98>
    1fe0:	1aa3      	subs	r3, r4, r2
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	dc00      	bgt.n	1fe8 <__aeabi_dadd+0x194>
    1fe6:	e094      	b.n	2112 <STACK_SIZE+0x112>
    1fe8:	2a00      	cmp	r2, #0
    1fea:	d03c      	beq.n	2066 <STACK_SIZE+0x66>
    1fec:	4a84      	ldr	r2, [pc, #528]	; (2200 <STACK_SIZE+0x200>)
    1fee:	4294      	cmp	r4, r2
    1ff0:	d100      	bne.n	1ff4 <__aeabi_dadd+0x1a0>
    1ff2:	e757      	b.n	1ea4 <__aeabi_dadd+0x50>
    1ff4:	2280      	movs	r2, #128	; 0x80
    1ff6:	0412      	lsls	r2, r2, #16
    1ff8:	4311      	orrs	r1, r2
    1ffa:	2b38      	cmp	r3, #56	; 0x38
    1ffc:	dc00      	bgt.n	2000 <STACK_SIZE>
    1ffe:	e105      	b.n	220c <STACK_SIZE+0x20c>
    2000:	4663      	mov	r3, ip
    2002:	4319      	orrs	r1, r3
    2004:	1e48      	subs	r0, r1, #1
    2006:	4181      	sbcs	r1, r0
    2008:	2200      	movs	r2, #0
    200a:	b2c8      	uxtb	r0, r1
    200c:	1940      	adds	r0, r0, r5
    200e:	42a8      	cmp	r0, r5
    2010:	419b      	sbcs	r3, r3
    2012:	1c05      	adds	r5, r0, #0
    2014:	19d2      	adds	r2, r2, r7
    2016:	425b      	negs	r3, r3
    2018:	18d7      	adds	r7, r2, r3
    201a:	023b      	lsls	r3, r7, #8
    201c:	d539      	bpl.n	2092 <STACK_SIZE+0x92>
    201e:	4b78      	ldr	r3, [pc, #480]	; (2200 <STACK_SIZE+0x200>)
    2020:	3401      	adds	r4, #1
    2022:	429c      	cmp	r4, r3
    2024:	d100      	bne.n	2028 <STACK_SIZE+0x28>
    2026:	e14c      	b.n	22c2 <STACK_SIZE+0x2c2>
    2028:	2001      	movs	r0, #1
    202a:	4a76      	ldr	r2, [pc, #472]	; (2204 <STACK_SIZE+0x204>)
    202c:	086b      	lsrs	r3, r5, #1
    202e:	403a      	ands	r2, r7
    2030:	4028      	ands	r0, r5
    2032:	4318      	orrs	r0, r3
    2034:	07d5      	lsls	r5, r2, #31
    2036:	4305      	orrs	r5, r0
    2038:	0857      	lsrs	r7, r2, #1
    203a:	e733      	b.n	1ea4 <__aeabi_dadd+0x50>
    203c:	1c2b      	adds	r3, r5, #0
    203e:	4313      	orrs	r3, r2
    2040:	d048      	beq.n	20d4 <STACK_SIZE+0xd4>
    2042:	2380      	movs	r3, #128	; 0x80
    2044:	031b      	lsls	r3, r3, #12
    2046:	431a      	orrs	r2, r3
    2048:	0312      	lsls	r2, r2, #12
    204a:	0b12      	lsrs	r2, r2, #12
    204c:	e74e      	b.n	1eec <__aeabi_dadd+0x98>
    204e:	3801      	subs	r0, #1
    2050:	2800      	cmp	r0, #0
    2052:	d178      	bne.n	2146 <STACK_SIZE+0x146>
    2054:	4663      	mov	r3, ip
    2056:	1aee      	subs	r6, r5, r3
    2058:	42b5      	cmp	r5, r6
    205a:	419b      	sbcs	r3, r3
    205c:	1a7a      	subs	r2, r7, r1
    205e:	425b      	negs	r3, r3
    2060:	1ad7      	subs	r7, r2, r3
    2062:	1c35      	adds	r5, r6, #0
    2064:	e77a      	b.n	1f5c <__aeabi_dadd+0x108>
    2066:	1c02      	adds	r2, r0, #0
    2068:	430a      	orrs	r2, r1
    206a:	d100      	bne.n	206e <STACK_SIZE+0x6e>
    206c:	e71a      	b.n	1ea4 <__aeabi_dadd+0x50>
    206e:	3b01      	subs	r3, #1
    2070:	2b00      	cmp	r3, #0
    2072:	d000      	beq.n	2076 <STACK_SIZE+0x76>
    2074:	e0f2      	b.n	225c <STACK_SIZE+0x25c>
    2076:	1940      	adds	r0, r0, r5
    2078:	42a8      	cmp	r0, r5
    207a:	419b      	sbcs	r3, r3
    207c:	19ca      	adds	r2, r1, r7
    207e:	425b      	negs	r3, r3
    2080:	18d7      	adds	r7, r2, r3
    2082:	1c05      	adds	r5, r0, #0
    2084:	e7c9      	b.n	201a <STACK_SIZE+0x1a>
    2086:	1c13      	adds	r3, r2, #0
    2088:	4333      	orrs	r3, r6
    208a:	d100      	bne.n	208e <STACK_SIZE+0x8e>
    208c:	e118      	b.n	22c0 <STACK_SIZE+0x2c0>
    208e:	1c17      	adds	r7, r2, #0
    2090:	1c35      	adds	r5, r6, #0
    2092:	4646      	mov	r6, r8
    2094:	076b      	lsls	r3, r5, #29
    2096:	d000      	beq.n	209a <STACK_SIZE+0x9a>
    2098:	e707      	b.n	1eaa <__aeabi_dadd+0x56>
    209a:	e795      	b.n	1fc8 <__aeabi_dadd+0x174>
    209c:	2800      	cmp	r0, #0
    209e:	d17a      	bne.n	2196 <STACK_SIZE+0x196>
    20a0:	1c62      	adds	r2, r4, #1
    20a2:	0552      	lsls	r2, r2, #21
    20a4:	0d52      	lsrs	r2, r2, #21
    20a6:	2a01      	cmp	r2, #1
    20a8:	dc00      	bgt.n	20ac <STACK_SIZE+0xac>
    20aa:	e0fb      	b.n	22a4 <STACK_SIZE+0x2a4>
    20ac:	4662      	mov	r2, ip
    20ae:	1aaa      	subs	r2, r5, r2
    20b0:	4295      	cmp	r5, r2
    20b2:	41b6      	sbcs	r6, r6
    20b4:	4691      	mov	r9, r2
    20b6:	1a78      	subs	r0, r7, r1
    20b8:	4272      	negs	r2, r6
    20ba:	1a86      	subs	r6, r0, r2
    20bc:	0232      	lsls	r2, r6, #8
    20be:	d400      	bmi.n	20c2 <STACK_SIZE+0xc2>
    20c0:	e093      	b.n	21ea <STACK_SIZE+0x1ea>
    20c2:	4662      	mov	r2, ip
    20c4:	1b55      	subs	r5, r2, r5
    20c6:	45ac      	cmp	ip, r5
    20c8:	4180      	sbcs	r0, r0
    20ca:	1bcf      	subs	r7, r1, r7
    20cc:	4240      	negs	r0, r0
    20ce:	1a3e      	subs	r6, r7, r0
    20d0:	4698      	mov	r8, r3
    20d2:	e748      	b.n	1f66 <__aeabi_dadd+0x112>
    20d4:	2200      	movs	r2, #0
    20d6:	2500      	movs	r5, #0
    20d8:	e708      	b.n	1eec <__aeabi_dadd+0x98>
    20da:	1c28      	adds	r0, r5, #0
    20dc:	f000 fe08 	bl	2cf0 <__clzsi2>
    20e0:	3020      	adds	r0, #32
    20e2:	1c03      	adds	r3, r0, #0
    20e4:	3b08      	subs	r3, #8
    20e6:	2b1f      	cmp	r3, #31
    20e8:	dc00      	bgt.n	20ec <STACK_SIZE+0xec>
    20ea:	e747      	b.n	1f7c <__aeabi_dadd+0x128>
    20ec:	3828      	subs	r0, #40	; 0x28
    20ee:	4085      	lsls	r5, r0
    20f0:	1c2e      	adds	r6, r5, #0
    20f2:	2500      	movs	r5, #0
    20f4:	429c      	cmp	r4, r3
    20f6:	dc00      	bgt.n	20fa <STACK_SIZE+0xfa>
    20f8:	e74c      	b.n	1f94 <__aeabi_dadd+0x140>
    20fa:	4a42      	ldr	r2, [pc, #264]	; (2204 <STACK_SIZE+0x204>)
    20fc:	1ae4      	subs	r4, r4, r3
    20fe:	4016      	ands	r6, r2
    2100:	1c37      	adds	r7, r6, #0
    2102:	e6cf      	b.n	1ea4 <__aeabi_dadd+0x50>
    2104:	4663      	mov	r3, ip
    2106:	4319      	orrs	r1, r3
    2108:	1e4b      	subs	r3, r1, #1
    210a:	4199      	sbcs	r1, r3
    210c:	2200      	movs	r2, #0
    210e:	b2cb      	uxtb	r3, r1
    2110:	e71d      	b.n	1f4e <__aeabi_dadd+0xfa>
    2112:	2b00      	cmp	r3, #0
    2114:	d000      	beq.n	2118 <STACK_SIZE+0x118>
    2116:	e0f2      	b.n	22fe <STACK_SIZE+0x2fe>
    2118:	1c60      	adds	r0, r4, #1
    211a:	0543      	lsls	r3, r0, #21
    211c:	0d5b      	lsrs	r3, r3, #21
    211e:	2b01      	cmp	r3, #1
    2120:	dc00      	bgt.n	2124 <STACK_SIZE+0x124>
    2122:	e0a4      	b.n	226e <STACK_SIZE+0x26e>
    2124:	4b36      	ldr	r3, [pc, #216]	; (2200 <STACK_SIZE+0x200>)
    2126:	4298      	cmp	r0, r3
    2128:	d100      	bne.n	212c <STACK_SIZE+0x12c>
    212a:	e121      	b.n	2370 <STACK_SIZE+0x370>
    212c:	4663      	mov	r3, ip
    212e:	195c      	adds	r4, r3, r5
    2130:	42ac      	cmp	r4, r5
    2132:	419b      	sbcs	r3, r3
    2134:	19cf      	adds	r7, r1, r7
    2136:	425b      	negs	r3, r3
    2138:	18fa      	adds	r2, r7, r3
    213a:	0864      	lsrs	r4, r4, #1
    213c:	07d5      	lsls	r5, r2, #31
    213e:	4325      	orrs	r5, r4
    2140:	0857      	lsrs	r7, r2, #1
    2142:	1c04      	adds	r4, r0, #0
    2144:	e6ae      	b.n	1ea4 <__aeabi_dadd+0x50>
    2146:	4b2e      	ldr	r3, [pc, #184]	; (2200 <STACK_SIZE+0x200>)
    2148:	429c      	cmp	r4, r3
    214a:	d000      	beq.n	214e <STACK_SIZE+0x14e>
    214c:	e6ea      	b.n	1f24 <__aeabi_dadd+0xd0>
    214e:	e6a9      	b.n	1ea4 <__aeabi_dadd+0x50>
    2150:	1c21      	adds	r1, r4, #0
    2152:	1c33      	adds	r3, r6, #0
    2154:	391f      	subs	r1, #31
    2156:	40cb      	lsrs	r3, r1
    2158:	1c19      	adds	r1, r3, #0
    215a:	2a20      	cmp	r2, #32
    215c:	d100      	bne.n	2160 <STACK_SIZE+0x160>
    215e:	e082      	b.n	2266 <STACK_SIZE+0x266>
    2160:	233f      	movs	r3, #63	; 0x3f
    2162:	1b1c      	subs	r4, r3, r4
    2164:	40a6      	lsls	r6, r4
    2166:	4335      	orrs	r5, r6
    2168:	1e6e      	subs	r6, r5, #1
    216a:	41b5      	sbcs	r5, r6
    216c:	2700      	movs	r7, #0
    216e:	430d      	orrs	r5, r1
    2170:	2400      	movs	r4, #0
    2172:	e78e      	b.n	2092 <STACK_SIZE+0x92>
    2174:	1c03      	adds	r3, r0, #0
    2176:	1c0e      	adds	r6, r1, #0
    2178:	3b20      	subs	r3, #32
    217a:	40de      	lsrs	r6, r3
    217c:	2820      	cmp	r0, #32
    217e:	d074      	beq.n	226a <STACK_SIZE+0x26a>
    2180:	2340      	movs	r3, #64	; 0x40
    2182:	1a1b      	subs	r3, r3, r0
    2184:	4099      	lsls	r1, r3
    2186:	1c0b      	adds	r3, r1, #0
    2188:	4662      	mov	r2, ip
    218a:	4313      	orrs	r3, r2
    218c:	1e59      	subs	r1, r3, #1
    218e:	418b      	sbcs	r3, r1
    2190:	2200      	movs	r2, #0
    2192:	4333      	orrs	r3, r6
    2194:	e6db      	b.n	1f4e <__aeabi_dadd+0xfa>
    2196:	2c00      	cmp	r4, #0
    2198:	d050      	beq.n	223c <STACK_SIZE+0x23c>
    219a:	4c19      	ldr	r4, [pc, #100]	; (2200 <STACK_SIZE+0x200>)
    219c:	42a2      	cmp	r2, r4
    219e:	d100      	bne.n	21a2 <STACK_SIZE+0x1a2>
    21a0:	e0a8      	b.n	22f4 <STACK_SIZE+0x2f4>
    21a2:	2480      	movs	r4, #128	; 0x80
    21a4:	0424      	lsls	r4, r4, #16
    21a6:	4240      	negs	r0, r0
    21a8:	4327      	orrs	r7, r4
    21aa:	2838      	cmp	r0, #56	; 0x38
    21ac:	dd00      	ble.n	21b0 <STACK_SIZE+0x1b0>
    21ae:	e0d9      	b.n	2364 <STACK_SIZE+0x364>
    21b0:	281f      	cmp	r0, #31
    21b2:	dd00      	ble.n	21b6 <STACK_SIZE+0x1b6>
    21b4:	e139      	b.n	242a <STACK_SIZE+0x42a>
    21b6:	2420      	movs	r4, #32
    21b8:	1c3e      	adds	r6, r7, #0
    21ba:	1a24      	subs	r4, r4, r0
    21bc:	40a6      	lsls	r6, r4
    21be:	46b0      	mov	r8, r6
    21c0:	1c2e      	adds	r6, r5, #0
    21c2:	46a1      	mov	r9, r4
    21c4:	40c6      	lsrs	r6, r0
    21c6:	4644      	mov	r4, r8
    21c8:	4326      	orrs	r6, r4
    21ca:	464c      	mov	r4, r9
    21cc:	40a5      	lsls	r5, r4
    21ce:	1e6c      	subs	r4, r5, #1
    21d0:	41a5      	sbcs	r5, r4
    21d2:	40c7      	lsrs	r7, r0
    21d4:	4335      	orrs	r5, r6
    21d6:	4660      	mov	r0, ip
    21d8:	1b45      	subs	r5, r0, r5
    21da:	1bcf      	subs	r7, r1, r7
    21dc:	45ac      	cmp	ip, r5
    21de:	4189      	sbcs	r1, r1
    21e0:	4249      	negs	r1, r1
    21e2:	1a7f      	subs	r7, r7, r1
    21e4:	1c14      	adds	r4, r2, #0
    21e6:	4698      	mov	r8, r3
    21e8:	e6b8      	b.n	1f5c <__aeabi_dadd+0x108>
    21ea:	464b      	mov	r3, r9
    21ec:	464d      	mov	r5, r9
    21ee:	4333      	orrs	r3, r6
    21f0:	d000      	beq.n	21f4 <STACK_SIZE+0x1f4>
    21f2:	e6b8      	b.n	1f66 <__aeabi_dadd+0x112>
    21f4:	2600      	movs	r6, #0
    21f6:	2700      	movs	r7, #0
    21f8:	2400      	movs	r4, #0
    21fa:	2500      	movs	r5, #0
    21fc:	e6e4      	b.n	1fc8 <__aeabi_dadd+0x174>
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	000007ff 	.word	0x000007ff
    2204:	ff7fffff 	.word	0xff7fffff
    2208:	800fffff 	.word	0x800fffff
    220c:	2b1f      	cmp	r3, #31
    220e:	dc5b      	bgt.n	22c8 <STACK_SIZE+0x2c8>
    2210:	2220      	movs	r2, #32
    2212:	1c08      	adds	r0, r1, #0
    2214:	1ad2      	subs	r2, r2, r3
    2216:	4090      	lsls	r0, r2
    2218:	4681      	mov	r9, r0
    221a:	4660      	mov	r0, ip
    221c:	4692      	mov	sl, r2
    221e:	40d8      	lsrs	r0, r3
    2220:	464a      	mov	r2, r9
    2222:	4310      	orrs	r0, r2
    2224:	4681      	mov	r9, r0
    2226:	4652      	mov	r2, sl
    2228:	4660      	mov	r0, ip
    222a:	4090      	lsls	r0, r2
    222c:	1c02      	adds	r2, r0, #0
    222e:	1e50      	subs	r0, r2, #1
    2230:	4182      	sbcs	r2, r0
    2232:	4648      	mov	r0, r9
    2234:	4310      	orrs	r0, r2
    2236:	1c0a      	adds	r2, r1, #0
    2238:	40da      	lsrs	r2, r3
    223a:	e6e7      	b.n	200c <STACK_SIZE+0xc>
    223c:	1c3c      	adds	r4, r7, #0
    223e:	432c      	orrs	r4, r5
    2240:	d058      	beq.n	22f4 <STACK_SIZE+0x2f4>
    2242:	43c0      	mvns	r0, r0
    2244:	2800      	cmp	r0, #0
    2246:	d151      	bne.n	22ec <STACK_SIZE+0x2ec>
    2248:	4660      	mov	r0, ip
    224a:	1b45      	subs	r5, r0, r5
    224c:	45ac      	cmp	ip, r5
    224e:	4180      	sbcs	r0, r0
    2250:	1bcf      	subs	r7, r1, r7
    2252:	4240      	negs	r0, r0
    2254:	1a3f      	subs	r7, r7, r0
    2256:	1c14      	adds	r4, r2, #0
    2258:	4698      	mov	r8, r3
    225a:	e67f      	b.n	1f5c <__aeabi_dadd+0x108>
    225c:	4a8f      	ldr	r2, [pc, #572]	; (249c <STACK_SIZE+0x49c>)
    225e:	4294      	cmp	r4, r2
    2260:	d000      	beq.n	2264 <STACK_SIZE+0x264>
    2262:	e6ca      	b.n	1ffa <__aeabi_dadd+0x1a6>
    2264:	e61e      	b.n	1ea4 <__aeabi_dadd+0x50>
    2266:	2600      	movs	r6, #0
    2268:	e77d      	b.n	2166 <STACK_SIZE+0x166>
    226a:	2300      	movs	r3, #0
    226c:	e78c      	b.n	2188 <STACK_SIZE+0x188>
    226e:	1c3b      	adds	r3, r7, #0
    2270:	432b      	orrs	r3, r5
    2272:	2c00      	cmp	r4, #0
    2274:	d000      	beq.n	2278 <STACK_SIZE+0x278>
    2276:	e0bd      	b.n	23f4 <STACK_SIZE+0x3f4>
    2278:	2b00      	cmp	r3, #0
    227a:	d100      	bne.n	227e <STACK_SIZE+0x27e>
    227c:	e0f5      	b.n	246a <STACK_SIZE+0x46a>
    227e:	4663      	mov	r3, ip
    2280:	430b      	orrs	r3, r1
    2282:	d100      	bne.n	2286 <STACK_SIZE+0x286>
    2284:	e60e      	b.n	1ea4 <__aeabi_dadd+0x50>
    2286:	4663      	mov	r3, ip
    2288:	195b      	adds	r3, r3, r5
    228a:	42ab      	cmp	r3, r5
    228c:	4180      	sbcs	r0, r0
    228e:	19ca      	adds	r2, r1, r7
    2290:	4240      	negs	r0, r0
    2292:	1817      	adds	r7, r2, r0
    2294:	023a      	lsls	r2, r7, #8
    2296:	d400      	bmi.n	229a <STACK_SIZE+0x29a>
    2298:	e0fc      	b.n	2494 <STACK_SIZE+0x494>
    229a:	4a81      	ldr	r2, [pc, #516]	; (24a0 <STACK_SIZE+0x4a0>)
    229c:	1c1d      	adds	r5, r3, #0
    229e:	4017      	ands	r7, r2
    22a0:	3401      	adds	r4, #1
    22a2:	e5ff      	b.n	1ea4 <__aeabi_dadd+0x50>
    22a4:	1c3a      	adds	r2, r7, #0
    22a6:	432a      	orrs	r2, r5
    22a8:	2c00      	cmp	r4, #0
    22aa:	d151      	bne.n	2350 <STACK_SIZE+0x350>
    22ac:	2a00      	cmp	r2, #0
    22ae:	d000      	beq.n	22b2 <STACK_SIZE+0x2b2>
    22b0:	e085      	b.n	23be <STACK_SIZE+0x3be>
    22b2:	4662      	mov	r2, ip
    22b4:	430a      	orrs	r2, r1
    22b6:	d003      	beq.n	22c0 <STACK_SIZE+0x2c0>
    22b8:	1c0f      	adds	r7, r1, #0
    22ba:	4665      	mov	r5, ip
    22bc:	4698      	mov	r8, r3
    22be:	e5f1      	b.n	1ea4 <__aeabi_dadd+0x50>
    22c0:	2600      	movs	r6, #0
    22c2:	2700      	movs	r7, #0
    22c4:	2500      	movs	r5, #0
    22c6:	e67f      	b.n	1fc8 <__aeabi_dadd+0x174>
    22c8:	1c18      	adds	r0, r3, #0
    22ca:	1c0a      	adds	r2, r1, #0
    22cc:	3820      	subs	r0, #32
    22ce:	40c2      	lsrs	r2, r0
    22d0:	2b20      	cmp	r3, #32
    22d2:	d100      	bne.n	22d6 <STACK_SIZE+0x2d6>
    22d4:	e0a7      	b.n	2426 <STACK_SIZE+0x426>
    22d6:	2040      	movs	r0, #64	; 0x40
    22d8:	1ac0      	subs	r0, r0, r3
    22da:	4081      	lsls	r1, r0
    22dc:	1c08      	adds	r0, r1, #0
    22de:	4663      	mov	r3, ip
    22e0:	4318      	orrs	r0, r3
    22e2:	1e41      	subs	r1, r0, #1
    22e4:	4188      	sbcs	r0, r1
    22e6:	4310      	orrs	r0, r2
    22e8:	2200      	movs	r2, #0
    22ea:	e68f      	b.n	200c <STACK_SIZE+0xc>
    22ec:	4c6b      	ldr	r4, [pc, #428]	; (249c <STACK_SIZE+0x49c>)
    22ee:	42a2      	cmp	r2, r4
    22f0:	d000      	beq.n	22f4 <STACK_SIZE+0x2f4>
    22f2:	e75a      	b.n	21aa <STACK_SIZE+0x1aa>
    22f4:	1c0f      	adds	r7, r1, #0
    22f6:	4665      	mov	r5, ip
    22f8:	1c14      	adds	r4, r2, #0
    22fa:	4698      	mov	r8, r3
    22fc:	e5d2      	b.n	1ea4 <__aeabi_dadd+0x50>
    22fe:	2c00      	cmp	r4, #0
    2300:	d13a      	bne.n	2378 <STACK_SIZE+0x378>
    2302:	1c38      	adds	r0, r7, #0
    2304:	4328      	orrs	r0, r5
    2306:	d071      	beq.n	23ec <STACK_SIZE+0x3ec>
    2308:	43db      	mvns	r3, r3
    230a:	2b00      	cmp	r3, #0
    230c:	d018      	beq.n	2340 <STACK_SIZE+0x340>
    230e:	4863      	ldr	r0, [pc, #396]	; (249c <STACK_SIZE+0x49c>)
    2310:	4282      	cmp	r2, r0
    2312:	d06b      	beq.n	23ec <STACK_SIZE+0x3ec>
    2314:	2b38      	cmp	r3, #56	; 0x38
    2316:	dd00      	ble.n	231a <STACK_SIZE+0x31a>
    2318:	e09d      	b.n	2456 <STACK_SIZE+0x456>
    231a:	2b1f      	cmp	r3, #31
    231c:	dd00      	ble.n	2320 <STACK_SIZE+0x320>
    231e:	e0a7      	b.n	2470 <STACK_SIZE+0x470>
    2320:	2020      	movs	r0, #32
    2322:	1c3c      	adds	r4, r7, #0
    2324:	1ac0      	subs	r0, r0, r3
    2326:	4084      	lsls	r4, r0
    2328:	46a1      	mov	r9, r4
    232a:	1c2c      	adds	r4, r5, #0
    232c:	4682      	mov	sl, r0
    232e:	40dc      	lsrs	r4, r3
    2330:	4648      	mov	r0, r9
    2332:	4304      	orrs	r4, r0
    2334:	4650      	mov	r0, sl
    2336:	4085      	lsls	r5, r0
    2338:	1e68      	subs	r0, r5, #1
    233a:	4185      	sbcs	r5, r0
    233c:	40df      	lsrs	r7, r3
    233e:	4325      	orrs	r5, r4
    2340:	4465      	add	r5, ip
    2342:	4565      	cmp	r5, ip
    2344:	419b      	sbcs	r3, r3
    2346:	187f      	adds	r7, r7, r1
    2348:	425b      	negs	r3, r3
    234a:	18ff      	adds	r7, r7, r3
    234c:	1c14      	adds	r4, r2, #0
    234e:	e664      	b.n	201a <STACK_SIZE+0x1a>
    2350:	2a00      	cmp	r2, #0
    2352:	d119      	bne.n	2388 <STACK_SIZE+0x388>
    2354:	4662      	mov	r2, ip
    2356:	430a      	orrs	r2, r1
    2358:	d077      	beq.n	244a <STACK_SIZE+0x44a>
    235a:	1c0f      	adds	r7, r1, #0
    235c:	4665      	mov	r5, ip
    235e:	4698      	mov	r8, r3
    2360:	4c4e      	ldr	r4, [pc, #312]	; (249c <STACK_SIZE+0x49c>)
    2362:	e59f      	b.n	1ea4 <__aeabi_dadd+0x50>
    2364:	433d      	orrs	r5, r7
    2366:	1e6f      	subs	r7, r5, #1
    2368:	41bd      	sbcs	r5, r7
    236a:	2700      	movs	r7, #0
    236c:	b2ed      	uxtb	r5, r5
    236e:	e732      	b.n	21d6 <STACK_SIZE+0x1d6>
    2370:	1c04      	adds	r4, r0, #0
    2372:	2700      	movs	r7, #0
    2374:	2500      	movs	r5, #0
    2376:	e627      	b.n	1fc8 <__aeabi_dadd+0x174>
    2378:	4848      	ldr	r0, [pc, #288]	; (249c <STACK_SIZE+0x49c>)
    237a:	4282      	cmp	r2, r0
    237c:	d036      	beq.n	23ec <STACK_SIZE+0x3ec>
    237e:	2080      	movs	r0, #128	; 0x80
    2380:	0400      	lsls	r0, r0, #16
    2382:	425b      	negs	r3, r3
    2384:	4307      	orrs	r7, r0
    2386:	e7c5      	b.n	2314 <STACK_SIZE+0x314>
    2388:	4662      	mov	r2, ip
    238a:	430a      	orrs	r2, r1
    238c:	d049      	beq.n	2422 <STACK_SIZE+0x422>
    238e:	2480      	movs	r4, #128	; 0x80
    2390:	08ed      	lsrs	r5, r5, #3
    2392:	0778      	lsls	r0, r7, #29
    2394:	08fa      	lsrs	r2, r7, #3
    2396:	0324      	lsls	r4, r4, #12
    2398:	4328      	orrs	r0, r5
    239a:	4222      	tst	r2, r4
    239c:	d009      	beq.n	23b2 <STACK_SIZE+0x3b2>
    239e:	08ce      	lsrs	r6, r1, #3
    23a0:	4226      	tst	r6, r4
    23a2:	d106      	bne.n	23b2 <STACK_SIZE+0x3b2>
    23a4:	4662      	mov	r2, ip
    23a6:	074f      	lsls	r7, r1, #29
    23a8:	1c38      	adds	r0, r7, #0
    23aa:	08d2      	lsrs	r2, r2, #3
    23ac:	4310      	orrs	r0, r2
    23ae:	4698      	mov	r8, r3
    23b0:	1c32      	adds	r2, r6, #0
    23b2:	00d2      	lsls	r2, r2, #3
    23b4:	0f47      	lsrs	r7, r0, #29
    23b6:	4317      	orrs	r7, r2
    23b8:	00c5      	lsls	r5, r0, #3
    23ba:	4c38      	ldr	r4, [pc, #224]	; (249c <STACK_SIZE+0x49c>)
    23bc:	e572      	b.n	1ea4 <__aeabi_dadd+0x50>
    23be:	4662      	mov	r2, ip
    23c0:	430a      	orrs	r2, r1
    23c2:	d100      	bne.n	23c6 <STACK_SIZE+0x3c6>
    23c4:	e56e      	b.n	1ea4 <__aeabi_dadd+0x50>
    23c6:	4662      	mov	r2, ip
    23c8:	1aae      	subs	r6, r5, r2
    23ca:	42b5      	cmp	r5, r6
    23cc:	4192      	sbcs	r2, r2
    23ce:	1a78      	subs	r0, r7, r1
    23d0:	4252      	negs	r2, r2
    23d2:	1a82      	subs	r2, r0, r2
    23d4:	0210      	lsls	r0, r2, #8
    23d6:	d400      	bmi.n	23da <STACK_SIZE+0x3da>
    23d8:	e655      	b.n	2086 <STACK_SIZE+0x86>
    23da:	4662      	mov	r2, ip
    23dc:	1b55      	subs	r5, r2, r5
    23de:	45ac      	cmp	ip, r5
    23e0:	4180      	sbcs	r0, r0
    23e2:	1bca      	subs	r2, r1, r7
    23e4:	4240      	negs	r0, r0
    23e6:	1a17      	subs	r7, r2, r0
    23e8:	4698      	mov	r8, r3
    23ea:	e55b      	b.n	1ea4 <__aeabi_dadd+0x50>
    23ec:	1c0f      	adds	r7, r1, #0
    23ee:	4665      	mov	r5, ip
    23f0:	1c14      	adds	r4, r2, #0
    23f2:	e557      	b.n	1ea4 <__aeabi_dadd+0x50>
    23f4:	2b00      	cmp	r3, #0
    23f6:	d034      	beq.n	2462 <STACK_SIZE+0x462>
    23f8:	4663      	mov	r3, ip
    23fa:	430b      	orrs	r3, r1
    23fc:	d011      	beq.n	2422 <STACK_SIZE+0x422>
    23fe:	2480      	movs	r4, #128	; 0x80
    2400:	08ed      	lsrs	r5, r5, #3
    2402:	0778      	lsls	r0, r7, #29
    2404:	08fa      	lsrs	r2, r7, #3
    2406:	0324      	lsls	r4, r4, #12
    2408:	4328      	orrs	r0, r5
    240a:	4222      	tst	r2, r4
    240c:	d0d1      	beq.n	23b2 <STACK_SIZE+0x3b2>
    240e:	08cb      	lsrs	r3, r1, #3
    2410:	4223      	tst	r3, r4
    2412:	d1ce      	bne.n	23b2 <STACK_SIZE+0x3b2>
    2414:	4662      	mov	r2, ip
    2416:	074f      	lsls	r7, r1, #29
    2418:	1c38      	adds	r0, r7, #0
    241a:	08d2      	lsrs	r2, r2, #3
    241c:	4310      	orrs	r0, r2
    241e:	1c1a      	adds	r2, r3, #0
    2420:	e7c7      	b.n	23b2 <STACK_SIZE+0x3b2>
    2422:	4c1e      	ldr	r4, [pc, #120]	; (249c <STACK_SIZE+0x49c>)
    2424:	e53e      	b.n	1ea4 <__aeabi_dadd+0x50>
    2426:	2000      	movs	r0, #0
    2428:	e759      	b.n	22de <STACK_SIZE+0x2de>
    242a:	1c04      	adds	r4, r0, #0
    242c:	1c3e      	adds	r6, r7, #0
    242e:	3c20      	subs	r4, #32
    2430:	40e6      	lsrs	r6, r4
    2432:	1c34      	adds	r4, r6, #0
    2434:	2820      	cmp	r0, #32
    2436:	d02b      	beq.n	2490 <STACK_SIZE+0x490>
    2438:	2640      	movs	r6, #64	; 0x40
    243a:	1a30      	subs	r0, r6, r0
    243c:	4087      	lsls	r7, r0
    243e:	433d      	orrs	r5, r7
    2440:	1e6f      	subs	r7, r5, #1
    2442:	41bd      	sbcs	r5, r7
    2444:	2700      	movs	r7, #0
    2446:	4325      	orrs	r5, r4
    2448:	e6c5      	b.n	21d6 <STACK_SIZE+0x1d6>
    244a:	2780      	movs	r7, #128	; 0x80
    244c:	2600      	movs	r6, #0
    244e:	03ff      	lsls	r7, r7, #15
    2450:	4c12      	ldr	r4, [pc, #72]	; (249c <STACK_SIZE+0x49c>)
    2452:	2500      	movs	r5, #0
    2454:	e5b8      	b.n	1fc8 <__aeabi_dadd+0x174>
    2456:	433d      	orrs	r5, r7
    2458:	1e6f      	subs	r7, r5, #1
    245a:	41bd      	sbcs	r5, r7
    245c:	2700      	movs	r7, #0
    245e:	b2ed      	uxtb	r5, r5
    2460:	e76e      	b.n	2340 <STACK_SIZE+0x340>
    2462:	1c0f      	adds	r7, r1, #0
    2464:	4665      	mov	r5, ip
    2466:	4c0d      	ldr	r4, [pc, #52]	; (249c <STACK_SIZE+0x49c>)
    2468:	e51c      	b.n	1ea4 <__aeabi_dadd+0x50>
    246a:	1c0f      	adds	r7, r1, #0
    246c:	4665      	mov	r5, ip
    246e:	e519      	b.n	1ea4 <__aeabi_dadd+0x50>
    2470:	1c1c      	adds	r4, r3, #0
    2472:	1c38      	adds	r0, r7, #0
    2474:	3c20      	subs	r4, #32
    2476:	40e0      	lsrs	r0, r4
    2478:	1c04      	adds	r4, r0, #0
    247a:	2b20      	cmp	r3, #32
    247c:	d00c      	beq.n	2498 <STACK_SIZE+0x498>
    247e:	2040      	movs	r0, #64	; 0x40
    2480:	1ac3      	subs	r3, r0, r3
    2482:	409f      	lsls	r7, r3
    2484:	433d      	orrs	r5, r7
    2486:	1e6f      	subs	r7, r5, #1
    2488:	41bd      	sbcs	r5, r7
    248a:	2700      	movs	r7, #0
    248c:	4325      	orrs	r5, r4
    248e:	e757      	b.n	2340 <STACK_SIZE+0x340>
    2490:	2700      	movs	r7, #0
    2492:	e7d4      	b.n	243e <STACK_SIZE+0x43e>
    2494:	1c1d      	adds	r5, r3, #0
    2496:	e5fc      	b.n	2092 <STACK_SIZE+0x92>
    2498:	2700      	movs	r7, #0
    249a:	e7f3      	b.n	2484 <STACK_SIZE+0x484>
    249c:	000007ff 	.word	0x000007ff
    24a0:	ff7fffff 	.word	0xff7fffff

000024a4 <__aeabi_dmul>:
    24a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24a6:	465f      	mov	r7, fp
    24a8:	4656      	mov	r6, sl
    24aa:	464d      	mov	r5, r9
    24ac:	4644      	mov	r4, r8
    24ae:	b4f0      	push	{r4, r5, r6, r7}
    24b0:	1c05      	adds	r5, r0, #0
    24b2:	1c06      	adds	r6, r0, #0
    24b4:	0308      	lsls	r0, r1, #12
    24b6:	b087      	sub	sp, #28
    24b8:	4699      	mov	r9, r3
    24ba:	004f      	lsls	r7, r1, #1
    24bc:	0b03      	lsrs	r3, r0, #12
    24be:	0fcc      	lsrs	r4, r1, #31
    24c0:	4692      	mov	sl, r2
    24c2:	469b      	mov	fp, r3
    24c4:	0d7f      	lsrs	r7, r7, #21
    24c6:	9401      	str	r4, [sp, #4]
    24c8:	d067      	beq.n	259a <__aeabi_dmul+0xf6>
    24ca:	4b6c      	ldr	r3, [pc, #432]	; (267c <__aeabi_dmul+0x1d8>)
    24cc:	429f      	cmp	r7, r3
    24ce:	d036      	beq.n	253e <__aeabi_dmul+0x9a>
    24d0:	2080      	movs	r0, #128	; 0x80
    24d2:	465b      	mov	r3, fp
    24d4:	0340      	lsls	r0, r0, #13
    24d6:	4318      	orrs	r0, r3
    24d8:	00c0      	lsls	r0, r0, #3
    24da:	0f6b      	lsrs	r3, r5, #29
    24dc:	4318      	orrs	r0, r3
    24de:	4b68      	ldr	r3, [pc, #416]	; (2680 <__aeabi_dmul+0x1dc>)
    24e0:	4683      	mov	fp, r0
    24e2:	469c      	mov	ip, r3
    24e4:	2300      	movs	r3, #0
    24e6:	4698      	mov	r8, r3
    24e8:	00ee      	lsls	r6, r5, #3
    24ea:	4467      	add	r7, ip
    24ec:	9300      	str	r3, [sp, #0]
    24ee:	464b      	mov	r3, r9
    24f0:	4649      	mov	r1, r9
    24f2:	031d      	lsls	r5, r3, #12
    24f4:	0fc9      	lsrs	r1, r1, #31
    24f6:	005b      	lsls	r3, r3, #1
    24f8:	4652      	mov	r2, sl
    24fa:	0b2d      	lsrs	r5, r5, #12
    24fc:	0d5b      	lsrs	r3, r3, #21
    24fe:	4689      	mov	r9, r1
    2500:	d100      	bne.n	2504 <__aeabi_dmul+0x60>
    2502:	e06e      	b.n	25e2 <__aeabi_dmul+0x13e>
    2504:	495d      	ldr	r1, [pc, #372]	; (267c <__aeabi_dmul+0x1d8>)
    2506:	428b      	cmp	r3, r1
    2508:	d064      	beq.n	25d4 <__aeabi_dmul+0x130>
    250a:	2080      	movs	r0, #128	; 0x80
    250c:	495c      	ldr	r1, [pc, #368]	; (2680 <__aeabi_dmul+0x1dc>)
    250e:	0340      	lsls	r0, r0, #13
    2510:	468c      	mov	ip, r1
    2512:	2100      	movs	r1, #0
    2514:	4305      	orrs	r5, r0
    2516:	00ed      	lsls	r5, r5, #3
    2518:	0f50      	lsrs	r0, r2, #29
    251a:	4305      	orrs	r5, r0
    251c:	00d2      	lsls	r2, r2, #3
    251e:	4463      	add	r3, ip
    2520:	4648      	mov	r0, r9
    2522:	18ff      	adds	r7, r7, r3
    2524:	1c7b      	adds	r3, r7, #1
    2526:	469a      	mov	sl, r3
    2528:	9b00      	ldr	r3, [sp, #0]
    252a:	4060      	eors	r0, r4
    252c:	9002      	str	r0, [sp, #8]
    252e:	430b      	orrs	r3, r1
    2530:	2b0f      	cmp	r3, #15
    2532:	d900      	bls.n	2536 <__aeabi_dmul+0x92>
    2534:	e0ac      	b.n	2690 <__aeabi_dmul+0x1ec>
    2536:	4853      	ldr	r0, [pc, #332]	; (2684 <__aeabi_dmul+0x1e0>)
    2538:	009b      	lsls	r3, r3, #2
    253a:	58c3      	ldr	r3, [r0, r3]
    253c:	469f      	mov	pc, r3
    253e:	465b      	mov	r3, fp
    2540:	431d      	orrs	r5, r3
    2542:	d000      	beq.n	2546 <__aeabi_dmul+0xa2>
    2544:	e082      	b.n	264c <__aeabi_dmul+0x1a8>
    2546:	2308      	movs	r3, #8
    2548:	9300      	str	r3, [sp, #0]
    254a:	2300      	movs	r3, #0
    254c:	469b      	mov	fp, r3
    254e:	3302      	adds	r3, #2
    2550:	2600      	movs	r6, #0
    2552:	4698      	mov	r8, r3
    2554:	e7cb      	b.n	24ee <__aeabi_dmul+0x4a>
    2556:	9b02      	ldr	r3, [sp, #8]
    2558:	9301      	str	r3, [sp, #4]
    255a:	4643      	mov	r3, r8
    255c:	2b02      	cmp	r3, #2
    255e:	d159      	bne.n	2614 <__aeabi_dmul+0x170>
    2560:	2401      	movs	r4, #1
    2562:	2500      	movs	r5, #0
    2564:	2600      	movs	r6, #0
    2566:	9b01      	ldr	r3, [sp, #4]
    2568:	401c      	ands	r4, r3
    256a:	4b44      	ldr	r3, [pc, #272]	; (267c <__aeabi_dmul+0x1d8>)
    256c:	2100      	movs	r1, #0
    256e:	032d      	lsls	r5, r5, #12
    2570:	0d0a      	lsrs	r2, r1, #20
    2572:	0512      	lsls	r2, r2, #20
    2574:	0b2d      	lsrs	r5, r5, #12
    2576:	4315      	orrs	r5, r2
    2578:	4a43      	ldr	r2, [pc, #268]	; (2688 <__aeabi_dmul+0x1e4>)
    257a:	051b      	lsls	r3, r3, #20
    257c:	4015      	ands	r5, r2
    257e:	431d      	orrs	r5, r3
    2580:	006d      	lsls	r5, r5, #1
    2582:	07e4      	lsls	r4, r4, #31
    2584:	086d      	lsrs	r5, r5, #1
    2586:	4325      	orrs	r5, r4
    2588:	1c30      	adds	r0, r6, #0
    258a:	1c29      	adds	r1, r5, #0
    258c:	b007      	add	sp, #28
    258e:	bc3c      	pop	{r2, r3, r4, r5}
    2590:	4690      	mov	r8, r2
    2592:	4699      	mov	r9, r3
    2594:	46a2      	mov	sl, r4
    2596:	46ab      	mov	fp, r5
    2598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    259a:	432b      	orrs	r3, r5
    259c:	d04e      	beq.n	263c <__aeabi_dmul+0x198>
    259e:	465b      	mov	r3, fp
    25a0:	2b00      	cmp	r3, #0
    25a2:	d100      	bne.n	25a6 <__aeabi_dmul+0x102>
    25a4:	e185      	b.n	28b2 <__aeabi_dmul+0x40e>
    25a6:	4658      	mov	r0, fp
    25a8:	f000 fba2 	bl	2cf0 <__clzsi2>
    25ac:	1c02      	adds	r2, r0, #0
    25ae:	2328      	movs	r3, #40	; 0x28
    25b0:	1c29      	adds	r1, r5, #0
    25b2:	1a9b      	subs	r3, r3, r2
    25b4:	1c16      	adds	r6, r2, #0
    25b6:	4658      	mov	r0, fp
    25b8:	40d9      	lsrs	r1, r3
    25ba:	3e08      	subs	r6, #8
    25bc:	40b0      	lsls	r0, r6
    25be:	1c0b      	adds	r3, r1, #0
    25c0:	40b5      	lsls	r5, r6
    25c2:	4303      	orrs	r3, r0
    25c4:	469b      	mov	fp, r3
    25c6:	1c2e      	adds	r6, r5, #0
    25c8:	2300      	movs	r3, #0
    25ca:	4f30      	ldr	r7, [pc, #192]	; (268c <__aeabi_dmul+0x1e8>)
    25cc:	9300      	str	r3, [sp, #0]
    25ce:	1abf      	subs	r7, r7, r2
    25d0:	4698      	mov	r8, r3
    25d2:	e78c      	b.n	24ee <__aeabi_dmul+0x4a>
    25d4:	4651      	mov	r1, sl
    25d6:	4329      	orrs	r1, r5
    25d8:	d12e      	bne.n	2638 <__aeabi_dmul+0x194>
    25da:	2500      	movs	r5, #0
    25dc:	2200      	movs	r2, #0
    25de:	2102      	movs	r1, #2
    25e0:	e79e      	b.n	2520 <__aeabi_dmul+0x7c>
    25e2:	4651      	mov	r1, sl
    25e4:	4329      	orrs	r1, r5
    25e6:	d023      	beq.n	2630 <__aeabi_dmul+0x18c>
    25e8:	2d00      	cmp	r5, #0
    25ea:	d100      	bne.n	25ee <__aeabi_dmul+0x14a>
    25ec:	e154      	b.n	2898 <__aeabi_dmul+0x3f4>
    25ee:	1c28      	adds	r0, r5, #0
    25f0:	f000 fb7e 	bl	2cf0 <__clzsi2>
    25f4:	1c03      	adds	r3, r0, #0
    25f6:	2128      	movs	r1, #40	; 0x28
    25f8:	4650      	mov	r0, sl
    25fa:	1ac9      	subs	r1, r1, r3
    25fc:	1c1a      	adds	r2, r3, #0
    25fe:	40c8      	lsrs	r0, r1
    2600:	4651      	mov	r1, sl
    2602:	3a08      	subs	r2, #8
    2604:	4091      	lsls	r1, r2
    2606:	4095      	lsls	r5, r2
    2608:	1c0a      	adds	r2, r1, #0
    260a:	4305      	orrs	r5, r0
    260c:	481f      	ldr	r0, [pc, #124]	; (268c <__aeabi_dmul+0x1e8>)
    260e:	2100      	movs	r1, #0
    2610:	1ac3      	subs	r3, r0, r3
    2612:	e785      	b.n	2520 <__aeabi_dmul+0x7c>
    2614:	2b03      	cmp	r3, #3
    2616:	d100      	bne.n	261a <__aeabi_dmul+0x176>
    2618:	e1c2      	b.n	29a0 <__aeabi_dmul+0x4fc>
    261a:	2b01      	cmp	r3, #1
    261c:	d000      	beq.n	2620 <__aeabi_dmul+0x17c>
    261e:	e16d      	b.n	28fc <__aeabi_dmul+0x458>
    2620:	4644      	mov	r4, r8
    2622:	9b01      	ldr	r3, [sp, #4]
    2624:	2500      	movs	r5, #0
    2626:	401c      	ands	r4, r3
    2628:	b2e4      	uxtb	r4, r4
    262a:	2300      	movs	r3, #0
    262c:	2600      	movs	r6, #0
    262e:	e79d      	b.n	256c <__aeabi_dmul+0xc8>
    2630:	2500      	movs	r5, #0
    2632:	2200      	movs	r2, #0
    2634:	2101      	movs	r1, #1
    2636:	e773      	b.n	2520 <__aeabi_dmul+0x7c>
    2638:	2103      	movs	r1, #3
    263a:	e771      	b.n	2520 <__aeabi_dmul+0x7c>
    263c:	2304      	movs	r3, #4
    263e:	9300      	str	r3, [sp, #0]
    2640:	2300      	movs	r3, #0
    2642:	469b      	mov	fp, r3
    2644:	3301      	adds	r3, #1
    2646:	2600      	movs	r6, #0
    2648:	4698      	mov	r8, r3
    264a:	e750      	b.n	24ee <__aeabi_dmul+0x4a>
    264c:	230c      	movs	r3, #12
    264e:	9300      	str	r3, [sp, #0]
    2650:	3b09      	subs	r3, #9
    2652:	4698      	mov	r8, r3
    2654:	e74b      	b.n	24ee <__aeabi_dmul+0x4a>
    2656:	2580      	movs	r5, #128	; 0x80
    2658:	2400      	movs	r4, #0
    265a:	032d      	lsls	r5, r5, #12
    265c:	2600      	movs	r6, #0
    265e:	4b07      	ldr	r3, [pc, #28]	; (267c <__aeabi_dmul+0x1d8>)
    2660:	e784      	b.n	256c <__aeabi_dmul+0xc8>
    2662:	464b      	mov	r3, r9
    2664:	46ab      	mov	fp, r5
    2666:	1c16      	adds	r6, r2, #0
    2668:	9301      	str	r3, [sp, #4]
    266a:	4688      	mov	r8, r1
    266c:	e775      	b.n	255a <__aeabi_dmul+0xb6>
    266e:	9b02      	ldr	r3, [sp, #8]
    2670:	46ab      	mov	fp, r5
    2672:	1c16      	adds	r6, r2, #0
    2674:	9301      	str	r3, [sp, #4]
    2676:	4688      	mov	r8, r1
    2678:	e76f      	b.n	255a <__aeabi_dmul+0xb6>
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	000007ff 	.word	0x000007ff
    2680:	fffffc01 	.word	0xfffffc01
    2684:	000033b8 	.word	0x000033b8
    2688:	800fffff 	.word	0x800fffff
    268c:	fffffc0d 	.word	0xfffffc0d
    2690:	0c33      	lsrs	r3, r6, #16
    2692:	0436      	lsls	r6, r6, #16
    2694:	0c36      	lsrs	r6, r6, #16
    2696:	469c      	mov	ip, r3
    2698:	1c33      	adds	r3, r6, #0
    269a:	0c14      	lsrs	r4, r2, #16
    269c:	0412      	lsls	r2, r2, #16
    269e:	0c12      	lsrs	r2, r2, #16
    26a0:	4353      	muls	r3, r2
    26a2:	4698      	mov	r8, r3
    26a4:	4663      	mov	r3, ip
    26a6:	4353      	muls	r3, r2
    26a8:	4699      	mov	r9, r3
    26aa:	4663      	mov	r3, ip
    26ac:	4363      	muls	r3, r4
    26ae:	9301      	str	r3, [sp, #4]
    26b0:	1c33      	adds	r3, r6, #0
    26b2:	4641      	mov	r1, r8
    26b4:	4363      	muls	r3, r4
    26b6:	0c09      	lsrs	r1, r1, #16
    26b8:	444b      	add	r3, r9
    26ba:	185b      	adds	r3, r3, r1
    26bc:	4599      	cmp	r9, r3
    26be:	d905      	bls.n	26cc <__aeabi_dmul+0x228>
    26c0:	2080      	movs	r0, #128	; 0x80
    26c2:	0240      	lsls	r0, r0, #9
    26c4:	4681      	mov	r9, r0
    26c6:	9901      	ldr	r1, [sp, #4]
    26c8:	4449      	add	r1, r9
    26ca:	9101      	str	r1, [sp, #4]
    26cc:	0c19      	lsrs	r1, r3, #16
    26ce:	9103      	str	r1, [sp, #12]
    26d0:	4641      	mov	r1, r8
    26d2:	0409      	lsls	r1, r1, #16
    26d4:	0c09      	lsrs	r1, r1, #16
    26d6:	041b      	lsls	r3, r3, #16
    26d8:	185b      	adds	r3, r3, r1
    26da:	9304      	str	r3, [sp, #16]
    26dc:	0c2b      	lsrs	r3, r5, #16
    26de:	4698      	mov	r8, r3
    26e0:	1c33      	adds	r3, r6, #0
    26e2:	042d      	lsls	r5, r5, #16
    26e4:	0c29      	lsrs	r1, r5, #16
    26e6:	434b      	muls	r3, r1
    26e8:	4660      	mov	r0, ip
    26ea:	9300      	str	r3, [sp, #0]
    26ec:	4643      	mov	r3, r8
    26ee:	4665      	mov	r5, ip
    26f0:	4358      	muls	r0, r3
    26f2:	435e      	muls	r6, r3
    26f4:	9b00      	ldr	r3, [sp, #0]
    26f6:	434d      	muls	r5, r1
    26f8:	0c1b      	lsrs	r3, r3, #16
    26fa:	4699      	mov	r9, r3
    26fc:	19ae      	adds	r6, r5, r6
    26fe:	444e      	add	r6, r9
    2700:	4684      	mov	ip, r0
    2702:	42b5      	cmp	r5, r6
    2704:	d903      	bls.n	270e <__aeabi_dmul+0x26a>
    2706:	2380      	movs	r3, #128	; 0x80
    2708:	025b      	lsls	r3, r3, #9
    270a:	4699      	mov	r9, r3
    270c:	44cc      	add	ip, r9
    270e:	0c35      	lsrs	r5, r6, #16
    2710:	1c2b      	adds	r3, r5, #0
    2712:	9803      	ldr	r0, [sp, #12]
    2714:	4463      	add	r3, ip
    2716:	4684      	mov	ip, r0
    2718:	9305      	str	r3, [sp, #20]
    271a:	9b00      	ldr	r3, [sp, #0]
    271c:	0436      	lsls	r6, r6, #16
    271e:	041b      	lsls	r3, r3, #16
    2720:	0c1b      	lsrs	r3, r3, #16
    2722:	18f3      	adds	r3, r6, r3
    2724:	449c      	add	ip, r3
    2726:	4660      	mov	r0, ip
    2728:	9003      	str	r0, [sp, #12]
    272a:	4658      	mov	r0, fp
    272c:	0405      	lsls	r5, r0, #16
    272e:	0c06      	lsrs	r6, r0, #16
    2730:	0c28      	lsrs	r0, r5, #16
    2732:	4684      	mov	ip, r0
    2734:	4350      	muls	r0, r2
    2736:	1c35      	adds	r5, r6, #0
    2738:	4681      	mov	r9, r0
    273a:	4660      	mov	r0, ip
    273c:	4365      	muls	r5, r4
    273e:	4344      	muls	r4, r0
    2740:	4648      	mov	r0, r9
    2742:	0c00      	lsrs	r0, r0, #16
    2744:	4683      	mov	fp, r0
    2746:	4372      	muls	r2, r6
    2748:	1914      	adds	r4, r2, r4
    274a:	445c      	add	r4, fp
    274c:	42a2      	cmp	r2, r4
    274e:	d903      	bls.n	2758 <__aeabi_dmul+0x2b4>
    2750:	2280      	movs	r2, #128	; 0x80
    2752:	0252      	lsls	r2, r2, #9
    2754:	4693      	mov	fp, r2
    2756:	445d      	add	r5, fp
    2758:	0c22      	lsrs	r2, r4, #16
    275a:	18ad      	adds	r5, r5, r2
    275c:	464a      	mov	r2, r9
    275e:	0412      	lsls	r2, r2, #16
    2760:	0c12      	lsrs	r2, r2, #16
    2762:	0424      	lsls	r4, r4, #16
    2764:	4640      	mov	r0, r8
    2766:	18a4      	adds	r4, r4, r2
    2768:	4662      	mov	r2, ip
    276a:	434a      	muls	r2, r1
    276c:	4371      	muls	r1, r6
    276e:	4346      	muls	r6, r0
    2770:	4660      	mov	r0, ip
    2772:	9600      	str	r6, [sp, #0]
    2774:	4646      	mov	r6, r8
    2776:	4370      	muls	r0, r6
    2778:	4680      	mov	r8, r0
    277a:	0c10      	lsrs	r0, r2, #16
    277c:	4684      	mov	ip, r0
    277e:	4488      	add	r8, r1
    2780:	44e0      	add	r8, ip
    2782:	4541      	cmp	r1, r8
    2784:	d905      	bls.n	2792 <__aeabi_dmul+0x2ee>
    2786:	2180      	movs	r1, #128	; 0x80
    2788:	0249      	lsls	r1, r1, #9
    278a:	468c      	mov	ip, r1
    278c:	9900      	ldr	r1, [sp, #0]
    278e:	4461      	add	r1, ip
    2790:	9100      	str	r1, [sp, #0]
    2792:	9801      	ldr	r0, [sp, #4]
    2794:	9903      	ldr	r1, [sp, #12]
    2796:	4684      	mov	ip, r0
    2798:	4461      	add	r1, ip
    279a:	4299      	cmp	r1, r3
    279c:	419b      	sbcs	r3, r3
    279e:	425b      	negs	r3, r3
    27a0:	4699      	mov	r9, r3
    27a2:	9805      	ldr	r0, [sp, #20]
    27a4:	4643      	mov	r3, r8
    27a6:	4684      	mov	ip, r0
    27a8:	0412      	lsls	r2, r2, #16
    27aa:	0c12      	lsrs	r2, r2, #16
    27ac:	041b      	lsls	r3, r3, #16
    27ae:	189b      	adds	r3, r3, r2
    27b0:	4463      	add	r3, ip
    27b2:	469c      	mov	ip, r3
    27b4:	46ab      	mov	fp, r5
    27b6:	4283      	cmp	r3, r0
    27b8:	419b      	sbcs	r3, r3
    27ba:	4640      	mov	r0, r8
    27bc:	190a      	adds	r2, r1, r4
    27be:	44cc      	add	ip, r9
    27c0:	42a2      	cmp	r2, r4
    27c2:	4189      	sbcs	r1, r1
    27c4:	44e3      	add	fp, ip
    27c6:	45cc      	cmp	ip, r9
    27c8:	41b6      	sbcs	r6, r6
    27ca:	465c      	mov	r4, fp
    27cc:	0c00      	lsrs	r0, r0, #16
    27ce:	4680      	mov	r8, r0
    27d0:	4249      	negs	r1, r1
    27d2:	4276      	negs	r6, r6
    27d4:	425b      	negs	r3, r3
    27d6:	1864      	adds	r4, r4, r1
    27d8:	4333      	orrs	r3, r6
    27da:	4498      	add	r8, r3
    27dc:	428c      	cmp	r4, r1
    27de:	4189      	sbcs	r1, r1
    27e0:	45ab      	cmp	fp, r5
    27e2:	419b      	sbcs	r3, r3
    27e4:	4249      	negs	r1, r1
    27e6:	425b      	negs	r3, r3
    27e8:	4319      	orrs	r1, r3
    27ea:	1c0d      	adds	r5, r1, #0
    27ec:	9b00      	ldr	r3, [sp, #0]
    27ee:	4445      	add	r5, r8
    27f0:	18ee      	adds	r6, r5, r3
    27f2:	0276      	lsls	r6, r6, #9
    27f4:	0de5      	lsrs	r5, r4, #23
    27f6:	432e      	orrs	r6, r5
    27f8:	46b3      	mov	fp, r6
    27fa:	9b04      	ldr	r3, [sp, #16]
    27fc:	0256      	lsls	r6, r2, #9
    27fe:	431e      	orrs	r6, r3
    2800:	1e73      	subs	r3, r6, #1
    2802:	419e      	sbcs	r6, r3
    2804:	465b      	mov	r3, fp
    2806:	0dd2      	lsrs	r2, r2, #23
    2808:	4332      	orrs	r2, r6
    280a:	0266      	lsls	r6, r4, #9
    280c:	4316      	orrs	r6, r2
    280e:	01db      	lsls	r3, r3, #7
    2810:	d50a      	bpl.n	2828 <__aeabi_dmul+0x384>
    2812:	2301      	movs	r3, #1
    2814:	4033      	ands	r3, r6
    2816:	0876      	lsrs	r6, r6, #1
    2818:	431e      	orrs	r6, r3
    281a:	465b      	mov	r3, fp
    281c:	07db      	lsls	r3, r3, #31
    281e:	431e      	orrs	r6, r3
    2820:	465b      	mov	r3, fp
    2822:	085b      	lsrs	r3, r3, #1
    2824:	469b      	mov	fp, r3
    2826:	4657      	mov	r7, sl
    2828:	4b63      	ldr	r3, [pc, #396]	; (29b8 <__aeabi_dmul+0x514>)
    282a:	18fb      	adds	r3, r7, r3
    282c:	2b00      	cmp	r3, #0
    282e:	dd5a      	ble.n	28e6 <__aeabi_dmul+0x442>
    2830:	0772      	lsls	r2, r6, #29
    2832:	d009      	beq.n	2848 <__aeabi_dmul+0x3a4>
    2834:	220f      	movs	r2, #15
    2836:	4032      	ands	r2, r6
    2838:	2a04      	cmp	r2, #4
    283a:	d005      	beq.n	2848 <__aeabi_dmul+0x3a4>
    283c:	1d32      	adds	r2, r6, #4
    283e:	42b2      	cmp	r2, r6
    2840:	41b6      	sbcs	r6, r6
    2842:	4276      	negs	r6, r6
    2844:	44b3      	add	fp, r6
    2846:	1c16      	adds	r6, r2, #0
    2848:	465a      	mov	r2, fp
    284a:	01d2      	lsls	r2, r2, #7
    284c:	d506      	bpl.n	285c <__aeabi_dmul+0x3b8>
    284e:	465a      	mov	r2, fp
    2850:	4b5a      	ldr	r3, [pc, #360]	; (29bc <__aeabi_dmul+0x518>)
    2852:	401a      	ands	r2, r3
    2854:	2380      	movs	r3, #128	; 0x80
    2856:	4693      	mov	fp, r2
    2858:	00db      	lsls	r3, r3, #3
    285a:	18fb      	adds	r3, r7, r3
    285c:	4a58      	ldr	r2, [pc, #352]	; (29c0 <__aeabi_dmul+0x51c>)
    285e:	4293      	cmp	r3, r2
    2860:	dd34      	ble.n	28cc <__aeabi_dmul+0x428>
    2862:	2401      	movs	r4, #1
    2864:	9b02      	ldr	r3, [sp, #8]
    2866:	2500      	movs	r5, #0
    2868:	401c      	ands	r4, r3
    286a:	2600      	movs	r6, #0
    286c:	4b55      	ldr	r3, [pc, #340]	; (29c4 <__aeabi_dmul+0x520>)
    286e:	e67d      	b.n	256c <__aeabi_dmul+0xc8>
    2870:	2080      	movs	r0, #128	; 0x80
    2872:	465b      	mov	r3, fp
    2874:	0300      	lsls	r0, r0, #12
    2876:	4203      	tst	r3, r0
    2878:	d008      	beq.n	288c <__aeabi_dmul+0x3e8>
    287a:	4205      	tst	r5, r0
    287c:	d106      	bne.n	288c <__aeabi_dmul+0x3e8>
    287e:	4305      	orrs	r5, r0
    2880:	032d      	lsls	r5, r5, #12
    2882:	0b2d      	lsrs	r5, r5, #12
    2884:	464c      	mov	r4, r9
    2886:	1c16      	adds	r6, r2, #0
    2888:	4b4e      	ldr	r3, [pc, #312]	; (29c4 <__aeabi_dmul+0x520>)
    288a:	e66f      	b.n	256c <__aeabi_dmul+0xc8>
    288c:	465d      	mov	r5, fp
    288e:	4305      	orrs	r5, r0
    2890:	032d      	lsls	r5, r5, #12
    2892:	0b2d      	lsrs	r5, r5, #12
    2894:	4b4b      	ldr	r3, [pc, #300]	; (29c4 <__aeabi_dmul+0x520>)
    2896:	e669      	b.n	256c <__aeabi_dmul+0xc8>
    2898:	4650      	mov	r0, sl
    289a:	f000 fa29 	bl	2cf0 <__clzsi2>
    289e:	1c03      	adds	r3, r0, #0
    28a0:	3320      	adds	r3, #32
    28a2:	2b27      	cmp	r3, #39	; 0x27
    28a4:	dc00      	bgt.n	28a8 <__aeabi_dmul+0x404>
    28a6:	e6a6      	b.n	25f6 <__aeabi_dmul+0x152>
    28a8:	4655      	mov	r5, sl
    28aa:	3808      	subs	r0, #8
    28ac:	4085      	lsls	r5, r0
    28ae:	2200      	movs	r2, #0
    28b0:	e6ac      	b.n	260c <__aeabi_dmul+0x168>
    28b2:	1c28      	adds	r0, r5, #0
    28b4:	f000 fa1c 	bl	2cf0 <__clzsi2>
    28b8:	1c02      	adds	r2, r0, #0
    28ba:	3220      	adds	r2, #32
    28bc:	2a27      	cmp	r2, #39	; 0x27
    28be:	dc00      	bgt.n	28c2 <__aeabi_dmul+0x41e>
    28c0:	e675      	b.n	25ae <__aeabi_dmul+0x10a>
    28c2:	3808      	subs	r0, #8
    28c4:	4085      	lsls	r5, r0
    28c6:	2600      	movs	r6, #0
    28c8:	46ab      	mov	fp, r5
    28ca:	e67d      	b.n	25c8 <__aeabi_dmul+0x124>
    28cc:	465a      	mov	r2, fp
    28ce:	08f6      	lsrs	r6, r6, #3
    28d0:	0752      	lsls	r2, r2, #29
    28d2:	4316      	orrs	r6, r2
    28d4:	465a      	mov	r2, fp
    28d6:	2401      	movs	r4, #1
    28d8:	0255      	lsls	r5, r2, #9
    28da:	9a02      	ldr	r2, [sp, #8]
    28dc:	055b      	lsls	r3, r3, #21
    28de:	0b2d      	lsrs	r5, r5, #12
    28e0:	0d5b      	lsrs	r3, r3, #21
    28e2:	4014      	ands	r4, r2
    28e4:	e642      	b.n	256c <__aeabi_dmul+0xc8>
    28e6:	4d38      	ldr	r5, [pc, #224]	; (29c8 <__aeabi_dmul+0x524>)
    28e8:	1bed      	subs	r5, r5, r7
    28ea:	2d38      	cmp	r5, #56	; 0x38
    28ec:	dd0a      	ble.n	2904 <__aeabi_dmul+0x460>
    28ee:	2401      	movs	r4, #1
    28f0:	9b02      	ldr	r3, [sp, #8]
    28f2:	2500      	movs	r5, #0
    28f4:	401c      	ands	r4, r3
    28f6:	2600      	movs	r6, #0
    28f8:	2300      	movs	r3, #0
    28fa:	e637      	b.n	256c <__aeabi_dmul+0xc8>
    28fc:	9b01      	ldr	r3, [sp, #4]
    28fe:	4657      	mov	r7, sl
    2900:	9302      	str	r3, [sp, #8]
    2902:	e791      	b.n	2828 <__aeabi_dmul+0x384>
    2904:	2d1f      	cmp	r5, #31
    2906:	dc25      	bgt.n	2954 <__aeabi_dmul+0x4b0>
    2908:	4b30      	ldr	r3, [pc, #192]	; (29cc <__aeabi_dmul+0x528>)
    290a:	1c32      	adds	r2, r6, #0
    290c:	469c      	mov	ip, r3
    290e:	4467      	add	r7, ip
    2910:	40be      	lsls	r6, r7
    2912:	465b      	mov	r3, fp
    2914:	40bb      	lsls	r3, r7
    2916:	1c37      	adds	r7, r6, #0
    2918:	40ea      	lsrs	r2, r5
    291a:	1e7e      	subs	r6, r7, #1
    291c:	41b7      	sbcs	r7, r6
    291e:	4313      	orrs	r3, r2
    2920:	433b      	orrs	r3, r7
    2922:	1c1e      	adds	r6, r3, #0
    2924:	465b      	mov	r3, fp
    2926:	40eb      	lsrs	r3, r5
    2928:	1c1d      	adds	r5, r3, #0
    292a:	0773      	lsls	r3, r6, #29
    292c:	d009      	beq.n	2942 <__aeabi_dmul+0x49e>
    292e:	230f      	movs	r3, #15
    2930:	4033      	ands	r3, r6
    2932:	2b04      	cmp	r3, #4
    2934:	d005      	beq.n	2942 <__aeabi_dmul+0x49e>
    2936:	1d33      	adds	r3, r6, #4
    2938:	42b3      	cmp	r3, r6
    293a:	41b6      	sbcs	r6, r6
    293c:	4276      	negs	r6, r6
    293e:	19ad      	adds	r5, r5, r6
    2940:	1c1e      	adds	r6, r3, #0
    2942:	022b      	lsls	r3, r5, #8
    2944:	d520      	bpl.n	2988 <__aeabi_dmul+0x4e4>
    2946:	2401      	movs	r4, #1
    2948:	9b02      	ldr	r3, [sp, #8]
    294a:	2500      	movs	r5, #0
    294c:	401c      	ands	r4, r3
    294e:	2600      	movs	r6, #0
    2950:	2301      	movs	r3, #1
    2952:	e60b      	b.n	256c <__aeabi_dmul+0xc8>
    2954:	465a      	mov	r2, fp
    2956:	4b1e      	ldr	r3, [pc, #120]	; (29d0 <__aeabi_dmul+0x52c>)
    2958:	1bdb      	subs	r3, r3, r7
    295a:	40da      	lsrs	r2, r3
    295c:	1c13      	adds	r3, r2, #0
    295e:	2d20      	cmp	r5, #32
    2960:	d01c      	beq.n	299c <__aeabi_dmul+0x4f8>
    2962:	4a1c      	ldr	r2, [pc, #112]	; (29d4 <__aeabi_dmul+0x530>)
    2964:	4694      	mov	ip, r2
    2966:	465a      	mov	r2, fp
    2968:	4467      	add	r7, ip
    296a:	40ba      	lsls	r2, r7
    296c:	1c17      	adds	r7, r2, #0
    296e:	433e      	orrs	r6, r7
    2970:	1e72      	subs	r2, r6, #1
    2972:	4196      	sbcs	r6, r2
    2974:	431e      	orrs	r6, r3
    2976:	2307      	movs	r3, #7
    2978:	2500      	movs	r5, #0
    297a:	4033      	ands	r3, r6
    297c:	d007      	beq.n	298e <__aeabi_dmul+0x4ea>
    297e:	230f      	movs	r3, #15
    2980:	2500      	movs	r5, #0
    2982:	4033      	ands	r3, r6
    2984:	2b04      	cmp	r3, #4
    2986:	d1d6      	bne.n	2936 <__aeabi_dmul+0x492>
    2988:	076b      	lsls	r3, r5, #29
    298a:	026d      	lsls	r5, r5, #9
    298c:	0b2d      	lsrs	r5, r5, #12
    298e:	2401      	movs	r4, #1
    2990:	08f6      	lsrs	r6, r6, #3
    2992:	431e      	orrs	r6, r3
    2994:	9b02      	ldr	r3, [sp, #8]
    2996:	401c      	ands	r4, r3
    2998:	2300      	movs	r3, #0
    299a:	e5e7      	b.n	256c <__aeabi_dmul+0xc8>
    299c:	2700      	movs	r7, #0
    299e:	e7e6      	b.n	296e <__aeabi_dmul+0x4ca>
    29a0:	2580      	movs	r5, #128	; 0x80
    29a2:	465b      	mov	r3, fp
    29a4:	2401      	movs	r4, #1
    29a6:	032d      	lsls	r5, r5, #12
    29a8:	431d      	orrs	r5, r3
    29aa:	9b01      	ldr	r3, [sp, #4]
    29ac:	032d      	lsls	r5, r5, #12
    29ae:	4023      	ands	r3, r4
    29b0:	1c1c      	adds	r4, r3, #0
    29b2:	0b2d      	lsrs	r5, r5, #12
    29b4:	4b03      	ldr	r3, [pc, #12]	; (29c4 <__aeabi_dmul+0x520>)
    29b6:	e5d9      	b.n	256c <__aeabi_dmul+0xc8>
    29b8:	000003ff 	.word	0x000003ff
    29bc:	feffffff 	.word	0xfeffffff
    29c0:	000007fe 	.word	0x000007fe
    29c4:	000007ff 	.word	0x000007ff
    29c8:	fffffc02 	.word	0xfffffc02
    29cc:	0000041e 	.word	0x0000041e
    29d0:	fffffbe2 	.word	0xfffffbe2
    29d4:	0000043e 	.word	0x0000043e

000029d8 <__aeabi_i2d>:
    29d8:	b538      	push	{r3, r4, r5, lr}
    29da:	1e04      	subs	r4, r0, #0
    29dc:	d016      	beq.n	2a0c <__aeabi_i2d+0x34>
    29de:	0fc5      	lsrs	r5, r0, #31
    29e0:	d000      	beq.n	29e4 <__aeabi_i2d+0xc>
    29e2:	4244      	negs	r4, r0
    29e4:	1c20      	adds	r0, r4, #0
    29e6:	f000 f983 	bl	2cf0 <__clzsi2>
    29ea:	4b17      	ldr	r3, [pc, #92]	; (2a48 <__aeabi_i2d+0x70>)
    29ec:	1a1b      	subs	r3, r3, r0
    29ee:	280a      	cmp	r0, #10
    29f0:	dc21      	bgt.n	2a36 <__aeabi_i2d+0x5e>
    29f2:	1c02      	adds	r2, r0, #0
    29f4:	1c21      	adds	r1, r4, #0
    29f6:	3215      	adds	r2, #21
    29f8:	4091      	lsls	r1, r2
    29fa:	1c0a      	adds	r2, r1, #0
    29fc:	210b      	movs	r1, #11
    29fe:	1a08      	subs	r0, r1, r0
    2a00:	40c4      	lsrs	r4, r0
    2a02:	055b      	lsls	r3, r3, #21
    2a04:	0324      	lsls	r4, r4, #12
    2a06:	0b24      	lsrs	r4, r4, #12
    2a08:	0d5b      	lsrs	r3, r3, #21
    2a0a:	e003      	b.n	2a14 <__aeabi_i2d+0x3c>
    2a0c:	2500      	movs	r5, #0
    2a0e:	2300      	movs	r3, #0
    2a10:	2400      	movs	r4, #0
    2a12:	2200      	movs	r2, #0
    2a14:	2100      	movs	r1, #0
    2a16:	1c10      	adds	r0, r2, #0
    2a18:	0324      	lsls	r4, r4, #12
    2a1a:	0d0a      	lsrs	r2, r1, #20
    2a1c:	0512      	lsls	r2, r2, #20
    2a1e:	0b24      	lsrs	r4, r4, #12
    2a20:	4314      	orrs	r4, r2
    2a22:	4a0a      	ldr	r2, [pc, #40]	; (2a4c <__aeabi_i2d+0x74>)
    2a24:	051b      	lsls	r3, r3, #20
    2a26:	4014      	ands	r4, r2
    2a28:	431c      	orrs	r4, r3
    2a2a:	0064      	lsls	r4, r4, #1
    2a2c:	07ed      	lsls	r5, r5, #31
    2a2e:	0864      	lsrs	r4, r4, #1
    2a30:	432c      	orrs	r4, r5
    2a32:	1c21      	adds	r1, r4, #0
    2a34:	bd38      	pop	{r3, r4, r5, pc}
    2a36:	380b      	subs	r0, #11
    2a38:	4084      	lsls	r4, r0
    2a3a:	055b      	lsls	r3, r3, #21
    2a3c:	0324      	lsls	r4, r4, #12
    2a3e:	0b24      	lsrs	r4, r4, #12
    2a40:	0d5b      	lsrs	r3, r3, #21
    2a42:	2200      	movs	r2, #0
    2a44:	e7e6      	b.n	2a14 <__aeabi_i2d+0x3c>
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	0000041e 	.word	0x0000041e
    2a4c:	800fffff 	.word	0x800fffff

00002a50 <__aeabi_ui2d>:
    2a50:	b510      	push	{r4, lr}
    2a52:	1e04      	subs	r4, r0, #0
    2a54:	d010      	beq.n	2a78 <__aeabi_ui2d+0x28>
    2a56:	f000 f94b 	bl	2cf0 <__clzsi2>
    2a5a:	4a14      	ldr	r2, [pc, #80]	; (2aac <__aeabi_ui2d+0x5c>)
    2a5c:	1a12      	subs	r2, r2, r0
    2a5e:	280a      	cmp	r0, #10
    2a60:	dc1a      	bgt.n	2a98 <__aeabi_ui2d+0x48>
    2a62:	230b      	movs	r3, #11
    2a64:	1c21      	adds	r1, r4, #0
    2a66:	1a1b      	subs	r3, r3, r0
    2a68:	40d9      	lsrs	r1, r3
    2a6a:	3015      	adds	r0, #21
    2a6c:	030b      	lsls	r3, r1, #12
    2a6e:	0552      	lsls	r2, r2, #21
    2a70:	4084      	lsls	r4, r0
    2a72:	0b1b      	lsrs	r3, r3, #12
    2a74:	0d52      	lsrs	r2, r2, #21
    2a76:	e001      	b.n	2a7c <__aeabi_ui2d+0x2c>
    2a78:	2200      	movs	r2, #0
    2a7a:	2300      	movs	r3, #0
    2a7c:	2100      	movs	r1, #0
    2a7e:	031b      	lsls	r3, r3, #12
    2a80:	1c20      	adds	r0, r4, #0
    2a82:	0b1c      	lsrs	r4, r3, #12
    2a84:	0d0b      	lsrs	r3, r1, #20
    2a86:	051b      	lsls	r3, r3, #20
    2a88:	4323      	orrs	r3, r4
    2a8a:	4c09      	ldr	r4, [pc, #36]	; (2ab0 <__aeabi_ui2d+0x60>)
    2a8c:	0512      	lsls	r2, r2, #20
    2a8e:	4023      	ands	r3, r4
    2a90:	4313      	orrs	r3, r2
    2a92:	005b      	lsls	r3, r3, #1
    2a94:	0859      	lsrs	r1, r3, #1
    2a96:	bd10      	pop	{r4, pc}
    2a98:	1c03      	adds	r3, r0, #0
    2a9a:	3b0b      	subs	r3, #11
    2a9c:	409c      	lsls	r4, r3
    2a9e:	0552      	lsls	r2, r2, #21
    2aa0:	0323      	lsls	r3, r4, #12
    2aa2:	0b1b      	lsrs	r3, r3, #12
    2aa4:	0d52      	lsrs	r2, r2, #21
    2aa6:	2400      	movs	r4, #0
    2aa8:	e7e8      	b.n	2a7c <__aeabi_ui2d+0x2c>
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	0000041e 	.word	0x0000041e
    2ab0:	800fffff 	.word	0x800fffff

00002ab4 <__aeabi_f2d>:
    2ab4:	0042      	lsls	r2, r0, #1
    2ab6:	0e12      	lsrs	r2, r2, #24
    2ab8:	1c51      	adds	r1, r2, #1
    2aba:	b538      	push	{r3, r4, r5, lr}
    2abc:	b2c9      	uxtb	r1, r1
    2abe:	0243      	lsls	r3, r0, #9
    2ac0:	0a5d      	lsrs	r5, r3, #9
    2ac2:	0fc4      	lsrs	r4, r0, #31
    2ac4:	2901      	cmp	r1, #1
    2ac6:	dd15      	ble.n	2af4 <__aeabi_f2d+0x40>
    2ac8:	21e0      	movs	r1, #224	; 0xe0
    2aca:	0089      	lsls	r1, r1, #2
    2acc:	468c      	mov	ip, r1
    2ace:	076d      	lsls	r5, r5, #29
    2ad0:	0b1b      	lsrs	r3, r3, #12
    2ad2:	4462      	add	r2, ip
    2ad4:	2100      	movs	r1, #0
    2ad6:	1c28      	adds	r0, r5, #0
    2ad8:	0d0d      	lsrs	r5, r1, #20
    2ada:	052d      	lsls	r5, r5, #20
    2adc:	432b      	orrs	r3, r5
    2ade:	4d1c      	ldr	r5, [pc, #112]	; (2b50 <__aeabi_f2d+0x9c>)
    2ae0:	0552      	lsls	r2, r2, #21
    2ae2:	402b      	ands	r3, r5
    2ae4:	0852      	lsrs	r2, r2, #1
    2ae6:	4313      	orrs	r3, r2
    2ae8:	005b      	lsls	r3, r3, #1
    2aea:	07e4      	lsls	r4, r4, #31
    2aec:	085b      	lsrs	r3, r3, #1
    2aee:	4323      	orrs	r3, r4
    2af0:	1c19      	adds	r1, r3, #0
    2af2:	bd38      	pop	{r3, r4, r5, pc}
    2af4:	2a00      	cmp	r2, #0
    2af6:	d115      	bne.n	2b24 <__aeabi_f2d+0x70>
    2af8:	2d00      	cmp	r5, #0
    2afa:	d01f      	beq.n	2b3c <__aeabi_f2d+0x88>
    2afc:	1c28      	adds	r0, r5, #0
    2afe:	f000 f8f7 	bl	2cf0 <__clzsi2>
    2b02:	280a      	cmp	r0, #10
    2b04:	dc1d      	bgt.n	2b42 <__aeabi_f2d+0x8e>
    2b06:	230b      	movs	r3, #11
    2b08:	1c2a      	adds	r2, r5, #0
    2b0a:	1a1b      	subs	r3, r3, r0
    2b0c:	40da      	lsrs	r2, r3
    2b0e:	1c13      	adds	r3, r2, #0
    2b10:	1c02      	adds	r2, r0, #0
    2b12:	3215      	adds	r2, #21
    2b14:	4095      	lsls	r5, r2
    2b16:	4a0f      	ldr	r2, [pc, #60]	; (2b54 <__aeabi_f2d+0xa0>)
    2b18:	031b      	lsls	r3, r3, #12
    2b1a:	1a12      	subs	r2, r2, r0
    2b1c:	0552      	lsls	r2, r2, #21
    2b1e:	0b1b      	lsrs	r3, r3, #12
    2b20:	0d52      	lsrs	r2, r2, #21
    2b22:	e7d7      	b.n	2ad4 <__aeabi_f2d+0x20>
    2b24:	2d00      	cmp	r5, #0
    2b26:	d006      	beq.n	2b36 <__aeabi_f2d+0x82>
    2b28:	2280      	movs	r2, #128	; 0x80
    2b2a:	0b1b      	lsrs	r3, r3, #12
    2b2c:	0312      	lsls	r2, r2, #12
    2b2e:	4313      	orrs	r3, r2
    2b30:	076d      	lsls	r5, r5, #29
    2b32:	4a09      	ldr	r2, [pc, #36]	; (2b58 <__aeabi_f2d+0xa4>)
    2b34:	e7ce      	b.n	2ad4 <__aeabi_f2d+0x20>
    2b36:	4a08      	ldr	r2, [pc, #32]	; (2b58 <__aeabi_f2d+0xa4>)
    2b38:	2300      	movs	r3, #0
    2b3a:	e7cb      	b.n	2ad4 <__aeabi_f2d+0x20>
    2b3c:	2200      	movs	r2, #0
    2b3e:	2300      	movs	r3, #0
    2b40:	e7c8      	b.n	2ad4 <__aeabi_f2d+0x20>
    2b42:	1c03      	adds	r3, r0, #0
    2b44:	3b0b      	subs	r3, #11
    2b46:	409d      	lsls	r5, r3
    2b48:	1c2b      	adds	r3, r5, #0
    2b4a:	2500      	movs	r5, #0
    2b4c:	e7e3      	b.n	2b16 <__aeabi_f2d+0x62>
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	800fffff 	.word	0x800fffff
    2b54:	00000389 	.word	0x00000389
    2b58:	000007ff 	.word	0x000007ff

00002b5c <__aeabi_d2f>:
    2b5c:	b570      	push	{r4, r5, r6, lr}
    2b5e:	030b      	lsls	r3, r1, #12
    2b60:	004d      	lsls	r5, r1, #1
    2b62:	0f44      	lsrs	r4, r0, #29
    2b64:	0d6d      	lsrs	r5, r5, #21
    2b66:	0a5b      	lsrs	r3, r3, #9
    2b68:	4323      	orrs	r3, r4
    2b6a:	1c6c      	adds	r4, r5, #1
    2b6c:	0564      	lsls	r4, r4, #21
    2b6e:	0fc9      	lsrs	r1, r1, #31
    2b70:	00c2      	lsls	r2, r0, #3
    2b72:	0d64      	lsrs	r4, r4, #21
    2b74:	2c01      	cmp	r4, #1
    2b76:	dd2a      	ble.n	2bce <__aeabi_d2f+0x72>
    2b78:	4c3b      	ldr	r4, [pc, #236]	; (2c68 <__aeabi_d2f+0x10c>)
    2b7a:	192c      	adds	r4, r5, r4
    2b7c:	2cfe      	cmp	r4, #254	; 0xfe
    2b7e:	dc1a      	bgt.n	2bb6 <__aeabi_d2f+0x5a>
    2b80:	2c00      	cmp	r4, #0
    2b82:	dd35      	ble.n	2bf0 <__aeabi_d2f+0x94>
    2b84:	0180      	lsls	r0, r0, #6
    2b86:	1e45      	subs	r5, r0, #1
    2b88:	41a8      	sbcs	r0, r5
    2b8a:	00db      	lsls	r3, r3, #3
    2b8c:	4303      	orrs	r3, r0
    2b8e:	0f52      	lsrs	r2, r2, #29
    2b90:	4313      	orrs	r3, r2
    2b92:	075a      	lsls	r2, r3, #29
    2b94:	d004      	beq.n	2ba0 <__aeabi_d2f+0x44>
    2b96:	220f      	movs	r2, #15
    2b98:	401a      	ands	r2, r3
    2b9a:	2a04      	cmp	r2, #4
    2b9c:	d000      	beq.n	2ba0 <__aeabi_d2f+0x44>
    2b9e:	3304      	adds	r3, #4
    2ba0:	2280      	movs	r2, #128	; 0x80
    2ba2:	04d2      	lsls	r2, r2, #19
    2ba4:	401a      	ands	r2, r3
    2ba6:	d027      	beq.n	2bf8 <__aeabi_d2f+0x9c>
    2ba8:	3401      	adds	r4, #1
    2baa:	2cff      	cmp	r4, #255	; 0xff
    2bac:	d003      	beq.n	2bb6 <__aeabi_d2f+0x5a>
    2bae:	019b      	lsls	r3, r3, #6
    2bb0:	0a5b      	lsrs	r3, r3, #9
    2bb2:	b2e4      	uxtb	r4, r4
    2bb4:	e001      	b.n	2bba <__aeabi_d2f+0x5e>
    2bb6:	24ff      	movs	r4, #255	; 0xff
    2bb8:	2300      	movs	r3, #0
    2bba:	025b      	lsls	r3, r3, #9
    2bbc:	05e4      	lsls	r4, r4, #23
    2bbe:	0a5b      	lsrs	r3, r3, #9
    2bc0:	4323      	orrs	r3, r4
    2bc2:	005b      	lsls	r3, r3, #1
    2bc4:	07c9      	lsls	r1, r1, #31
    2bc6:	085b      	lsrs	r3, r3, #1
    2bc8:	430b      	orrs	r3, r1
    2bca:	1c18      	adds	r0, r3, #0
    2bcc:	bd70      	pop	{r4, r5, r6, pc}
    2bce:	2d00      	cmp	r5, #0
    2bd0:	d106      	bne.n	2be0 <__aeabi_d2f+0x84>
    2bd2:	4313      	orrs	r3, r2
    2bd4:	d10e      	bne.n	2bf4 <__aeabi_d2f+0x98>
    2bd6:	2400      	movs	r4, #0
    2bd8:	025b      	lsls	r3, r3, #9
    2bda:	0a5b      	lsrs	r3, r3, #9
    2bdc:	b2e4      	uxtb	r4, r4
    2bde:	e7ec      	b.n	2bba <__aeabi_d2f+0x5e>
    2be0:	431a      	orrs	r2, r3
    2be2:	d0e8      	beq.n	2bb6 <__aeabi_d2f+0x5a>
    2be4:	2080      	movs	r0, #128	; 0x80
    2be6:	00db      	lsls	r3, r3, #3
    2be8:	0480      	lsls	r0, r0, #18
    2bea:	4303      	orrs	r3, r0
    2bec:	24ff      	movs	r4, #255	; 0xff
    2bee:	e7d0      	b.n	2b92 <__aeabi_d2f+0x36>
    2bf0:	3417      	adds	r4, #23
    2bf2:	da0c      	bge.n	2c0e <__aeabi_d2f+0xb2>
    2bf4:	2305      	movs	r3, #5
    2bf6:	2400      	movs	r4, #0
    2bf8:	08db      	lsrs	r3, r3, #3
    2bfa:	2cff      	cmp	r4, #255	; 0xff
    2bfc:	d1ec      	bne.n	2bd8 <__aeabi_d2f+0x7c>
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d02d      	beq.n	2c5e <__aeabi_d2f+0x102>
    2c02:	2280      	movs	r2, #128	; 0x80
    2c04:	03d2      	lsls	r2, r2, #15
    2c06:	4313      	orrs	r3, r2
    2c08:	025b      	lsls	r3, r3, #9
    2c0a:	0a5b      	lsrs	r3, r3, #9
    2c0c:	e7d5      	b.n	2bba <__aeabi_d2f+0x5e>
    2c0e:	2480      	movs	r4, #128	; 0x80
    2c10:	4816      	ldr	r0, [pc, #88]	; (2c6c <__aeabi_d2f+0x110>)
    2c12:	0424      	lsls	r4, r4, #16
    2c14:	4323      	orrs	r3, r4
    2c16:	1b40      	subs	r0, r0, r5
    2c18:	281f      	cmp	r0, #31
    2c1a:	dc0d      	bgt.n	2c38 <__aeabi_d2f+0xdc>
    2c1c:	4c14      	ldr	r4, [pc, #80]	; (2c70 <__aeabi_d2f+0x114>)
    2c1e:	46a4      	mov	ip, r4
    2c20:	4465      	add	r5, ip
    2c22:	40ab      	lsls	r3, r5
    2c24:	1c1c      	adds	r4, r3, #0
    2c26:	1c13      	adds	r3, r2, #0
    2c28:	40ab      	lsls	r3, r5
    2c2a:	1e5d      	subs	r5, r3, #1
    2c2c:	41ab      	sbcs	r3, r5
    2c2e:	40c2      	lsrs	r2, r0
    2c30:	4323      	orrs	r3, r4
    2c32:	4313      	orrs	r3, r2
    2c34:	2400      	movs	r4, #0
    2c36:	e7ac      	b.n	2b92 <__aeabi_d2f+0x36>
    2c38:	1c1e      	adds	r6, r3, #0
    2c3a:	4c0e      	ldr	r4, [pc, #56]	; (2c74 <__aeabi_d2f+0x118>)
    2c3c:	1b64      	subs	r4, r4, r5
    2c3e:	40e6      	lsrs	r6, r4
    2c40:	1c34      	adds	r4, r6, #0
    2c42:	2820      	cmp	r0, #32
    2c44:	d00d      	beq.n	2c62 <__aeabi_d2f+0x106>
    2c46:	480c      	ldr	r0, [pc, #48]	; (2c78 <__aeabi_d2f+0x11c>)
    2c48:	4684      	mov	ip, r0
    2c4a:	4465      	add	r5, ip
    2c4c:	40ab      	lsls	r3, r5
    2c4e:	1c1d      	adds	r5, r3, #0
    2c50:	432a      	orrs	r2, r5
    2c52:	1e53      	subs	r3, r2, #1
    2c54:	419a      	sbcs	r2, r3
    2c56:	1c13      	adds	r3, r2, #0
    2c58:	4323      	orrs	r3, r4
    2c5a:	2400      	movs	r4, #0
    2c5c:	e799      	b.n	2b92 <__aeabi_d2f+0x36>
    2c5e:	2300      	movs	r3, #0
    2c60:	e7ab      	b.n	2bba <__aeabi_d2f+0x5e>
    2c62:	2500      	movs	r5, #0
    2c64:	e7f4      	b.n	2c50 <__aeabi_d2f+0xf4>
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	fffffc80 	.word	0xfffffc80
    2c6c:	0000039e 	.word	0x0000039e
    2c70:	fffffc82 	.word	0xfffffc82
    2c74:	0000037e 	.word	0x0000037e
    2c78:	fffffca2 	.word	0xfffffca2

00002c7c <__aeabi_cfrcmple>:
    2c7c:	4684      	mov	ip, r0
    2c7e:	1c08      	adds	r0, r1, #0
    2c80:	4661      	mov	r1, ip
    2c82:	e7ff      	b.n	2c84 <__aeabi_cfcmpeq>

00002c84 <__aeabi_cfcmpeq>:
    2c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2c86:	f000 fa69 	bl	315c <__lesf2>
    2c8a:	2800      	cmp	r0, #0
    2c8c:	d401      	bmi.n	2c92 <__aeabi_cfcmpeq+0xe>
    2c8e:	2100      	movs	r1, #0
    2c90:	42c8      	cmn	r0, r1
    2c92:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002c94 <__aeabi_fcmpeq>:
    2c94:	b510      	push	{r4, lr}
    2c96:	f000 f9ed 	bl	3074 <__eqsf2>
    2c9a:	4240      	negs	r0, r0
    2c9c:	3001      	adds	r0, #1
    2c9e:	bd10      	pop	{r4, pc}

00002ca0 <__aeabi_fcmplt>:
    2ca0:	b510      	push	{r4, lr}
    2ca2:	f000 fa5b 	bl	315c <__lesf2>
    2ca6:	2800      	cmp	r0, #0
    2ca8:	db01      	blt.n	2cae <__aeabi_fcmplt+0xe>
    2caa:	2000      	movs	r0, #0
    2cac:	bd10      	pop	{r4, pc}
    2cae:	2001      	movs	r0, #1
    2cb0:	bd10      	pop	{r4, pc}
    2cb2:	46c0      	nop			; (mov r8, r8)

00002cb4 <__aeabi_fcmple>:
    2cb4:	b510      	push	{r4, lr}
    2cb6:	f000 fa51 	bl	315c <__lesf2>
    2cba:	2800      	cmp	r0, #0
    2cbc:	dd01      	ble.n	2cc2 <__aeabi_fcmple+0xe>
    2cbe:	2000      	movs	r0, #0
    2cc0:	bd10      	pop	{r4, pc}
    2cc2:	2001      	movs	r0, #1
    2cc4:	bd10      	pop	{r4, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)

00002cc8 <__aeabi_fcmpgt>:
    2cc8:	b510      	push	{r4, lr}
    2cca:	f000 f9fd 	bl	30c8 <__gesf2>
    2cce:	2800      	cmp	r0, #0
    2cd0:	dc01      	bgt.n	2cd6 <__aeabi_fcmpgt+0xe>
    2cd2:	2000      	movs	r0, #0
    2cd4:	bd10      	pop	{r4, pc}
    2cd6:	2001      	movs	r0, #1
    2cd8:	bd10      	pop	{r4, pc}
    2cda:	46c0      	nop			; (mov r8, r8)

00002cdc <__aeabi_fcmpge>:
    2cdc:	b510      	push	{r4, lr}
    2cde:	f000 f9f3 	bl	30c8 <__gesf2>
    2ce2:	2800      	cmp	r0, #0
    2ce4:	da01      	bge.n	2cea <__aeabi_fcmpge+0xe>
    2ce6:	2000      	movs	r0, #0
    2ce8:	bd10      	pop	{r4, pc}
    2cea:	2001      	movs	r0, #1
    2cec:	bd10      	pop	{r4, pc}
    2cee:	46c0      	nop			; (mov r8, r8)

00002cf0 <__clzsi2>:
    2cf0:	211c      	movs	r1, #28
    2cf2:	2301      	movs	r3, #1
    2cf4:	041b      	lsls	r3, r3, #16
    2cf6:	4298      	cmp	r0, r3
    2cf8:	d301      	bcc.n	2cfe <__clzsi2+0xe>
    2cfa:	0c00      	lsrs	r0, r0, #16
    2cfc:	3910      	subs	r1, #16
    2cfe:	0a1b      	lsrs	r3, r3, #8
    2d00:	4298      	cmp	r0, r3
    2d02:	d301      	bcc.n	2d08 <__clzsi2+0x18>
    2d04:	0a00      	lsrs	r0, r0, #8
    2d06:	3908      	subs	r1, #8
    2d08:	091b      	lsrs	r3, r3, #4
    2d0a:	4298      	cmp	r0, r3
    2d0c:	d301      	bcc.n	2d12 <__clzsi2+0x22>
    2d0e:	0900      	lsrs	r0, r0, #4
    2d10:	3904      	subs	r1, #4
    2d12:	a202      	add	r2, pc, #8	; (adr r2, 2d1c <__clzsi2+0x2c>)
    2d14:	5c10      	ldrb	r0, [r2, r0]
    2d16:	1840      	adds	r0, r0, r1
    2d18:	4770      	bx	lr
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	02020304 	.word	0x02020304
    2d20:	01010101 	.word	0x01010101
	...

00002d2c <__divdi3>:
    2d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2e:	4644      	mov	r4, r8
    2d30:	465f      	mov	r7, fp
    2d32:	4656      	mov	r6, sl
    2d34:	464d      	mov	r5, r9
    2d36:	b4f0      	push	{r4, r5, r6, r7}
    2d38:	1c1c      	adds	r4, r3, #0
    2d3a:	b085      	sub	sp, #20
    2d3c:	2900      	cmp	r1, #0
    2d3e:	da00      	bge.n	2d42 <__divdi3+0x16>
    2d40:	e0a9      	b.n	2e96 <__divdi3+0x16a>
    2d42:	1c0f      	adds	r7, r1, #0
    2d44:	2100      	movs	r1, #0
    2d46:	1c06      	adds	r6, r0, #0
    2d48:	4688      	mov	r8, r1
    2d4a:	1c10      	adds	r0, r2, #0
    2d4c:	1c19      	adds	r1, r3, #0
    2d4e:	2c00      	cmp	r4, #0
    2d50:	da00      	bge.n	2d54 <__divdi3+0x28>
    2d52:	e097      	b.n	2e84 <__divdi3+0x158>
    2d54:	1c34      	adds	r4, r6, #0
    2d56:	1c3d      	adds	r5, r7, #0
    2d58:	4682      	mov	sl, r0
    2d5a:	4689      	mov	r9, r1
    2d5c:	42b9      	cmp	r1, r7
    2d5e:	d873      	bhi.n	2e48 <__divdi3+0x11c>
    2d60:	d070      	beq.n	2e44 <__divdi3+0x118>
    2d62:	4649      	mov	r1, r9
    2d64:	4650      	mov	r0, sl
    2d66:	f000 fa3f 	bl	31e8 <__clzdi2>
    2d6a:	4683      	mov	fp, r0
    2d6c:	1c39      	adds	r1, r7, #0
    2d6e:	1c30      	adds	r0, r6, #0
    2d70:	f000 fa3a 	bl	31e8 <__clzdi2>
    2d74:	465b      	mov	r3, fp
    2d76:	1a18      	subs	r0, r3, r0
    2d78:	1c03      	adds	r3, r0, #0
    2d7a:	4683      	mov	fp, r0
    2d7c:	3b20      	subs	r3, #32
    2d7e:	469c      	mov	ip, r3
    2d80:	d500      	bpl.n	2d84 <__divdi3+0x58>
    2d82:	e09c      	b.n	2ebe <__divdi3+0x192>
    2d84:	2300      	movs	r3, #0
    2d86:	2200      	movs	r2, #0
    2d88:	4651      	mov	r1, sl
    2d8a:	9200      	str	r2, [sp, #0]
    2d8c:	9301      	str	r3, [sp, #4]
    2d8e:	4663      	mov	r3, ip
    2d90:	4099      	lsls	r1, r3
    2d92:	9101      	str	r1, [sp, #4]
    2d94:	4651      	mov	r1, sl
    2d96:	4081      	lsls	r1, r0
    2d98:	9b01      	ldr	r3, [sp, #4]
    2d9a:	9100      	str	r1, [sp, #0]
    2d9c:	42bb      	cmp	r3, r7
    2d9e:	d900      	bls.n	2da2 <__divdi3+0x76>
    2da0:	e083      	b.n	2eaa <__divdi3+0x17e>
    2da2:	d100      	bne.n	2da6 <__divdi3+0x7a>
    2da4:	e07e      	b.n	2ea4 <__divdi3+0x178>
    2da6:	9a00      	ldr	r2, [sp, #0]
    2da8:	9b01      	ldr	r3, [sp, #4]
    2daa:	1c34      	adds	r4, r6, #0
    2dac:	1c3d      	adds	r5, r7, #0
    2dae:	1aa4      	subs	r4, r4, r2
    2db0:	419d      	sbcs	r5, r3
    2db2:	4663      	mov	r3, ip
    2db4:	2b00      	cmp	r3, #0
    2db6:	da00      	bge.n	2dba <__divdi3+0x8e>
    2db8:	e09a      	b.n	2ef0 <__divdi3+0x1c4>
    2dba:	2600      	movs	r6, #0
    2dbc:	2700      	movs	r7, #0
    2dbe:	9602      	str	r6, [sp, #8]
    2dc0:	9703      	str	r7, [sp, #12]
    2dc2:	3601      	adds	r6, #1
    2dc4:	409e      	lsls	r6, r3
    2dc6:	9603      	str	r6, [sp, #12]
    2dc8:	2601      	movs	r6, #1
    2dca:	4086      	lsls	r6, r0
    2dcc:	9602      	str	r6, [sp, #8]
    2dce:	2800      	cmp	r0, #0
    2dd0:	d100      	bne.n	2dd4 <__divdi3+0xa8>
    2dd2:	e071      	b.n	2eb8 <__divdi3+0x18c>
    2dd4:	9900      	ldr	r1, [sp, #0]
    2dd6:	9a01      	ldr	r2, [sp, #4]
    2dd8:	07d3      	lsls	r3, r2, #31
    2dda:	4699      	mov	r9, r3
    2ddc:	464b      	mov	r3, r9
    2dde:	084e      	lsrs	r6, r1, #1
    2de0:	431e      	orrs	r6, r3
    2de2:	0857      	lsrs	r7, r2, #1
    2de4:	2300      	movs	r3, #0
    2de6:	2201      	movs	r2, #1
    2de8:	e00c      	b.n	2e04 <__divdi3+0xd8>
    2dea:	42af      	cmp	r7, r5
    2dec:	d101      	bne.n	2df2 <__divdi3+0xc6>
    2dee:	42a6      	cmp	r6, r4
    2df0:	d80a      	bhi.n	2e08 <__divdi3+0xdc>
    2df2:	1ba4      	subs	r4, r4, r6
    2df4:	41bd      	sbcs	r5, r7
    2df6:	1924      	adds	r4, r4, r4
    2df8:	416d      	adcs	r5, r5
    2dfa:	3801      	subs	r0, #1
    2dfc:	18a4      	adds	r4, r4, r2
    2dfe:	415d      	adcs	r5, r3
    2e00:	2800      	cmp	r0, #0
    2e02:	d006      	beq.n	2e12 <__divdi3+0xe6>
    2e04:	42af      	cmp	r7, r5
    2e06:	d9f0      	bls.n	2dea <__divdi3+0xbe>
    2e08:	3801      	subs	r0, #1
    2e0a:	1924      	adds	r4, r4, r4
    2e0c:	416d      	adcs	r5, r5
    2e0e:	2800      	cmp	r0, #0
    2e10:	d1f8      	bne.n	2e04 <__divdi3+0xd8>
    2e12:	2220      	movs	r2, #32
    2e14:	9e02      	ldr	r6, [sp, #8]
    2e16:	9f03      	ldr	r7, [sp, #12]
    2e18:	465b      	mov	r3, fp
    2e1a:	4252      	negs	r2, r2
    2e1c:	1936      	adds	r6, r6, r4
    2e1e:	416f      	adcs	r7, r5
    2e20:	1899      	adds	r1, r3, r2
    2e22:	d45a      	bmi.n	2eda <__divdi3+0x1ae>
    2e24:	1c28      	adds	r0, r5, #0
    2e26:	40c8      	lsrs	r0, r1
    2e28:	1c2c      	adds	r4, r5, #0
    2e2a:	465b      	mov	r3, fp
    2e2c:	40dc      	lsrs	r4, r3
    2e2e:	2900      	cmp	r1, #0
    2e30:	db68      	blt.n	2f04 <__divdi3+0x1d8>
    2e32:	1c04      	adds	r4, r0, #0
    2e34:	408c      	lsls	r4, r1
    2e36:	1c23      	adds	r3, r4, #0
    2e38:	4659      	mov	r1, fp
    2e3a:	4088      	lsls	r0, r1
    2e3c:	1c02      	adds	r2, r0, #0
    2e3e:	1ab6      	subs	r6, r6, r2
    2e40:	419f      	sbcs	r7, r3
    2e42:	e003      	b.n	2e4c <__divdi3+0x120>
    2e44:	42b0      	cmp	r0, r6
    2e46:	d98c      	bls.n	2d62 <__divdi3+0x36>
    2e48:	2600      	movs	r6, #0
    2e4a:	2700      	movs	r7, #0
    2e4c:	4641      	mov	r1, r8
    2e4e:	1e4b      	subs	r3, r1, #1
    2e50:	4199      	sbcs	r1, r3
    2e52:	2300      	movs	r3, #0
    2e54:	9100      	str	r1, [sp, #0]
    2e56:	9301      	str	r3, [sp, #4]
    2e58:	9a00      	ldr	r2, [sp, #0]
    2e5a:	9b01      	ldr	r3, [sp, #4]
    2e5c:	2500      	movs	r5, #0
    2e5e:	4254      	negs	r4, r2
    2e60:	419d      	sbcs	r5, r3
    2e62:	1c33      	adds	r3, r6, #0
    2e64:	4063      	eors	r3, r4
    2e66:	1c18      	adds	r0, r3, #0
    2e68:	1c3b      	adds	r3, r7, #0
    2e6a:	406b      	eors	r3, r5
    2e6c:	1c19      	adds	r1, r3, #0
    2e6e:	9b00      	ldr	r3, [sp, #0]
    2e70:	9c01      	ldr	r4, [sp, #4]
    2e72:	18c0      	adds	r0, r0, r3
    2e74:	4161      	adcs	r1, r4
    2e76:	b005      	add	sp, #20
    2e78:	bc3c      	pop	{r2, r3, r4, r5}
    2e7a:	4690      	mov	r8, r2
    2e7c:	4699      	mov	r9, r3
    2e7e:	46a2      	mov	sl, r4
    2e80:	46ab      	mov	fp, r5
    2e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e84:	4643      	mov	r3, r8
    2e86:	43db      	mvns	r3, r3
    2e88:	1c0c      	adds	r4, r1, #0
    2e8a:	4698      	mov	r8, r3
    2e8c:	1c13      	adds	r3, r2, #0
    2e8e:	2100      	movs	r1, #0
    2e90:	4258      	negs	r0, r3
    2e92:	41a1      	sbcs	r1, r4
    2e94:	e75e      	b.n	2d54 <__divdi3+0x28>
    2e96:	2700      	movs	r7, #0
    2e98:	4246      	negs	r6, r0
    2e9a:	418f      	sbcs	r7, r1
    2e9c:	2101      	movs	r1, #1
    2e9e:	4249      	negs	r1, r1
    2ea0:	4688      	mov	r8, r1
    2ea2:	e752      	b.n	2d4a <__divdi3+0x1e>
    2ea4:	42b1      	cmp	r1, r6
    2ea6:	d800      	bhi.n	2eaa <__divdi3+0x17e>
    2ea8:	e77d      	b.n	2da6 <__divdi3+0x7a>
    2eaa:	2600      	movs	r6, #0
    2eac:	2700      	movs	r7, #0
    2eae:	9602      	str	r6, [sp, #8]
    2eb0:	9703      	str	r7, [sp, #12]
    2eb2:	2800      	cmp	r0, #0
    2eb4:	d000      	beq.n	2eb8 <__divdi3+0x18c>
    2eb6:	e78d      	b.n	2dd4 <__divdi3+0xa8>
    2eb8:	9e02      	ldr	r6, [sp, #8]
    2eba:	9f03      	ldr	r7, [sp, #12]
    2ebc:	e7c6      	b.n	2e4c <__divdi3+0x120>
    2ebe:	2120      	movs	r1, #32
    2ec0:	4653      	mov	r3, sl
    2ec2:	1a09      	subs	r1, r1, r0
    2ec4:	40cb      	lsrs	r3, r1
    2ec6:	2200      	movs	r2, #0
    2ec8:	1c19      	adds	r1, r3, #0
    2eca:	2300      	movs	r3, #0
    2ecc:	9200      	str	r2, [sp, #0]
    2ece:	9301      	str	r3, [sp, #4]
    2ed0:	464b      	mov	r3, r9
    2ed2:	4083      	lsls	r3, r0
    2ed4:	430b      	orrs	r3, r1
    2ed6:	9301      	str	r3, [sp, #4]
    2ed8:	e75c      	b.n	2d94 <__divdi3+0x68>
    2eda:	465a      	mov	r2, fp
    2edc:	2320      	movs	r3, #32
    2ede:	1a9b      	subs	r3, r3, r2
    2ee0:	1c2a      	adds	r2, r5, #0
    2ee2:	409a      	lsls	r2, r3
    2ee4:	1c20      	adds	r0, r4, #0
    2ee6:	1c13      	adds	r3, r2, #0
    2ee8:	465a      	mov	r2, fp
    2eea:	40d0      	lsrs	r0, r2
    2eec:	4318      	orrs	r0, r3
    2eee:	e79b      	b.n	2e28 <__divdi3+0xfc>
    2ef0:	2620      	movs	r6, #32
    2ef2:	2700      	movs	r7, #0
    2ef4:	1a33      	subs	r3, r6, r0
    2ef6:	2600      	movs	r6, #0
    2ef8:	9602      	str	r6, [sp, #8]
    2efa:	9703      	str	r7, [sp, #12]
    2efc:	2701      	movs	r7, #1
    2efe:	40df      	lsrs	r7, r3
    2f00:	9703      	str	r7, [sp, #12]
    2f02:	e761      	b.n	2dc8 <__divdi3+0x9c>
    2f04:	465b      	mov	r3, fp
    2f06:	2120      	movs	r1, #32
    2f08:	465d      	mov	r5, fp
    2f0a:	1ac9      	subs	r1, r1, r3
    2f0c:	1c03      	adds	r3, r0, #0
    2f0e:	40ac      	lsls	r4, r5
    2f10:	40cb      	lsrs	r3, r1
    2f12:	1c19      	adds	r1, r3, #0
    2f14:	1c23      	adds	r3, r4, #0
    2f16:	430b      	orrs	r3, r1
    2f18:	e78e      	b.n	2e38 <__divdi3+0x10c>
    2f1a:	46c0      	nop			; (mov r8, r8)

00002f1c <__udivdi3>:
    2f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f1e:	4645      	mov	r5, r8
    2f20:	464e      	mov	r6, r9
    2f22:	4657      	mov	r7, sl
    2f24:	b4e0      	push	{r5, r6, r7}
    2f26:	1c04      	adds	r4, r0, #0
    2f28:	b082      	sub	sp, #8
    2f2a:	1c0d      	adds	r5, r1, #0
    2f2c:	4691      	mov	r9, r2
    2f2e:	4698      	mov	r8, r3
    2f30:	428b      	cmp	r3, r1
    2f32:	d862      	bhi.n	2ffa <__udivdi3+0xde>
    2f34:	d05f      	beq.n	2ff6 <__udivdi3+0xda>
    2f36:	4641      	mov	r1, r8
    2f38:	4648      	mov	r0, r9
    2f3a:	f000 f955 	bl	31e8 <__clzdi2>
    2f3e:	1c29      	adds	r1, r5, #0
    2f40:	1c06      	adds	r6, r0, #0
    2f42:	1c20      	adds	r0, r4, #0
    2f44:	f000 f950 	bl	31e8 <__clzdi2>
    2f48:	2320      	movs	r3, #32
    2f4a:	1a31      	subs	r1, r6, r0
    2f4c:	425b      	negs	r3, r3
    2f4e:	468a      	mov	sl, r1
    2f50:	18c8      	adds	r0, r1, r3
    2f52:	d465      	bmi.n	3020 <__udivdi3+0x104>
    2f54:	464b      	mov	r3, r9
    2f56:	4083      	lsls	r3, r0
    2f58:	1c1f      	adds	r7, r3, #0
    2f5a:	464b      	mov	r3, r9
    2f5c:	408b      	lsls	r3, r1
    2f5e:	1c1e      	adds	r6, r3, #0
    2f60:	42af      	cmp	r7, r5
    2f62:	d858      	bhi.n	3016 <__udivdi3+0xfa>
    2f64:	d055      	beq.n	3012 <__udivdi3+0xf6>
    2f66:	1ba4      	subs	r4, r4, r6
    2f68:	41bd      	sbcs	r5, r7
    2f6a:	2800      	cmp	r0, #0
    2f6c:	da00      	bge.n	2f70 <__udivdi3+0x54>
    2f6e:	e077      	b.n	3060 <__udivdi3+0x144>
    2f70:	2200      	movs	r2, #0
    2f72:	2300      	movs	r3, #0
    2f74:	9200      	str	r2, [sp, #0]
    2f76:	9301      	str	r3, [sp, #4]
    2f78:	3201      	adds	r2, #1
    2f7a:	4082      	lsls	r2, r0
    2f7c:	9201      	str	r2, [sp, #4]
    2f7e:	2301      	movs	r3, #1
    2f80:	408b      	lsls	r3, r1
    2f82:	9300      	str	r3, [sp, #0]
    2f84:	2900      	cmp	r1, #0
    2f86:	d03c      	beq.n	3002 <__udivdi3+0xe6>
    2f88:	07fb      	lsls	r3, r7, #31
    2f8a:	4698      	mov	r8, r3
    2f8c:	4640      	mov	r0, r8
    2f8e:	0872      	lsrs	r2, r6, #1
    2f90:	087b      	lsrs	r3, r7, #1
    2f92:	4302      	orrs	r2, r0
    2f94:	2601      	movs	r6, #1
    2f96:	2700      	movs	r7, #0
    2f98:	e00c      	b.n	2fb4 <__udivdi3+0x98>
    2f9a:	42ab      	cmp	r3, r5
    2f9c:	d101      	bne.n	2fa2 <__udivdi3+0x86>
    2f9e:	42a2      	cmp	r2, r4
    2fa0:	d80a      	bhi.n	2fb8 <__udivdi3+0x9c>
    2fa2:	1aa4      	subs	r4, r4, r2
    2fa4:	419d      	sbcs	r5, r3
    2fa6:	1924      	adds	r4, r4, r4
    2fa8:	416d      	adcs	r5, r5
    2faa:	3901      	subs	r1, #1
    2fac:	19a4      	adds	r4, r4, r6
    2fae:	417d      	adcs	r5, r7
    2fb0:	2900      	cmp	r1, #0
    2fb2:	d006      	beq.n	2fc2 <__udivdi3+0xa6>
    2fb4:	42ab      	cmp	r3, r5
    2fb6:	d9f0      	bls.n	2f9a <__udivdi3+0x7e>
    2fb8:	3901      	subs	r1, #1
    2fba:	1924      	adds	r4, r4, r4
    2fbc:	416d      	adcs	r5, r5
    2fbe:	2900      	cmp	r1, #0
    2fc0:	d1f8      	bne.n	2fb4 <__udivdi3+0x98>
    2fc2:	2220      	movs	r2, #32
    2fc4:	9800      	ldr	r0, [sp, #0]
    2fc6:	9901      	ldr	r1, [sp, #4]
    2fc8:	4653      	mov	r3, sl
    2fca:	4252      	negs	r2, r2
    2fcc:	1900      	adds	r0, r0, r4
    2fce:	4169      	adcs	r1, r5
    2fd0:	189e      	adds	r6, r3, r2
    2fd2:	d43a      	bmi.n	304a <__udivdi3+0x12e>
    2fd4:	1c2f      	adds	r7, r5, #0
    2fd6:	40f7      	lsrs	r7, r6
    2fd8:	4653      	mov	r3, sl
    2fda:	40dd      	lsrs	r5, r3
    2fdc:	2e00      	cmp	r6, #0
    2fde:	db29      	blt.n	3034 <__udivdi3+0x118>
    2fe0:	1c3c      	adds	r4, r7, #0
    2fe2:	40b4      	lsls	r4, r6
    2fe4:	1c23      	adds	r3, r4, #0
    2fe6:	4654      	mov	r4, sl
    2fe8:	40a7      	lsls	r7, r4
    2fea:	1c3a      	adds	r2, r7, #0
    2fec:	1a80      	subs	r0, r0, r2
    2fee:	4199      	sbcs	r1, r3
    2ff0:	9000      	str	r0, [sp, #0]
    2ff2:	9101      	str	r1, [sp, #4]
    2ff4:	e005      	b.n	3002 <__udivdi3+0xe6>
    2ff6:	4282      	cmp	r2, r0
    2ff8:	d99d      	bls.n	2f36 <__udivdi3+0x1a>
    2ffa:	2300      	movs	r3, #0
    2ffc:	2400      	movs	r4, #0
    2ffe:	9300      	str	r3, [sp, #0]
    3000:	9401      	str	r4, [sp, #4]
    3002:	9800      	ldr	r0, [sp, #0]
    3004:	9901      	ldr	r1, [sp, #4]
    3006:	b002      	add	sp, #8
    3008:	bc1c      	pop	{r2, r3, r4}
    300a:	4690      	mov	r8, r2
    300c:	4699      	mov	r9, r3
    300e:	46a2      	mov	sl, r4
    3010:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3012:	42a3      	cmp	r3, r4
    3014:	d9a7      	bls.n	2f66 <__udivdi3+0x4a>
    3016:	2200      	movs	r2, #0
    3018:	2300      	movs	r3, #0
    301a:	9200      	str	r2, [sp, #0]
    301c:	9301      	str	r3, [sp, #4]
    301e:	e7b1      	b.n	2f84 <__udivdi3+0x68>
    3020:	2220      	movs	r2, #32
    3022:	464b      	mov	r3, r9
    3024:	1a52      	subs	r2, r2, r1
    3026:	40d3      	lsrs	r3, r2
    3028:	1c1a      	adds	r2, r3, #0
    302a:	4643      	mov	r3, r8
    302c:	408b      	lsls	r3, r1
    302e:	1c1f      	adds	r7, r3, #0
    3030:	4317      	orrs	r7, r2
    3032:	e792      	b.n	2f5a <__udivdi3+0x3e>
    3034:	4653      	mov	r3, sl
    3036:	2420      	movs	r4, #32
    3038:	4656      	mov	r6, sl
    303a:	1ae4      	subs	r4, r4, r3
    303c:	1c3b      	adds	r3, r7, #0
    303e:	40b5      	lsls	r5, r6
    3040:	40e3      	lsrs	r3, r4
    3042:	1c1c      	adds	r4, r3, #0
    3044:	1c2b      	adds	r3, r5, #0
    3046:	4323      	orrs	r3, r4
    3048:	e7cd      	b.n	2fe6 <__udivdi3+0xca>
    304a:	4652      	mov	r2, sl
    304c:	2320      	movs	r3, #32
    304e:	1a9b      	subs	r3, r3, r2
    3050:	1c2a      	adds	r2, r5, #0
    3052:	409a      	lsls	r2, r3
    3054:	1c27      	adds	r7, r4, #0
    3056:	1c13      	adds	r3, r2, #0
    3058:	4652      	mov	r2, sl
    305a:	40d7      	lsrs	r7, r2
    305c:	431f      	orrs	r7, r3
    305e:	e7bb      	b.n	2fd8 <__udivdi3+0xbc>
    3060:	2320      	movs	r3, #32
    3062:	2200      	movs	r2, #0
    3064:	1a58      	subs	r0, r3, r1
    3066:	2300      	movs	r3, #0
    3068:	9200      	str	r2, [sp, #0]
    306a:	9301      	str	r3, [sp, #4]
    306c:	3201      	adds	r2, #1
    306e:	40c2      	lsrs	r2, r0
    3070:	9201      	str	r2, [sp, #4]
    3072:	e784      	b.n	2f7e <__udivdi3+0x62>

00003074 <__eqsf2>:
    3074:	0243      	lsls	r3, r0, #9
    3076:	b570      	push	{r4, r5, r6, lr}
    3078:	0042      	lsls	r2, r0, #1
    307a:	004c      	lsls	r4, r1, #1
    307c:	0a5d      	lsrs	r5, r3, #9
    307e:	0fc3      	lsrs	r3, r0, #31
    3080:	0248      	lsls	r0, r1, #9
    3082:	0e12      	lsrs	r2, r2, #24
    3084:	0a46      	lsrs	r6, r0, #9
    3086:	0e24      	lsrs	r4, r4, #24
    3088:	0fc9      	lsrs	r1, r1, #31
    308a:	2aff      	cmp	r2, #255	; 0xff
    308c:	d005      	beq.n	309a <__eqsf2+0x26>
    308e:	2cff      	cmp	r4, #255	; 0xff
    3090:	d008      	beq.n	30a4 <__eqsf2+0x30>
    3092:	2001      	movs	r0, #1
    3094:	42a2      	cmp	r2, r4
    3096:	d00b      	beq.n	30b0 <__eqsf2+0x3c>
    3098:	bd70      	pop	{r4, r5, r6, pc}
    309a:	2001      	movs	r0, #1
    309c:	2d00      	cmp	r5, #0
    309e:	d1fb      	bne.n	3098 <__eqsf2+0x24>
    30a0:	2cff      	cmp	r4, #255	; 0xff
    30a2:	d1f6      	bne.n	3092 <__eqsf2+0x1e>
    30a4:	2001      	movs	r0, #1
    30a6:	2e00      	cmp	r6, #0
    30a8:	d1f6      	bne.n	3098 <__eqsf2+0x24>
    30aa:	2001      	movs	r0, #1
    30ac:	42a2      	cmp	r2, r4
    30ae:	d1f3      	bne.n	3098 <__eqsf2+0x24>
    30b0:	42b5      	cmp	r5, r6
    30b2:	d1f1      	bne.n	3098 <__eqsf2+0x24>
    30b4:	428b      	cmp	r3, r1
    30b6:	d005      	beq.n	30c4 <__eqsf2+0x50>
    30b8:	2a00      	cmp	r2, #0
    30ba:	d1ed      	bne.n	3098 <__eqsf2+0x24>
    30bc:	1c28      	adds	r0, r5, #0
    30be:	1e43      	subs	r3, r0, #1
    30c0:	4198      	sbcs	r0, r3
    30c2:	e7e9      	b.n	3098 <__eqsf2+0x24>
    30c4:	2000      	movs	r0, #0
    30c6:	e7e7      	b.n	3098 <__eqsf2+0x24>

000030c8 <__gesf2>:
    30c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ca:	0243      	lsls	r3, r0, #9
    30cc:	024d      	lsls	r5, r1, #9
    30ce:	004a      	lsls	r2, r1, #1
    30d0:	0044      	lsls	r4, r0, #1
    30d2:	0a5e      	lsrs	r6, r3, #9
    30d4:	0e24      	lsrs	r4, r4, #24
    30d6:	0fc3      	lsrs	r3, r0, #31
    30d8:	0a6d      	lsrs	r5, r5, #9
    30da:	0e12      	lsrs	r2, r2, #24
    30dc:	0fc9      	lsrs	r1, r1, #31
    30de:	2cff      	cmp	r4, #255	; 0xff
    30e0:	d00d      	beq.n	30fe <__gesf2+0x36>
    30e2:	2aff      	cmp	r2, #255	; 0xff
    30e4:	d031      	beq.n	314a <__gesf2+0x82>
    30e6:	2c00      	cmp	r4, #0
    30e8:	d10d      	bne.n	3106 <__gesf2+0x3e>
    30ea:	4277      	negs	r7, r6
    30ec:	4177      	adcs	r7, r6
    30ee:	2a00      	cmp	r2, #0
    30f0:	d123      	bne.n	313a <__gesf2+0x72>
    30f2:	2d00      	cmp	r5, #0
    30f4:	d121      	bne.n	313a <__gesf2+0x72>
    30f6:	2000      	movs	r0, #0
    30f8:	2f00      	cmp	r7, #0
    30fa:	d10b      	bne.n	3114 <__gesf2+0x4c>
    30fc:	e007      	b.n	310e <__gesf2+0x46>
    30fe:	2e00      	cmp	r6, #0
    3100:	d128      	bne.n	3154 <__gesf2+0x8c>
    3102:	2aff      	cmp	r2, #255	; 0xff
    3104:	d021      	beq.n	314a <__gesf2+0x82>
    3106:	2a00      	cmp	r2, #0
    3108:	d005      	beq.n	3116 <__gesf2+0x4e>
    310a:	428b      	cmp	r3, r1
    310c:	d007      	beq.n	311e <__gesf2+0x56>
    310e:	4258      	negs	r0, r3
    3110:	2301      	movs	r3, #1
    3112:	4318      	orrs	r0, r3
    3114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3116:	2d00      	cmp	r5, #0
    3118:	d0f9      	beq.n	310e <__gesf2+0x46>
    311a:	428b      	cmp	r3, r1
    311c:	d1f7      	bne.n	310e <__gesf2+0x46>
    311e:	4294      	cmp	r4, r2
    3120:	dcf5      	bgt.n	310e <__gesf2+0x46>
    3122:	db04      	blt.n	312e <__gesf2+0x66>
    3124:	42ae      	cmp	r6, r5
    3126:	d8f2      	bhi.n	310e <__gesf2+0x46>
    3128:	2000      	movs	r0, #0
    312a:	42ae      	cmp	r6, r5
    312c:	d2f2      	bcs.n	3114 <__gesf2+0x4c>
    312e:	4258      	negs	r0, r3
    3130:	4143      	adcs	r3, r0
    3132:	2001      	movs	r0, #1
    3134:	425b      	negs	r3, r3
    3136:	4318      	orrs	r0, r3
    3138:	e7ec      	b.n	3114 <__gesf2+0x4c>
    313a:	2f00      	cmp	r7, #0
    313c:	d0e5      	beq.n	310a <__gesf2+0x42>
    313e:	4248      	negs	r0, r1
    3140:	4141      	adcs	r1, r0
    3142:	2001      	movs	r0, #1
    3144:	4249      	negs	r1, r1
    3146:	4308      	orrs	r0, r1
    3148:	e7e4      	b.n	3114 <__gesf2+0x4c>
    314a:	2d00      	cmp	r5, #0
    314c:	d102      	bne.n	3154 <__gesf2+0x8c>
    314e:	2c00      	cmp	r4, #0
    3150:	d0cb      	beq.n	30ea <__gesf2+0x22>
    3152:	e7da      	b.n	310a <__gesf2+0x42>
    3154:	2002      	movs	r0, #2
    3156:	4240      	negs	r0, r0
    3158:	e7dc      	b.n	3114 <__gesf2+0x4c>
    315a:	46c0      	nop			; (mov r8, r8)

0000315c <__lesf2>:
    315c:	0243      	lsls	r3, r0, #9
    315e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3160:	0042      	lsls	r2, r0, #1
    3162:	004c      	lsls	r4, r1, #1
    3164:	0a5e      	lsrs	r6, r3, #9
    3166:	0fc3      	lsrs	r3, r0, #31
    3168:	0248      	lsls	r0, r1, #9
    316a:	0e12      	lsrs	r2, r2, #24
    316c:	0a45      	lsrs	r5, r0, #9
    316e:	0e24      	lsrs	r4, r4, #24
    3170:	0fc9      	lsrs	r1, r1, #31
    3172:	2aff      	cmp	r2, #255	; 0xff
    3174:	d00f      	beq.n	3196 <__lesf2+0x3a>
    3176:	2cff      	cmp	r4, #255	; 0xff
    3178:	d01a      	beq.n	31b0 <__lesf2+0x54>
    317a:	2a00      	cmp	r2, #0
    317c:	d110      	bne.n	31a0 <__lesf2+0x44>
    317e:	4277      	negs	r7, r6
    3180:	4177      	adcs	r7, r6
    3182:	2c00      	cmp	r4, #0
    3184:	d029      	beq.n	31da <__lesf2+0x7e>
    3186:	2f00      	cmp	r7, #0
    3188:	d017      	beq.n	31ba <__lesf2+0x5e>
    318a:	4248      	negs	r0, r1
    318c:	4141      	adcs	r1, r0
    318e:	2001      	movs	r0, #1
    3190:	4249      	negs	r1, r1
    3192:	4308      	orrs	r0, r1
    3194:	e00b      	b.n	31ae <__lesf2+0x52>
    3196:	2002      	movs	r0, #2
    3198:	2e00      	cmp	r6, #0
    319a:	d108      	bne.n	31ae <__lesf2+0x52>
    319c:	2cff      	cmp	r4, #255	; 0xff
    319e:	d007      	beq.n	31b0 <__lesf2+0x54>
    31a0:	2c00      	cmp	r4, #0
    31a2:	d10a      	bne.n	31ba <__lesf2+0x5e>
    31a4:	2d00      	cmp	r5, #0
    31a6:	d108      	bne.n	31ba <__lesf2+0x5e>
    31a8:	4258      	negs	r0, r3
    31aa:	2301      	movs	r3, #1
    31ac:	4318      	orrs	r0, r3
    31ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31b0:	2002      	movs	r0, #2
    31b2:	2d00      	cmp	r5, #0
    31b4:	d1fb      	bne.n	31ae <__lesf2+0x52>
    31b6:	2a00      	cmp	r2, #0
    31b8:	d0e1      	beq.n	317e <__lesf2+0x22>
    31ba:	428b      	cmp	r3, r1
    31bc:	d1f4      	bne.n	31a8 <__lesf2+0x4c>
    31be:	42a2      	cmp	r2, r4
    31c0:	dcf2      	bgt.n	31a8 <__lesf2+0x4c>
    31c2:	db04      	blt.n	31ce <__lesf2+0x72>
    31c4:	42ae      	cmp	r6, r5
    31c6:	d8ef      	bhi.n	31a8 <__lesf2+0x4c>
    31c8:	2000      	movs	r0, #0
    31ca:	42ae      	cmp	r6, r5
    31cc:	d2ef      	bcs.n	31ae <__lesf2+0x52>
    31ce:	4258      	negs	r0, r3
    31d0:	4143      	adcs	r3, r0
    31d2:	2001      	movs	r0, #1
    31d4:	425b      	negs	r3, r3
    31d6:	4318      	orrs	r0, r3
    31d8:	e7e9      	b.n	31ae <__lesf2+0x52>
    31da:	2d00      	cmp	r5, #0
    31dc:	d1d3      	bne.n	3186 <__lesf2+0x2a>
    31de:	2000      	movs	r0, #0
    31e0:	2f00      	cmp	r7, #0
    31e2:	d1e4      	bne.n	31ae <__lesf2+0x52>
    31e4:	e7e0      	b.n	31a8 <__lesf2+0x4c>
    31e6:	46c0      	nop			; (mov r8, r8)

000031e8 <__clzdi2>:
    31e8:	b510      	push	{r4, lr}
    31ea:	2900      	cmp	r1, #0
    31ec:	d103      	bne.n	31f6 <__clzdi2+0xe>
    31ee:	f7ff fd7f 	bl	2cf0 <__clzsi2>
    31f2:	3020      	adds	r0, #32
    31f4:	e002      	b.n	31fc <__clzdi2+0x14>
    31f6:	1c08      	adds	r0, r1, #0
    31f8:	f7ff fd7a 	bl	2cf0 <__clzsi2>
    31fc:	bd10      	pop	{r4, pc}
    31fe:	46c0      	nop			; (mov r8, r8)

00003200 <lookupTable.12169>:
    3200:	8d20 ffff ada1 ffff ce64 ffff ef6c ffff      .......d...l...
    3210:	10b7 0000 324a 0000 5425 0000 7649 0000     ....J2..%T..Iv..
    3220:	98b7 0000 bb72 0000 de79 0000 01d0 0001     ....r...y.......
    3230:	2576 0001 496f 0001 6dbc 0001 925e 0001     v%..oI...m..^...
    3240:	b758 0001 dcaa 0001 0258 0002 2862 0002     X.......X...b(..
    3250:	4ecc 0002 7596 0002 9cc4 0002 c457 0002     .N...u......W...
    3260:	ec52 0002 14b7 0003 3d89 0003 66ca 0003     R........=...f..
    3270:	907d 0003 baa4 0003 e544 0003 105e 0004     }.......D...^...
    3280:	3bf6 0004 680e 0004 94ac 0004 c1d1 0004     .;...h..........
    3290:	ef81 0004 1dc1 0005 4c95 0005 7c00 0005     .........L...|..
    32a0:	ac07 0005 dcae 0005 0dfb 0006 3ff2 0006     .............?..
    32b0:	7298 0006 a5f4 0006 da09 0006 0ee0 0007     .r..............
    32c0:	447d 0007 7ae8 0007 b228 0007 ea44 0007     }D...z..(...D...
    32d0:	2344 0008 5d30 0008 9810 0008 d3ef 0008     D#..0]..........
    32e0:	10d6 0009 4ecf 0009 8de5 0009 ce23 0009     .....N......#...
    32f0:	0f98 000a 524f 000a 9657 000a dbbf 000a     ....OR..W.......
    3300:	2298 000b 6af3 000b b4e2 000b 007b 000c     ."...j......{...
    3310:	4dd4 000c 9d03 000c ee23 000c 4150 000d     .M......#...PA..
    3320:	96a9 000d ee4e 000d 4865 000e a516 000e     ....N...eH......
    3330:	048e 000f 030a 0000 031c 0000 034e 0000     ............N...
    3340:	0380 0000 03b2 0000 03d6 0000 03fa 0000     ................
    3350:	041e 0000 069e 0000 06b8 0000 06de 0000     ................
    3360:	06f2 0000 070c 0000 0732 0000 0746 0000     ........2...F...
    3370:	0760 0000 0778 0000 195e 0000 1956 0000     `...x...^...V...
    3380:	1956 0000 194e 0000 18a0 0000 18a0 0000     V...N...........
    3390:	1944 0000 194e 0000 18a0 0000 1944 0000     D...N.......D...
    33a0:	18a0 0000 194e 0000 18a2 0000 18a2 0000     ....N...........
    33b0:	18a2 0000 19e8 0000 2690 0000 266e 0000     .........&..n&..
    33c0:	266e 0000 2662 0000 2556 0000 2556 0000     n&..b&..V%..V%..
    33d0:	2656 0000 2662 0000 2556 0000 2656 0000     V&..b&..V%..V&..
    33e0:	2556 0000 2662 0000 255a 0000 255a 0000     V%..b&..Z%..Z%..
    33f0:	255a 0000 2870 0000                         Z%..p(..

000033f8 <_init>:
    33f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33fe:	bc08      	pop	{r3}
    3400:	469e      	mov	lr, r3
    3402:	4770      	bx	lr

00003404 <__init_array_start>:
    3404:	000000dd 	.word	0x000000dd

00003408 <_fini>:
    3408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    340e:	bc08      	pop	{r3}
    3410:	469e      	mov	lr, r3
    3412:	4770      	bx	lr

00003414 <__fini_array_start>:
    3414:	000000b5 	.word	0x000000b5

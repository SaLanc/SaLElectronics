
SaLAltimeter-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c3c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00001c3c  00001c3c  00009c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000008  20000000  00001c44  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000118  20000008  00001c4c  00010008  2**2
                  ALLOC
  4 .stack        00002000  20000120  00001d64  00010008  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY
  7 .debug_info   000133ba  00000000  00000000  0001008b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c86  00000000  00000000  00023445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001a21  00000000  00000000  000250cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002b8  00000000  00000000  00026aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000318  00000000  00000000  00026da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00014d8e  00000000  00000000  000270bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006cf8  00000000  00000000  0003be4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006fb59  00000000  00000000  00042b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000007c8  00000000  00000000  000b269c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002120 	.word	0x20002120
       4:	00000cb5 	.word	0x00000cb5
       8:	00000cad 	.word	0x00000cad
       c:	00000cad 	.word	0x00000cad
	...
      2c:	00000cad 	.word	0x00000cad
	...
      38:	00000cad 	.word	0x00000cad
      3c:	00000cad 	.word	0x00000cad
      40:	00000cad 	.word	0x00000cad
      44:	00000cad 	.word	0x00000cad
      48:	00000cad 	.word	0x00000cad
      4c:	0000093d 	.word	0x0000093d
      50:	00000cad 	.word	0x00000cad
      54:	00000cad 	.word	0x00000cad
      58:	00000cad 	.word	0x00000cad
      5c:	00000cad 	.word	0x00000cad
      60:	00000cad 	.word	0x00000cad
      64:	00000cad 	.word	0x00000cad
      68:	00000cad 	.word	0x00000cad
      6c:	00000cad 	.word	0x00000cad
      70:	00000cad 	.word	0x00000cad
      74:	00000cad 	.word	0x00000cad
      78:	00000cad 	.word	0x00000cad
      7c:	00000cad 	.word	0x00000cad
      80:	00000cad 	.word	0x00000cad
      84:	00000cad 	.word	0x00000cad
      88:	00000cad 	.word	0x00000cad
      8c:	00000ded 	.word	0x00000ded
      90:	00000cad 	.word	0x00000cad
	...
      9c:	00000cad 	.word	0x00000cad
      a0:	00000cad 	.word	0x00000cad
      a4:	00000cad 	.word	0x00000cad
      a8:	00000cad 	.word	0x00000cad
      ac:	00000cad 	.word	0x00000cad
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	00001c44 	.word	0x00001c44

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00001c44 	.word	0x00001c44
     108:	2000000c 	.word	0x2000000c
     10c:	00001c44 	.word	0x00001c44
     110:	00000000 	.word	0x00000000

00000114 <getADXL345Event>:
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATA_FORMAT);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,_cmd);
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
}

void getADXL345Event(uint8_t *values) {
     114:	b570      	push	{r4, r5, r6, lr}
     116:	1c05      	adds	r5, r0, #0


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     118:	2280      	movs	r2, #128	; 0x80
     11a:	0252      	lsls	r2, r2, #9
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <getADXL345Event+0x34>)
     11e:	615a      	str	r2, [r3, #20]

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
     120:	200f      	movs	r0, #15
     122:	210d      	movs	r1, #13
     124:	22f2      	movs	r2, #242	; 0xf2
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <getADXL345Event+0x38>)
     128:	4798      	blx	r3
     12a:	1c2c      	adds	r4, r5, #0
     12c:	3506      	adds	r5, #6
    for (uint8_t i = 0; i < 6; i++) {
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
     12e:	4e08      	ldr	r6, [pc, #32]	; (150 <getADXL345Event+0x3c>)
     130:	200f      	movs	r0, #15
     132:	210e      	movs	r1, #14
     134:	47b0      	blx	r6
     136:	7020      	strb	r0, [r4, #0]
     138:	3401      	adds	r4, #1

void getADXL345Event(uint8_t *values) {

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
    for (uint8_t i = 0; i < 6; i++) {
     13a:	42ac      	cmp	r4, r5
     13c:	d1f8      	bne.n	130 <getADXL345Event+0x1c>
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     13e:	2280      	movs	r2, #128	; 0x80
     140:	0252      	lsls	r2, r2, #9
     142:	4b01      	ldr	r3, [pc, #4]	; (148 <getADXL345Event+0x34>)
     144:	619a      	str	r2, [r3, #24]
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
    }
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
}
     146:	bd70      	pop	{r4, r5, r6, pc}
     148:	41004400 	.word	0x41004400
     14c:	000006e1 	.word	0x000006e1
     150:	00000741 	.word	0x00000741

00000154 <readMS5607AdcResults>:

    return _receive;

}

uint32_t readMS5607AdcResults(){
     154:	b5f0      	push	{r4, r5, r6, r7, lr}
     156:	4647      	mov	r7, r8
     158:	b480      	push	{r7}
    } else {
        port->OUTCLR.reg = pin_mask;
     15a:	4f0f      	ldr	r7, [pc, #60]	; (198 <readMS5607AdcResults+0x44>)
     15c:	2480      	movs	r4, #128	; 0x80
     15e:	00a4      	lsls	r4, r4, #2
     160:	617c      	str	r4, [r7, #20]
	
	 SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
	 byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,cmdAdcRead_);
     162:	200f      	movs	r0, #15
     164:	210d      	movs	r1, #13
     166:	2200      	movs	r2, #0
     168:	4b0c      	ldr	r3, [pc, #48]	; (19c <readMS5607AdcResults+0x48>)
     16a:	4798      	blx	r3
	  uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     16c:	200f      	movs	r0, #15
     16e:	210e      	movs	r1, #14
     170:	4e0b      	ldr	r6, [pc, #44]	; (1a0 <readMS5607AdcResults+0x4c>)
     172:	47b0      	blx	r6
     174:	1c05      	adds	r5, r0, #0
	  uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     176:	200f      	movs	r0, #15
     178:	210e      	movs	r1, #14
     17a:	47b0      	blx	r6
     17c:	4680      	mov	r8, r0
	  uint8_t _byte3 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     17e:	200f      	movs	r0, #15
     180:	210e      	movs	r1, #14
     182:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     184:	61bc      	str	r4, [r7, #24]
	 SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
	 
	 uint32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     186:	042d      	lsls	r5, r5, #16
     188:	4643      	mov	r3, r8
     18a:	021c      	lsls	r4, r3, #8
     18c:	432c      	orrs	r4, r5
     18e:	4320      	orrs	r0, r4
	 return _receive;
}
     190:	bc04      	pop	{r2}
     192:	4690      	mov	r8, r2
     194:	bdf0      	pop	{r4, r5, r6, r7, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	41004400 	.word	0x41004400
     19c:	000006e1 	.word	0x000006e1
     1a0:	00000741 	.word	0x00000741

000001a4 <getMS5607Coeff>:

void getMS5607Coeff(uint16_t *coefficients) {
     1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1a6:	465f      	mov	r7, fp
     1a8:	4656      	mov	r6, sl
     1aa:	464d      	mov	r5, r9
     1ac:	4644      	mov	r4, r8
     1ae:	b4f0      	push	{r4, r5, r6, r7}
     1b0:	4681      	mov	r9, r0
     1b2:	2400      	movs	r4, #0

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     1b4:	4f15      	ldr	r7, [pc, #84]	; (20c <getMS5607Coeff+0x68>)
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <getMS5607Coeff+0x6c>)
     1b8:	4698      	mov	r8, r3
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1ba:	4e16      	ldr	r6, [pc, #88]	; (214 <getMS5607Coeff+0x70>)
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     1bc:	2596      	movs	r5, #150	; 0x96
     1be:	00ad      	lsls	r5, r5, #2
     1c0:	1c28      	adds	r0, r5, #0
     1c2:	47b8      	blx	r7
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     1c4:	1c28      	adds	r0, r5, #0
     1c6:	47b8      	blx	r7
    } else {
        port->OUTCLR.reg = pin_mask;
     1c8:	4d13      	ldr	r5, [pc, #76]	; (218 <getMS5607Coeff+0x74>)
     1ca:	2380      	movs	r3, #128	; 0x80
     1cc:	009b      	lsls	r3, r3, #2
     1ce:	469b      	mov	fp, r3
     1d0:	616b      	str	r3, [r5, #20]
     1d2:	1c22      	adds	r2, r4, #0
     1d4:	3a5e      	subs	r2, #94	; 0x5e
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     1d6:	b2d2      	uxtb	r2, r2
     1d8:	200f      	movs	r0, #15
     1da:	210d      	movs	r1, #13
     1dc:	47c0      	blx	r8
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1de:	200f      	movs	r0, #15
     1e0:	210e      	movs	r1, #14
     1e2:	47b0      	blx	r6
     1e4:	4682      	mov	sl, r0
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1e6:	200f      	movs	r0, #15
     1e8:	210e      	movs	r1, #14
     1ea:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     1ec:	465b      	mov	r3, fp
     1ee:	61ab      	str	r3, [r5, #24]
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
     1f0:	4653      	mov	r3, sl
     1f2:	021d      	lsls	r5, r3, #8
     1f4:	4328      	orrs	r0, r5
     1f6:	464b      	mov	r3, r9
     1f8:	5318      	strh	r0, [r3, r4]
     1fa:	3402      	adds	r4, #2
	 return _receive;
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     1fc:	2c0c      	cmp	r4, #12
     1fe:	d1dd      	bne.n	1bc <getMS5607Coeff+0x18>
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
     200:	bc3c      	pop	{r2, r3, r4, r5}
     202:	4690      	mov	r8, r2
     204:	4699      	mov	r9, r3
     206:	46a2      	mov	sl, r4
     208:	46ab      	mov	fp, r5
     20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     20c:	000009b9 	.word	0x000009b9
     210:	000006e1 	.word	0x000006e1
     214:	00000741 	.word	0x00000741
     218:	41004400 	.word	0x41004400

0000021c <ConvertPressureTemperature>:
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	4647      	mov	r7, r8
     220:	b480      	push	{r7}
     222:	b082      	sub	sp, #8
     224:	4690      	mov	r8, r2
    const uint64_t C4 = (uint64_t)(*(coefficients + 3));
    const uint64_t C5 = (uint64_t)(*(coefficients + 4));
    const uint64_t C6 = (uint64_t)(*(coefficients + 5));

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
     226:	8917      	ldrh	r7, [r2, #8]
     228:	023f      	lsls	r7, r7, #8
     22a:	680b      	ldr	r3, [r1, #0]
     22c:	1bdf      	subs	r7, r3, r7
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     22e:	17fb      	asrs	r3, r7, #31
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     230:	6804      	ldr	r4, [r0, #0]
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
    const uint64_t C3 = (uint64_t)(*(coefficients + 2));
     232:	8892      	ldrh	r2, [r2, #4]
    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
     234:	4e1c      	ldr	r6, [pc, #112]	; (2a8 <ConvertPressureTemperature+0x8c>)
     236:	1c38      	adds	r0, r7, #0
     238:	9301      	str	r3, [sp, #4]
     23a:	1c19      	adds	r1, r3, #0
     23c:	2300      	movs	r3, #0
     23e:	47b0      	blx	r6
     240:	064d      	lsls	r5, r1, #25
     242:	09c2      	lsrs	r2, r0, #7
     244:	432a      	orrs	r2, r5
     246:	09cb      	lsrs	r3, r1, #7
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
     248:	4640      	mov	r0, r8
     24a:	8805      	ldrh	r5, [r0, #0]
    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
     24c:	2100      	movs	r1, #0
     24e:	0428      	lsls	r0, r5, #16
     250:	1812      	adds	r2, r2, r0
     252:	414b      	adcs	r3, r1
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     254:	1c20      	adds	r0, r4, #0
     256:	2100      	movs	r1, #0
     258:	47b0      	blx	r6
     25a:	17cc      	asrs	r4, r1, #31
     25c:	0ae2      	lsrs	r2, r4, #11
     25e:	2300      	movs	r3, #0
     260:	1880      	adds	r0, r0, r2
     262:	4159      	adcs	r1, r3
     264:	02cb      	lsls	r3, r1, #11
     266:	0d44      	lsrs	r4, r0, #21
     268:	431c      	orrs	r4, r3
     26a:	154d      	asrs	r5, r1, #21
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
    const uint64_t C3 = (uint64_t)(*(coefficients + 2));
    const uint64_t C4 = (uint64_t)(*(coefficients + 3));
     26c:	4642      	mov	r2, r8
     26e:	88d2      	ldrh	r2, [r2, #6]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     270:	1c38      	adds	r0, r7, #0
     272:	9901      	ldr	r1, [sp, #4]
     274:	2300      	movs	r3, #0
     276:	47b0      	blx	r6
     278:	068b      	lsls	r3, r1, #26
     27a:	0986      	lsrs	r6, r0, #6
     27c:	431e      	orrs	r6, r3
     27e:	098f      	lsrs	r7, r1, #6
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
     280:	4643      	mov	r3, r8
     282:	8859      	ldrh	r1, [r3, #2]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     284:	0bcb      	lsrs	r3, r1, #15
     286:	044a      	lsls	r2, r1, #17
     288:	1992      	adds	r2, r2, r6
     28a:	417b      	adcs	r3, r7
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     28c:	1aa4      	subs	r4, r4, r2
     28e:	419d      	sbcs	r5, r3
     290:	17eb      	asrs	r3, r5, #31
     292:	0c58      	lsrs	r0, r3, #17
     294:	2100      	movs	r1, #0
     296:	1824      	adds	r4, r4, r0
     298:	414d      	adcs	r5, r1
     29a:	046b      	lsls	r3, r5, #17
     29c:	0be0      	lsrs	r0, r4, #15
     29e:	4318      	orrs	r0, r3
    return press;
}
     2a0:	b002      	add	sp, #8
     2a2:	bc04      	pop	{r2}
     2a4:	4690      	mov	r8, r2
     2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a8:	00000f3d 	.word	0x00000f3d

000002ac <pascalToCent>:

    double altFeet = (1-pow((pressMillibar/1013.25),(0.190284)))*145366.45;
    return (float)altFeet;
}

uint32_t pascalToCent(const int32_t pressurePa) {
     2ac:	b530      	push	{r4, r5, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    if (pressurePa > PA_INIT)
     2ae:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <pascalToCent+0x38>)
     2b0:	4298      	cmp	r0, r3
     2b2:	dc12      	bgt.n	2da <pascalToCent+0x2e>
        return lookupTable[0];
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
     2b4:	1a1b      	subs	r3, r3, r0
     2b6:	129b      	asrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     2b8:	2b4b      	cmp	r3, #75	; 0x4b
     2ba:	dc10      	bgt.n	2de <pascalToCent+0x32>
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     2bc:	4c0a      	ldr	r4, [pc, #40]	; (2e8 <pascalToCent+0x3c>)
     2be:	009a      	lsls	r2, r3, #2
     2c0:	5912      	ldr	r2, [r2, r4]
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
     2c2:	029d      	lsls	r5, r3, #10
     2c4:	4907      	ldr	r1, [pc, #28]	; (2e4 <pascalToCent+0x38>)
     2c6:	1b49      	subs	r1, r1, r5
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
     2c8:	1a08      	subs	r0, r1, r0
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     2ca:	3301      	adds	r3, #1
     2cc:	009b      	lsls	r3, r3, #2
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
     2ce:	591b      	ldr	r3, [r3, r4]
     2d0:	1a9b      	subs	r3, r3, r2
     2d2:	4358      	muls	r0, r3
     2d4:	1280      	asrs	r0, r0, #10
     2d6:	1880      	adds	r0, r0, r2
     2d8:	e002      	b.n	2e0 <pascalToCent+0x34>
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    if (pressurePa > PA_INIT)
        return lookupTable[0];
     2da:	4804      	ldr	r0, [pc, #16]	; (2ec <pascalToCent+0x40>)
     2dc:	e000      	b.n	2e0 <pascalToCent+0x34>
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
     2de:	4804      	ldr	r0, [pc, #16]	; (2f0 <pascalToCent+0x44>)
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
        }
    }
     2e0:	bd30      	pop	{r4, r5, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	000199cc 	.word	0x000199cc
     2e8:	00001a64 	.word	0x00001a64
     2ec:	ffff8d20 	.word	0xffff8d20
     2f0:	000f048e 	.word	0x000f048e

000002f4 <accelSample>:
int16_t Z;
float Xf;
float Yf;
float Zf;

bool accelSample() {
     2f4:	b510      	push	{r4, lr}

    switch(accelSampleState) {
     2f6:	4b4b      	ldr	r3, [pc, #300]	; (424 <accelSample+0x130>)
     2f8:	781a      	ldrb	r2, [r3, #0]
     2fa:	2a07      	cmp	r2, #7
     2fc:	d803      	bhi.n	306 <accelSample+0x12>
     2fe:	0093      	lsls	r3, r2, #2
     300:	4a49      	ldr	r2, [pc, #292]	; (428 <accelSample+0x134>)
     302:	58d3      	ldr	r3, [r2, r3]
     304:	469f      	mov	pc, r3

        return true;
        break;
		
    default:
        return false;
     306:	2000      	movs	r0, #0
     308:	e08a      	b.n	420 <accelSample+0x12c>

bool accelSample() {

    switch(accelSampleState) {
    case accelSampleEmpty:
        getADXL345Event(&regAccelData[0]);
     30a:	4848      	ldr	r0, [pc, #288]	; (42c <accelSample+0x138>)
     30c:	4b48      	ldr	r3, [pc, #288]	; (430 <accelSample+0x13c>)
     30e:	4798      	blx	r3
        accelSampleState++;
     310:	4a44      	ldr	r2, [pc, #272]	; (424 <accelSample+0x130>)
     312:	7813      	ldrb	r3, [r2, #0]
     314:	3301      	adds	r3, #1
     316:	7013      	strb	r3, [r2, #0]
        return false;
     318:	2000      	movs	r0, #0
     31a:	e081      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     31c:	4b43      	ldr	r3, [pc, #268]	; (42c <accelSample+0x138>)
     31e:	785b      	ldrb	r3, [r3, #1]
    if (negative) {
     320:	b25a      	sxtb	r2, r3
     322:	2a00      	cmp	r2, #0
     324:	da07      	bge.n	336 <accelSample+0x42>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     326:	4a43      	ldr	r2, [pc, #268]	; (434 <accelSample+0x140>)
     328:	4313      	orrs	r3, r2
     32a:	021b      	lsls	r3, r3, #8
     32c:	4a3f      	ldr	r2, [pc, #252]	; (42c <accelSample+0x138>)
     32e:	7812      	ldrb	r2, [r2, #0]
     330:	4313      	orrs	r3, r2
     332:	b29b      	uxth	r3, r3
     334:	e004      	b.n	340 <accelSample+0x4c>
    } else {
        result = (*(values + 1) << 8) + *values;
     336:	021b      	lsls	r3, r3, #8
     338:	4a3c      	ldr	r2, [pc, #240]	; (42c <accelSample+0x138>)
     33a:	7812      	ldrb	r2, [r2, #0]
     33c:	18d3      	adds	r3, r2, r3
     33e:	b29b      	uxth	r3, r3
        break;
    case accelSampleretreaved:
        X = Convert2C(&regAccelData[0]);
     340:	4a3d      	ldr	r2, [pc, #244]	; (438 <accelSample+0x144>)
     342:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     344:	2202      	movs	r2, #2
     346:	4b37      	ldr	r3, [pc, #220]	; (424 <accelSample+0x130>)
     348:	701a      	strb	r2, [r3, #0]
        return false;
     34a:	2000      	movs	r0, #0
     34c:	e068      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     34e:	4b37      	ldr	r3, [pc, #220]	; (42c <accelSample+0x138>)
     350:	78db      	ldrb	r3, [r3, #3]
    if (negative) {
     352:	b25a      	sxtb	r2, r3
     354:	2a00      	cmp	r2, #0
     356:	da07      	bge.n	368 <accelSample+0x74>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     358:	4a36      	ldr	r2, [pc, #216]	; (434 <accelSample+0x140>)
     35a:	4313      	orrs	r3, r2
     35c:	021b      	lsls	r3, r3, #8
     35e:	4a33      	ldr	r2, [pc, #204]	; (42c <accelSample+0x138>)
     360:	7892      	ldrb	r2, [r2, #2]
     362:	4313      	orrs	r3, r2
     364:	b29b      	uxth	r3, r3
     366:	e004      	b.n	372 <accelSample+0x7e>
    } else {
        result = (*(values + 1) << 8) + *values;
     368:	021b      	lsls	r3, r3, #8
     36a:	4a30      	ldr	r2, [pc, #192]	; (42c <accelSample+0x138>)
     36c:	7892      	ldrb	r2, [r2, #2]
     36e:	18d3      	adds	r3, r2, r3
     370:	b29b      	uxth	r3, r3
        break;
    case accelSampleXIntConverted:
        Y = Convert2C(&regAccelData[2]);
     372:	4a32      	ldr	r2, [pc, #200]	; (43c <accelSample+0x148>)
     374:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     376:	2203      	movs	r2, #3
     378:	4b2a      	ldr	r3, [pc, #168]	; (424 <accelSample+0x130>)
     37a:	701a      	strb	r2, [r3, #0]
        return false;
     37c:	2000      	movs	r0, #0
     37e:	e04f      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     380:	4b2a      	ldr	r3, [pc, #168]	; (42c <accelSample+0x138>)
     382:	795b      	ldrb	r3, [r3, #5]
    if (negative) {
     384:	b25a      	sxtb	r2, r3
     386:	2a00      	cmp	r2, #0
     388:	da07      	bge.n	39a <accelSample+0xa6>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     38a:	4a2a      	ldr	r2, [pc, #168]	; (434 <accelSample+0x140>)
     38c:	4313      	orrs	r3, r2
     38e:	021b      	lsls	r3, r3, #8
     390:	4a26      	ldr	r2, [pc, #152]	; (42c <accelSample+0x138>)
     392:	7912      	ldrb	r2, [r2, #4]
     394:	4313      	orrs	r3, r2
     396:	b29b      	uxth	r3, r3
     398:	e004      	b.n	3a4 <accelSample+0xb0>
    } else {
        result = (*(values + 1) << 8) + *values;
     39a:	021b      	lsls	r3, r3, #8
     39c:	4a23      	ldr	r2, [pc, #140]	; (42c <accelSample+0x138>)
     39e:	7912      	ldrb	r2, [r2, #4]
     3a0:	18d3      	adds	r3, r2, r3
     3a2:	b29b      	uxth	r3, r3
        break;
    case accelSampleYIntConverted:
        Z = Convert2C(&regAccelData[4]);
     3a4:	4a26      	ldr	r2, [pc, #152]	; (440 <accelSample+0x14c>)
     3a6:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     3a8:	2204      	movs	r2, #4
     3aa:	4b1e      	ldr	r3, [pc, #120]	; (424 <accelSample+0x130>)
     3ac:	701a      	strb	r2, [r3, #0]
        return false;
     3ae:	2000      	movs	r0, #0
     3b0:	e036      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleZIntConverted:
        Xf = X * ADXL345_MG2G_MULTIPLIER;
     3b2:	4b21      	ldr	r3, [pc, #132]	; (438 <accelSample+0x144>)
     3b4:	2000      	movs	r0, #0
     3b6:	5e18      	ldrsh	r0, [r3, r0]
     3b8:	4b22      	ldr	r3, [pc, #136]	; (444 <accelSample+0x150>)
     3ba:	4798      	blx	r3
     3bc:	4a22      	ldr	r2, [pc, #136]	; (448 <accelSample+0x154>)
     3be:	4b23      	ldr	r3, [pc, #140]	; (44c <accelSample+0x158>)
     3c0:	4c23      	ldr	r4, [pc, #140]	; (450 <accelSample+0x15c>)
     3c2:	47a0      	blx	r4
     3c4:	4b23      	ldr	r3, [pc, #140]	; (454 <accelSample+0x160>)
     3c6:	4798      	blx	r3
     3c8:	4b23      	ldr	r3, [pc, #140]	; (458 <accelSample+0x164>)
     3ca:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     3cc:	2205      	movs	r2, #5
     3ce:	4b15      	ldr	r3, [pc, #84]	; (424 <accelSample+0x130>)
     3d0:	701a      	strb	r2, [r3, #0]
        return false;
     3d2:	2000      	movs	r0, #0
     3d4:	e024      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleXFloatConverted:
        Yf = Y * ADXL345_MG2G_MULTIPLIER;
     3d6:	4b19      	ldr	r3, [pc, #100]	; (43c <accelSample+0x148>)
     3d8:	2000      	movs	r0, #0
     3da:	5e18      	ldrsh	r0, [r3, r0]
     3dc:	4b19      	ldr	r3, [pc, #100]	; (444 <accelSample+0x150>)
     3de:	4798      	blx	r3
     3e0:	4a19      	ldr	r2, [pc, #100]	; (448 <accelSample+0x154>)
     3e2:	4b1a      	ldr	r3, [pc, #104]	; (44c <accelSample+0x158>)
     3e4:	4c1a      	ldr	r4, [pc, #104]	; (450 <accelSample+0x15c>)
     3e6:	47a0      	blx	r4
     3e8:	4b1a      	ldr	r3, [pc, #104]	; (454 <accelSample+0x160>)
     3ea:	4798      	blx	r3
     3ec:	4b1b      	ldr	r3, [pc, #108]	; (45c <accelSample+0x168>)
     3ee:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     3f0:	2206      	movs	r2, #6
     3f2:	4b0c      	ldr	r3, [pc, #48]	; (424 <accelSample+0x130>)
     3f4:	701a      	strb	r2, [r3, #0]
        return false;
     3f6:	2000      	movs	r0, #0
     3f8:	e012      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleYFloatConverted:
        Zf = Z * ADXL345_MG2G_MULTIPLIER;
     3fa:	4b11      	ldr	r3, [pc, #68]	; (440 <accelSample+0x14c>)
     3fc:	2000      	movs	r0, #0
     3fe:	5e18      	ldrsh	r0, [r3, r0]
     400:	4b10      	ldr	r3, [pc, #64]	; (444 <accelSample+0x150>)
     402:	4798      	blx	r3
     404:	4a10      	ldr	r2, [pc, #64]	; (448 <accelSample+0x154>)
     406:	4b11      	ldr	r3, [pc, #68]	; (44c <accelSample+0x158>)
     408:	4c11      	ldr	r4, [pc, #68]	; (450 <accelSample+0x15c>)
     40a:	47a0      	blx	r4
     40c:	4b11      	ldr	r3, [pc, #68]	; (454 <accelSample+0x160>)
     40e:	4798      	blx	r3
     410:	4b13      	ldr	r3, [pc, #76]	; (460 <accelSample+0x16c>)
     412:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     414:	2207      	movs	r2, #7
     416:	4b03      	ldr	r3, [pc, #12]	; (424 <accelSample+0x130>)
     418:	701a      	strb	r2, [r3, #0]
        return false;
     41a:	2000      	movs	r0, #0
     41c:	e000      	b.n	420 <accelSample+0x12c>
        break;
    case accelSapleCooked:

        return true;
     41e:	2001      	movs	r0, #1
        return false;
        break;

    }

}
     420:	bd10      	pop	{r4, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	2000005a 	.word	0x2000005a
     428:	00001b98 	.word	0x00001b98
     42c:	20000054 	.word	0x20000054
     430:	00000115 	.word	0x00000115
     434:	ffffff00 	.word	0xffffff00
     438:	2000005c 	.word	0x2000005c
     43c:	20000040 	.word	0x20000040
     440:	20000050 	.word	0x20000050
     444:	00001531 	.word	0x00001531
     448:	8e8a71de 	.word	0x8e8a71de
     44c:	3f6ff2e4 	.word	0x3f6ff2e4
     450:	00000ffd 	.word	0x00000ffd
     454:	000015a9 	.word	0x000015a9
     458:	20000048 	.word	0x20000048
     45c:	2000004c 	.word	0x2000004c
     460:	20000044 	.word	0x20000044

00000464 <initAccelerometer>:





void initAccelerometer(struct AccelerometerModule *myAccelerometer) {
     464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     466:	1c07      	adds	r7, r0, #0

    accelSampleState = accelSampleEmpty;
     468:	2200      	movs	r2, #0
     46a:	4b20      	ldr	r3, [pc, #128]	; (4ec <initAccelerometer+0x88>)
     46c:	701a      	strb	r2, [r3, #0]



#ifdef HAS_ADXL345

    SaLPinMode(ADXL345_SLAVE_SELECT_PIN,OUTPUT);
     46e:	2010      	movs	r0, #16
     470:	2101      	movs	r1, #1
     472:	4e1f      	ldr	r6, [pc, #124]	; (4f0 <initAccelerometer+0x8c>)
     474:	47b0      	blx	r6
     476:	4c1f      	ldr	r4, [pc, #124]	; (4f4 <initAccelerometer+0x90>)
     478:	2580      	movs	r5, #128	; 0x80
     47a:	026d      	lsls	r5, r5, #9
     47c:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
    SaLPinMode(ADXL345_MOSI_PIN,OUTPUT);
     47e:	200d      	movs	r0, #13
     480:	2101      	movs	r1, #1
     482:	47b0      	blx	r6
    SaLPinMode(ADXL345_SCK_PIN,OUTPUT);
     484:	200f      	movs	r0, #15
     486:	2101      	movs	r1, #1
     488:	47b0      	blx	r6
    SaLPinMode(ADXL345_MISO_PIN,INPUT);
     48a:	200e      	movs	r0, #14
     48c:	2100      	movs	r1, #0
     48e:	47b0      	blx	r6

    myAccelerometer->rate_ = MY_ADXL345_DATA_RATE;
     490:	230e      	movs	r3, #14
     492:	707b      	strb	r3, [r7, #1]
    myAccelerometer->range_ = MY_ADXL345_RANGE;
     494:	3b06      	subs	r3, #6
     496:	703b      	strb	r3, [r7, #0]
    } else {
        port->OUTCLR.reg = pin_mask;
     498:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     49a:	200f      	movs	r0, #15
     49c:	210d      	movs	r1, #13
     49e:	222d      	movs	r2, #45	; 0x2d
     4a0:	4e15      	ldr	r6, [pc, #84]	; (4f8 <initAccelerometer+0x94>)
     4a2:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x00); // disable
     4a4:	200f      	movs	r0, #15
     4a6:	210d      	movs	r1, #13
     4a8:	2200      	movs	r2, #0
     4aa:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4ac:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4ae:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     4b0:	200f      	movs	r0, #15
     4b2:	210d      	movs	r1, #13
     4b4:	222c      	movs	r2, #44	; 0x2c
     4b6:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->rate_);
     4b8:	787a      	ldrb	r2, [r7, #1]
     4ba:	200f      	movs	r0, #15
     4bc:	210d      	movs	r1, #13
     4be:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4c0:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4c2:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     4c4:	200f      	movs	r0, #15
     4c6:	210d      	movs	r1, #13
     4c8:	222c      	movs	r2, #44	; 0x2c
     4ca:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->range_);
     4cc:	783a      	ldrb	r2, [r7, #0]
     4ce:	200f      	movs	r0, #15
     4d0:	210d      	movs	r1, #13
     4d2:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4d4:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4d6:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     4d8:	200f      	movs	r0, #15
     4da:	210d      	movs	r1, #13
     4dc:	222d      	movs	r2, #45	; 0x2d
     4de:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x08); // enable
     4e0:	200f      	movs	r0, #15
     4e2:	210d      	movs	r1, #13
     4e4:	2208      	movs	r2, #8
     4e6:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4e8:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

#endif

}
     4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4ec:	2000005a 	.word	0x2000005a
     4f0:	000009e5 	.word	0x000009e5
     4f4:	41004400 	.word	0x41004400
     4f8:	000006e1 	.word	0x000006e1

000004fc <SaLGetAccelX>:


float SaLGetAccelX(){
	return Xf;
     4fc:	4b01      	ldr	r3, [pc, #4]	; (504 <SaLGetAccelX+0x8>)
     4fe:	6818      	ldr	r0, [r3, #0]
}
     500:	4770      	bx	lr
     502:	46c0      	nop			; (mov r8, r8)
     504:	20000048 	.word	0x20000048

00000508 <SaLGetAccelY>:
float SaLGetAccelY(){
	return Yf;
     508:	4b01      	ldr	r3, [pc, #4]	; (510 <SaLGetAccelY+0x8>)
     50a:	6818      	ldr	r0, [r3, #0]
}
     50c:	4770      	bx	lr
     50e:	46c0      	nop			; (mov r8, r8)
     510:	2000004c 	.word	0x2000004c

00000514 <SaLGetAccelZ>:
float SaLGetAccelZ(){
	return Zf;
     514:	4b01      	ldr	r3, [pc, #4]	; (51c <SaLGetAccelZ+0x8>)
     516:	6818      	ldr	r0, [r3, #0]
     518:	4770      	bx	lr
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	20000044 	.word	0x20000044

00000520 <initBarometer>:
        break;
    };
};


void initBarometer() {
     520:	b538      	push	{r3, r4, r5, lr}

    baroSampleState = baroSampleEmpty;
     522:	2200      	movs	r2, #0
     524:	4b11      	ldr	r3, [pc, #68]	; (56c <initBarometer+0x4c>)
     526:	701a      	strb	r2, [r3, #0]

#ifdef HAS_MS5607
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     528:	2009      	movs	r0, #9
     52a:	2101      	movs	r1, #1
     52c:	4c10      	ldr	r4, [pc, #64]	; (570 <initBarometer+0x50>)
     52e:	47a0      	blx	r4
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,TRUE);
     530:	2009      	movs	r0, #9
     532:	2101      	movs	r1, #1
     534:	47a0      	blx	r4
    SaLPinMode(MS5607_MOSI_PIN,OUTPUT);
     536:	200d      	movs	r0, #13
     538:	2101      	movs	r1, #1
     53a:	47a0      	blx	r4
    SaLPinMode(MS5607_SCK_PIN,OUTPUT);
     53c:	200f      	movs	r0, #15
     53e:	2101      	movs	r1, #1
     540:	47a0      	blx	r4
    SaLPinMode(MS5607_MISO_PIN,INPUT);
     542:	200e      	movs	r0, #14
     544:	2100      	movs	r1, #0
     546:	47a0      	blx	r4
    } else {
        port->OUTCLR.reg = pin_mask;
     548:	4c0a      	ldr	r4, [pc, #40]	; (574 <initBarometer+0x54>)
     54a:	2580      	movs	r5, #128	; 0x80
     54c:	00ad      	lsls	r5, r5, #2
     54e:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,MS5607_CMD_RES);
     550:	200f      	movs	r0, #15
     552:	210d      	movs	r1, #13
     554:	221e      	movs	r2, #30
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <initBarometer+0x58>)
     558:	4798      	blx	r3
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     55a:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
    delay_us(600);
     55c:	2096      	movs	r0, #150	; 0x96
     55e:	0080      	lsls	r0, r0, #2
     560:	4b06      	ldr	r3, [pc, #24]	; (57c <initBarometer+0x5c>)
     562:	4798      	blx	r3
    getMS5607Coeff(&coefficients_[0]);
     564:	4806      	ldr	r0, [pc, #24]	; (580 <initBarometer+0x60>)
     566:	4b07      	ldr	r3, [pc, #28]	; (584 <initBarometer+0x64>)
     568:	4798      	blx	r3
#endif

}
     56a:	bd38      	pop	{r3, r4, r5, pc}
     56c:	20000070 	.word	0x20000070
     570:	000009e5 	.word	0x000009e5
     574:	41004400 	.word	0x41004400
     578:	000006e1 	.word	0x000006e1
     57c:	000009b9 	.word	0x000009b9
     580:	20000034 	.word	0x20000034
     584:	000001a5 	.word	0x000001a5

00000588 <sendMS5607D2ReadReq>:

void sendMS5607D2ReadReq(uint8_t _cmd) {
     588:	b538      	push	{r3, r4, r5, lr}
     58a:	1c02      	adds	r2, r0, #0
    } else {
        port->OUTCLR.reg = pin_mask;
     58c:	4c04      	ldr	r4, [pc, #16]	; (5a0 <sendMS5607D2ReadReq+0x18>)
     58e:	2580      	movs	r5, #128	; 0x80
     590:	00ad      	lsls	r5, r5, #2
     592:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     594:	200f      	movs	r0, #15
     596:	210d      	movs	r1, #13
     598:	4b02      	ldr	r3, [pc, #8]	; (5a4 <sendMS5607D2ReadReq+0x1c>)
     59a:	4798      	blx	r3
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     59c:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
     59e:	bd38      	pop	{r3, r4, r5, pc}
     5a0:	41004400 	.word	0x41004400
     5a4:	000006e1 	.word	0x000006e1

000005a8 <baroSample>:
uint32_t mills;
enum baroSampleState baroSampleState;

uint16_t hits;

bool baroSample(void) {
     5a8:	b508      	push	{r3, lr}

    switch (baroSampleState) {
     5aa:	4b3c      	ldr	r3, [pc, #240]	; (69c <baroSample+0xf4>)
     5ac:	781a      	ldrb	r2, [r3, #0]
     5ae:	2a08      	cmp	r2, #8
     5b0:	d803      	bhi.n	5ba <baroSample+0x12>
     5b2:	0093      	lsls	r3, r2, #2
     5b4:	4a3a      	ldr	r2, [pc, #232]	; (6a0 <baroSample+0xf8>)
     5b6:	58d3      	ldr	r3, [r2, r3]
     5b8:	469f      	mov	pc, r3
    case baroSampleHeightCalculated:
        //some kind of baroSamplePut(currentAltinCm);
        return true;
        break;
    default:
        return false;
     5ba:	2000      	movs	r0, #0
     5bc:	e06d      	b.n	69a <baroSample+0xf2>

bool baroSample(void) {

    switch (baroSampleState) {
    case baroSampleEmpty:
        sendMS5607D2ReadReq(cmdAdcD1_);
     5be:	2040      	movs	r0, #64	; 0x40
     5c0:	4b38      	ldr	r3, [pc, #224]	; (6a4 <baroSample+0xfc>)
     5c2:	4798      	blx	r3
        baroSampleState++;
     5c4:	4a35      	ldr	r2, [pc, #212]	; (69c <baroSample+0xf4>)
     5c6:	7813      	ldrb	r3, [r2, #0]
     5c8:	3301      	adds	r3, #1
     5ca:	7013      	strb	r3, [r2, #0]
        mills = millis();
     5cc:	4b36      	ldr	r3, [pc, #216]	; (6a8 <baroSample+0x100>)
     5ce:	4798      	blx	r3
     5d0:	4b36      	ldr	r3, [pc, #216]	; (6ac <baroSample+0x104>)
     5d2:	6018      	str	r0, [r3, #0]
        return false;
     5d4:	2000      	movs	r0, #0
     5d6:	e060      	b.n	69a <baroSample+0xf2>
        break;
    case baroSamplePressureRequested:
        //timer interrupt will send baroSampleState++
        if (millis() - mills > 22) {
     5d8:	4b33      	ldr	r3, [pc, #204]	; (6a8 <baroSample+0x100>)
     5da:	4798      	blx	r3
     5dc:	4b33      	ldr	r3, [pc, #204]	; (6ac <baroSample+0x104>)
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	1ac0      	subs	r0, r0, r3
     5e2:	2816      	cmp	r0, #22
     5e4:	d905      	bls.n	5f2 <baroSample+0x4a>
            baroSampleState++;
     5e6:	4a2d      	ldr	r2, [pc, #180]	; (69c <baroSample+0xf4>)
     5e8:	7813      	ldrb	r3, [r2, #0]
     5ea:	3301      	adds	r3, #1
     5ec:	7013      	strb	r3, [r2, #0]
        } else {
            hits++;
        }
        return false;
     5ee:	2000      	movs	r0, #0
     5f0:	e053      	b.n	69a <baroSample+0xf2>
    case baroSamplePressureRequested:
        //timer interrupt will send baroSampleState++
        if (millis() - mills > 22) {
            baroSampleState++;
        } else {
            hits++;
     5f2:	4a2f      	ldr	r2, [pc, #188]	; (6b0 <baroSample+0x108>)
     5f4:	8813      	ldrh	r3, [r2, #0]
     5f6:	3301      	adds	r3, #1
     5f8:	8013      	strh	r3, [r2, #0]
        }
        return false;
     5fa:	2000      	movs	r0, #0
     5fc:	e04d      	b.n	69a <baroSample+0xf2>
        break;
    case baroSamplePressureReady:
        pressure = readMS5607AdcResults();
     5fe:	4b2d      	ldr	r3, [pc, #180]	; (6b4 <baroSample+0x10c>)
     600:	4798      	blx	r3
     602:	4b2d      	ldr	r3, [pc, #180]	; (6b8 <baroSample+0x110>)
     604:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     606:	4a25      	ldr	r2, [pc, #148]	; (69c <baroSample+0xf4>)
     608:	7813      	ldrb	r3, [r2, #0]
     60a:	3301      	adds	r3, #1
     60c:	7013      	strb	r3, [r2, #0]
        return false;
     60e:	2000      	movs	r0, #0
     610:	e043      	b.n	69a <baroSample+0xf2>
        break;
    case baroSamplePressureRetreaved:
        sendMS5607D2ReadReq(cmdAdcD2_);
     612:	2050      	movs	r0, #80	; 0x50
     614:	4b23      	ldr	r3, [pc, #140]	; (6a4 <baroSample+0xfc>)
     616:	4798      	blx	r3
        baroSampleState++;
     618:	4a20      	ldr	r2, [pc, #128]	; (69c <baroSample+0xf4>)
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	3301      	adds	r3, #1
     61e:	7013      	strb	r3, [r2, #0]
        mills = millis();
     620:	4b21      	ldr	r3, [pc, #132]	; (6a8 <baroSample+0x100>)
     622:	4798      	blx	r3
     624:	4b21      	ldr	r3, [pc, #132]	; (6ac <baroSample+0x104>)
     626:	6018      	str	r0, [r3, #0]
        return false;
     628:	2000      	movs	r0, #0
     62a:	e036      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRequested:
        if (millis() - mills > 22) {
     62c:	4b1e      	ldr	r3, [pc, #120]	; (6a8 <baroSample+0x100>)
     62e:	4798      	blx	r3
     630:	4b1e      	ldr	r3, [pc, #120]	; (6ac <baroSample+0x104>)
     632:	681b      	ldr	r3, [r3, #0]
     634:	1ac0      	subs	r0, r0, r3
     636:	2816      	cmp	r0, #22
     638:	d905      	bls.n	646 <baroSample+0x9e>
            baroSampleState++;
     63a:	4a18      	ldr	r2, [pc, #96]	; (69c <baroSample+0xf4>)
     63c:	7813      	ldrb	r3, [r2, #0]
     63e:	3301      	adds	r3, #1
     640:	7013      	strb	r3, [r2, #0]
        } else {
            hits++;
        }
        return false;
     642:	2000      	movs	r0, #0
     644:	e029      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRequested:
        if (millis() - mills > 22) {
            baroSampleState++;
        } else {
            hits++;
     646:	4a1a      	ldr	r2, [pc, #104]	; (6b0 <baroSample+0x108>)
     648:	8813      	ldrh	r3, [r2, #0]
     64a:	3301      	adds	r3, #1
     64c:	8013      	strh	r3, [r2, #0]
        }
        return false;
     64e:	2000      	movs	r0, #0
     650:	e023      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleTemperatureReady:
        temperature = readMS5607AdcResults();
     652:	4b18      	ldr	r3, [pc, #96]	; (6b4 <baroSample+0x10c>)
     654:	4798      	blx	r3
     656:	4b19      	ldr	r3, [pc, #100]	; (6bc <baroSample+0x114>)
     658:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     65a:	4a10      	ldr	r2, [pc, #64]	; (69c <baroSample+0xf4>)
     65c:	7813      	ldrb	r3, [r2, #0]
     65e:	3301      	adds	r3, #1
     660:	7013      	strb	r3, [r2, #0]
        return false;
     662:	2000      	movs	r0, #0
     664:	e019      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRetreaved:
        pascelFromPresTempConv = ConvertPressureTemperature(&pressure, &temperature,&coefficients_[0]);
     666:	4814      	ldr	r0, [pc, #80]	; (6b8 <baroSample+0x110>)
     668:	4914      	ldr	r1, [pc, #80]	; (6bc <baroSample+0x114>)
     66a:	4a15      	ldr	r2, [pc, #84]	; (6c0 <baroSample+0x118>)
     66c:	4b15      	ldr	r3, [pc, #84]	; (6c4 <baroSample+0x11c>)
     66e:	4798      	blx	r3
     670:	4b15      	ldr	r3, [pc, #84]	; (6c8 <baroSample+0x120>)
     672:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     674:	4a09      	ldr	r2, [pc, #36]	; (69c <baroSample+0xf4>)
     676:	7813      	ldrb	r3, [r2, #0]
     678:	3301      	adds	r3, #1
     67a:	7013      	strb	r3, [r2, #0]
        return false;
     67c:	2000      	movs	r0, #0
     67e:	e00c      	b.n	69a <baroSample+0xf2>
        break;
    case baroSamplePascelCalculated:
        currentAltinCm = pascalToCent(pascelFromPresTempConv);
     680:	4b11      	ldr	r3, [pc, #68]	; (6c8 <baroSample+0x120>)
     682:	6818      	ldr	r0, [r3, #0]
     684:	4b11      	ldr	r3, [pc, #68]	; (6cc <baroSample+0x124>)
     686:	4798      	blx	r3
     688:	4b11      	ldr	r3, [pc, #68]	; (6d0 <baroSample+0x128>)
     68a:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     68c:	4a03      	ldr	r2, [pc, #12]	; (69c <baroSample+0xf4>)
     68e:	7813      	ldrb	r3, [r2, #0]
     690:	3301      	adds	r3, #1
     692:	7013      	strb	r3, [r2, #0]
        return false;
     694:	2000      	movs	r0, #0
     696:	e000      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleHeightCalculated:
        //some kind of baroSamplePut(currentAltinCm);
        return true;
     698:	2001      	movs	r0, #1
        break;
    default:
        return false;
        break;
    };
};
     69a:	bd08      	pop	{r3, pc}
     69c:	20000070 	.word	0x20000070
     6a0:	00001bb8 	.word	0x00001bb8
     6a4:	00000589 	.word	0x00000589
     6a8:	0000095d 	.word	0x0000095d
     6ac:	2000006c 	.word	0x2000006c
     6b0:	20000068 	.word	0x20000068
     6b4:	00000155 	.word	0x00000155
     6b8:	20000064 	.word	0x20000064
     6bc:	20000060 	.word	0x20000060
     6c0:	20000034 	.word	0x20000034
     6c4:	0000021d 	.word	0x0000021d
     6c8:	20000078 	.word	0x20000078
     6cc:	000002ad 	.word	0x000002ad
     6d0:	20000074 	.word	0x20000074

000006d4 <SaLBaroGetHeight>:
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}


uint32_t SaLBaroGetHeight() {
    return currentAltinCm;
     6d4:	4b01      	ldr	r3, [pc, #4]	; (6dc <SaLBaroGetHeight+0x8>)
     6d6:	6818      	ldr	r0, [r3, #0]
     6d8:	4770      	bx	lr
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	20000074 	.word	0x20000074

000006e0 <byteOut>:



void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {
     6e0:	b570      	push	{r4, r5, r6, lr}
     6e2:	09c3      	lsrs	r3, r0, #7
     6e4:	2400      	movs	r4, #0
     6e6:	2b00      	cmp	r3, #0
     6e8:	d104      	bne.n	6f4 <byteOut+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     6ea:	0944      	lsrs	r4, r0, #5
     6ec:	01e4      	lsls	r4, r4, #7
     6ee:	4b13      	ldr	r3, [pc, #76]	; (73c <byteOut+0x5c>)
     6f0:	469c      	mov	ip, r3
     6f2:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     6f4:	231f      	movs	r3, #31
     6f6:	4018      	ands	r0, r3
     6f8:	3b1e      	subs	r3, #30
     6fa:	4083      	lsls	r3, r0
     6fc:	1c18      	adds	r0, r3, #0
     6fe:	09cb      	lsrs	r3, r1, #7
     700:	2600      	movs	r6, #0
     702:	2b00      	cmp	r3, #0
     704:	d104      	bne.n	710 <byteOut+0x30>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     706:	094e      	lsrs	r6, r1, #5
     708:	01f6      	lsls	r6, r6, #7
     70a:	4b0c      	ldr	r3, [pc, #48]	; (73c <byteOut+0x5c>)
     70c:	469c      	mov	ip, r3
     70e:	4466      	add	r6, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     710:	231f      	movs	r3, #31
     712:	4019      	ands	r1, r3
     714:	3b1e      	subs	r3, #30
     716:	408b      	lsls	r3, r1
     718:	1c19      	adds	r1, r3, #0
     71a:	2308      	movs	r3, #8


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     71c:	6160      	str	r0, [r4, #20]

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        if (byte & 0x80) {
     71e:	b255      	sxtb	r5, r2
     720:	2d00      	cmp	r5, #0
     722:	da01      	bge.n	728 <byteOut+0x48>
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     724:	61b1      	str	r1, [r6, #24]
     726:	e000      	b.n	72a <byteOut+0x4a>
    } else {
        port->OUTCLR.reg = pin_mask;
     728:	6171      	str	r1, [r6, #20]
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     72a:	61a0      	str	r0, [r4, #24]
            SaLDigitalOut(MOSI_PIN,true);
        } else {
            SaLDigitalOut(MOSI_PIN,false);
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
     72c:	0052      	lsls	r2, r2, #1
     72e:	b2d2      	uxtb	r2, r2
     730:	3b01      	subs	r3, #1
     732:	b2db      	uxtb	r3, r3

void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     734:	2b00      	cmp	r3, #0
     736:	d1f1      	bne.n	71c <byteOut+0x3c>
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
    }

}
     738:	bd70      	pop	{r4, r5, r6, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	41004400 	.word	0x41004400

00000740 <getByte>:
    }

}

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	09c3      	lsrs	r3, r0, #7
     744:	2400      	movs	r4, #0
     746:	2b00      	cmp	r3, #0
     748:	d104      	bne.n	754 <getByte+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     74a:	0944      	lsrs	r4, r0, #5
     74c:	01e4      	lsls	r4, r4, #7
     74e:	4b12      	ldr	r3, [pc, #72]	; (798 <getByte+0x58>)
     750:	469c      	mov	ip, r3
     752:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     754:	251f      	movs	r5, #31
     756:	4028      	ands	r0, r5
     758:	3d1e      	subs	r5, #30
     75a:	4085      	lsls	r5, r0
     75c:	09cb      	lsrs	r3, r1, #7
     75e:	2600      	movs	r6, #0
     760:	2b00      	cmp	r3, #0
     762:	d104      	bne.n	76e <getByte+0x2e>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     764:	094e      	lsrs	r6, r1, #5
     766:	01f6      	lsls	r6, r6, #7
     768:	4b0b      	ldr	r3, [pc, #44]	; (798 <getByte+0x58>)
     76a:	469c      	mov	ip, r3
     76c:	4466      	add	r6, ip
    }
}

static inline bool SaLDigitalIn(uint8_t pin) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     76e:	231f      	movs	r3, #31
     770:	4019      	ands	r1, r3
     772:	3b1e      	subs	r3, #30
     774:	408b      	lsls	r3, r1
     776:	1c19      	adds	r1, r3, #0
     778:	2208      	movs	r2, #8
    uint8_t byte = 0x00;
     77a:	2000      	movs	r0, #0


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     77c:	6165      	str	r5, [r4, #20]
}

static inline bool SaLDigitalIn(uint8_t pin) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
    bool level = (port->IN.reg & pin_mask);
     77e:	6a33      	ldr	r3, [r6, #32]
     780:	400b      	ands	r3, r1
     782:	1e5f      	subs	r7, r3, #1
     784:	41bb      	sbcs	r3, r7

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
     786:	0040      	lsls	r0, r0, #1
     788:	4318      	orrs	r0, r3
     78a:	b2c0      	uxtb	r0, r0
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     78c:	61a5      	str	r5, [r4, #24]
     78e:	3a01      	subs	r2, #1
     790:	b2d2      	uxtb	r2, r2

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
    uint8_t byte = 0x00;

    for (uint8_t i = 0; i<8; ++i) {
     792:	2a00      	cmp	r2, #0
     794:	d1f2      	bne.n	77c <getByte+0x3c>
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
        SaLDigitalOut(SCK_PIN,TRUE);
    }
    return byte;
}
     796:	bdf0      	pop	{r4, r5, r6, r7, pc}
     798:	41004400 	.word	0x41004400

0000079c <SalGclkInit>:

#include <SaLClocks.h>


void SalGclkInit() {
     79c:	b510      	push	{r4, lr}

    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     79e:	4a2a      	ldr	r2, [pc, #168]	; (848 <SalGclkInit+0xac>)
     7a0:	23c2      	movs	r3, #194	; 0xc2
     7a2:	00db      	lsls	r3, r3, #3
     7a4:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     7a6:	4929      	ldr	r1, [pc, #164]	; (84c <SalGclkInit+0xb0>)
     7a8:	6848      	ldr	r0, [r1, #4]
     7aa:	2302      	movs	r3, #2
     7ac:	4303      	orrs	r3, r0
     7ae:	604b      	str	r3, [r1, #4]

// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     7b0:	4b27      	ldr	r3, [pc, #156]	; (850 <SalGclkInit+0xb4>)
     7b2:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);
//wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     7b4:	1c11      	adds	r1, r2, #0
     7b6:	2202      	movs	r2, #2
     7b8:	68cb      	ldr	r3, [r1, #12]
     7ba:	421a      	tst	r2, r3
     7bc:	d0fc      	beq.n	7b8 <SalGclkInit+0x1c>

//config xosc32k for the dfll via gen1
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(1) |
     7be:	4b25      	ldr	r3, [pc, #148]	; (854 <SalGclkInit+0xb8>)
     7c0:	2202      	movs	r2, #2
     7c2:	32ff      	adds	r2, #255	; 0xff
     7c4:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) |
     7c6:	4a24      	ldr	r2, [pc, #144]	; (858 <SalGclkInit+0xbc>)
     7c8:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_XOSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(1) |
     7ca:	2282      	movs	r2, #130	; 0x82
     7cc:	01d2      	lsls	r2, r2, #7
     7ce:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_ID_DFLL48;

    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(2) |
     7d0:	2281      	movs	r2, #129	; 0x81
     7d2:	0052      	lsls	r2, r2, #1
     7d4:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     7d6:	4a21      	ldr	r2, [pc, #132]	; (85c <SalGclkInit+0xc0>)
     7d8:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(2) |
     7da:	4a21      	ldr	r2, [pc, #132]	; (860 <SalGclkInit+0xc4>)
     7dc:	805a      	strh	r2, [r3, #2]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     7de:	4b21      	ldr	r3, [pc, #132]	; (864 <SalGclkInit+0xc8>)
     7e0:	681b      	ldr	r3, [r3, #0]
     7e2:	0e9b      	lsrs	r3, r3, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     7e4:	2b3f      	cmp	r3, #63	; 0x3f
     7e6:	d100      	bne.n	7ea <SalGclkInit+0x4e>
        coarse = 0x1f;
     7e8:	3b20      	subs	r3, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     7ea:	4a1f      	ldr	r2, [pc, #124]	; (868 <SalGclkInit+0xcc>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     7ec:	6812      	ldr	r2, [r2, #0]
     7ee:	0592      	lsls	r2, r2, #22
     7f0:	0d92      	lsrs	r2, r2, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     7f2:	491e      	ldr	r1, [pc, #120]	; (86c <SalGclkInit+0xd0>)
     7f4:	428a      	cmp	r2, r1
     7f6:	d100      	bne.n	7fa <SalGclkInit+0x5e>
        fine = 0x1ff;
     7f8:	4a1d      	ldr	r2, [pc, #116]	; (870 <SalGclkInit+0xd4>)
    }
//For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     7fa:	4916      	ldr	r1, [pc, #88]	; (854 <SalGclkInit+0xb8>)
     7fc:	2080      	movs	r0, #128	; 0x80
     7fe:	0040      	lsls	r0, r0, #1
     800:	6088      	str	r0, [r1, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     802:	481c      	ldr	r0, [pc, #112]	; (874 <SalGclkInit+0xd8>)
     804:	6048      	str	r0, [r1, #4]
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN ) ;
     806:	2080      	movs	r0, #128	; 0x80
     808:	01c0      	lsls	r0, r0, #7
     80a:	8048      	strh	r0, [r1, #2]

    SYSCTRL->DFLLCTRL.reg = (SYSCTRL_DFLLCTRL_ENABLE); //Enable the DFLL
     80c:	490e      	ldr	r1, [pc, #56]	; (848 <SalGclkInit+0xac>)
     80e:	2002      	movs	r0, #2
     810:	8488      	strh	r0, [r1, #36]	; 0x24
    SYSCTRL->DFLLCTRL.reg |= (SYSCTRL_DFLLCTRL_MODE);
     812:	8c8c      	ldrh	r4, [r1, #36]	; 0x24
     814:	3002      	adds	r0, #2
     816:	4320      	orrs	r0, r4
     818:	8488      	strh	r0, [r1, #36]	; 0x24
    SYSCTRL->DFLLMUL.reg = (SYSCTRL_DFLLMUL_CSTEP(coarse) | SYSCTRL_DFLLMUL_FSTEP(fine));
     81a:	0412      	lsls	r2, r2, #16
     81c:	069b      	lsls	r3, r3, #26
     81e:	431a      	orrs	r2, r3
     820:	62ca      	str	r2, [r1, #44]	; 0x2c
    SYSCTRL->DFLLMUL.reg |= (SYSCTRL_DFLLMUL_MUL(1280));
     822:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     824:	22a0      	movs	r2, #160	; 0xa0
     826:	00d2      	lsls	r2, r2, #3
     828:	4313      	orrs	r3, r2
     82a:	62cb      	str	r3, [r1, #44]	; 0x2c

//Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     82c:	2210      	movs	r2, #16
     82e:	68cb      	ldr	r3, [r1, #12]
     830:	421a      	tst	r2, r3
     832:	d0fc      	beq.n	82e <SalGclkInit+0x92>


    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(4) |
     834:	4b07      	ldr	r3, [pc, #28]	; (854 <SalGclkInit+0xb8>)
     836:	2282      	movs	r2, #130	; 0x82
     838:	0052      	lsls	r2, r2, #1
     83a:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(4) |
     83c:	4a0e      	ldr	r2, [pc, #56]	; (878 <SalGclkInit+0xdc>)
     83e:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC4_TC5 |
     840:	4a0e      	ldr	r2, [pc, #56]	; (87c <SalGclkInit+0xe0>)
     842:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_GEN_GCLK3 |
                        GCLK_CLKCTRL_CLKEN;

}
     844:	bd10      	pop	{r4, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	40000800 	.word	0x40000800
     84c:	41004000 	.word	0x41004000
     850:	0000060e 	.word	0x0000060e
     854:	40000c00 	.word	0x40000c00
     858:	00010501 	.word	0x00010501
     85c:	00010402 	.word	0x00010402
     860:	0000421b 	.word	0x0000421b
     864:	00806024 	.word	0x00806024
     868:	00806028 	.word	0x00806028
     86c:	000003ff 	.word	0x000003ff
     870:	000001ff 	.word	0x000001ff
     874:	00010700 	.word	0x00010700
     878:	00230604 	.word	0x00230604
     87c:	0000431c 	.word	0x0000431c

00000880 <SaLTC4Init>:

void SaLTC4Init() {

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     880:	4a0a      	ldr	r2, [pc, #40]	; (8ac <SaLTC4Init+0x2c>)
     882:	6a13      	ldr	r3, [r2, #32]
     884:	2180      	movs	r1, #128	; 0x80
     886:	0149      	lsls	r1, r1, #5
     888:	430b      	orrs	r3, r1
     88a:	6213      	str	r3, [r2, #32]

    TC4->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 |
     88c:	4b08      	ldr	r3, [pc, #32]	; (8b0 <SaLTC4Init+0x30>)
     88e:	22b0      	movs	r2, #176	; 0xb0
     890:	0112      	lsls	r2, r2, #4
     892:	801a      	strh	r2, [r3, #0]
                             TC_CTRLA_RUNSTDBY |
                             TC_CTRLA_PRESCALER_DIV8;
    //  TC3->COUNT16.PER.reg = 0xFE;

    TC4->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
     894:	2201      	movs	r2, #1
     896:	735a      	strb	r2, [r3, #13]

    TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     898:	8819      	ldrh	r1, [r3, #0]
     89a:	3201      	adds	r2, #1
     89c:	430a      	orrs	r2, r1
     89e:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     8a0:	2280      	movs	r2, #128	; 0x80
     8a2:	0312      	lsls	r2, r2, #12
     8a4:	4b03      	ldr	r3, [pc, #12]	; (8b4 <SaLTC4Init+0x34>)
     8a6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     8a8:	4770      	bx	lr
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	40000400 	.word	0x40000400
     8b0:	42003000 	.word	0x42003000
     8b4:	e000e100 	.word	0xe000e100

000008b8 <SaLRtcInit>:
// }



void SaLRtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     8b8:	4b19      	ldr	r3, [pc, #100]	; (920 <SaLRtcInit+0x68>)
     8ba:	2281      	movs	r2, #129	; 0x81
     8bc:	0052      	lsls	r2, r2, #1
     8be:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     8c0:	4a18      	ldr	r2, [pc, #96]	; (924 <SaLRtcInit+0x6c>)
     8c2:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     8c4:	1c1a      	adds	r2, r3, #0
     8c6:	7853      	ldrb	r3, [r2, #1]
     8c8:	b25b      	sxtb	r3, r3
     8ca:	2b00      	cmp	r3, #0
     8cc:	dbfb      	blt.n	8c6 <SaLRtcInit+0xe>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     8ce:	4a16      	ldr	r2, [pc, #88]	; (928 <SaLRtcInit+0x70>)
     8d0:	4b13      	ldr	r3, [pc, #76]	; (920 <SaLRtcInit+0x68>)
     8d2:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16 |
     8d4:	2204      	movs	r2, #4
     8d6:	4b15      	ldr	r3, [pc, #84]	; (92c <SaLRtcInit+0x74>)
     8d8:	801a      	strh	r2, [r3, #0]
                          RTC_MODE1_CTRL_PRESCALER_DIV1;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     8da:	1c1a      	adds	r2, r3, #0
     8dc:	7a93      	ldrb	r3, [r2, #10]
     8de:	09db      	lsrs	r3, r3, #7
     8e0:	d1fc      	bne.n	8dc <SaLRtcInit+0x24>

// Prescaler needs to be enabled separately from the mode for some reason
//  RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV1;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     8e2:	4a12      	ldr	r2, [pc, #72]	; (92c <SaLRtcInit+0x74>)
     8e4:	7a93      	ldrb	r3, [r2, #10]
     8e6:	09db      	lsrs	r3, r3, #7
     8e8:	d1fc      	bne.n	8e4 <SaLRtcInit+0x2c>

    RTC->MODE1.PER.reg = 998;
     8ea:	4a11      	ldr	r2, [pc, #68]	; (930 <SaLRtcInit+0x78>)
     8ec:	4b0f      	ldr	r3, [pc, #60]	; (92c <SaLRtcInit+0x74>)
     8ee:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     8f0:	1c1a      	adds	r2, r3, #0
     8f2:	7a93      	ldrb	r3, [r2, #10]
     8f4:	09db      	lsrs	r3, r3, #7
     8f6:	d1fc      	bne.n	8f2 <SaLRtcInit+0x3a>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     8f8:	4b0c      	ldr	r3, [pc, #48]	; (92c <SaLRtcInit+0x74>)
     8fa:	8859      	ldrh	r1, [r3, #2]
     8fc:	4a0d      	ldr	r2, [pc, #52]	; (934 <SaLRtcInit+0x7c>)
     8fe:	430a      	orrs	r2, r1
     900:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     902:	2280      	movs	r2, #128	; 0x80
     904:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     906:	8819      	ldrh	r1, [r3, #0]
     908:	2202      	movs	r2, #2
     90a:	430a      	orrs	r2, r1
     90c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     90e:	1c1a      	adds	r2, r3, #0
     910:	7a93      	ldrb	r3, [r2, #10]
     912:	09db      	lsrs	r3, r3, #7
     914:	d1fc      	bne.n	910 <SaLRtcInit+0x58>
     916:	2208      	movs	r2, #8
     918:	4b07      	ldr	r3, [pc, #28]	; (938 <SaLRtcInit+0x80>)
     91a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     91c:	4770      	bx	lr
     91e:	46c0      	nop			; (mov r8, r8)
     920:	40000c00 	.word	0x40000c00
     924:	00230002 	.word	0x00230002
     928:	00004204 	.word	0x00004204
     92c:	40001400 	.word	0x40001400
     930:	000003e6 	.word	0x000003e6
     934:	00004010 	.word	0x00004010
     938:	e000e100 	.word	0xe000e100

0000093c <RTC_Handler>:

volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     93c:	4a05      	ldr	r2, [pc, #20]	; (954 <RTC_Handler+0x18>)
     93e:	6813      	ldr	r3, [r2, #0]
     940:	21fa      	movs	r1, #250	; 0xfa
     942:	0089      	lsls	r1, r1, #2
     944:	468c      	mov	ip, r1
     946:	4463      	add	r3, ip
     948:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     94a:	22ff      	movs	r2, #255	; 0xff
     94c:	4b02      	ldr	r3, [pc, #8]	; (958 <RTC_Handler+0x1c>)
     94e:	721a      	strb	r2, [r3, #8]
}
     950:	4770      	bx	lr
     952:	46c0      	nop			; (mov r8, r8)
     954:	20000024 	.word	0x20000024
     958:	40001400 	.word	0x40001400

0000095c <millis>:

uint32_t millis(void) {
	uint32_t ms;
	ATOMIC_SECTION_ENTER
     95c:	f3ef 8110 	mrs	r1, PRIMASK
     960:	b672      	cpsid	i
	ms = time_ms + RTC->MODE1.COUNT.reg;
     962:	4a0b      	ldr	r2, [pc, #44]	; (990 <millis+0x34>)
     964:	8a10      	ldrh	r0, [r2, #16]
     966:	b280      	uxth	r0, r0
     968:	4b0a      	ldr	r3, [pc, #40]	; (994 <millis+0x38>)
     96a:	681b      	ldr	r3, [r3, #0]
	if (RTC->MODE1.INTFLAG.bit.OVF)
     96c:	7a12      	ldrb	r2, [r2, #8]
     96e:	09d2      	lsrs	r2, r2, #7
}

uint32_t millis(void) {
	uint32_t ms;
	ATOMIC_SECTION_ENTER
	ms = time_ms + RTC->MODE1.COUNT.reg;
     970:	18c0      	adds	r0, r0, r3
	if (RTC->MODE1.INTFLAG.bit.OVF)
     972:	2a00      	cmp	r2, #0
     974:	d008      	beq.n	988 <millis+0x2c>
	ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     976:	4b06      	ldr	r3, [pc, #24]	; (990 <millis+0x34>)
     978:	8a1b      	ldrh	r3, [r3, #16]
     97a:	4a06      	ldr	r2, [pc, #24]	; (994 <millis+0x38>)
     97c:	6810      	ldr	r0, [r2, #0]
     97e:	22fa      	movs	r2, #250	; 0xfa
     980:	0092      	lsls	r2, r2, #2
     982:	4694      	mov	ip, r2
     984:	4460      	add	r0, ip
     986:	1818      	adds	r0, r3, r0
	ATOMIC_SECTION_LEAVE
     988:	f381 8810 	msr	PRIMASK, r1
	return ms;
}
     98c:	4770      	bx	lr
     98e:	46c0      	nop			; (mov r8, r8)
     990:	40001400 	.word	0x40001400
     994:	20000024 	.word	0x20000024

00000998 <SaLDelayInit>:
static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void SaLDelayInit(void) {
    cycles_per_ms = 41900000UL;
    cycles_per_ms /= 1000;
     998:	4b04      	ldr	r3, [pc, #16]	; (9ac <SaLDelayInit+0x14>)
     99a:	4a05      	ldr	r2, [pc, #20]	; (9b0 <SaLDelayInit+0x18>)
     99c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     99e:	2229      	movs	r2, #41	; 0x29
     9a0:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     9a2:	3a24      	subs	r2, #36	; 0x24
     9a4:	4b03      	ldr	r3, [pc, #12]	; (9b4 <SaLDelayInit+0x1c>)
     9a6:	601a      	str	r2, [r3, #0]
}
     9a8:	4770      	bx	lr
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	20000000 	.word	0x20000000
     9b0:	0000a3ac 	.word	0x0000a3ac
     9b4:	e000e010 	.word	0xe000e010

000009b8 <delay_us>:
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
     9b8:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     9ba:	4b08      	ldr	r3, [pc, #32]	; (9dc <delay_us+0x24>)
     9bc:	685c      	ldr	r4, [r3, #4]
void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     9be:	4a08      	ldr	r2, [pc, #32]	; (9e0 <delay_us+0x28>)
        SysTick->VAL = 0;
     9c0:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9c2:	2180      	movs	r1, #128	; 0x80
     9c4:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
    while (n--) {
     9c6:	e006      	b.n	9d6 <delay_us+0x1e>

void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     9c8:	2c00      	cmp	r4, #0
     9ca:	d004      	beq.n	9d6 <delay_us+0x1e>
        SysTick->LOAD = n;
     9cc:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     9ce:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9d0:	6813      	ldr	r3, [r2, #0]
     9d2:	420b      	tst	r3, r1
     9d4:	d0fc      	beq.n	9d0 <delay_us+0x18>
     9d6:	3801      	subs	r0, #1
     9d8:	d2f6      	bcs.n	9c8 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     9da:	bd30      	pop	{r4, r5, pc}
     9dc:	20000000 	.word	0x20000000
     9e0:	e000e010 	.word	0xe000e010

000009e4 <SaLPinMode>:


#include <SaLPort.h>

void SaLPinMode(uint8_t pin,uint8_t DIR) {
     9e4:	b510      	push	{r4, lr}
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     9e6:	09c2      	lsrs	r2, r0, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     9e8:	2300      	movs	r3, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     9ea:	2a00      	cmp	r2, #0
     9ec:	d104      	bne.n	9f8 <SaLPinMode+0x14>
        return &(ports[port_index]->Group[group_index]);
     9ee:	0943      	lsrs	r3, r0, #5
     9f0:	01db      	lsls	r3, r3, #7
     9f2:	4a11      	ldr	r2, [pc, #68]	; (a38 <SaLPinMode+0x54>)
     9f4:	4694      	mov	ip, r2
     9f6:	4463      	add	r3, ip
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     9f8:	221f      	movs	r2, #31
     9fa:	4002      	ands	r2, r0
     9fc:	2401      	movs	r4, #1
     9fe:	4094      	lsls	r4, r2

    if ( DIR == OUTPUT) {
     a00:	2901      	cmp	r1, #1
     a02:	d105      	bne.n	a10 <SaLPinMode+0x2c>
        port->DIRSET.reg = pin_mask;
     a04:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0;
     a06:	1818      	adds	r0, r3, r0
     a08:	3040      	adds	r0, #64	; 0x40
     a0a:	2300      	movs	r3, #0
     a0c:	7003      	strb	r3, [r0, #0]
     a0e:	e012      	b.n	a36 <SaLPinMode+0x52>

    } else if(DIR == INPUT) {
     a10:	2900      	cmp	r1, #0
     a12:	d109      	bne.n	a28 <SaLPinMode+0x44>
        port->DIRCLR.reg = pin_mask;
     a14:	605c      	str	r4, [r3, #4]
        port->PINCFG[pin].reg = PORT_PINCFG_INEN;
     a16:	1818      	adds	r0, r3, r0
     a18:	3040      	adds	r0, #64	; 0x40
     a1a:	2302      	movs	r3, #2
     a1c:	7003      	strb	r3, [r0, #0]
        port->PINCFG[pin].reg |= PORT_PINCFG_PULLEN;
     a1e:	7802      	ldrb	r2, [r0, #0]
     a20:	3302      	adds	r3, #2
     a22:	4313      	orrs	r3, r2
     a24:	7003      	strb	r3, [r0, #0]
     a26:	e006      	b.n	a36 <SaLPinMode+0x52>
    } else if (DIR == OUTSTRONG) {
     a28:	2903      	cmp	r1, #3
     a2a:	d104      	bne.n	a36 <SaLPinMode+0x52>
        port->DIRSET.reg = pin_mask;
     a2c:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0x40;
     a2e:	1818      	adds	r0, r3, r0
     a30:	3040      	adds	r0, #64	; 0x40
     a32:	2340      	movs	r3, #64	; 0x40
     a34:	7003      	strb	r3, [r0, #0]

    }
     a36:	bd10      	pop	{r4, pc}
     a38:	41004400 	.word	0x41004400

00000a3c <sampleTick>:
int16_t index222 = 0;
uint16_t thisTime;
uint16_t lastTime;
uint16_t deltatt;

void sampleTick() {
     a3c:	b570      	push	{r4, r5, r6, lr}

    if (!baroSampleReady) baroSampleReady = baroSample();
     a3e:	4b23      	ldr	r3, [pc, #140]	; (acc <sampleTick+0x90>)
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	2b00      	cmp	r3, #0
     a44:	d13b      	bne.n	abe <sampleTick+0x82>
     a46:	4b22      	ldr	r3, [pc, #136]	; (ad0 <sampleTick+0x94>)
     a48:	4798      	blx	r3
     a4a:	4b20      	ldr	r3, [pc, #128]	; (acc <sampleTick+0x90>)
     a4c:	7018      	strb	r0, [r3, #0]
    if (!accelSampleReady) accelSampleReady = accelSample();
     a4e:	4b21      	ldr	r3, [pc, #132]	; (ad4 <sampleTick+0x98>)
     a50:	781b      	ldrb	r3, [r3, #0]
     a52:	2b00      	cmp	r3, #0
     a54:	d12e      	bne.n	ab4 <sampleTick+0x78>
     a56:	4b20      	ldr	r3, [pc, #128]	; (ad8 <sampleTick+0x9c>)
     a58:	4798      	blx	r3
     a5a:	4a1e      	ldr	r2, [pc, #120]	; (ad4 <sampleTick+0x98>)
     a5c:	7010      	strb	r0, [r2, #0]


    if (baroSampleReady && accelSampleReady) {
     a5e:	4a1b      	ldr	r2, [pc, #108]	; (acc <sampleTick+0x90>)
     a60:	7812      	ldrb	r2, [r2, #0]
     a62:	2a00      	cmp	r2, #0
     a64:	d030      	beq.n	ac8 <sampleTick+0x8c>
     a66:	2800      	cmp	r0, #0
     a68:	d02e      	beq.n	ac8 <sampleTick+0x8c>

        sampleBeingCooked.sampleMills = millis();
     a6a:	4b1c      	ldr	r3, [pc, #112]	; (adc <sampleTick+0xa0>)
     a6c:	4798      	blx	r3
     a6e:	4c1c      	ldr	r4, [pc, #112]	; (ae0 <sampleTick+0xa4>)
     a70:	62a0      	str	r0, [r4, #40]	; 0x28
        sampleBeingCooked.deltaT = sampleBeingCooked.sampleMills - cookedSample.sampleMills;
     a72:	4d1c      	ldr	r5, [pc, #112]	; (ae4 <sampleTick+0xa8>)
     a74:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a76:	1ac0      	subs	r0, r0, r3
     a78:	62e0      	str	r0, [r4, #44]	; 0x2c
        sampleBeingCooked.altitude = SaLBaroGetHeight();
     a7a:	4e1b      	ldr	r6, [pc, #108]	; (ae8 <sampleTick+0xac>)
     a7c:	47b0      	blx	r6
     a7e:	6060      	str	r0, [r4, #4]
        sampleBeingCooked.accelerationInX = SaLGetAccelX();
     a80:	4b1a      	ldr	r3, [pc, #104]	; (aec <sampleTick+0xb0>)
     a82:	4798      	blx	r3
     a84:	60e0      	str	r0, [r4, #12]
        sampleBeingCooked.accelerationInY = SaLGetAccelY();
     a86:	4b1a      	ldr	r3, [pc, #104]	; (af0 <sampleTick+0xb4>)
     a88:	4798      	blx	r3
     a8a:	6120      	str	r0, [r4, #16]
        sampleBeingCooked.accelerationInZ = SaLGetAccelZ();
     a8c:	4b19      	ldr	r3, [pc, #100]	; (af4 <sampleTick+0xb8>)
     a8e:	4798      	blx	r3
     a90:	6160      	str	r0, [r4, #20]
        sampleBeingCooked.position = SaLBaroGetHeight();
     a92:	47b0      	blx	r6
     a94:	63a0      	str	r0, [r4, #56]	; 0x38
        //  sampleBeingCooked.positionStar = cookedSample.position +
        //                                 cookedSample.velocityStar * sampleBeingCooked.deltaT +
        //                                   sampleBeingCooked.accelerationInZ *  (pow(sampleBeingCooked.deltaT,2)/2);


        baroSampleState = 0;
     a96:	2300      	movs	r3, #0
     a98:	4a17      	ldr	r2, [pc, #92]	; (af8 <sampleTick+0xbc>)
     a9a:	7013      	strb	r3, [r2, #0]
        accelSampleState = 0;
     a9c:	4a17      	ldr	r2, [pc, #92]	; (afc <sampleTick+0xc0>)
     a9e:	7013      	strb	r3, [r2, #0]
        baroSampleReady = false;
     aa0:	4a0a      	ldr	r2, [pc, #40]	; (acc <sampleTick+0x90>)
     aa2:	7013      	strb	r3, [r2, #0]
        accelSampleReady = false;
     aa4:	4a0b      	ldr	r2, [pc, #44]	; (ad4 <sampleTick+0x98>)
     aa6:	7013      	strb	r3, [r2, #0]
        cookedSample = sampleBeingCooked;
     aa8:	1c28      	adds	r0, r5, #0
     aaa:	1c21      	adds	r1, r4, #0
     aac:	2240      	movs	r2, #64	; 0x40
     aae:	4b14      	ldr	r3, [pc, #80]	; (b00 <sampleTick+0xc4>)
     ab0:	4798      	blx	r3
     ab2:	e009      	b.n	ac8 <sampleTick+0x8c>

    if (!baroSampleReady) baroSampleReady = baroSample();
    if (!accelSampleReady) accelSampleReady = accelSample();


    if (baroSampleReady && accelSampleReady) {
     ab4:	4b05      	ldr	r3, [pc, #20]	; (acc <sampleTick+0x90>)
     ab6:	781b      	ldrb	r3, [r3, #0]
     ab8:	2b00      	cmp	r3, #0
     aba:	d1d6      	bne.n	a6a <sampleTick+0x2e>
     abc:	e004      	b.n	ac8 <sampleTick+0x8c>
uint16_t deltatt;

void sampleTick() {

    if (!baroSampleReady) baroSampleReady = baroSample();
    if (!accelSampleReady) accelSampleReady = accelSample();
     abe:	4b05      	ldr	r3, [pc, #20]	; (ad4 <sampleTick+0x98>)
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	2b00      	cmp	r3, #0
     ac4:	d1d1      	bne.n	a6a <sampleTick+0x2e>
     ac6:	e7c6      	b.n	a56 <sampleTick+0x1a>
//             index222 = 0;
//             thisTime = millis();
//             deltatt = thisTime - lastTime;
//             lastTime = millis();
    }
}
     ac8:	bd70      	pop	{r4, r5, r6, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	200000c2 	.word	0x200000c2
     ad0:	000005a9 	.word	0x000005a9
     ad4:	200000c1 	.word	0x200000c1
     ad8:	000002f5 	.word	0x000002f5
     adc:	0000095d 	.word	0x0000095d
     ae0:	20000080 	.word	0x20000080
     ae4:	200000cc 	.word	0x200000cc
     ae8:	000006d5 	.word	0x000006d5
     aec:	000004fd 	.word	0x000004fd
     af0:	00000509 	.word	0x00000509
     af4:	00000515 	.word	0x00000515
     af8:	20000070 	.word	0x20000070
     afc:	2000005a 	.word	0x2000005a
     b00:	00000ee5 	.word	0x00000ee5

00000b04 <uart_init>:


#include <SaLUSART.h>

void uart_init(uint32_t baud) {
     b04:	b510      	push	{r4, lr}

    uint32_t UART_CLKGEN_F = 8000000UL;
    uint64_t br = (uint64_t)65536 * (UART_CLKGEN_F - 16 * baud) / UART_CLKGEN_F;
     b06:	0100      	lsls	r0, r0, #4
     b08:	4b2c      	ldr	r3, [pc, #176]	; (bbc <uart_init+0xb8>)
     b0a:	1a18      	subs	r0, r3, r0
     b0c:	0c01      	lsrs	r1, r0, #16
     b0e:	0400      	lsls	r0, r0, #16
     b10:	4a2a      	ldr	r2, [pc, #168]	; (bbc <uart_init+0xb8>)
     b12:	2300      	movs	r3, #0
     b14:	4c2a      	ldr	r4, [pc, #168]	; (bc0 <uart_init+0xbc>)
     b16:	47a0      	blx	r4

    //enable GPS pins
    //  SaLPinMode(MTK3339_RX_PIN,INPUT);
    //  SaLPinMode(MTK3339_TX_PIN,OUTPUT);
    SYSCTRL->OSC8M.reg -= SYSCTRL_OSC8M_ENABLE;
     b18:	4b2a      	ldr	r3, [pc, #168]	; (bc4 <uart_init+0xc0>)
     b1a:	6a1a      	ldr	r2, [r3, #32]
     b1c:	3a02      	subs	r2, #2
     b1e:	621a      	str	r2, [r3, #32]
    SYSCTRL->OSC8M.reg -= SYSCTRL_OSC8M_PRESC_3;
     b20:	6a1a      	ldr	r2, [r3, #32]
     b22:	4929      	ldr	r1, [pc, #164]	; (bc8 <uart_init+0xc4>)
     b24:	468c      	mov	ip, r1
     b26:	4462      	add	r2, ip
     b28:	621a      	str	r2, [r3, #32]
    SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     b2a:	6a19      	ldr	r1, [r3, #32]
     b2c:	2202      	movs	r2, #2
     b2e:	430a      	orrs	r2, r1
     b30:	621a      	str	r2, [r3, #32]



    //portB22->PINCFG->reg = 0x44;
    // portB23->PINCFG->reg = 0x44;
    ((Port *)PORT)->Group[1].PINCFG[22].reg = 0x41;
     b32:	4b26      	ldr	r3, [pc, #152]	; (bcc <uart_init+0xc8>)
     b34:	2241      	movs	r2, #65	; 0x41
     b36:	21d6      	movs	r1, #214	; 0xd6
     b38:	545a      	strb	r2, [r3, r1]
    ((Port *)PORT)->Group[1].PINCFG[23].reg = 0x41;
     b3a:	3101      	adds	r1, #1
     b3c:	545a      	strb	r2, [r3, r1]
    ((Port *)PORT)->Group[1].PMUX[11].reg = 0x32;
     b3e:	39a5      	subs	r1, #165	; 0xa5
     b40:	327a      	adds	r2, #122	; 0x7a
     b42:	5499      	strb	r1, [r3, r2]



    //enable power to sercom 5 module
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
     b44:	4a22      	ldr	r2, [pc, #136]	; (bd0 <uart_init+0xcc>)
     b46:	6a11      	ldr	r1, [r2, #32]
     b48:	2380      	movs	r3, #128	; 0x80
     b4a:	430b      	orrs	r3, r1
     b4c:	6213      	str	r3, [r2, #32]
    //enable and configure the sercom clock
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(3) |
     b4e:	4b21      	ldr	r3, [pc, #132]	; (bd4 <uart_init+0xd0>)
     b50:	2204      	movs	r2, #4
     b52:	32ff      	adds	r2, #255	; 0xff
     b54:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(3) |
     b56:	4a20      	ldr	r2, [pc, #128]	; (bd8 <uart_init+0xd4>)
     b58:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOM5_CORE |
     b5a:	4a20      	ldr	r2, [pc, #128]	; (bdc <uart_init+0xd8>)
     b5c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN;
    //     GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOMX_SLOW |
    //                         GCLK_CLKCTRL_GEN_GCLK3 |
    //                         GCLK_CLKCTRL_CLKEN;
    //configure the sercom module for the gps (sercom 5)
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_DORD |
     b5e:	4a20      	ldr	r2, [pc, #128]	; (be0 <uart_init+0xdc>)
     b60:	4b20      	ldr	r3, [pc, #128]	; (be4 <uart_init+0xe0>)
     b62:	601a      	str	r2, [r3, #0]
#include <SaLIo.h>

typedef uint16_t SaLSercomUsartDataReg_t;

static inline void uart_sync(void) {
    while (SERCOM5->USART.SYNCBUSY.bit.CTRLB);
     b64:	1c19      	adds	r1, r3, #0
     b66:	2201      	movs	r2, #1
     b68:	69cb      	ldr	r3, [r1, #28]
     b6a:	089b      	lsrs	r3, r3, #2
     b6c:	421a      	tst	r2, r3
     b6e:	d1fb      	bne.n	b68 <uart_init+0x64>
                               SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_RXPO(3) |
                               SERCOM_USART_CTRLA_TXPO(1);
    uart_sync();
    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
     b70:	22c0      	movs	r2, #192	; 0xc0
     b72:	0292      	lsls	r2, r2, #10
     b74:	4b1b      	ldr	r3, [pc, #108]	; (be4 <uart_init+0xe0>)
     b76:	605a      	str	r2, [r3, #4]
     b78:	1c19      	adds	r1, r3, #0
     b7a:	2201      	movs	r2, #1
     b7c:	69cb      	ldr	r3, [r1, #28]
     b7e:	089b      	lsrs	r3, r3, #2
     b80:	421a      	tst	r2, r3
     b82:	d1fb      	bne.n	b7c <uart_init+0x78>
                               SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
    // SERCOM_USART_CTRLB_SFDE;
    uart_sync();
    SERCOM5->USART.BAUD.reg = (uint16_t)br;
     b84:	b280      	uxth	r0, r0
     b86:	4b17      	ldr	r3, [pc, #92]	; (be4 <uart_init+0xe0>)
     b88:	8198      	strh	r0, [r3, #12]
     b8a:	1c19      	adds	r1, r3, #0
     b8c:	2201      	movs	r2, #1
     b8e:	69cb      	ldr	r3, [r1, #28]
     b90:	089b      	lsrs	r3, r3, #2
     b92:	421a      	tst	r2, r3
     b94:	d1fb      	bne.n	b8e <uart_init+0x8a>
    uart_sync();
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     b96:	4a13      	ldr	r2, [pc, #76]	; (be4 <uart_init+0xe0>)
     b98:	6811      	ldr	r1, [r2, #0]
     b9a:	2302      	movs	r3, #2
     b9c:	430b      	orrs	r3, r1
     b9e:	6013      	str	r3, [r2, #0]
     ba0:	1c11      	adds	r1, r2, #0
     ba2:	2201      	movs	r2, #1
     ba4:	69cb      	ldr	r3, [r1, #28]
     ba6:	089b      	lsrs	r3, r3, #2
     ba8:	421a      	tst	r2, r3
     baa:	d1fb      	bne.n	ba4 <uart_init+0xa0>
                                 const uint16_t length);

int32_t SaLInitUsart(struct SaLUsartDescriptor *const descr,
                     void *const hw) {

    descr->device.hw = hw;
     bac:	4b0e      	ldr	r3, [pc, #56]	; (be8 <uart_init+0xe4>)
     bae:	4a0d      	ldr	r2, [pc, #52]	; (be4 <uart_init+0xe0>)
     bb0:	609a      	str	r2, [r3, #8]
    descr->io.read = SaLUsartDataRead;
     bb2:	4a0e      	ldr	r2, [pc, #56]	; (bec <uart_init+0xe8>)
     bb4:	605a      	str	r2, [r3, #4]
    descr->io.write = SaLUsartDataWrite;
     bb6:	4a0e      	ldr	r2, [pc, #56]	; (bf0 <uart_init+0xec>)
     bb8:	601a      	str	r2, [r3, #0]
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    uart_sync();

    SaLInitUsart(&USART_0,SERCOM5);

}
     bba:	bd10      	pop	{r4, pc}
     bbc:	007a1200 	.word	0x007a1200
     bc0:	00000efd 	.word	0x00000efd
     bc4:	40000800 	.word	0x40000800
     bc8:	fffffd00 	.word	0xfffffd00
     bcc:	41004400 	.word	0x41004400
     bd0:	40000400 	.word	0x40000400
     bd4:	40000c00 	.word	0x40000c00
     bd8:	00230603 	.word	0x00230603
     bdc:	00004319 	.word	0x00004319
     be0:	40310004 	.word	0x40310004
     be4:	42001c00 	.word	0x42001c00
     be8:	2000010c 	.word	0x2000010c
     bec:	00000c05 	.word	0x00000c05
     bf0:	00000c55 	.word	0x00000c55

00000bf4 <SaLSyncUsartIo>:
};


void SaLSyncUsartIo(struct SaLUsartDescriptor *const descr,
                    struct IoDescriptor **Io) {
    *Io = &descr->io;
     bf4:	6008      	str	r0, [r1, #0]
};
     bf6:	4770      	bx	lr

00000bf8 <_usartByteRecieved>:

bool _usartByteRecieved(const struct _UsartDevice *const device) {
    return _usartGetInteruptRCX(device->hw);
     bf8:	6803      	ldr	r3, [r0, #0]
static inline SaLSercomUsartDataReg_t _usartGetDataReg(const void *const hw) {
    return     ((Sercom *)hw)->USART.DATA.reg;
}

static inline bool _usartGetInteruptRCX(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     bfa:	7e18      	ldrb	r0, [r3, #24]
     bfc:	0740      	lsls	r0, r0, #29
     bfe:	0fc0      	lsrs	r0, r0, #31
};
     c00:	4770      	bx	lr
     c02:	46c0      	nop			; (mov r8, r8)

00000c04 <SaLUsartDataRead>:



static int32_t SaLUsartDataRead(struct IoDescriptor *const ioDescr,
                                uint8_t *const buf,
                                const uint16_t length) {
     c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c06:	464f      	mov	r7, r9
     c08:	4646      	mov	r6, r8
     c0a:	b4c0      	push	{r6, r7}
     c0c:	4680      	mov	r8, r0
     c0e:	4689      	mov	r9, r1
     c10:	1c17      	adds	r7, r2, #0

    int32_t offset = 0;
     c12:	2600      	movs	r6, #0
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    do {
        while (!_usartByteRecieved(&descr->device));
     c14:	1c05      	adds	r5, r0, #0
     c16:	3508      	adds	r5, #8
     c18:	4c0a      	ldr	r4, [pc, #40]	; (c44 <SaLUsartDataRead+0x40>)
     c1a:	1c28      	adds	r0, r5, #0
     c1c:	47a0      	blx	r4
     c1e:	2800      	cmp	r0, #0
     c20:	d0fb      	beq.n	c1a <SaLUsartDataRead+0x16>
    ((Sercom *)hw)->USART.DATA.reg = data;
    ATOMIC_SECTION_LEAVE
}

static inline SaLSercomUsartDataReg_t _usartGetDataReg(const void *const hw) {
    return     ((Sercom *)hw)->USART.DATA.reg;
     c22:	4643      	mov	r3, r8
     c24:	689b      	ldr	r3, [r3, #8]
     c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
bool _usartByteRecieved(const struct _UsartDevice *const device) {
    return _usartGetInteruptRCX(device->hw);
};

uint8_t _usartGetData(const struct _UsartDevice *const device) {
    return _usartGetDataReg(device->hw);
     c28:	464a      	mov	r2, r9
     c2a:	5593      	strb	r3, [r2, r6]
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    do {
        while (!_usartByteRecieved(&descr->device));
        buf[offset] = _usartGetData(&descr->device);
    } while (++offset < length);
     c2c:	3601      	adds	r6, #1
     c2e:	1c38      	adds	r0, r7, #0
     c30:	42be      	cmp	r6, r7
     c32:	dbf2      	blt.n	c1a <SaLUsartDataRead+0x16>
     c34:	2f00      	cmp	r7, #0
     c36:	dc00      	bgt.n	c3a <SaLUsartDataRead+0x36>
     c38:	2001      	movs	r0, #1

    return (int32_t)offset;
}
     c3a:	bc0c      	pop	{r2, r3}
     c3c:	4690      	mov	r8, r2
     c3e:	4699      	mov	r9, r3
     c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	00000bf9 	.word	0x00000bf9

00000c48 <_usartGetDreInterupt>:
uint8_t _usartGetData(const struct _UsartDevice *const device) {
    return _usartGetDataReg(device->hw);
}

bool _usartGetDreInterupt(const struct _UsartDevice *const device) {
    return _usartGetDreInteruptReg(device->hw);
     c48:	6803      	ldr	r3, [r0, #0]
static inline bool _usartGetInteruptRCX(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;

};
static inline bool _usartGetDreInteruptReg(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     c4a:	7e18      	ldrb	r0, [r3, #24]
     c4c:	2301      	movs	r3, #1
     c4e:	4018      	ands	r0, r3
}
     c50:	4770      	bx	lr
     c52:	46c0      	nop			; (mov r8, r8)

00000c54 <SaLUsartDataWrite>:
    return (int32_t)offset;
}

static int32_t SaLUsartDataWrite(struct IoDescriptor *const ioDescr,
                                 const uint8_t *const buf,
                                 const uint16_t length) {
     c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c56:	464f      	mov	r7, r9
     c58:	4646      	mov	r6, r8
     c5a:	b4c0      	push	{r6, r7}
     c5c:	4680      	mov	r8, r0
     c5e:	4689      	mov	r9, r1
     c60:	1c17      	adds	r7, r2, #0

    int32_t offset = 0;
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    while (!_usartGetDreInterupt(&descr->device));
     c62:	1c05      	adds	r5, r0, #0
     c64:	3508      	adds	r5, #8
     c66:	4e10      	ldr	r6, [pc, #64]	; (ca8 <SaLUsartDataWrite+0x54>)
     c68:	1c2c      	adds	r4, r5, #0
     c6a:	1c28      	adds	r0, r5, #0
     c6c:	47b0      	blx	r6
     c6e:	2800      	cmp	r0, #0
     c70:	d0fa      	beq.n	c68 <SaLUsartDataWrite+0x14>
     c72:	2600      	movs	r6, #0
    do {
        _usartSetDataReg(&descr->device,buf[offset]);
        while (!_usartGetDreInterupt(&descr->device));
     c74:	4d0c      	ldr	r5, [pc, #48]	; (ca8 <SaLUsartDataWrite+0x54>)

void SaLSyncUsartIo(struct SaLUsartDescriptor *const descr,
                    struct IoDescriptor **Io);

static inline void _usartSetDataReg(const void *const hw, uint8_t data ) {
    ATOMIC_SECTION_ENTER
     c76:	f3ef 8310 	mrs	r3, PRIMASK
     c7a:	b672      	cpsid	i
    ((Sercom *)hw)->USART.DATA.reg = data;
     c7c:	464a      	mov	r2, r9
     c7e:	5d92      	ldrb	r2, [r2, r6]
     c80:	4641      	mov	r1, r8
     c82:	860a      	strh	r2, [r1, #48]	; 0x30
    ATOMIC_SECTION_LEAVE
     c84:	f383 8810 	msr	PRIMASK, r3
     c88:	1c20      	adds	r0, r4, #0
     c8a:	47a8      	blx	r5
     c8c:	2800      	cmp	r0, #0
     c8e:	d0fb      	beq.n	c88 <SaLUsartDataWrite+0x34>
    } while (++offset < length);
     c90:	3601      	adds	r6, #1
     c92:	1c38      	adds	r0, r7, #0
     c94:	42be      	cmp	r6, r7
     c96:	dbee      	blt.n	c76 <SaLUsartDataWrite+0x22>
     c98:	2f00      	cmp	r7, #0
     c9a:	dc00      	bgt.n	c9e <SaLUsartDataWrite+0x4a>
     c9c:	2001      	movs	r0, #1
    return offset;

}
     c9e:	bc0c      	pop	{r2, r3}
     ca0:	4690      	mov	r8, r2
     ca2:	4699      	mov	r9, r3
     ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	00000c49 	.word	0x00000c49

00000cac <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     cac:	f3ef 8305 	mrs	r3, IPSR
     cb0:	e7fc      	b.n	cac <Dummy_Handler>
     cb2:	46c0      	nop			; (mov r8, r8)

00000cb4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     cb4:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     cb6:	4b2e      	ldr	r3, [pc, #184]	; (d70 <Reset_Handler+0xbc>)
     cb8:	4a2e      	ldr	r2, [pc, #184]	; (d74 <Reset_Handler+0xc0>)
     cba:	429a      	cmp	r2, r3
     cbc:	d003      	beq.n	cc6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     cbe:	4b2e      	ldr	r3, [pc, #184]	; (d78 <Reset_Handler+0xc4>)
     cc0:	4a2b      	ldr	r2, [pc, #172]	; (d70 <Reset_Handler+0xbc>)
     cc2:	429a      	cmp	r2, r3
     cc4:	d304      	bcc.n	cd0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     cc6:	4b2d      	ldr	r3, [pc, #180]	; (d7c <Reset_Handler+0xc8>)
     cc8:	4a2d      	ldr	r2, [pc, #180]	; (d80 <Reset_Handler+0xcc>)
     cca:	429a      	cmp	r2, r3
     ccc:	d310      	bcc.n	cf0 <Reset_Handler+0x3c>
     cce:	e01e      	b.n	d0e <Reset_Handler+0x5a>
     cd0:	4a2c      	ldr	r2, [pc, #176]	; (d84 <Reset_Handler+0xd0>)
     cd2:	4b29      	ldr	r3, [pc, #164]	; (d78 <Reset_Handler+0xc4>)
     cd4:	3303      	adds	r3, #3
     cd6:	1a9b      	subs	r3, r3, r2
     cd8:	089b      	lsrs	r3, r3, #2
     cda:	3301      	adds	r3, #1
     cdc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     cde:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     ce0:	4823      	ldr	r0, [pc, #140]	; (d70 <Reset_Handler+0xbc>)
     ce2:	4924      	ldr	r1, [pc, #144]	; (d74 <Reset_Handler+0xc0>)
     ce4:	588c      	ldr	r4, [r1, r2]
     ce6:	5084      	str	r4, [r0, r2]
     ce8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     cea:	429a      	cmp	r2, r3
     cec:	d1fa      	bne.n	ce4 <Reset_Handler+0x30>
     cee:	e7ea      	b.n	cc6 <Reset_Handler+0x12>
     cf0:	4a25      	ldr	r2, [pc, #148]	; (d88 <Reset_Handler+0xd4>)
     cf2:	4b22      	ldr	r3, [pc, #136]	; (d7c <Reset_Handler+0xc8>)
     cf4:	3303      	adds	r3, #3
     cf6:	1a9b      	subs	r3, r3, r2
     cf8:	089b      	lsrs	r3, r3, #2
     cfa:	3301      	adds	r3, #1
     cfc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     cfe:	2200      	movs	r2, #0
                *pDest++ = 0;
     d00:	481f      	ldr	r0, [pc, #124]	; (d80 <Reset_Handler+0xcc>)
     d02:	2100      	movs	r1, #0
     d04:	1814      	adds	r4, r2, r0
     d06:	6021      	str	r1, [r4, #0]
     d08:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     d0a:	429a      	cmp	r2, r3
     d0c:	d1fa      	bne.n	d04 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     d0e:	4a1f      	ldr	r2, [pc, #124]	; (d8c <Reset_Handler+0xd8>)
     d10:	21ff      	movs	r1, #255	; 0xff
     d12:	4b1f      	ldr	r3, [pc, #124]	; (d90 <Reset_Handler+0xdc>)
     d14:	438b      	bics	r3, r1
     d16:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     d18:	39fd      	subs	r1, #253	; 0xfd
     d1a:	2390      	movs	r3, #144	; 0x90
     d1c:	005b      	lsls	r3, r3, #1
     d1e:	4a1d      	ldr	r2, [pc, #116]	; (d94 <Reset_Handler+0xe0>)
     d20:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     d22:	481d      	ldr	r0, [pc, #116]	; (d98 <Reset_Handler+0xe4>)
     d24:	78c3      	ldrb	r3, [r0, #3]
     d26:	2403      	movs	r4, #3
     d28:	43a3      	bics	r3, r4
     d2a:	2202      	movs	r2, #2
     d2c:	4313      	orrs	r3, r2
     d2e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     d30:	78c3      	ldrb	r3, [r0, #3]
     d32:	260c      	movs	r6, #12
     d34:	43b3      	bics	r3, r6
     d36:	2108      	movs	r1, #8
     d38:	430b      	orrs	r3, r1
     d3a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     d3c:	4b17      	ldr	r3, [pc, #92]	; (d9c <Reset_Handler+0xe8>)
     d3e:	7b98      	ldrb	r0, [r3, #14]
     d40:	2530      	movs	r5, #48	; 0x30
     d42:	43a8      	bics	r0, r5
     d44:	1c05      	adds	r5, r0, #0
     d46:	2020      	movs	r0, #32
     d48:	4328      	orrs	r0, r5
     d4a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     d4c:	7b98      	ldrb	r0, [r3, #14]
     d4e:	43b0      	bics	r0, r6
     d50:	4301      	orrs	r1, r0
     d52:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     d54:	7b99      	ldrb	r1, [r3, #14]
     d56:	43a1      	bics	r1, r4
     d58:	430a      	orrs	r2, r1
     d5a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     d5c:	4a10      	ldr	r2, [pc, #64]	; (da0 <Reset_Handler+0xec>)
     d5e:	6851      	ldr	r1, [r2, #4]
     d60:	2380      	movs	r3, #128	; 0x80
     d62:	430b      	orrs	r3, r1
     d64:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     d66:	4b0f      	ldr	r3, [pc, #60]	; (da4 <Reset_Handler+0xf0>)
     d68:	4798      	blx	r3

        /* Branch to main function */
        main();
     d6a:	4b0f      	ldr	r3, [pc, #60]	; (da8 <Reset_Handler+0xf4>)
     d6c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     d6e:	e7fe      	b.n	d6e <Reset_Handler+0xba>
     d70:	20000000 	.word	0x20000000
     d74:	00001c44 	.word	0x00001c44
     d78:	20000008 	.word	0x20000008
     d7c:	20000120 	.word	0x20000120
     d80:	20000008 	.word	0x20000008
     d84:	20000004 	.word	0x20000004
     d88:	2000000c 	.word	0x2000000c
     d8c:	e000ed00 	.word	0xe000ed00
     d90:	00000000 	.word	0x00000000
     d94:	41007000 	.word	0x41007000
     d98:	41005000 	.word	0x41005000
     d9c:	41004800 	.word	0x41004800
     da0:	41004000 	.word	0x41004000
     da4:	00000e99 	.word	0x00000e99
     da8:	00000e05 	.word	0x00000e05

00000dac <PinConfig>:
uint8_t bytesRead;
bool retrieveSample;
uint32_t index2;


void PinConfig() {
     dac:	b538      	push	{r3, r4, r5, lr}
    /* temp SS HIGH for other peripherals */
    SaLPinMode(PIN_PA07,INPUT);
     dae:	2007      	movs	r0, #7
     db0:	2100      	movs	r1, #0
     db2:	4c0c      	ldr	r4, [pc, #48]	; (de4 <PinConfig+0x38>)
     db4:	47a0      	blx	r4
    SaLPinMode(PIN_PA10,OUTPUT);
     db6:	200a      	movs	r0, #10
     db8:	2101      	movs	r1, #1
     dba:	47a0      	blx	r4
    SaLPinMode(PIN_PA08,OUTPUT);
     dbc:	2008      	movs	r0, #8
     dbe:	2101      	movs	r1, #1
     dc0:	47a0      	blx	r4
    SaLPinMode(BUZZER,OUTSTRONG);
     dc2:	200c      	movs	r0, #12
     dc4:	2103      	movs	r1, #3
     dc6:	47a0      	blx	r4
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     dc8:	4d07      	ldr	r5, [pc, #28]	; (de8 <PinConfig+0x3c>)
     dca:	2380      	movs	r3, #128	; 0x80
     dcc:	00db      	lsls	r3, r3, #3
     dce:	61ab      	str	r3, [r5, #24]
     dd0:	2380      	movs	r3, #128	; 0x80
     dd2:	005b      	lsls	r3, r3, #1
     dd4:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(PIN_PA10,true);
    SaLDigitalOut(PIN_PA08,true);
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     dd6:	2009      	movs	r0, #9
     dd8:	2101      	movs	r1, #1
     dda:	47a0      	blx	r4
     ddc:	2380      	movs	r3, #128	; 0x80
     dde:	009b      	lsls	r3, r3, #2
     de0:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
     de2:	bd38      	pop	{r3, r4, r5, pc}
     de4:	000009e5 	.word	0x000009e5
     de8:	41004400 	.word	0x41004400

00000dec <TC4_Handler>:

void TC4_Handler(void) {
    retrieveSample = true;
     dec:	2201      	movs	r2, #1
     dee:	4b03      	ldr	r3, [pc, #12]	; (dfc <TC4_Handler+0x10>)
     df0:	701a      	strb	r2, [r3, #0]
    TC4->COUNT16.INTFLAG.reg = 0XFF;
     df2:	32fe      	adds	r2, #254	; 0xfe
     df4:	4b02      	ldr	r3, [pc, #8]	; (e00 <TC4_Handler+0x14>)
     df6:	739a      	strb	r2, [r3, #14]
}
     df8:	4770      	bx	lr
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	20000119 	.word	0x20000119
     e00:	42003000 	.word	0x42003000

00000e04 <main>:

volatile uint32_t counter = 0;

struct sample cookedSample;

int main(void) {
     e04:	b570      	push	{r4, r5, r6, lr}
     e06:	b088      	sub	sp, #32
    // SystemInit();
    SaLDelayInit();
     e08:	4b17      	ldr	r3, [pc, #92]	; (e68 <main+0x64>)
     e0a:	4798      	blx	r3
    SalGclkInit();
     e0c:	4b17      	ldr	r3, [pc, #92]	; (e6c <main+0x68>)
     e0e:	4798      	blx	r3
    SaLRtcInit();
     e10:	4b17      	ldr	r3, [pc, #92]	; (e70 <main+0x6c>)
     e12:	4798      	blx	r3
    PinConfig();
     e14:	4b17      	ldr	r3, [pc, #92]	; (e74 <main+0x70>)
     e16:	4798      	blx	r3
    uart_init(9600);
     e18:	2096      	movs	r0, #150	; 0x96
     e1a:	0180      	lsls	r0, r0, #6
     e1c:	4b16      	ldr	r3, [pc, #88]	; (e78 <main+0x74>)
     e1e:	4798      	blx	r3
    SaLTC4Init();
     e20:	4b16      	ldr	r3, [pc, #88]	; (e7c <main+0x78>)
     e22:	4798      	blx	r3
    // SaLTC5Init();

    struct IoDescriptor *UsartIoModule;
    struct AccelerometerModule myAccelerometer;

    SaLSyncUsartIo(&USART_0, &UsartIoModule);
     e24:	4816      	ldr	r0, [pc, #88]	; (e80 <main+0x7c>)
     e26:	a907      	add	r1, sp, #28
     e28:	4b16      	ldr	r3, [pc, #88]	; (e84 <main+0x80>)
     e2a:	4798      	blx	r3
    initAccelerometer(&myAccelerometer);
     e2c:	a801      	add	r0, sp, #4
     e2e:	4b16      	ldr	r3, [pc, #88]	; (e88 <main+0x84>)
     e30:	4798      	blx	r3
    initBarometer();
     e32:	4b16      	ldr	r3, [pc, #88]	; (e8c <main+0x88>)
     e34:	4798      	blx	r3
//     }
// 
//     volatile int32_t groundAlt = groundHeight.mean;
//     variance = GetVariance(&groundHeight,&groundHeight.mean);

    volatile uint16_t ticks = 0;
     e36:	2200      	movs	r2, #0
     e38:	466b      	mov	r3, sp
     e3a:	805a      	strh	r2, [r3, #2]

    while (1) {
        ticks++;
     e3c:	466b      	mov	r3, sp
     e3e:	1c9c      	adds	r4, r3, #2
        counter++;
     e40:	4d13      	ldr	r5, [pc, #76]	; (e90 <main+0x8c>)
        // milliseconds = millis();

        sampleTick();
     e42:	4e14      	ldr	r6, [pc, #80]	; (e94 <main+0x90>)
//     variance = GetVariance(&groundHeight,&groundHeight.mean);

    volatile uint16_t ticks = 0;

    while (1) {
        ticks++;
     e44:	8823      	ldrh	r3, [r4, #0]
     e46:	3301      	adds	r3, #1
     e48:	b29b      	uxth	r3, r3
     e4a:	8023      	strh	r3, [r4, #0]
        counter++;
     e4c:	682b      	ldr	r3, [r5, #0]
     e4e:	3301      	adds	r3, #1
     e50:	602b      	str	r3, [r5, #0]
        // milliseconds = millis();

        sampleTick();
     e52:	47b0      	blx	r6
        if (ticks > 1000) {
     e54:	8823      	ldrh	r3, [r4, #0]
     e56:	b29b      	uxth	r3, r3
     e58:	22fa      	movs	r2, #250	; 0xfa
     e5a:	0092      	lsls	r2, r2, #2
     e5c:	4293      	cmp	r3, r2
     e5e:	d9f1      	bls.n	e44 <main+0x40>
            ticks = 0;
     e60:	2300      	movs	r3, #0
     e62:	8023      	strh	r3, [r4, #0]
     e64:	e7ee      	b.n	e44 <main+0x40>
     e66:	46c0      	nop			; (mov r8, r8)
     e68:	00000999 	.word	0x00000999
     e6c:	0000079d 	.word	0x0000079d
     e70:	000008b9 	.word	0x000008b9
     e74:	00000dad 	.word	0x00000dad
     e78:	00000b05 	.word	0x00000b05
     e7c:	00000881 	.word	0x00000881
     e80:	2000010c 	.word	0x2000010c
     e84:	00000bf5 	.word	0x00000bf5
     e88:	00000465 	.word	0x00000465
     e8c:	00000521 	.word	0x00000521
     e90:	20000028 	.word	0x20000028
     e94:	00000a3d 	.word	0x00000a3d

00000e98 <__libc_init_array>:
     e98:	4b0e      	ldr	r3, [pc, #56]	; (ed4 <__libc_init_array+0x3c>)
     e9a:	b570      	push	{r4, r5, r6, lr}
     e9c:	2500      	movs	r5, #0
     e9e:	1c1e      	adds	r6, r3, #0
     ea0:	4c0d      	ldr	r4, [pc, #52]	; (ed8 <__libc_init_array+0x40>)
     ea2:	1ae4      	subs	r4, r4, r3
     ea4:	10a4      	asrs	r4, r4, #2
     ea6:	42a5      	cmp	r5, r4
     ea8:	d004      	beq.n	eb4 <__libc_init_array+0x1c>
     eaa:	00ab      	lsls	r3, r5, #2
     eac:	58f3      	ldr	r3, [r6, r3]
     eae:	4798      	blx	r3
     eb0:	3501      	adds	r5, #1
     eb2:	e7f8      	b.n	ea6 <__libc_init_array+0xe>
     eb4:	f000 feb2 	bl	1c1c <_init>
     eb8:	4b08      	ldr	r3, [pc, #32]	; (edc <__libc_init_array+0x44>)
     eba:	2500      	movs	r5, #0
     ebc:	1c1e      	adds	r6, r3, #0
     ebe:	4c08      	ldr	r4, [pc, #32]	; (ee0 <__libc_init_array+0x48>)
     ec0:	1ae4      	subs	r4, r4, r3
     ec2:	10a4      	asrs	r4, r4, #2
     ec4:	42a5      	cmp	r5, r4
     ec6:	d004      	beq.n	ed2 <__libc_init_array+0x3a>
     ec8:	00ab      	lsls	r3, r5, #2
     eca:	58f3      	ldr	r3, [r6, r3]
     ecc:	4798      	blx	r3
     ece:	3501      	adds	r5, #1
     ed0:	e7f8      	b.n	ec4 <__libc_init_array+0x2c>
     ed2:	bd70      	pop	{r4, r5, r6, pc}
     ed4:	00001c28 	.word	0x00001c28
     ed8:	00001c28 	.word	0x00001c28
     edc:	00001c28 	.word	0x00001c28
     ee0:	00001c2c 	.word	0x00001c2c

00000ee4 <memcpy>:
     ee4:	2300      	movs	r3, #0
     ee6:	b510      	push	{r4, lr}
     ee8:	4293      	cmp	r3, r2
     eea:	d003      	beq.n	ef4 <memcpy+0x10>
     eec:	5ccc      	ldrb	r4, [r1, r3]
     eee:	54c4      	strb	r4, [r0, r3]
     ef0:	3301      	adds	r3, #1
     ef2:	e7f9      	b.n	ee8 <memcpy+0x4>
     ef4:	bd10      	pop	{r4, pc}
	...

00000ef8 <__aeabi_idiv0>:
     ef8:	4770      	bx	lr
     efa:	46c0      	nop			; (mov r8, r8)

00000efc <__aeabi_uldivmod>:
     efc:	2b00      	cmp	r3, #0
     efe:	d111      	bne.n	f24 <__aeabi_uldivmod+0x28>
     f00:	2a00      	cmp	r2, #0
     f02:	d10f      	bne.n	f24 <__aeabi_uldivmod+0x28>
     f04:	2900      	cmp	r1, #0
     f06:	d100      	bne.n	f0a <__aeabi_uldivmod+0xe>
     f08:	2800      	cmp	r0, #0
     f0a:	d002      	beq.n	f12 <__aeabi_uldivmod+0x16>
     f0c:	2100      	movs	r1, #0
     f0e:	43c9      	mvns	r1, r1
     f10:	1c08      	adds	r0, r1, #0
     f12:	b407      	push	{r0, r1, r2}
     f14:	4802      	ldr	r0, [pc, #8]	; (f20 <__aeabi_uldivmod+0x24>)
     f16:	a102      	add	r1, pc, #8	; (adr r1, f20 <__aeabi_uldivmod+0x24>)
     f18:	1840      	adds	r0, r0, r1
     f1a:	9002      	str	r0, [sp, #8]
     f1c:	bd03      	pop	{r0, r1, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	ffffffd9 	.word	0xffffffd9
     f24:	b403      	push	{r0, r1}
     f26:	4668      	mov	r0, sp
     f28:	b501      	push	{r0, lr}
     f2a:	9802      	ldr	r0, [sp, #8]
     f2c:	f000 f84c 	bl	fc8 <__gnu_uldivmod_helper>
     f30:	9b01      	ldr	r3, [sp, #4]
     f32:	469e      	mov	lr, r3
     f34:	b002      	add	sp, #8
     f36:	bc0c      	pop	{r2, r3}
     f38:	4770      	bx	lr
     f3a:	46c0      	nop			; (mov r8, r8)

00000f3c <__aeabi_lmul>:
     f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f3e:	464f      	mov	r7, r9
     f40:	4646      	mov	r6, r8
     f42:	0405      	lsls	r5, r0, #16
     f44:	0c2d      	lsrs	r5, r5, #16
     f46:	1c2c      	adds	r4, r5, #0
     f48:	b4c0      	push	{r6, r7}
     f4a:	0417      	lsls	r7, r2, #16
     f4c:	0c16      	lsrs	r6, r2, #16
     f4e:	0c3f      	lsrs	r7, r7, #16
     f50:	4699      	mov	r9, r3
     f52:	0c03      	lsrs	r3, r0, #16
     f54:	437c      	muls	r4, r7
     f56:	4375      	muls	r5, r6
     f58:	435f      	muls	r7, r3
     f5a:	4373      	muls	r3, r6
     f5c:	197d      	adds	r5, r7, r5
     f5e:	0c26      	lsrs	r6, r4, #16
     f60:	19ad      	adds	r5, r5, r6
     f62:	469c      	mov	ip, r3
     f64:	42af      	cmp	r7, r5
     f66:	d903      	bls.n	f70 <__aeabi_lmul+0x34>
     f68:	2380      	movs	r3, #128	; 0x80
     f6a:	025b      	lsls	r3, r3, #9
     f6c:	4698      	mov	r8, r3
     f6e:	44c4      	add	ip, r8
     f70:	464b      	mov	r3, r9
     f72:	4351      	muls	r1, r2
     f74:	4343      	muls	r3, r0
     f76:	0424      	lsls	r4, r4, #16
     f78:	0c2e      	lsrs	r6, r5, #16
     f7a:	0c24      	lsrs	r4, r4, #16
     f7c:	042d      	lsls	r5, r5, #16
     f7e:	4466      	add	r6, ip
     f80:	192c      	adds	r4, r5, r4
     f82:	1859      	adds	r1, r3, r1
     f84:	1989      	adds	r1, r1, r6
     f86:	1c20      	adds	r0, r4, #0
     f88:	bc0c      	pop	{r2, r3}
     f8a:	4690      	mov	r8, r2
     f8c:	4699      	mov	r9, r3
     f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f90 <__gnu_ldivmod_helper>:
     f90:	b5f0      	push	{r4, r5, r6, r7, lr}
     f92:	b083      	sub	sp, #12
     f94:	1c16      	adds	r6, r2, #0
     f96:	1c1f      	adds	r7, r3, #0
     f98:	9000      	str	r0, [sp, #0]
     f9a:	9101      	str	r1, [sp, #4]
     f9c:	f000 fbb2 	bl	1704 <__divdi3>
     fa0:	1c04      	adds	r4, r0, #0
     fa2:	1c0d      	adds	r5, r1, #0
     fa4:	1c22      	adds	r2, r4, #0
     fa6:	1c2b      	adds	r3, r5, #0
     fa8:	1c30      	adds	r0, r6, #0
     faa:	1c39      	adds	r1, r7, #0
     fac:	f7ff ffc6 	bl	f3c <__aeabi_lmul>
     fb0:	9a00      	ldr	r2, [sp, #0]
     fb2:	9b01      	ldr	r3, [sp, #4]
     fb4:	1a12      	subs	r2, r2, r0
     fb6:	418b      	sbcs	r3, r1
     fb8:	9908      	ldr	r1, [sp, #32]
     fba:	1c20      	adds	r0, r4, #0
     fbc:	600a      	str	r2, [r1, #0]
     fbe:	604b      	str	r3, [r1, #4]
     fc0:	1c29      	adds	r1, r5, #0
     fc2:	b003      	add	sp, #12
     fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fc6:	46c0      	nop			; (mov r8, r8)

00000fc8 <__gnu_uldivmod_helper>:
     fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fca:	1c14      	adds	r4, r2, #0
     fcc:	b083      	sub	sp, #12
     fce:	1c1d      	adds	r5, r3, #0
     fd0:	9000      	str	r0, [sp, #0]
     fd2:	9101      	str	r1, [sp, #4]
     fd4:	f000 fc8e 	bl	18f4 <__udivdi3>
     fd8:	1c22      	adds	r2, r4, #0
     fda:	1c2b      	adds	r3, r5, #0
     fdc:	1c06      	adds	r6, r0, #0
     fde:	1c0f      	adds	r7, r1, #0
     fe0:	f7ff ffac 	bl	f3c <__aeabi_lmul>
     fe4:	9a00      	ldr	r2, [sp, #0]
     fe6:	9b01      	ldr	r3, [sp, #4]
     fe8:	1a12      	subs	r2, r2, r0
     fea:	418b      	sbcs	r3, r1
     fec:	9908      	ldr	r1, [sp, #32]
     fee:	1c30      	adds	r0, r6, #0
     ff0:	600a      	str	r2, [r1, #0]
     ff2:	604b      	str	r3, [r1, #4]
     ff4:	1c39      	adds	r1, r7, #0
     ff6:	b003      	add	sp, #12
     ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ffa:	46c0      	nop			; (mov r8, r8)

00000ffc <__aeabi_dmul>:
     ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ffe:	465f      	mov	r7, fp
    1000:	4656      	mov	r6, sl
    1002:	464d      	mov	r5, r9
    1004:	4644      	mov	r4, r8
    1006:	b4f0      	push	{r4, r5, r6, r7}
    1008:	1c05      	adds	r5, r0, #0
    100a:	1c06      	adds	r6, r0, #0
    100c:	0308      	lsls	r0, r1, #12
    100e:	b087      	sub	sp, #28
    1010:	4699      	mov	r9, r3
    1012:	004f      	lsls	r7, r1, #1
    1014:	0b03      	lsrs	r3, r0, #12
    1016:	0fcc      	lsrs	r4, r1, #31
    1018:	4692      	mov	sl, r2
    101a:	469b      	mov	fp, r3
    101c:	0d7f      	lsrs	r7, r7, #21
    101e:	9401      	str	r4, [sp, #4]
    1020:	d067      	beq.n	10f2 <__aeabi_dmul+0xf6>
    1022:	4b6c      	ldr	r3, [pc, #432]	; (11d4 <__aeabi_dmul+0x1d8>)
    1024:	429f      	cmp	r7, r3
    1026:	d036      	beq.n	1096 <__aeabi_dmul+0x9a>
    1028:	2080      	movs	r0, #128	; 0x80
    102a:	465b      	mov	r3, fp
    102c:	0340      	lsls	r0, r0, #13
    102e:	4318      	orrs	r0, r3
    1030:	00c0      	lsls	r0, r0, #3
    1032:	0f6b      	lsrs	r3, r5, #29
    1034:	4318      	orrs	r0, r3
    1036:	4b68      	ldr	r3, [pc, #416]	; (11d8 <__aeabi_dmul+0x1dc>)
    1038:	4683      	mov	fp, r0
    103a:	469c      	mov	ip, r3
    103c:	2300      	movs	r3, #0
    103e:	4698      	mov	r8, r3
    1040:	00ee      	lsls	r6, r5, #3
    1042:	4467      	add	r7, ip
    1044:	9300      	str	r3, [sp, #0]
    1046:	464b      	mov	r3, r9
    1048:	4649      	mov	r1, r9
    104a:	031d      	lsls	r5, r3, #12
    104c:	0fc9      	lsrs	r1, r1, #31
    104e:	005b      	lsls	r3, r3, #1
    1050:	4652      	mov	r2, sl
    1052:	0b2d      	lsrs	r5, r5, #12
    1054:	0d5b      	lsrs	r3, r3, #21
    1056:	4689      	mov	r9, r1
    1058:	d100      	bne.n	105c <__aeabi_dmul+0x60>
    105a:	e06e      	b.n	113a <__aeabi_dmul+0x13e>
    105c:	495d      	ldr	r1, [pc, #372]	; (11d4 <__aeabi_dmul+0x1d8>)
    105e:	428b      	cmp	r3, r1
    1060:	d064      	beq.n	112c <__aeabi_dmul+0x130>
    1062:	2080      	movs	r0, #128	; 0x80
    1064:	495c      	ldr	r1, [pc, #368]	; (11d8 <__aeabi_dmul+0x1dc>)
    1066:	0340      	lsls	r0, r0, #13
    1068:	468c      	mov	ip, r1
    106a:	2100      	movs	r1, #0
    106c:	4305      	orrs	r5, r0
    106e:	00ed      	lsls	r5, r5, #3
    1070:	0f50      	lsrs	r0, r2, #29
    1072:	4305      	orrs	r5, r0
    1074:	00d2      	lsls	r2, r2, #3
    1076:	4463      	add	r3, ip
    1078:	4648      	mov	r0, r9
    107a:	18ff      	adds	r7, r7, r3
    107c:	1c7b      	adds	r3, r7, #1
    107e:	469a      	mov	sl, r3
    1080:	9b00      	ldr	r3, [sp, #0]
    1082:	4060      	eors	r0, r4
    1084:	9002      	str	r0, [sp, #8]
    1086:	430b      	orrs	r3, r1
    1088:	2b0f      	cmp	r3, #15
    108a:	d900      	bls.n	108e <__aeabi_dmul+0x92>
    108c:	e0ac      	b.n	11e8 <__aeabi_dmul+0x1ec>
    108e:	4853      	ldr	r0, [pc, #332]	; (11dc <__aeabi_dmul+0x1e0>)
    1090:	009b      	lsls	r3, r3, #2
    1092:	58c3      	ldr	r3, [r0, r3]
    1094:	469f      	mov	pc, r3
    1096:	465b      	mov	r3, fp
    1098:	431d      	orrs	r5, r3
    109a:	d000      	beq.n	109e <__aeabi_dmul+0xa2>
    109c:	e082      	b.n	11a4 <__aeabi_dmul+0x1a8>
    109e:	2308      	movs	r3, #8
    10a0:	9300      	str	r3, [sp, #0]
    10a2:	2300      	movs	r3, #0
    10a4:	469b      	mov	fp, r3
    10a6:	3302      	adds	r3, #2
    10a8:	2600      	movs	r6, #0
    10aa:	4698      	mov	r8, r3
    10ac:	e7cb      	b.n	1046 <__aeabi_dmul+0x4a>
    10ae:	9b02      	ldr	r3, [sp, #8]
    10b0:	9301      	str	r3, [sp, #4]
    10b2:	4643      	mov	r3, r8
    10b4:	2b02      	cmp	r3, #2
    10b6:	d159      	bne.n	116c <__aeabi_dmul+0x170>
    10b8:	2401      	movs	r4, #1
    10ba:	2500      	movs	r5, #0
    10bc:	2600      	movs	r6, #0
    10be:	9b01      	ldr	r3, [sp, #4]
    10c0:	401c      	ands	r4, r3
    10c2:	4b44      	ldr	r3, [pc, #272]	; (11d4 <__aeabi_dmul+0x1d8>)
    10c4:	2100      	movs	r1, #0
    10c6:	032d      	lsls	r5, r5, #12
    10c8:	0d0a      	lsrs	r2, r1, #20
    10ca:	0512      	lsls	r2, r2, #20
    10cc:	0b2d      	lsrs	r5, r5, #12
    10ce:	4315      	orrs	r5, r2
    10d0:	4a43      	ldr	r2, [pc, #268]	; (11e0 <__aeabi_dmul+0x1e4>)
    10d2:	051b      	lsls	r3, r3, #20
    10d4:	4015      	ands	r5, r2
    10d6:	431d      	orrs	r5, r3
    10d8:	006d      	lsls	r5, r5, #1
    10da:	07e4      	lsls	r4, r4, #31
    10dc:	086d      	lsrs	r5, r5, #1
    10de:	4325      	orrs	r5, r4
    10e0:	1c30      	adds	r0, r6, #0
    10e2:	1c29      	adds	r1, r5, #0
    10e4:	b007      	add	sp, #28
    10e6:	bc3c      	pop	{r2, r3, r4, r5}
    10e8:	4690      	mov	r8, r2
    10ea:	4699      	mov	r9, r3
    10ec:	46a2      	mov	sl, r4
    10ee:	46ab      	mov	fp, r5
    10f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f2:	432b      	orrs	r3, r5
    10f4:	d04e      	beq.n	1194 <__aeabi_dmul+0x198>
    10f6:	465b      	mov	r3, fp
    10f8:	2b00      	cmp	r3, #0
    10fa:	d100      	bne.n	10fe <__aeabi_dmul+0x102>
    10fc:	e185      	b.n	140a <__aeabi_dmul+0x40e>
    10fe:	4658      	mov	r0, fp
    1100:	f000 fae2 	bl	16c8 <__clzsi2>
    1104:	1c02      	adds	r2, r0, #0
    1106:	2328      	movs	r3, #40	; 0x28
    1108:	1c29      	adds	r1, r5, #0
    110a:	1a9b      	subs	r3, r3, r2
    110c:	1c16      	adds	r6, r2, #0
    110e:	4658      	mov	r0, fp
    1110:	40d9      	lsrs	r1, r3
    1112:	3e08      	subs	r6, #8
    1114:	40b0      	lsls	r0, r6
    1116:	1c0b      	adds	r3, r1, #0
    1118:	40b5      	lsls	r5, r6
    111a:	4303      	orrs	r3, r0
    111c:	469b      	mov	fp, r3
    111e:	1c2e      	adds	r6, r5, #0
    1120:	2300      	movs	r3, #0
    1122:	4f30      	ldr	r7, [pc, #192]	; (11e4 <__aeabi_dmul+0x1e8>)
    1124:	9300      	str	r3, [sp, #0]
    1126:	1abf      	subs	r7, r7, r2
    1128:	4698      	mov	r8, r3
    112a:	e78c      	b.n	1046 <__aeabi_dmul+0x4a>
    112c:	4651      	mov	r1, sl
    112e:	4329      	orrs	r1, r5
    1130:	d12e      	bne.n	1190 <__aeabi_dmul+0x194>
    1132:	2500      	movs	r5, #0
    1134:	2200      	movs	r2, #0
    1136:	2102      	movs	r1, #2
    1138:	e79e      	b.n	1078 <__aeabi_dmul+0x7c>
    113a:	4651      	mov	r1, sl
    113c:	4329      	orrs	r1, r5
    113e:	d023      	beq.n	1188 <__aeabi_dmul+0x18c>
    1140:	2d00      	cmp	r5, #0
    1142:	d100      	bne.n	1146 <__aeabi_dmul+0x14a>
    1144:	e154      	b.n	13f0 <__aeabi_dmul+0x3f4>
    1146:	1c28      	adds	r0, r5, #0
    1148:	f000 fabe 	bl	16c8 <__clzsi2>
    114c:	1c03      	adds	r3, r0, #0
    114e:	2128      	movs	r1, #40	; 0x28
    1150:	4650      	mov	r0, sl
    1152:	1ac9      	subs	r1, r1, r3
    1154:	1c1a      	adds	r2, r3, #0
    1156:	40c8      	lsrs	r0, r1
    1158:	4651      	mov	r1, sl
    115a:	3a08      	subs	r2, #8
    115c:	4091      	lsls	r1, r2
    115e:	4095      	lsls	r5, r2
    1160:	1c0a      	adds	r2, r1, #0
    1162:	4305      	orrs	r5, r0
    1164:	481f      	ldr	r0, [pc, #124]	; (11e4 <__aeabi_dmul+0x1e8>)
    1166:	2100      	movs	r1, #0
    1168:	1ac3      	subs	r3, r0, r3
    116a:	e785      	b.n	1078 <__aeabi_dmul+0x7c>
    116c:	2b03      	cmp	r3, #3
    116e:	d100      	bne.n	1172 <__aeabi_dmul+0x176>
    1170:	e1c2      	b.n	14f8 <__aeabi_dmul+0x4fc>
    1172:	2b01      	cmp	r3, #1
    1174:	d000      	beq.n	1178 <__aeabi_dmul+0x17c>
    1176:	e16d      	b.n	1454 <__aeabi_dmul+0x458>
    1178:	4644      	mov	r4, r8
    117a:	9b01      	ldr	r3, [sp, #4]
    117c:	2500      	movs	r5, #0
    117e:	401c      	ands	r4, r3
    1180:	b2e4      	uxtb	r4, r4
    1182:	2300      	movs	r3, #0
    1184:	2600      	movs	r6, #0
    1186:	e79d      	b.n	10c4 <__aeabi_dmul+0xc8>
    1188:	2500      	movs	r5, #0
    118a:	2200      	movs	r2, #0
    118c:	2101      	movs	r1, #1
    118e:	e773      	b.n	1078 <__aeabi_dmul+0x7c>
    1190:	2103      	movs	r1, #3
    1192:	e771      	b.n	1078 <__aeabi_dmul+0x7c>
    1194:	2304      	movs	r3, #4
    1196:	9300      	str	r3, [sp, #0]
    1198:	2300      	movs	r3, #0
    119a:	469b      	mov	fp, r3
    119c:	3301      	adds	r3, #1
    119e:	2600      	movs	r6, #0
    11a0:	4698      	mov	r8, r3
    11a2:	e750      	b.n	1046 <__aeabi_dmul+0x4a>
    11a4:	230c      	movs	r3, #12
    11a6:	9300      	str	r3, [sp, #0]
    11a8:	3b09      	subs	r3, #9
    11aa:	4698      	mov	r8, r3
    11ac:	e74b      	b.n	1046 <__aeabi_dmul+0x4a>
    11ae:	2580      	movs	r5, #128	; 0x80
    11b0:	2400      	movs	r4, #0
    11b2:	032d      	lsls	r5, r5, #12
    11b4:	2600      	movs	r6, #0
    11b6:	4b07      	ldr	r3, [pc, #28]	; (11d4 <__aeabi_dmul+0x1d8>)
    11b8:	e784      	b.n	10c4 <__aeabi_dmul+0xc8>
    11ba:	464b      	mov	r3, r9
    11bc:	46ab      	mov	fp, r5
    11be:	1c16      	adds	r6, r2, #0
    11c0:	9301      	str	r3, [sp, #4]
    11c2:	4688      	mov	r8, r1
    11c4:	e775      	b.n	10b2 <__aeabi_dmul+0xb6>
    11c6:	9b02      	ldr	r3, [sp, #8]
    11c8:	46ab      	mov	fp, r5
    11ca:	1c16      	adds	r6, r2, #0
    11cc:	9301      	str	r3, [sp, #4]
    11ce:	4688      	mov	r8, r1
    11d0:	e76f      	b.n	10b2 <__aeabi_dmul+0xb6>
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	000007ff 	.word	0x000007ff
    11d8:	fffffc01 	.word	0xfffffc01
    11dc:	00001bdc 	.word	0x00001bdc
    11e0:	800fffff 	.word	0x800fffff
    11e4:	fffffc0d 	.word	0xfffffc0d
    11e8:	0c33      	lsrs	r3, r6, #16
    11ea:	0436      	lsls	r6, r6, #16
    11ec:	0c36      	lsrs	r6, r6, #16
    11ee:	469c      	mov	ip, r3
    11f0:	1c33      	adds	r3, r6, #0
    11f2:	0c14      	lsrs	r4, r2, #16
    11f4:	0412      	lsls	r2, r2, #16
    11f6:	0c12      	lsrs	r2, r2, #16
    11f8:	4353      	muls	r3, r2
    11fa:	4698      	mov	r8, r3
    11fc:	4663      	mov	r3, ip
    11fe:	4353      	muls	r3, r2
    1200:	4699      	mov	r9, r3
    1202:	4663      	mov	r3, ip
    1204:	4363      	muls	r3, r4
    1206:	9301      	str	r3, [sp, #4]
    1208:	1c33      	adds	r3, r6, #0
    120a:	4641      	mov	r1, r8
    120c:	4363      	muls	r3, r4
    120e:	0c09      	lsrs	r1, r1, #16
    1210:	444b      	add	r3, r9
    1212:	185b      	adds	r3, r3, r1
    1214:	4599      	cmp	r9, r3
    1216:	d905      	bls.n	1224 <__aeabi_dmul+0x228>
    1218:	2080      	movs	r0, #128	; 0x80
    121a:	0240      	lsls	r0, r0, #9
    121c:	4681      	mov	r9, r0
    121e:	9901      	ldr	r1, [sp, #4]
    1220:	4449      	add	r1, r9
    1222:	9101      	str	r1, [sp, #4]
    1224:	0c19      	lsrs	r1, r3, #16
    1226:	9103      	str	r1, [sp, #12]
    1228:	4641      	mov	r1, r8
    122a:	0409      	lsls	r1, r1, #16
    122c:	0c09      	lsrs	r1, r1, #16
    122e:	041b      	lsls	r3, r3, #16
    1230:	185b      	adds	r3, r3, r1
    1232:	9304      	str	r3, [sp, #16]
    1234:	0c2b      	lsrs	r3, r5, #16
    1236:	4698      	mov	r8, r3
    1238:	1c33      	adds	r3, r6, #0
    123a:	042d      	lsls	r5, r5, #16
    123c:	0c29      	lsrs	r1, r5, #16
    123e:	434b      	muls	r3, r1
    1240:	4660      	mov	r0, ip
    1242:	9300      	str	r3, [sp, #0]
    1244:	4643      	mov	r3, r8
    1246:	4665      	mov	r5, ip
    1248:	4358      	muls	r0, r3
    124a:	435e      	muls	r6, r3
    124c:	9b00      	ldr	r3, [sp, #0]
    124e:	434d      	muls	r5, r1
    1250:	0c1b      	lsrs	r3, r3, #16
    1252:	4699      	mov	r9, r3
    1254:	19ae      	adds	r6, r5, r6
    1256:	444e      	add	r6, r9
    1258:	4684      	mov	ip, r0
    125a:	42b5      	cmp	r5, r6
    125c:	d903      	bls.n	1266 <__aeabi_dmul+0x26a>
    125e:	2380      	movs	r3, #128	; 0x80
    1260:	025b      	lsls	r3, r3, #9
    1262:	4699      	mov	r9, r3
    1264:	44cc      	add	ip, r9
    1266:	0c35      	lsrs	r5, r6, #16
    1268:	1c2b      	adds	r3, r5, #0
    126a:	9803      	ldr	r0, [sp, #12]
    126c:	4463      	add	r3, ip
    126e:	4684      	mov	ip, r0
    1270:	9305      	str	r3, [sp, #20]
    1272:	9b00      	ldr	r3, [sp, #0]
    1274:	0436      	lsls	r6, r6, #16
    1276:	041b      	lsls	r3, r3, #16
    1278:	0c1b      	lsrs	r3, r3, #16
    127a:	18f3      	adds	r3, r6, r3
    127c:	449c      	add	ip, r3
    127e:	4660      	mov	r0, ip
    1280:	9003      	str	r0, [sp, #12]
    1282:	4658      	mov	r0, fp
    1284:	0405      	lsls	r5, r0, #16
    1286:	0c06      	lsrs	r6, r0, #16
    1288:	0c28      	lsrs	r0, r5, #16
    128a:	4684      	mov	ip, r0
    128c:	4350      	muls	r0, r2
    128e:	1c35      	adds	r5, r6, #0
    1290:	4681      	mov	r9, r0
    1292:	4660      	mov	r0, ip
    1294:	4365      	muls	r5, r4
    1296:	4344      	muls	r4, r0
    1298:	4648      	mov	r0, r9
    129a:	0c00      	lsrs	r0, r0, #16
    129c:	4683      	mov	fp, r0
    129e:	4372      	muls	r2, r6
    12a0:	1914      	adds	r4, r2, r4
    12a2:	445c      	add	r4, fp
    12a4:	42a2      	cmp	r2, r4
    12a6:	d903      	bls.n	12b0 <__aeabi_dmul+0x2b4>
    12a8:	2280      	movs	r2, #128	; 0x80
    12aa:	0252      	lsls	r2, r2, #9
    12ac:	4693      	mov	fp, r2
    12ae:	445d      	add	r5, fp
    12b0:	0c22      	lsrs	r2, r4, #16
    12b2:	18ad      	adds	r5, r5, r2
    12b4:	464a      	mov	r2, r9
    12b6:	0412      	lsls	r2, r2, #16
    12b8:	0c12      	lsrs	r2, r2, #16
    12ba:	0424      	lsls	r4, r4, #16
    12bc:	4640      	mov	r0, r8
    12be:	18a4      	adds	r4, r4, r2
    12c0:	4662      	mov	r2, ip
    12c2:	434a      	muls	r2, r1
    12c4:	4371      	muls	r1, r6
    12c6:	4346      	muls	r6, r0
    12c8:	4660      	mov	r0, ip
    12ca:	9600      	str	r6, [sp, #0]
    12cc:	4646      	mov	r6, r8
    12ce:	4370      	muls	r0, r6
    12d0:	4680      	mov	r8, r0
    12d2:	0c10      	lsrs	r0, r2, #16
    12d4:	4684      	mov	ip, r0
    12d6:	4488      	add	r8, r1
    12d8:	44e0      	add	r8, ip
    12da:	4541      	cmp	r1, r8
    12dc:	d905      	bls.n	12ea <__aeabi_dmul+0x2ee>
    12de:	2180      	movs	r1, #128	; 0x80
    12e0:	0249      	lsls	r1, r1, #9
    12e2:	468c      	mov	ip, r1
    12e4:	9900      	ldr	r1, [sp, #0]
    12e6:	4461      	add	r1, ip
    12e8:	9100      	str	r1, [sp, #0]
    12ea:	9801      	ldr	r0, [sp, #4]
    12ec:	9903      	ldr	r1, [sp, #12]
    12ee:	4684      	mov	ip, r0
    12f0:	4461      	add	r1, ip
    12f2:	4299      	cmp	r1, r3
    12f4:	419b      	sbcs	r3, r3
    12f6:	425b      	negs	r3, r3
    12f8:	4699      	mov	r9, r3
    12fa:	9805      	ldr	r0, [sp, #20]
    12fc:	4643      	mov	r3, r8
    12fe:	4684      	mov	ip, r0
    1300:	0412      	lsls	r2, r2, #16
    1302:	0c12      	lsrs	r2, r2, #16
    1304:	041b      	lsls	r3, r3, #16
    1306:	189b      	adds	r3, r3, r2
    1308:	4463      	add	r3, ip
    130a:	469c      	mov	ip, r3
    130c:	46ab      	mov	fp, r5
    130e:	4283      	cmp	r3, r0
    1310:	419b      	sbcs	r3, r3
    1312:	4640      	mov	r0, r8
    1314:	190a      	adds	r2, r1, r4
    1316:	44cc      	add	ip, r9
    1318:	42a2      	cmp	r2, r4
    131a:	4189      	sbcs	r1, r1
    131c:	44e3      	add	fp, ip
    131e:	45cc      	cmp	ip, r9
    1320:	41b6      	sbcs	r6, r6
    1322:	465c      	mov	r4, fp
    1324:	0c00      	lsrs	r0, r0, #16
    1326:	4680      	mov	r8, r0
    1328:	4249      	negs	r1, r1
    132a:	4276      	negs	r6, r6
    132c:	425b      	negs	r3, r3
    132e:	1864      	adds	r4, r4, r1
    1330:	4333      	orrs	r3, r6
    1332:	4498      	add	r8, r3
    1334:	428c      	cmp	r4, r1
    1336:	4189      	sbcs	r1, r1
    1338:	45ab      	cmp	fp, r5
    133a:	419b      	sbcs	r3, r3
    133c:	4249      	negs	r1, r1
    133e:	425b      	negs	r3, r3
    1340:	4319      	orrs	r1, r3
    1342:	1c0d      	adds	r5, r1, #0
    1344:	9b00      	ldr	r3, [sp, #0]
    1346:	4445      	add	r5, r8
    1348:	18ee      	adds	r6, r5, r3
    134a:	0276      	lsls	r6, r6, #9
    134c:	0de5      	lsrs	r5, r4, #23
    134e:	432e      	orrs	r6, r5
    1350:	46b3      	mov	fp, r6
    1352:	9b04      	ldr	r3, [sp, #16]
    1354:	0256      	lsls	r6, r2, #9
    1356:	431e      	orrs	r6, r3
    1358:	1e73      	subs	r3, r6, #1
    135a:	419e      	sbcs	r6, r3
    135c:	465b      	mov	r3, fp
    135e:	0dd2      	lsrs	r2, r2, #23
    1360:	4332      	orrs	r2, r6
    1362:	0266      	lsls	r6, r4, #9
    1364:	4316      	orrs	r6, r2
    1366:	01db      	lsls	r3, r3, #7
    1368:	d50a      	bpl.n	1380 <__aeabi_dmul+0x384>
    136a:	2301      	movs	r3, #1
    136c:	4033      	ands	r3, r6
    136e:	0876      	lsrs	r6, r6, #1
    1370:	431e      	orrs	r6, r3
    1372:	465b      	mov	r3, fp
    1374:	07db      	lsls	r3, r3, #31
    1376:	431e      	orrs	r6, r3
    1378:	465b      	mov	r3, fp
    137a:	085b      	lsrs	r3, r3, #1
    137c:	469b      	mov	fp, r3
    137e:	4657      	mov	r7, sl
    1380:	4b63      	ldr	r3, [pc, #396]	; (1510 <__aeabi_dmul+0x514>)
    1382:	18fb      	adds	r3, r7, r3
    1384:	2b00      	cmp	r3, #0
    1386:	dd5a      	ble.n	143e <__aeabi_dmul+0x442>
    1388:	0772      	lsls	r2, r6, #29
    138a:	d009      	beq.n	13a0 <__aeabi_dmul+0x3a4>
    138c:	220f      	movs	r2, #15
    138e:	4032      	ands	r2, r6
    1390:	2a04      	cmp	r2, #4
    1392:	d005      	beq.n	13a0 <__aeabi_dmul+0x3a4>
    1394:	1d32      	adds	r2, r6, #4
    1396:	42b2      	cmp	r2, r6
    1398:	41b6      	sbcs	r6, r6
    139a:	4276      	negs	r6, r6
    139c:	44b3      	add	fp, r6
    139e:	1c16      	adds	r6, r2, #0
    13a0:	465a      	mov	r2, fp
    13a2:	01d2      	lsls	r2, r2, #7
    13a4:	d506      	bpl.n	13b4 <__aeabi_dmul+0x3b8>
    13a6:	465a      	mov	r2, fp
    13a8:	4b5a      	ldr	r3, [pc, #360]	; (1514 <__aeabi_dmul+0x518>)
    13aa:	401a      	ands	r2, r3
    13ac:	2380      	movs	r3, #128	; 0x80
    13ae:	4693      	mov	fp, r2
    13b0:	00db      	lsls	r3, r3, #3
    13b2:	18fb      	adds	r3, r7, r3
    13b4:	4a58      	ldr	r2, [pc, #352]	; (1518 <__aeabi_dmul+0x51c>)
    13b6:	4293      	cmp	r3, r2
    13b8:	dd34      	ble.n	1424 <__aeabi_dmul+0x428>
    13ba:	2401      	movs	r4, #1
    13bc:	9b02      	ldr	r3, [sp, #8]
    13be:	2500      	movs	r5, #0
    13c0:	401c      	ands	r4, r3
    13c2:	2600      	movs	r6, #0
    13c4:	4b55      	ldr	r3, [pc, #340]	; (151c <__aeabi_dmul+0x520>)
    13c6:	e67d      	b.n	10c4 <__aeabi_dmul+0xc8>
    13c8:	2080      	movs	r0, #128	; 0x80
    13ca:	465b      	mov	r3, fp
    13cc:	0300      	lsls	r0, r0, #12
    13ce:	4203      	tst	r3, r0
    13d0:	d008      	beq.n	13e4 <__aeabi_dmul+0x3e8>
    13d2:	4205      	tst	r5, r0
    13d4:	d106      	bne.n	13e4 <__aeabi_dmul+0x3e8>
    13d6:	4305      	orrs	r5, r0
    13d8:	032d      	lsls	r5, r5, #12
    13da:	0b2d      	lsrs	r5, r5, #12
    13dc:	464c      	mov	r4, r9
    13de:	1c16      	adds	r6, r2, #0
    13e0:	4b4e      	ldr	r3, [pc, #312]	; (151c <__aeabi_dmul+0x520>)
    13e2:	e66f      	b.n	10c4 <__aeabi_dmul+0xc8>
    13e4:	465d      	mov	r5, fp
    13e6:	4305      	orrs	r5, r0
    13e8:	032d      	lsls	r5, r5, #12
    13ea:	0b2d      	lsrs	r5, r5, #12
    13ec:	4b4b      	ldr	r3, [pc, #300]	; (151c <__aeabi_dmul+0x520>)
    13ee:	e669      	b.n	10c4 <__aeabi_dmul+0xc8>
    13f0:	4650      	mov	r0, sl
    13f2:	f000 f969 	bl	16c8 <__clzsi2>
    13f6:	1c03      	adds	r3, r0, #0
    13f8:	3320      	adds	r3, #32
    13fa:	2b27      	cmp	r3, #39	; 0x27
    13fc:	dc00      	bgt.n	1400 <__aeabi_dmul+0x404>
    13fe:	e6a6      	b.n	114e <__aeabi_dmul+0x152>
    1400:	4655      	mov	r5, sl
    1402:	3808      	subs	r0, #8
    1404:	4085      	lsls	r5, r0
    1406:	2200      	movs	r2, #0
    1408:	e6ac      	b.n	1164 <__aeabi_dmul+0x168>
    140a:	1c28      	adds	r0, r5, #0
    140c:	f000 f95c 	bl	16c8 <__clzsi2>
    1410:	1c02      	adds	r2, r0, #0
    1412:	3220      	adds	r2, #32
    1414:	2a27      	cmp	r2, #39	; 0x27
    1416:	dc00      	bgt.n	141a <__aeabi_dmul+0x41e>
    1418:	e675      	b.n	1106 <__aeabi_dmul+0x10a>
    141a:	3808      	subs	r0, #8
    141c:	4085      	lsls	r5, r0
    141e:	2600      	movs	r6, #0
    1420:	46ab      	mov	fp, r5
    1422:	e67d      	b.n	1120 <__aeabi_dmul+0x124>
    1424:	465a      	mov	r2, fp
    1426:	08f6      	lsrs	r6, r6, #3
    1428:	0752      	lsls	r2, r2, #29
    142a:	4316      	orrs	r6, r2
    142c:	465a      	mov	r2, fp
    142e:	2401      	movs	r4, #1
    1430:	0255      	lsls	r5, r2, #9
    1432:	9a02      	ldr	r2, [sp, #8]
    1434:	055b      	lsls	r3, r3, #21
    1436:	0b2d      	lsrs	r5, r5, #12
    1438:	0d5b      	lsrs	r3, r3, #21
    143a:	4014      	ands	r4, r2
    143c:	e642      	b.n	10c4 <__aeabi_dmul+0xc8>
    143e:	4d38      	ldr	r5, [pc, #224]	; (1520 <__aeabi_dmul+0x524>)
    1440:	1bed      	subs	r5, r5, r7
    1442:	2d38      	cmp	r5, #56	; 0x38
    1444:	dd0a      	ble.n	145c <__aeabi_dmul+0x460>
    1446:	2401      	movs	r4, #1
    1448:	9b02      	ldr	r3, [sp, #8]
    144a:	2500      	movs	r5, #0
    144c:	401c      	ands	r4, r3
    144e:	2600      	movs	r6, #0
    1450:	2300      	movs	r3, #0
    1452:	e637      	b.n	10c4 <__aeabi_dmul+0xc8>
    1454:	9b01      	ldr	r3, [sp, #4]
    1456:	4657      	mov	r7, sl
    1458:	9302      	str	r3, [sp, #8]
    145a:	e791      	b.n	1380 <__aeabi_dmul+0x384>
    145c:	2d1f      	cmp	r5, #31
    145e:	dc25      	bgt.n	14ac <__aeabi_dmul+0x4b0>
    1460:	4b30      	ldr	r3, [pc, #192]	; (1524 <__aeabi_dmul+0x528>)
    1462:	1c32      	adds	r2, r6, #0
    1464:	469c      	mov	ip, r3
    1466:	4467      	add	r7, ip
    1468:	40be      	lsls	r6, r7
    146a:	465b      	mov	r3, fp
    146c:	40bb      	lsls	r3, r7
    146e:	1c37      	adds	r7, r6, #0
    1470:	40ea      	lsrs	r2, r5
    1472:	1e7e      	subs	r6, r7, #1
    1474:	41b7      	sbcs	r7, r6
    1476:	4313      	orrs	r3, r2
    1478:	433b      	orrs	r3, r7
    147a:	1c1e      	adds	r6, r3, #0
    147c:	465b      	mov	r3, fp
    147e:	40eb      	lsrs	r3, r5
    1480:	1c1d      	adds	r5, r3, #0
    1482:	0773      	lsls	r3, r6, #29
    1484:	d009      	beq.n	149a <__aeabi_dmul+0x49e>
    1486:	230f      	movs	r3, #15
    1488:	4033      	ands	r3, r6
    148a:	2b04      	cmp	r3, #4
    148c:	d005      	beq.n	149a <__aeabi_dmul+0x49e>
    148e:	1d33      	adds	r3, r6, #4
    1490:	42b3      	cmp	r3, r6
    1492:	41b6      	sbcs	r6, r6
    1494:	4276      	negs	r6, r6
    1496:	19ad      	adds	r5, r5, r6
    1498:	1c1e      	adds	r6, r3, #0
    149a:	022b      	lsls	r3, r5, #8
    149c:	d520      	bpl.n	14e0 <__aeabi_dmul+0x4e4>
    149e:	2401      	movs	r4, #1
    14a0:	9b02      	ldr	r3, [sp, #8]
    14a2:	2500      	movs	r5, #0
    14a4:	401c      	ands	r4, r3
    14a6:	2600      	movs	r6, #0
    14a8:	2301      	movs	r3, #1
    14aa:	e60b      	b.n	10c4 <__aeabi_dmul+0xc8>
    14ac:	465a      	mov	r2, fp
    14ae:	4b1e      	ldr	r3, [pc, #120]	; (1528 <__aeabi_dmul+0x52c>)
    14b0:	1bdb      	subs	r3, r3, r7
    14b2:	40da      	lsrs	r2, r3
    14b4:	1c13      	adds	r3, r2, #0
    14b6:	2d20      	cmp	r5, #32
    14b8:	d01c      	beq.n	14f4 <__aeabi_dmul+0x4f8>
    14ba:	4a1c      	ldr	r2, [pc, #112]	; (152c <__aeabi_dmul+0x530>)
    14bc:	4694      	mov	ip, r2
    14be:	465a      	mov	r2, fp
    14c0:	4467      	add	r7, ip
    14c2:	40ba      	lsls	r2, r7
    14c4:	1c17      	adds	r7, r2, #0
    14c6:	433e      	orrs	r6, r7
    14c8:	1e72      	subs	r2, r6, #1
    14ca:	4196      	sbcs	r6, r2
    14cc:	431e      	orrs	r6, r3
    14ce:	2307      	movs	r3, #7
    14d0:	2500      	movs	r5, #0
    14d2:	4033      	ands	r3, r6
    14d4:	d007      	beq.n	14e6 <__aeabi_dmul+0x4ea>
    14d6:	230f      	movs	r3, #15
    14d8:	2500      	movs	r5, #0
    14da:	4033      	ands	r3, r6
    14dc:	2b04      	cmp	r3, #4
    14de:	d1d6      	bne.n	148e <__aeabi_dmul+0x492>
    14e0:	076b      	lsls	r3, r5, #29
    14e2:	026d      	lsls	r5, r5, #9
    14e4:	0b2d      	lsrs	r5, r5, #12
    14e6:	2401      	movs	r4, #1
    14e8:	08f6      	lsrs	r6, r6, #3
    14ea:	431e      	orrs	r6, r3
    14ec:	9b02      	ldr	r3, [sp, #8]
    14ee:	401c      	ands	r4, r3
    14f0:	2300      	movs	r3, #0
    14f2:	e5e7      	b.n	10c4 <__aeabi_dmul+0xc8>
    14f4:	2700      	movs	r7, #0
    14f6:	e7e6      	b.n	14c6 <__aeabi_dmul+0x4ca>
    14f8:	2580      	movs	r5, #128	; 0x80
    14fa:	465b      	mov	r3, fp
    14fc:	2401      	movs	r4, #1
    14fe:	032d      	lsls	r5, r5, #12
    1500:	431d      	orrs	r5, r3
    1502:	9b01      	ldr	r3, [sp, #4]
    1504:	032d      	lsls	r5, r5, #12
    1506:	4023      	ands	r3, r4
    1508:	1c1c      	adds	r4, r3, #0
    150a:	0b2d      	lsrs	r5, r5, #12
    150c:	4b03      	ldr	r3, [pc, #12]	; (151c <__aeabi_dmul+0x520>)
    150e:	e5d9      	b.n	10c4 <__aeabi_dmul+0xc8>
    1510:	000003ff 	.word	0x000003ff
    1514:	feffffff 	.word	0xfeffffff
    1518:	000007fe 	.word	0x000007fe
    151c:	000007ff 	.word	0x000007ff
    1520:	fffffc02 	.word	0xfffffc02
    1524:	0000041e 	.word	0x0000041e
    1528:	fffffbe2 	.word	0xfffffbe2
    152c:	0000043e 	.word	0x0000043e

00001530 <__aeabi_i2d>:
    1530:	b538      	push	{r3, r4, r5, lr}
    1532:	1e04      	subs	r4, r0, #0
    1534:	d016      	beq.n	1564 <__aeabi_i2d+0x34>
    1536:	0fc5      	lsrs	r5, r0, #31
    1538:	d000      	beq.n	153c <__aeabi_i2d+0xc>
    153a:	4244      	negs	r4, r0
    153c:	1c20      	adds	r0, r4, #0
    153e:	f000 f8c3 	bl	16c8 <__clzsi2>
    1542:	4b17      	ldr	r3, [pc, #92]	; (15a0 <__aeabi_i2d+0x70>)
    1544:	1a1b      	subs	r3, r3, r0
    1546:	280a      	cmp	r0, #10
    1548:	dc21      	bgt.n	158e <__aeabi_i2d+0x5e>
    154a:	1c02      	adds	r2, r0, #0
    154c:	1c21      	adds	r1, r4, #0
    154e:	3215      	adds	r2, #21
    1550:	4091      	lsls	r1, r2
    1552:	1c0a      	adds	r2, r1, #0
    1554:	210b      	movs	r1, #11
    1556:	1a08      	subs	r0, r1, r0
    1558:	40c4      	lsrs	r4, r0
    155a:	055b      	lsls	r3, r3, #21
    155c:	0324      	lsls	r4, r4, #12
    155e:	0b24      	lsrs	r4, r4, #12
    1560:	0d5b      	lsrs	r3, r3, #21
    1562:	e003      	b.n	156c <__aeabi_i2d+0x3c>
    1564:	2500      	movs	r5, #0
    1566:	2300      	movs	r3, #0
    1568:	2400      	movs	r4, #0
    156a:	2200      	movs	r2, #0
    156c:	2100      	movs	r1, #0
    156e:	1c10      	adds	r0, r2, #0
    1570:	0324      	lsls	r4, r4, #12
    1572:	0d0a      	lsrs	r2, r1, #20
    1574:	0512      	lsls	r2, r2, #20
    1576:	0b24      	lsrs	r4, r4, #12
    1578:	4314      	orrs	r4, r2
    157a:	4a0a      	ldr	r2, [pc, #40]	; (15a4 <__aeabi_i2d+0x74>)
    157c:	051b      	lsls	r3, r3, #20
    157e:	4014      	ands	r4, r2
    1580:	431c      	orrs	r4, r3
    1582:	0064      	lsls	r4, r4, #1
    1584:	07ed      	lsls	r5, r5, #31
    1586:	0864      	lsrs	r4, r4, #1
    1588:	432c      	orrs	r4, r5
    158a:	1c21      	adds	r1, r4, #0
    158c:	bd38      	pop	{r3, r4, r5, pc}
    158e:	380b      	subs	r0, #11
    1590:	4084      	lsls	r4, r0
    1592:	055b      	lsls	r3, r3, #21
    1594:	0324      	lsls	r4, r4, #12
    1596:	0b24      	lsrs	r4, r4, #12
    1598:	0d5b      	lsrs	r3, r3, #21
    159a:	2200      	movs	r2, #0
    159c:	e7e6      	b.n	156c <__aeabi_i2d+0x3c>
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	0000041e 	.word	0x0000041e
    15a4:	800fffff 	.word	0x800fffff

000015a8 <__aeabi_d2f>:
    15a8:	b570      	push	{r4, r5, r6, lr}
    15aa:	030b      	lsls	r3, r1, #12
    15ac:	004d      	lsls	r5, r1, #1
    15ae:	0f44      	lsrs	r4, r0, #29
    15b0:	0d6d      	lsrs	r5, r5, #21
    15b2:	0a5b      	lsrs	r3, r3, #9
    15b4:	4323      	orrs	r3, r4
    15b6:	1c6c      	adds	r4, r5, #1
    15b8:	0564      	lsls	r4, r4, #21
    15ba:	0fc9      	lsrs	r1, r1, #31
    15bc:	00c2      	lsls	r2, r0, #3
    15be:	0d64      	lsrs	r4, r4, #21
    15c0:	2c01      	cmp	r4, #1
    15c2:	dd2a      	ble.n	161a <__aeabi_d2f+0x72>
    15c4:	4c3b      	ldr	r4, [pc, #236]	; (16b4 <__aeabi_d2f+0x10c>)
    15c6:	192c      	adds	r4, r5, r4
    15c8:	2cfe      	cmp	r4, #254	; 0xfe
    15ca:	dc1a      	bgt.n	1602 <__aeabi_d2f+0x5a>
    15cc:	2c00      	cmp	r4, #0
    15ce:	dd35      	ble.n	163c <__aeabi_d2f+0x94>
    15d0:	0180      	lsls	r0, r0, #6
    15d2:	1e45      	subs	r5, r0, #1
    15d4:	41a8      	sbcs	r0, r5
    15d6:	00db      	lsls	r3, r3, #3
    15d8:	4303      	orrs	r3, r0
    15da:	0f52      	lsrs	r2, r2, #29
    15dc:	4313      	orrs	r3, r2
    15de:	075a      	lsls	r2, r3, #29
    15e0:	d004      	beq.n	15ec <__aeabi_d2f+0x44>
    15e2:	220f      	movs	r2, #15
    15e4:	401a      	ands	r2, r3
    15e6:	2a04      	cmp	r2, #4
    15e8:	d000      	beq.n	15ec <__aeabi_d2f+0x44>
    15ea:	3304      	adds	r3, #4
    15ec:	2280      	movs	r2, #128	; 0x80
    15ee:	04d2      	lsls	r2, r2, #19
    15f0:	401a      	ands	r2, r3
    15f2:	d027      	beq.n	1644 <__aeabi_d2f+0x9c>
    15f4:	3401      	adds	r4, #1
    15f6:	2cff      	cmp	r4, #255	; 0xff
    15f8:	d003      	beq.n	1602 <__aeabi_d2f+0x5a>
    15fa:	019b      	lsls	r3, r3, #6
    15fc:	0a5b      	lsrs	r3, r3, #9
    15fe:	b2e4      	uxtb	r4, r4
    1600:	e001      	b.n	1606 <__aeabi_d2f+0x5e>
    1602:	24ff      	movs	r4, #255	; 0xff
    1604:	2300      	movs	r3, #0
    1606:	025b      	lsls	r3, r3, #9
    1608:	05e4      	lsls	r4, r4, #23
    160a:	0a5b      	lsrs	r3, r3, #9
    160c:	4323      	orrs	r3, r4
    160e:	005b      	lsls	r3, r3, #1
    1610:	07c9      	lsls	r1, r1, #31
    1612:	085b      	lsrs	r3, r3, #1
    1614:	430b      	orrs	r3, r1
    1616:	1c18      	adds	r0, r3, #0
    1618:	bd70      	pop	{r4, r5, r6, pc}
    161a:	2d00      	cmp	r5, #0
    161c:	d106      	bne.n	162c <__aeabi_d2f+0x84>
    161e:	4313      	orrs	r3, r2
    1620:	d10e      	bne.n	1640 <__aeabi_d2f+0x98>
    1622:	2400      	movs	r4, #0
    1624:	025b      	lsls	r3, r3, #9
    1626:	0a5b      	lsrs	r3, r3, #9
    1628:	b2e4      	uxtb	r4, r4
    162a:	e7ec      	b.n	1606 <__aeabi_d2f+0x5e>
    162c:	431a      	orrs	r2, r3
    162e:	d0e8      	beq.n	1602 <__aeabi_d2f+0x5a>
    1630:	2080      	movs	r0, #128	; 0x80
    1632:	00db      	lsls	r3, r3, #3
    1634:	0480      	lsls	r0, r0, #18
    1636:	4303      	orrs	r3, r0
    1638:	24ff      	movs	r4, #255	; 0xff
    163a:	e7d0      	b.n	15de <__aeabi_d2f+0x36>
    163c:	3417      	adds	r4, #23
    163e:	da0c      	bge.n	165a <__aeabi_d2f+0xb2>
    1640:	2305      	movs	r3, #5
    1642:	2400      	movs	r4, #0
    1644:	08db      	lsrs	r3, r3, #3
    1646:	2cff      	cmp	r4, #255	; 0xff
    1648:	d1ec      	bne.n	1624 <__aeabi_d2f+0x7c>
    164a:	2b00      	cmp	r3, #0
    164c:	d02d      	beq.n	16aa <__aeabi_d2f+0x102>
    164e:	2280      	movs	r2, #128	; 0x80
    1650:	03d2      	lsls	r2, r2, #15
    1652:	4313      	orrs	r3, r2
    1654:	025b      	lsls	r3, r3, #9
    1656:	0a5b      	lsrs	r3, r3, #9
    1658:	e7d5      	b.n	1606 <__aeabi_d2f+0x5e>
    165a:	2480      	movs	r4, #128	; 0x80
    165c:	4816      	ldr	r0, [pc, #88]	; (16b8 <__aeabi_d2f+0x110>)
    165e:	0424      	lsls	r4, r4, #16
    1660:	4323      	orrs	r3, r4
    1662:	1b40      	subs	r0, r0, r5
    1664:	281f      	cmp	r0, #31
    1666:	dc0d      	bgt.n	1684 <__aeabi_d2f+0xdc>
    1668:	4c14      	ldr	r4, [pc, #80]	; (16bc <__aeabi_d2f+0x114>)
    166a:	46a4      	mov	ip, r4
    166c:	4465      	add	r5, ip
    166e:	40ab      	lsls	r3, r5
    1670:	1c1c      	adds	r4, r3, #0
    1672:	1c13      	adds	r3, r2, #0
    1674:	40ab      	lsls	r3, r5
    1676:	1e5d      	subs	r5, r3, #1
    1678:	41ab      	sbcs	r3, r5
    167a:	40c2      	lsrs	r2, r0
    167c:	4323      	orrs	r3, r4
    167e:	4313      	orrs	r3, r2
    1680:	2400      	movs	r4, #0
    1682:	e7ac      	b.n	15de <__aeabi_d2f+0x36>
    1684:	1c1e      	adds	r6, r3, #0
    1686:	4c0e      	ldr	r4, [pc, #56]	; (16c0 <__aeabi_d2f+0x118>)
    1688:	1b64      	subs	r4, r4, r5
    168a:	40e6      	lsrs	r6, r4
    168c:	1c34      	adds	r4, r6, #0
    168e:	2820      	cmp	r0, #32
    1690:	d00d      	beq.n	16ae <__aeabi_d2f+0x106>
    1692:	480c      	ldr	r0, [pc, #48]	; (16c4 <__aeabi_d2f+0x11c>)
    1694:	4684      	mov	ip, r0
    1696:	4465      	add	r5, ip
    1698:	40ab      	lsls	r3, r5
    169a:	1c1d      	adds	r5, r3, #0
    169c:	432a      	orrs	r2, r5
    169e:	1e53      	subs	r3, r2, #1
    16a0:	419a      	sbcs	r2, r3
    16a2:	1c13      	adds	r3, r2, #0
    16a4:	4323      	orrs	r3, r4
    16a6:	2400      	movs	r4, #0
    16a8:	e799      	b.n	15de <__aeabi_d2f+0x36>
    16aa:	2300      	movs	r3, #0
    16ac:	e7ab      	b.n	1606 <__aeabi_d2f+0x5e>
    16ae:	2500      	movs	r5, #0
    16b0:	e7f4      	b.n	169c <__aeabi_d2f+0xf4>
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	fffffc80 	.word	0xfffffc80
    16b8:	0000039e 	.word	0x0000039e
    16bc:	fffffc82 	.word	0xfffffc82
    16c0:	0000037e 	.word	0x0000037e
    16c4:	fffffca2 	.word	0xfffffca2

000016c8 <__clzsi2>:
    16c8:	211c      	movs	r1, #28
    16ca:	2301      	movs	r3, #1
    16cc:	041b      	lsls	r3, r3, #16
    16ce:	4298      	cmp	r0, r3
    16d0:	d301      	bcc.n	16d6 <__clzsi2+0xe>
    16d2:	0c00      	lsrs	r0, r0, #16
    16d4:	3910      	subs	r1, #16
    16d6:	0a1b      	lsrs	r3, r3, #8
    16d8:	4298      	cmp	r0, r3
    16da:	d301      	bcc.n	16e0 <__clzsi2+0x18>
    16dc:	0a00      	lsrs	r0, r0, #8
    16de:	3908      	subs	r1, #8
    16e0:	091b      	lsrs	r3, r3, #4
    16e2:	4298      	cmp	r0, r3
    16e4:	d301      	bcc.n	16ea <__clzsi2+0x22>
    16e6:	0900      	lsrs	r0, r0, #4
    16e8:	3904      	subs	r1, #4
    16ea:	a202      	add	r2, pc, #8	; (adr r2, 16f4 <__clzsi2+0x2c>)
    16ec:	5c10      	ldrb	r0, [r2, r0]
    16ee:	1840      	adds	r0, r0, r1
    16f0:	4770      	bx	lr
    16f2:	46c0      	nop			; (mov r8, r8)
    16f4:	02020304 	.word	0x02020304
    16f8:	01010101 	.word	0x01010101
	...

00001704 <__divdi3>:
    1704:	b5f0      	push	{r4, r5, r6, r7, lr}
    1706:	4644      	mov	r4, r8
    1708:	465f      	mov	r7, fp
    170a:	4656      	mov	r6, sl
    170c:	464d      	mov	r5, r9
    170e:	b4f0      	push	{r4, r5, r6, r7}
    1710:	1c1c      	adds	r4, r3, #0
    1712:	b085      	sub	sp, #20
    1714:	2900      	cmp	r1, #0
    1716:	da00      	bge.n	171a <__divdi3+0x16>
    1718:	e0a9      	b.n	186e <__divdi3+0x16a>
    171a:	1c0f      	adds	r7, r1, #0
    171c:	2100      	movs	r1, #0
    171e:	1c06      	adds	r6, r0, #0
    1720:	4688      	mov	r8, r1
    1722:	1c10      	adds	r0, r2, #0
    1724:	1c19      	adds	r1, r3, #0
    1726:	2c00      	cmp	r4, #0
    1728:	da00      	bge.n	172c <__divdi3+0x28>
    172a:	e097      	b.n	185c <__divdi3+0x158>
    172c:	1c34      	adds	r4, r6, #0
    172e:	1c3d      	adds	r5, r7, #0
    1730:	4682      	mov	sl, r0
    1732:	4689      	mov	r9, r1
    1734:	42b9      	cmp	r1, r7
    1736:	d873      	bhi.n	1820 <__divdi3+0x11c>
    1738:	d070      	beq.n	181c <__divdi3+0x118>
    173a:	4649      	mov	r1, r9
    173c:	4650      	mov	r0, sl
    173e:	f000 f985 	bl	1a4c <__clzdi2>
    1742:	4683      	mov	fp, r0
    1744:	1c39      	adds	r1, r7, #0
    1746:	1c30      	adds	r0, r6, #0
    1748:	f000 f980 	bl	1a4c <__clzdi2>
    174c:	465b      	mov	r3, fp
    174e:	1a18      	subs	r0, r3, r0
    1750:	1c03      	adds	r3, r0, #0
    1752:	4683      	mov	fp, r0
    1754:	3b20      	subs	r3, #32
    1756:	469c      	mov	ip, r3
    1758:	d500      	bpl.n	175c <__divdi3+0x58>
    175a:	e09c      	b.n	1896 <__divdi3+0x192>
    175c:	2300      	movs	r3, #0
    175e:	2200      	movs	r2, #0
    1760:	4651      	mov	r1, sl
    1762:	9200      	str	r2, [sp, #0]
    1764:	9301      	str	r3, [sp, #4]
    1766:	4663      	mov	r3, ip
    1768:	4099      	lsls	r1, r3
    176a:	9101      	str	r1, [sp, #4]
    176c:	4651      	mov	r1, sl
    176e:	4081      	lsls	r1, r0
    1770:	9b01      	ldr	r3, [sp, #4]
    1772:	9100      	str	r1, [sp, #0]
    1774:	42bb      	cmp	r3, r7
    1776:	d900      	bls.n	177a <__divdi3+0x76>
    1778:	e083      	b.n	1882 <__divdi3+0x17e>
    177a:	d100      	bne.n	177e <__divdi3+0x7a>
    177c:	e07e      	b.n	187c <__divdi3+0x178>
    177e:	9a00      	ldr	r2, [sp, #0]
    1780:	9b01      	ldr	r3, [sp, #4]
    1782:	1c34      	adds	r4, r6, #0
    1784:	1c3d      	adds	r5, r7, #0
    1786:	1aa4      	subs	r4, r4, r2
    1788:	419d      	sbcs	r5, r3
    178a:	4663      	mov	r3, ip
    178c:	2b00      	cmp	r3, #0
    178e:	da00      	bge.n	1792 <__divdi3+0x8e>
    1790:	e09a      	b.n	18c8 <__divdi3+0x1c4>
    1792:	2600      	movs	r6, #0
    1794:	2700      	movs	r7, #0
    1796:	9602      	str	r6, [sp, #8]
    1798:	9703      	str	r7, [sp, #12]
    179a:	3601      	adds	r6, #1
    179c:	409e      	lsls	r6, r3
    179e:	9603      	str	r6, [sp, #12]
    17a0:	2601      	movs	r6, #1
    17a2:	4086      	lsls	r6, r0
    17a4:	9602      	str	r6, [sp, #8]
    17a6:	2800      	cmp	r0, #0
    17a8:	d100      	bne.n	17ac <__divdi3+0xa8>
    17aa:	e071      	b.n	1890 <__divdi3+0x18c>
    17ac:	9900      	ldr	r1, [sp, #0]
    17ae:	9a01      	ldr	r2, [sp, #4]
    17b0:	07d3      	lsls	r3, r2, #31
    17b2:	4699      	mov	r9, r3
    17b4:	464b      	mov	r3, r9
    17b6:	084e      	lsrs	r6, r1, #1
    17b8:	431e      	orrs	r6, r3
    17ba:	0857      	lsrs	r7, r2, #1
    17bc:	2300      	movs	r3, #0
    17be:	2201      	movs	r2, #1
    17c0:	e00c      	b.n	17dc <__divdi3+0xd8>
    17c2:	42af      	cmp	r7, r5
    17c4:	d101      	bne.n	17ca <__divdi3+0xc6>
    17c6:	42a6      	cmp	r6, r4
    17c8:	d80a      	bhi.n	17e0 <__divdi3+0xdc>
    17ca:	1ba4      	subs	r4, r4, r6
    17cc:	41bd      	sbcs	r5, r7
    17ce:	1924      	adds	r4, r4, r4
    17d0:	416d      	adcs	r5, r5
    17d2:	3801      	subs	r0, #1
    17d4:	18a4      	adds	r4, r4, r2
    17d6:	415d      	adcs	r5, r3
    17d8:	2800      	cmp	r0, #0
    17da:	d006      	beq.n	17ea <__divdi3+0xe6>
    17dc:	42af      	cmp	r7, r5
    17de:	d9f0      	bls.n	17c2 <__divdi3+0xbe>
    17e0:	3801      	subs	r0, #1
    17e2:	1924      	adds	r4, r4, r4
    17e4:	416d      	adcs	r5, r5
    17e6:	2800      	cmp	r0, #0
    17e8:	d1f8      	bne.n	17dc <__divdi3+0xd8>
    17ea:	2220      	movs	r2, #32
    17ec:	9e02      	ldr	r6, [sp, #8]
    17ee:	9f03      	ldr	r7, [sp, #12]
    17f0:	465b      	mov	r3, fp
    17f2:	4252      	negs	r2, r2
    17f4:	1936      	adds	r6, r6, r4
    17f6:	416f      	adcs	r7, r5
    17f8:	1899      	adds	r1, r3, r2
    17fa:	d45a      	bmi.n	18b2 <__divdi3+0x1ae>
    17fc:	1c28      	adds	r0, r5, #0
    17fe:	40c8      	lsrs	r0, r1
    1800:	1c2c      	adds	r4, r5, #0
    1802:	465b      	mov	r3, fp
    1804:	40dc      	lsrs	r4, r3
    1806:	2900      	cmp	r1, #0
    1808:	db68      	blt.n	18dc <__divdi3+0x1d8>
    180a:	1c04      	adds	r4, r0, #0
    180c:	408c      	lsls	r4, r1
    180e:	1c23      	adds	r3, r4, #0
    1810:	4659      	mov	r1, fp
    1812:	4088      	lsls	r0, r1
    1814:	1c02      	adds	r2, r0, #0
    1816:	1ab6      	subs	r6, r6, r2
    1818:	419f      	sbcs	r7, r3
    181a:	e003      	b.n	1824 <__divdi3+0x120>
    181c:	42b0      	cmp	r0, r6
    181e:	d98c      	bls.n	173a <__divdi3+0x36>
    1820:	2600      	movs	r6, #0
    1822:	2700      	movs	r7, #0
    1824:	4641      	mov	r1, r8
    1826:	1e4b      	subs	r3, r1, #1
    1828:	4199      	sbcs	r1, r3
    182a:	2300      	movs	r3, #0
    182c:	9100      	str	r1, [sp, #0]
    182e:	9301      	str	r3, [sp, #4]
    1830:	9a00      	ldr	r2, [sp, #0]
    1832:	9b01      	ldr	r3, [sp, #4]
    1834:	2500      	movs	r5, #0
    1836:	4254      	negs	r4, r2
    1838:	419d      	sbcs	r5, r3
    183a:	1c33      	adds	r3, r6, #0
    183c:	4063      	eors	r3, r4
    183e:	1c18      	adds	r0, r3, #0
    1840:	1c3b      	adds	r3, r7, #0
    1842:	406b      	eors	r3, r5
    1844:	1c19      	adds	r1, r3, #0
    1846:	9b00      	ldr	r3, [sp, #0]
    1848:	9c01      	ldr	r4, [sp, #4]
    184a:	18c0      	adds	r0, r0, r3
    184c:	4161      	adcs	r1, r4
    184e:	b005      	add	sp, #20
    1850:	bc3c      	pop	{r2, r3, r4, r5}
    1852:	4690      	mov	r8, r2
    1854:	4699      	mov	r9, r3
    1856:	46a2      	mov	sl, r4
    1858:	46ab      	mov	fp, r5
    185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    185c:	4643      	mov	r3, r8
    185e:	43db      	mvns	r3, r3
    1860:	1c0c      	adds	r4, r1, #0
    1862:	4698      	mov	r8, r3
    1864:	1c13      	adds	r3, r2, #0
    1866:	2100      	movs	r1, #0
    1868:	4258      	negs	r0, r3
    186a:	41a1      	sbcs	r1, r4
    186c:	e75e      	b.n	172c <__divdi3+0x28>
    186e:	2700      	movs	r7, #0
    1870:	4246      	negs	r6, r0
    1872:	418f      	sbcs	r7, r1
    1874:	2101      	movs	r1, #1
    1876:	4249      	negs	r1, r1
    1878:	4688      	mov	r8, r1
    187a:	e752      	b.n	1722 <__divdi3+0x1e>
    187c:	42b1      	cmp	r1, r6
    187e:	d800      	bhi.n	1882 <__divdi3+0x17e>
    1880:	e77d      	b.n	177e <__divdi3+0x7a>
    1882:	2600      	movs	r6, #0
    1884:	2700      	movs	r7, #0
    1886:	9602      	str	r6, [sp, #8]
    1888:	9703      	str	r7, [sp, #12]
    188a:	2800      	cmp	r0, #0
    188c:	d000      	beq.n	1890 <__divdi3+0x18c>
    188e:	e78d      	b.n	17ac <__divdi3+0xa8>
    1890:	9e02      	ldr	r6, [sp, #8]
    1892:	9f03      	ldr	r7, [sp, #12]
    1894:	e7c6      	b.n	1824 <__divdi3+0x120>
    1896:	2120      	movs	r1, #32
    1898:	4653      	mov	r3, sl
    189a:	1a09      	subs	r1, r1, r0
    189c:	40cb      	lsrs	r3, r1
    189e:	2200      	movs	r2, #0
    18a0:	1c19      	adds	r1, r3, #0
    18a2:	2300      	movs	r3, #0
    18a4:	9200      	str	r2, [sp, #0]
    18a6:	9301      	str	r3, [sp, #4]
    18a8:	464b      	mov	r3, r9
    18aa:	4083      	lsls	r3, r0
    18ac:	430b      	orrs	r3, r1
    18ae:	9301      	str	r3, [sp, #4]
    18b0:	e75c      	b.n	176c <__divdi3+0x68>
    18b2:	465a      	mov	r2, fp
    18b4:	2320      	movs	r3, #32
    18b6:	1a9b      	subs	r3, r3, r2
    18b8:	1c2a      	adds	r2, r5, #0
    18ba:	409a      	lsls	r2, r3
    18bc:	1c20      	adds	r0, r4, #0
    18be:	1c13      	adds	r3, r2, #0
    18c0:	465a      	mov	r2, fp
    18c2:	40d0      	lsrs	r0, r2
    18c4:	4318      	orrs	r0, r3
    18c6:	e79b      	b.n	1800 <__divdi3+0xfc>
    18c8:	2620      	movs	r6, #32
    18ca:	2700      	movs	r7, #0
    18cc:	1a33      	subs	r3, r6, r0
    18ce:	2600      	movs	r6, #0
    18d0:	9602      	str	r6, [sp, #8]
    18d2:	9703      	str	r7, [sp, #12]
    18d4:	2701      	movs	r7, #1
    18d6:	40df      	lsrs	r7, r3
    18d8:	9703      	str	r7, [sp, #12]
    18da:	e761      	b.n	17a0 <__divdi3+0x9c>
    18dc:	465b      	mov	r3, fp
    18de:	2120      	movs	r1, #32
    18e0:	465d      	mov	r5, fp
    18e2:	1ac9      	subs	r1, r1, r3
    18e4:	1c03      	adds	r3, r0, #0
    18e6:	40ac      	lsls	r4, r5
    18e8:	40cb      	lsrs	r3, r1
    18ea:	1c19      	adds	r1, r3, #0
    18ec:	1c23      	adds	r3, r4, #0
    18ee:	430b      	orrs	r3, r1
    18f0:	e78e      	b.n	1810 <__divdi3+0x10c>
    18f2:	46c0      	nop			; (mov r8, r8)

000018f4 <__udivdi3>:
    18f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18f6:	4645      	mov	r5, r8
    18f8:	464e      	mov	r6, r9
    18fa:	4657      	mov	r7, sl
    18fc:	b4e0      	push	{r5, r6, r7}
    18fe:	1c04      	adds	r4, r0, #0
    1900:	b082      	sub	sp, #8
    1902:	1c0d      	adds	r5, r1, #0
    1904:	4691      	mov	r9, r2
    1906:	4698      	mov	r8, r3
    1908:	428b      	cmp	r3, r1
    190a:	d862      	bhi.n	19d2 <__udivdi3+0xde>
    190c:	d05f      	beq.n	19ce <__udivdi3+0xda>
    190e:	4641      	mov	r1, r8
    1910:	4648      	mov	r0, r9
    1912:	f000 f89b 	bl	1a4c <__clzdi2>
    1916:	1c29      	adds	r1, r5, #0
    1918:	1c06      	adds	r6, r0, #0
    191a:	1c20      	adds	r0, r4, #0
    191c:	f000 f896 	bl	1a4c <__clzdi2>
    1920:	2320      	movs	r3, #32
    1922:	1a31      	subs	r1, r6, r0
    1924:	425b      	negs	r3, r3
    1926:	468a      	mov	sl, r1
    1928:	18c8      	adds	r0, r1, r3
    192a:	d465      	bmi.n	19f8 <__udivdi3+0x104>
    192c:	464b      	mov	r3, r9
    192e:	4083      	lsls	r3, r0
    1930:	1c1f      	adds	r7, r3, #0
    1932:	464b      	mov	r3, r9
    1934:	408b      	lsls	r3, r1
    1936:	1c1e      	adds	r6, r3, #0
    1938:	42af      	cmp	r7, r5
    193a:	d858      	bhi.n	19ee <__udivdi3+0xfa>
    193c:	d055      	beq.n	19ea <__udivdi3+0xf6>
    193e:	1ba4      	subs	r4, r4, r6
    1940:	41bd      	sbcs	r5, r7
    1942:	2800      	cmp	r0, #0
    1944:	da00      	bge.n	1948 <__udivdi3+0x54>
    1946:	e077      	b.n	1a38 <__udivdi3+0x144>
    1948:	2200      	movs	r2, #0
    194a:	2300      	movs	r3, #0
    194c:	9200      	str	r2, [sp, #0]
    194e:	9301      	str	r3, [sp, #4]
    1950:	3201      	adds	r2, #1
    1952:	4082      	lsls	r2, r0
    1954:	9201      	str	r2, [sp, #4]
    1956:	2301      	movs	r3, #1
    1958:	408b      	lsls	r3, r1
    195a:	9300      	str	r3, [sp, #0]
    195c:	2900      	cmp	r1, #0
    195e:	d03c      	beq.n	19da <__udivdi3+0xe6>
    1960:	07fb      	lsls	r3, r7, #31
    1962:	4698      	mov	r8, r3
    1964:	4640      	mov	r0, r8
    1966:	0872      	lsrs	r2, r6, #1
    1968:	087b      	lsrs	r3, r7, #1
    196a:	4302      	orrs	r2, r0
    196c:	2601      	movs	r6, #1
    196e:	2700      	movs	r7, #0
    1970:	e00c      	b.n	198c <__udivdi3+0x98>
    1972:	42ab      	cmp	r3, r5
    1974:	d101      	bne.n	197a <__udivdi3+0x86>
    1976:	42a2      	cmp	r2, r4
    1978:	d80a      	bhi.n	1990 <__udivdi3+0x9c>
    197a:	1aa4      	subs	r4, r4, r2
    197c:	419d      	sbcs	r5, r3
    197e:	1924      	adds	r4, r4, r4
    1980:	416d      	adcs	r5, r5
    1982:	3901      	subs	r1, #1
    1984:	19a4      	adds	r4, r4, r6
    1986:	417d      	adcs	r5, r7
    1988:	2900      	cmp	r1, #0
    198a:	d006      	beq.n	199a <__udivdi3+0xa6>
    198c:	42ab      	cmp	r3, r5
    198e:	d9f0      	bls.n	1972 <__udivdi3+0x7e>
    1990:	3901      	subs	r1, #1
    1992:	1924      	adds	r4, r4, r4
    1994:	416d      	adcs	r5, r5
    1996:	2900      	cmp	r1, #0
    1998:	d1f8      	bne.n	198c <__udivdi3+0x98>
    199a:	2220      	movs	r2, #32
    199c:	9800      	ldr	r0, [sp, #0]
    199e:	9901      	ldr	r1, [sp, #4]
    19a0:	4653      	mov	r3, sl
    19a2:	4252      	negs	r2, r2
    19a4:	1900      	adds	r0, r0, r4
    19a6:	4169      	adcs	r1, r5
    19a8:	189e      	adds	r6, r3, r2
    19aa:	d43a      	bmi.n	1a22 <__udivdi3+0x12e>
    19ac:	1c2f      	adds	r7, r5, #0
    19ae:	40f7      	lsrs	r7, r6
    19b0:	4653      	mov	r3, sl
    19b2:	40dd      	lsrs	r5, r3
    19b4:	2e00      	cmp	r6, #0
    19b6:	db29      	blt.n	1a0c <__udivdi3+0x118>
    19b8:	1c3c      	adds	r4, r7, #0
    19ba:	40b4      	lsls	r4, r6
    19bc:	1c23      	adds	r3, r4, #0
    19be:	4654      	mov	r4, sl
    19c0:	40a7      	lsls	r7, r4
    19c2:	1c3a      	adds	r2, r7, #0
    19c4:	1a80      	subs	r0, r0, r2
    19c6:	4199      	sbcs	r1, r3
    19c8:	9000      	str	r0, [sp, #0]
    19ca:	9101      	str	r1, [sp, #4]
    19cc:	e005      	b.n	19da <__udivdi3+0xe6>
    19ce:	4282      	cmp	r2, r0
    19d0:	d99d      	bls.n	190e <__udivdi3+0x1a>
    19d2:	2300      	movs	r3, #0
    19d4:	2400      	movs	r4, #0
    19d6:	9300      	str	r3, [sp, #0]
    19d8:	9401      	str	r4, [sp, #4]
    19da:	9800      	ldr	r0, [sp, #0]
    19dc:	9901      	ldr	r1, [sp, #4]
    19de:	b002      	add	sp, #8
    19e0:	bc1c      	pop	{r2, r3, r4}
    19e2:	4690      	mov	r8, r2
    19e4:	4699      	mov	r9, r3
    19e6:	46a2      	mov	sl, r4
    19e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ea:	42a3      	cmp	r3, r4
    19ec:	d9a7      	bls.n	193e <__udivdi3+0x4a>
    19ee:	2200      	movs	r2, #0
    19f0:	2300      	movs	r3, #0
    19f2:	9200      	str	r2, [sp, #0]
    19f4:	9301      	str	r3, [sp, #4]
    19f6:	e7b1      	b.n	195c <__udivdi3+0x68>
    19f8:	2220      	movs	r2, #32
    19fa:	464b      	mov	r3, r9
    19fc:	1a52      	subs	r2, r2, r1
    19fe:	40d3      	lsrs	r3, r2
    1a00:	1c1a      	adds	r2, r3, #0
    1a02:	4643      	mov	r3, r8
    1a04:	408b      	lsls	r3, r1
    1a06:	1c1f      	adds	r7, r3, #0
    1a08:	4317      	orrs	r7, r2
    1a0a:	e792      	b.n	1932 <__udivdi3+0x3e>
    1a0c:	4653      	mov	r3, sl
    1a0e:	2420      	movs	r4, #32
    1a10:	4656      	mov	r6, sl
    1a12:	1ae4      	subs	r4, r4, r3
    1a14:	1c3b      	adds	r3, r7, #0
    1a16:	40b5      	lsls	r5, r6
    1a18:	40e3      	lsrs	r3, r4
    1a1a:	1c1c      	adds	r4, r3, #0
    1a1c:	1c2b      	adds	r3, r5, #0
    1a1e:	4323      	orrs	r3, r4
    1a20:	e7cd      	b.n	19be <__udivdi3+0xca>
    1a22:	4652      	mov	r2, sl
    1a24:	2320      	movs	r3, #32
    1a26:	1a9b      	subs	r3, r3, r2
    1a28:	1c2a      	adds	r2, r5, #0
    1a2a:	409a      	lsls	r2, r3
    1a2c:	1c27      	adds	r7, r4, #0
    1a2e:	1c13      	adds	r3, r2, #0
    1a30:	4652      	mov	r2, sl
    1a32:	40d7      	lsrs	r7, r2
    1a34:	431f      	orrs	r7, r3
    1a36:	e7bb      	b.n	19b0 <__udivdi3+0xbc>
    1a38:	2320      	movs	r3, #32
    1a3a:	2200      	movs	r2, #0
    1a3c:	1a58      	subs	r0, r3, r1
    1a3e:	2300      	movs	r3, #0
    1a40:	9200      	str	r2, [sp, #0]
    1a42:	9301      	str	r3, [sp, #4]
    1a44:	3201      	adds	r2, #1
    1a46:	40c2      	lsrs	r2, r0
    1a48:	9201      	str	r2, [sp, #4]
    1a4a:	e784      	b.n	1956 <__udivdi3+0x62>

00001a4c <__clzdi2>:
    1a4c:	b510      	push	{r4, lr}
    1a4e:	2900      	cmp	r1, #0
    1a50:	d103      	bne.n	1a5a <__clzdi2+0xe>
    1a52:	f7ff fe39 	bl	16c8 <__clzsi2>
    1a56:	3020      	adds	r0, #32
    1a58:	e002      	b.n	1a60 <__clzdi2+0x14>
    1a5a:	1c08      	adds	r0, r1, #0
    1a5c:	f7ff fe34 	bl	16c8 <__clzsi2>
    1a60:	bd10      	pop	{r4, pc}
    1a62:	46c0      	nop			; (mov r8, r8)

00001a64 <lookupTable.12169>:
    1a64:	8d20 ffff ada1 ffff ce64 ffff ef6c ffff      .......d...l...
    1a74:	10b7 0000 324a 0000 5425 0000 7649 0000     ....J2..%T..Iv..
    1a84:	98b7 0000 bb72 0000 de79 0000 01d0 0001     ....r...y.......
    1a94:	2576 0001 496f 0001 6dbc 0001 925e 0001     v%..oI...m..^...
    1aa4:	b758 0001 dcaa 0001 0258 0002 2862 0002     X.......X...b(..
    1ab4:	4ecc 0002 7596 0002 9cc4 0002 c457 0002     .N...u......W...
    1ac4:	ec52 0002 14b7 0003 3d89 0003 66ca 0003     R........=...f..
    1ad4:	907d 0003 baa4 0003 e544 0003 105e 0004     }.......D...^...
    1ae4:	3bf6 0004 680e 0004 94ac 0004 c1d1 0004     .;...h..........
    1af4:	ef81 0004 1dc1 0005 4c95 0005 7c00 0005     .........L...|..
    1b04:	ac07 0005 dcae 0005 0dfb 0006 3ff2 0006     .............?..
    1b14:	7298 0006 a5f4 0006 da09 0006 0ee0 0007     .r..............
    1b24:	447d 0007 7ae8 0007 b228 0007 ea44 0007     }D...z..(...D...
    1b34:	2344 0008 5d30 0008 9810 0008 d3ef 0008     D#..0]..........
    1b44:	10d6 0009 4ecf 0009 8de5 0009 ce23 0009     .....N......#...
    1b54:	0f98 000a 524f 000a 9657 000a dbbf 000a     ....OR..W.......
    1b64:	2298 000b 6af3 000b b4e2 000b 007b 000c     ."...j......{...
    1b74:	4dd4 000c 9d03 000c ee23 000c 4150 000d     .M......#...PA..
    1b84:	96a9 000d ee4e 000d 4865 000e a516 000e     ....N...eH......
    1b94:	048e 000f 030a 0000 031c 0000 034e 0000     ............N...
    1ba4:	0380 0000 03b2 0000 03d6 0000 03fa 0000     ................
    1bb4:	041e 0000 05be 0000 05d8 0000 05fe 0000     ................
    1bc4:	0612 0000 062c 0000 0652 0000 0666 0000     ....,...R...f...
    1bd4:	0680 0000 0698 0000 11e8 0000 11c6 0000     ................
    1be4:	11c6 0000 11ba 0000 10ae 0000 10ae 0000     ................
    1bf4:	11ae 0000 11ba 0000 10ae 0000 11ae 0000     ................
    1c04:	10ae 0000 11ba 0000 10b2 0000 10b2 0000     ................
    1c14:	10b2 0000 13c8 0000                         ........

00001c1c <_init>:
    1c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c22:	bc08      	pop	{r3}
    1c24:	469e      	mov	lr, r3
    1c26:	4770      	bx	lr

00001c28 <__init_array_start>:
    1c28:	000000dd 	.word	0x000000dd

00001c2c <_fini>:
    1c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c32:	bc08      	pop	{r3}
    1c34:	469e      	mov	lr, r3
    1c36:	4770      	bx	lr

00001c38 <__fini_array_start>:
    1c38:	000000b5 	.word	0x000000b5


SaLAltimeter-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000144c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000144c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f14  20000438  00001884  00010438  2**2
                  ALLOC
  3 .stack        00002004  2000334c  00004798  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000bbc3  00000000  00000000  000104bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001912  00000000  00000000  0001c07e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000231f  00000000  00000000  0001d990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000228  00000000  00000000  0001fcaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001f8  00000000  00000000  0001fed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014b24  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006a74  00000000  00000000  00034bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e18a  00000000  00000000  0003b667  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000060c  00000000  00000000  000a97f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20005350 	.word	0x20005350
       4:	00000771 	.word	0x00000771
       8:	00000769 	.word	0x00000769
       c:	00000769 	.word	0x00000769
	...
      2c:	00000769 	.word	0x00000769
	...
      38:	00000769 	.word	0x00000769
      3c:	00000769 	.word	0x00000769
      40:	00000769 	.word	0x00000769
      44:	00000769 	.word	0x00000769
      48:	00000769 	.word	0x00000769
      4c:	00000769 	.word	0x00000769
      50:	00000769 	.word	0x00000769
      54:	00000769 	.word	0x00000769
      58:	00000769 	.word	0x00000769
      5c:	00000769 	.word	0x00000769
      60:	00000769 	.word	0x00000769
      64:	00000769 	.word	0x00000769
      68:	00000769 	.word	0x00000769
      6c:	00000769 	.word	0x00000769
      70:	00000769 	.word	0x00000769
      74:	00000769 	.word	0x00000769
      78:	00000769 	.word	0x00000769
      7c:	00000769 	.word	0x00000769
      80:	00000769 	.word	0x00000769
      84:	00000769 	.word	0x00000769
      88:	00000769 	.word	0x00000769
      8c:	00000769 	.word	0x00000769
      90:	00000769 	.word	0x00000769
	...
      9c:	00000769 	.word	0x00000769
      a0:	00000769 	.word	0x00000769
      a4:	00000769 	.word	0x00000769
      a8:	00000769 	.word	0x00000769
      ac:	00000769 	.word	0x00000769
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000438 	.word	0x20000438
      d4:	00000000 	.word	0x00000000
      d8:	0000144c 	.word	0x0000144c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000144c 	.word	0x0000144c
     108:	2000043c 	.word	0x2000043c
     10c:	0000144c 	.word	0x0000144c
     110:	00000000 	.word	0x00000000

00000114 <getevents>:
    byteOut(module,ADXL345_REG_DATA_FORMAT);
    byteOut(module,_cmd);
    SaLDigitalOut(module->SS,true);
}

void getevents(struct spiModule *const module) {
     114:	b530      	push	{r4, r5, lr}
     116:	b083      	sub	sp, #12
     118:	1c04      	adds	r4, r0, #0
    SaLDigitalOut(module->SS,false);
     11a:	78c3      	ldrb	r3, [r0, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     11c:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     11e:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     120:	2900      	cmp	r1, #0
     122:	d104      	bne.n	12e <getevents+0x1a>
        return &(ports[port_index]->Group[group_index]);
     124:	095a      	lsrs	r2, r3, #5
     126:	01d2      	lsls	r2, r2, #7
     128:	4944      	ldr	r1, [pc, #272]	; (23c <getevents+0x128>)
     12a:	468c      	mov	ip, r1
     12c:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     12e:	211f      	movs	r1, #31
     130:	400b      	ands	r3, r1
     132:	391e      	subs	r1, #30
     134:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     136:	6151      	str	r1, [r2, #20]
    byteOut(module,ADXL345_REG_DATAX0 | 0x80 | 0x40);
     138:	1c20      	adds	r0, r4, #0
     13a:	21f2      	movs	r1, #242	; 0xf2
     13c:	4b40      	ldr	r3, [pc, #256]	; (240 <getevents+0x12c>)
     13e:	4798      	blx	r3
    volatile uint8_t _byte1 = getByte(module);
     140:	1c20      	adds	r0, r4, #0
     142:	4d40      	ldr	r5, [pc, #256]	; (244 <getevents+0x130>)
     144:	47a8      	blx	r5
     146:	466b      	mov	r3, sp
     148:	71d8      	strb	r0, [r3, #7]
    volatile uint8_t _byte2 = getByte(module);
     14a:	1c20      	adds	r0, r4, #0
     14c:	47a8      	blx	r5
     14e:	466b      	mov	r3, sp
     150:	7198      	strb	r0, [r3, #6]
    volatile uint8_t _byte3 = getByte(module);
     152:	1c20      	adds	r0, r4, #0
     154:	47a8      	blx	r5
     156:	466b      	mov	r3, sp
     158:	7158      	strb	r0, [r3, #5]
    volatile uint8_t _byte4 = getByte(module);
     15a:	1c20      	adds	r0, r4, #0
     15c:	47a8      	blx	r5
     15e:	ab01      	add	r3, sp, #4
     160:	7018      	strb	r0, [r3, #0]
    volatile uint8_t _byte5 = getByte(module);
     162:	1c20      	adds	r0, r4, #0
     164:	47a8      	blx	r5
     166:	466b      	mov	r3, sp
     168:	70d8      	strb	r0, [r3, #3]
    volatile uint8_t _byte6 = getByte(module);
     16a:	1c20      	adds	r0, r4, #0
     16c:	47a8      	blx	r5
     16e:	466b      	mov	r3, sp
     170:	7098      	strb	r0, [r3, #2]

    SaLDigitalOut(module->SS,true);
     172:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     174:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     176:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     178:	2900      	cmp	r1, #0
     17a:	d104      	bne.n	186 <getevents+0x72>
        return &(ports[port_index]->Group[group_index]);
     17c:	095a      	lsrs	r2, r3, #5
     17e:	01d2      	lsls	r2, r2, #7
     180:	492e      	ldr	r1, [pc, #184]	; (23c <getevents+0x128>)
     182:	468c      	mov	ip, r1
     184:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     186:	211f      	movs	r1, #31
     188:	400b      	ands	r3, r1
     18a:	391e      	subs	r1, #30
     18c:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     18e:	6191      	str	r1, [r2, #24]



		//check if last bit in second byte is 1 therefor negative number
    int16_t negative = (_byte2 & (1 <<7)) != 0;
     190:	466b      	mov	r3, sp
     192:	3306      	adds	r3, #6
     194:	781b      	ldrb	r3, [r3, #0]
    if (negative) {
     196:	b25b      	sxtb	r3, r3
     198:	2b00      	cmp	r3, #0
     19a:	da0c      	bge.n	1b6 <getevents+0xa2>
        // if negative then preform 2's complement to int conversion
        Xaccel = ((_byte2 | ~((1 << 8) - 1)) << 8 ) | _byte1;
     19c:	466b      	mov	r3, sp
     19e:	3306      	adds	r3, #6
     1a0:	781b      	ldrb	r3, [r3, #0]
     1a2:	466a      	mov	r2, sp
     1a4:	79d1      	ldrb	r1, [r2, #7]
     1a6:	4a28      	ldr	r2, [pc, #160]	; (248 <getevents+0x134>)
     1a8:	4313      	orrs	r3, r2
     1aa:	021b      	lsls	r3, r3, #8
     1ac:	430b      	orrs	r3, r1
     1ae:	b29b      	uxth	r3, r3
     1b0:	4a26      	ldr	r2, [pc, #152]	; (24c <getevents+0x138>)
     1b2:	8013      	strh	r3, [r2, #0]
     1b4:	e00a      	b.n	1cc <getevents+0xb8>
    } else {
        Xaccel = (_byte2 << 8) + _byte1;
     1b6:	466b      	mov	r3, sp
     1b8:	3306      	adds	r3, #6
     1ba:	781b      	ldrb	r3, [r3, #0]
     1bc:	466a      	mov	r2, sp
     1be:	3207      	adds	r2, #7
     1c0:	7812      	ldrb	r2, [r2, #0]
     1c2:	021b      	lsls	r3, r3, #8
     1c4:	18d3      	adds	r3, r2, r3
     1c6:	b29b      	uxth	r3, r3
     1c8:	4a20      	ldr	r2, [pc, #128]	; (24c <getevents+0x138>)
     1ca:	8013      	strh	r3, [r2, #0]
    }

    negative = (_byte4 & (1 <<7)) != 0;
     1cc:	ab01      	add	r3, sp, #4
     1ce:	781b      	ldrb	r3, [r3, #0]
    if (negative) {
     1d0:	b25b      	sxtb	r3, r3
     1d2:	2b00      	cmp	r3, #0
     1d4:	da0a      	bge.n	1ec <getevents+0xd8>
        Yaccel = ((_byte4 | ~((1 << 8) - 1)) << 8 ) | _byte4;
     1d6:	aa01      	add	r2, sp, #4
     1d8:	7813      	ldrb	r3, [r2, #0]
     1da:	7811      	ldrb	r1, [r2, #0]
     1dc:	4a1a      	ldr	r2, [pc, #104]	; (248 <getevents+0x134>)
     1de:	4313      	orrs	r3, r2
     1e0:	021b      	lsls	r3, r3, #8
     1e2:	430b      	orrs	r3, r1
     1e4:	b29b      	uxth	r3, r3
     1e6:	4a1a      	ldr	r2, [pc, #104]	; (250 <getevents+0x13c>)
     1e8:	8013      	strh	r3, [r2, #0]
     1ea:	e008      	b.n	1fe <getevents+0xea>
    } else {
        Yaccel = (_byte4 << 8) | _byte3;
     1ec:	ab01      	add	r3, sp, #4
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	466a      	mov	r2, sp
     1f2:	3205      	adds	r2, #5
     1f4:	7812      	ldrb	r2, [r2, #0]
     1f6:	021b      	lsls	r3, r3, #8
     1f8:	4313      	orrs	r3, r2
     1fa:	4a15      	ldr	r2, [pc, #84]	; (250 <getevents+0x13c>)
     1fc:	8013      	strh	r3, [r2, #0]
    }

    negative = (_byte6 & (1 <<7)) != 0;
     1fe:	466b      	mov	r3, sp
     200:	3302      	adds	r3, #2
     202:	781b      	ldrb	r3, [r3, #0]
    if (negative) {
     204:	b25b      	sxtb	r3, r3
     206:	2b00      	cmp	r3, #0
     208:	da0c      	bge.n	224 <getevents+0x110>
        Zaccel = ((_byte6 | ~((1 << 8) - 1)) << 8 ) | _byte5;
     20a:	466b      	mov	r3, sp
     20c:	3302      	adds	r3, #2
     20e:	781b      	ldrb	r3, [r3, #0]
     210:	466a      	mov	r2, sp
     212:	78d1      	ldrb	r1, [r2, #3]
     214:	4a0c      	ldr	r2, [pc, #48]	; (248 <getevents+0x134>)
     216:	4313      	orrs	r3, r2
     218:	021b      	lsls	r3, r3, #8
     21a:	430b      	orrs	r3, r1
     21c:	b29b      	uxth	r3, r3
     21e:	4a0d      	ldr	r2, [pc, #52]	; (254 <getevents+0x140>)
     220:	8013      	strh	r3, [r2, #0]
     222:	e009      	b.n	238 <getevents+0x124>
    } else {
        Zaccel = (_byte6 << 8) | _byte5;
     224:	466b      	mov	r3, sp
     226:	3302      	adds	r3, #2
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	466a      	mov	r2, sp
     22c:	3203      	adds	r2, #3
     22e:	7812      	ldrb	r2, [r2, #0]
     230:	021b      	lsls	r3, r3, #8
     232:	4313      	orrs	r3, r2
     234:	4a07      	ldr	r2, [pc, #28]	; (254 <getevents+0x140>)
     236:	8013      	strh	r3, [r2, #0]
    }

}
     238:	b003      	add	sp, #12
     23a:	bd30      	pop	{r4, r5, pc}
     23c:	41004400 	.word	0x41004400
     240:	000004f5 	.word	0x000004f5
     244:	00000589 	.word	0x00000589
     248:	ffffff00 	.word	0xffffff00
     24c:	2000045c 	.word	0x2000045c
     250:	20000458 	.word	0x20000458
     254:	2000045a 	.word	0x2000045a

00000258 <currentX>:

float currentX() {
     258:	b510      	push	{r4, lr}
    return (Xaccel * ADXL345_MG2G_MULTIPLIER);
     25a:	4b06      	ldr	r3, [pc, #24]	; (274 <currentX+0x1c>)
     25c:	8818      	ldrh	r0, [r3, #0]
     25e:	b200      	sxth	r0, r0
     260:	4b05      	ldr	r3, [pc, #20]	; (278 <currentX+0x20>)
     262:	4798      	blx	r3
     264:	4a05      	ldr	r2, [pc, #20]	; (27c <currentX+0x24>)
     266:	4b06      	ldr	r3, [pc, #24]	; (280 <currentX+0x28>)
     268:	4c06      	ldr	r4, [pc, #24]	; (284 <currentX+0x2c>)
     26a:	47a0      	blx	r4
     26c:	4b06      	ldr	r3, [pc, #24]	; (288 <currentX+0x30>)
     26e:	4798      	blx	r3
}
     270:	bd10      	pop	{r4, pc}
     272:	46c0      	nop			; (mov r8, r8)
     274:	2000045c 	.word	0x2000045c
     278:	00001019 	.word	0x00001019
     27c:	8e8a71de 	.word	0x8e8a71de
     280:	3f6ff2e4 	.word	0x3f6ff2e4
     284:	00000ae5 	.word	0x00000ae5
     288:	00001091 	.word	0x00001091

0000028c <currentY>:
float currentY() {
     28c:	b510      	push	{r4, lr}
    return (Yaccel * ADXL345_MG2G_MULTIPLIER);
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <currentY+0x1c>)
     290:	8818      	ldrh	r0, [r3, #0]
     292:	b200      	sxth	r0, r0
     294:	4b05      	ldr	r3, [pc, #20]	; (2ac <currentY+0x20>)
     296:	4798      	blx	r3
     298:	4a05      	ldr	r2, [pc, #20]	; (2b0 <currentY+0x24>)
     29a:	4b06      	ldr	r3, [pc, #24]	; (2b4 <currentY+0x28>)
     29c:	4c06      	ldr	r4, [pc, #24]	; (2b8 <currentY+0x2c>)
     29e:	47a0      	blx	r4
     2a0:	4b06      	ldr	r3, [pc, #24]	; (2bc <currentY+0x30>)
     2a2:	4798      	blx	r3
}
     2a4:	bd10      	pop	{r4, pc}
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	20000458 	.word	0x20000458
     2ac:	00001019 	.word	0x00001019
     2b0:	8e8a71de 	.word	0x8e8a71de
     2b4:	3f6ff2e4 	.word	0x3f6ff2e4
     2b8:	00000ae5 	.word	0x00000ae5
     2bc:	00001091 	.word	0x00001091

000002c0 <currentZ>:
float currentZ() {
     2c0:	b510      	push	{r4, lr}
    return (Zaccel * ADXL345_MG2G_MULTIPLIER);
     2c2:	4b06      	ldr	r3, [pc, #24]	; (2dc <currentZ+0x1c>)
     2c4:	8818      	ldrh	r0, [r3, #0]
     2c6:	b200      	sxth	r0, r0
     2c8:	4b05      	ldr	r3, [pc, #20]	; (2e0 <currentZ+0x20>)
     2ca:	4798      	blx	r3
     2cc:	4a05      	ldr	r2, [pc, #20]	; (2e4 <currentZ+0x24>)
     2ce:	4b06      	ldr	r3, [pc, #24]	; (2e8 <currentZ+0x28>)
     2d0:	4c06      	ldr	r4, [pc, #24]	; (2ec <currentZ+0x2c>)
     2d2:	47a0      	blx	r4
     2d4:	4b06      	ldr	r3, [pc, #24]	; (2f0 <currentZ+0x30>)
     2d6:	4798      	blx	r3
     2d8:	bd10      	pop	{r4, pc}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	2000045a 	.word	0x2000045a
     2e0:	00001019 	.word	0x00001019
     2e4:	8e8a71de 	.word	0x8e8a71de
     2e8:	3f6ff2e4 	.word	0x3f6ff2e4
     2ec:	00000ae5 	.word	0x00000ae5
     2f0:	00001091 	.word	0x00001091

000002f4 <read_coeff>:

    return _receive;

}

void read_coeff(struct spiModule *const module) {
     2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2f6:	464f      	mov	r7, r9
     2f8:	4646      	mov	r6, r8
     2fa:	b4c0      	push	{r6, r7}
     2fc:	1c04      	adds	r4, r0, #0
     2fe:	2500      	movs	r5, #0

    uint16_t coefficient;
    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {

        uint8_t _cmd = cmdPromRd_ + ((coeff_num+1)*2);
        delay_us(300);
     300:	4b1e      	ldr	r3, [pc, #120]	; (37c <read_coeff+0x88>)
     302:	4698      	mov	r8, r3
        SaLDigitalOut(module->SS,false);
        byteOut(module,_cmd);
     304:	4f1e      	ldr	r7, [pc, #120]	; (380 <read_coeff+0x8c>)
        uint8_t _byte1 = getByte(module);
     306:	4e1f      	ldr	r6, [pc, #124]	; (384 <read_coeff+0x90>)
     308:	1c2b      	adds	r3, r5, #0
     30a:	3b5e      	subs	r3, #94	; 0x5e
     30c:	b2db      	uxtb	r3, r3
     30e:	4699      	mov	r9, r3

    uint16_t coefficient;
    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {

        uint8_t _cmd = cmdPromRd_ + ((coeff_num+1)*2);
        delay_us(300);
     310:	2096      	movs	r0, #150	; 0x96
     312:	0040      	lsls	r0, r0, #1
     314:	47c0      	blx	r8
        SaLDigitalOut(module->SS,false);
     316:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     318:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     31a:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     31c:	2900      	cmp	r1, #0
     31e:	d104      	bne.n	32a <read_coeff+0x36>
        return &(ports[port_index]->Group[group_index]);
     320:	095a      	lsrs	r2, r3, #5
     322:	01d2      	lsls	r2, r2, #7
     324:	4918      	ldr	r1, [pc, #96]	; (388 <read_coeff+0x94>)
     326:	468c      	mov	ip, r1
     328:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     32a:	211f      	movs	r1, #31
     32c:	400b      	ands	r3, r1
     32e:	391e      	subs	r1, #30
     330:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     332:	6151      	str	r1, [r2, #20]
        byteOut(module,_cmd);
     334:	1c20      	adds	r0, r4, #0
     336:	4649      	mov	r1, r9
     338:	47b8      	blx	r7
        uint8_t _byte1 = getByte(module);
     33a:	1c20      	adds	r0, r4, #0
     33c:	47b0      	blx	r6
     33e:	4681      	mov	r9, r0
        uint8_t _byte2 = getByte(module);
     340:	1c20      	adds	r0, r4, #0
     342:	47b0      	blx	r6

        SaLDigitalOut(module->SS,true);
     344:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     346:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     348:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     34a:	2900      	cmp	r1, #0
     34c:	d104      	bne.n	358 <read_coeff+0x64>
        return &(ports[port_index]->Group[group_index]);
     34e:	095a      	lsrs	r2, r3, #5
     350:	01d2      	lsls	r2, r2, #7
     352:	490d      	ldr	r1, [pc, #52]	; (388 <read_coeff+0x94>)
     354:	468c      	mov	ip, r1
     356:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     358:	211f      	movs	r1, #31
     35a:	400b      	ands	r3, r1
     35c:	391e      	subs	r1, #30
     35e:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     360:	6191      	str	r1, [r2, #24]

        coefficient = _byte1;
        coefficient = (coefficient *256 )+ _byte2;
     362:	464b      	mov	r3, r9
     364:	021b      	lsls	r3, r3, #8
     366:	1818      	adds	r0, r3, r0
        coefficients_[coeff_num] = coefficient;
     368:	4b08      	ldr	r3, [pc, #32]	; (38c <read_coeff+0x98>)
     36a:	5358      	strh	r0, [r3, r5]
     36c:	3502      	adds	r5, #2
}

void read_coeff(struct spiModule *const module) {

    uint16_t coefficient;
    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     36e:	2d0c      	cmp	r5, #12
     370:	d1ca      	bne.n	308 <read_coeff+0x14>

        coefficient = _byte1;
        coefficient = (coefficient *256 )+ _byte2;
        coefficients_[coeff_num] = coefficient;
    }
}
     372:	bc0c      	pop	{r2, r3}
     374:	4690      	mov	r8, r2
     376:	4699      	mov	r9, r3
     378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	0000067d 	.word	0x0000067d
     380:	000004f5 	.word	0x000004f5
     384:	00000589 	.word	0x00000589
     388:	41004400 	.word	0x41004400
     38c:	20000460 	.word	0x20000460

00000390 <initAccelerometer>:


#include <SaLAccelerometer.h>

void initAccelerometer(
    struct Accelerometer *const myAccelerometer) {
     390:	b530      	push	{r4, r5, lr}
     392:	b083      	sub	sp, #12
     394:	1c04      	adds	r4, r0, #0


#ifdef HAS_ADXL345

    struct spiModule tempAccelSpiModule;
    configSpiModule(&(myAccelerometer->thisSpiModule),
     396:	2310      	movs	r3, #16
     398:	9300      	str	r3, [sp, #0]
     39a:	210d      	movs	r1, #13
     39c:	220e      	movs	r2, #14
     39e:	3b01      	subs	r3, #1
     3a0:	4d51      	ldr	r5, [pc, #324]	; (4e8 <initAccelerometer+0x158>)
     3a2:	47a8      	blx	r5
                    ADXL345_SCK_PIN,
                    ADXL345_SLAVE_SELECT_PIN);

   // myAccelerometer->thisSpiModule = tempAccelSpiModule;

    myAccelerometer->rate_ = MY_ADXL345_DATA_RATE;
     3a4:	230e      	movs	r3, #14
     3a6:	7163      	strb	r3, [r4, #5]
    myAccelerometer->range_ = MY_ADXL345_RANGE;
     3a8:	3b06      	subs	r3, #6
     3aa:	7123      	strb	r3, [r4, #4]

SaLDigitalOut(myAccelerometer->thisSpiModule->SS,FALSE);
     3ac:	6823      	ldr	r3, [r4, #0]
     3ae:	78db      	ldrb	r3, [r3, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3b0:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     3b2:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3b4:	2900      	cmp	r1, #0
     3b6:	d104      	bne.n	3c2 <initAccelerometer+0x32>
        return &(ports[port_index]->Group[group_index]);
     3b8:	095a      	lsrs	r2, r3, #5
     3ba:	01d2      	lsls	r2, r2, #7
     3bc:	494b      	ldr	r1, [pc, #300]	; (4ec <initAccelerometer+0x15c>)
     3be:	468c      	mov	ip, r1
     3c0:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     3c2:	211f      	movs	r1, #31
     3c4:	400b      	ands	r3, r1
     3c6:	391e      	subs	r1, #30
     3c8:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     3ca:	6151      	str	r1, [r2, #20]
byteOut(myAccelerometer->thisSpiModule,ADXL345_REG_POWER_CTL);
     3cc:	6820      	ldr	r0, [r4, #0]
     3ce:	212d      	movs	r1, #45	; 0x2d
     3d0:	4d47      	ldr	r5, [pc, #284]	; (4f0 <initAccelerometer+0x160>)
     3d2:	47a8      	blx	r5
byteOut(myAccelerometer->thisSpiModule,0x00); // disable
     3d4:	6820      	ldr	r0, [r4, #0]
     3d6:	2100      	movs	r1, #0
     3d8:	47a8      	blx	r5
SaLDigitalOut(myAccelerometer->thisSpiModule->SS,TRUE);
     3da:	6823      	ldr	r3, [r4, #0]
     3dc:	78db      	ldrb	r3, [r3, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3de:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     3e0:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3e2:	2900      	cmp	r1, #0
     3e4:	d104      	bne.n	3f0 <initAccelerometer+0x60>
        return &(ports[port_index]->Group[group_index]);
     3e6:	095a      	lsrs	r2, r3, #5
     3e8:	01d2      	lsls	r2, r2, #7
     3ea:	4940      	ldr	r1, [pc, #256]	; (4ec <initAccelerometer+0x15c>)
     3ec:	468c      	mov	ip, r1
     3ee:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     3f0:	211f      	movs	r1, #31
     3f2:	400b      	ands	r3, r1
     3f4:	391e      	subs	r1, #30
     3f6:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     3f8:	6191      	str	r1, [r2, #24]

SaLDigitalOut(myAccelerometer->thisSpiModule->SS,FALSE);
     3fa:	6823      	ldr	r3, [r4, #0]
     3fc:	78db      	ldrb	r3, [r3, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     3fe:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     400:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     402:	2900      	cmp	r1, #0
     404:	d104      	bne.n	410 <initAccelerometer+0x80>
        return &(ports[port_index]->Group[group_index]);
     406:	095a      	lsrs	r2, r3, #5
     408:	01d2      	lsls	r2, r2, #7
     40a:	4938      	ldr	r1, [pc, #224]	; (4ec <initAccelerometer+0x15c>)
     40c:	468c      	mov	ip, r1
     40e:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     410:	211f      	movs	r1, #31
     412:	400b      	ands	r3, r1
     414:	391e      	subs	r1, #30
     416:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     418:	6151      	str	r1, [r2, #20]
byteOut(myAccelerometer->thisSpiModule,ADXL345_REG_BW_RATE);
     41a:	6820      	ldr	r0, [r4, #0]
     41c:	212c      	movs	r1, #44	; 0x2c
     41e:	4d34      	ldr	r5, [pc, #208]	; (4f0 <initAccelerometer+0x160>)
     420:	47a8      	blx	r5
byteOut(myAccelerometer->thisSpiModule,myAccelerometer->rate_);
     422:	7961      	ldrb	r1, [r4, #5]
     424:	6820      	ldr	r0, [r4, #0]
     426:	47a8      	blx	r5
SaLDigitalOut(myAccelerometer->thisSpiModule->SS,TRUE);
     428:	6823      	ldr	r3, [r4, #0]
     42a:	78db      	ldrb	r3, [r3, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     42c:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     42e:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     430:	2900      	cmp	r1, #0
     432:	d104      	bne.n	43e <initAccelerometer+0xae>
        return &(ports[port_index]->Group[group_index]);
     434:	095a      	lsrs	r2, r3, #5
     436:	01d2      	lsls	r2, r2, #7
     438:	492c      	ldr	r1, [pc, #176]	; (4ec <initAccelerometer+0x15c>)
     43a:	468c      	mov	ip, r1
     43c:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     43e:	211f      	movs	r1, #31
     440:	400b      	ands	r3, r1
     442:	391e      	subs	r1, #30
     444:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     446:	6191      	str	r1, [r2, #24]

SaLDigitalOut(myAccelerometer->thisSpiModule->SS,FALSE);
     448:	6823      	ldr	r3, [r4, #0]
     44a:	78db      	ldrb	r3, [r3, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     44c:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     44e:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     450:	2900      	cmp	r1, #0
     452:	d104      	bne.n	45e <initAccelerometer+0xce>
        return &(ports[port_index]->Group[group_index]);
     454:	095a      	lsrs	r2, r3, #5
     456:	01d2      	lsls	r2, r2, #7
     458:	4924      	ldr	r1, [pc, #144]	; (4ec <initAccelerometer+0x15c>)
     45a:	468c      	mov	ip, r1
     45c:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     45e:	211f      	movs	r1, #31
     460:	400b      	ands	r3, r1
     462:	391e      	subs	r1, #30
     464:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     466:	6151      	str	r1, [r2, #20]
byteOut(myAccelerometer->thisSpiModule,ADXL345_REG_BW_RATE);
     468:	6820      	ldr	r0, [r4, #0]
     46a:	212c      	movs	r1, #44	; 0x2c
     46c:	4d20      	ldr	r5, [pc, #128]	; (4f0 <initAccelerometer+0x160>)
     46e:	47a8      	blx	r5
byteOut(myAccelerometer->thisSpiModule,myAccelerometer->range_);
     470:	7921      	ldrb	r1, [r4, #4]
     472:	6820      	ldr	r0, [r4, #0]
     474:	47a8      	blx	r5
SaLDigitalOut(myAccelerometer->thisSpiModule->SS,TRUE);
     476:	6823      	ldr	r3, [r4, #0]
     478:	78db      	ldrb	r3, [r3, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     47a:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     47c:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     47e:	2900      	cmp	r1, #0
     480:	d104      	bne.n	48c <initAccelerometer+0xfc>
        return &(ports[port_index]->Group[group_index]);
     482:	095a      	lsrs	r2, r3, #5
     484:	01d2      	lsls	r2, r2, #7
     486:	4919      	ldr	r1, [pc, #100]	; (4ec <initAccelerometer+0x15c>)
     488:	468c      	mov	ip, r1
     48a:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     48c:	211f      	movs	r1, #31
     48e:	400b      	ands	r3, r1
     490:	391e      	subs	r1, #30
     492:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     494:	6191      	str	r1, [r2, #24]

SaLDigitalOut(myAccelerometer->thisSpiModule->SS,FALSE);
     496:	6823      	ldr	r3, [r4, #0]
     498:	78db      	ldrb	r3, [r3, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     49a:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     49c:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     49e:	2900      	cmp	r1, #0
     4a0:	d104      	bne.n	4ac <initAccelerometer+0x11c>
        return &(ports[port_index]->Group[group_index]);
     4a2:	095a      	lsrs	r2, r3, #5
     4a4:	01d2      	lsls	r2, r2, #7
     4a6:	4911      	ldr	r1, [pc, #68]	; (4ec <initAccelerometer+0x15c>)
     4a8:	468c      	mov	ip, r1
     4aa:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     4ac:	211f      	movs	r1, #31
     4ae:	400b      	ands	r3, r1
     4b0:	391e      	subs	r1, #30
     4b2:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     4b4:	6151      	str	r1, [r2, #20]
byteOut(myAccelerometer->thisSpiModule,ADXL345_REG_POWER_CTL);
     4b6:	6820      	ldr	r0, [r4, #0]
     4b8:	212d      	movs	r1, #45	; 0x2d
     4ba:	4d0d      	ldr	r5, [pc, #52]	; (4f0 <initAccelerometer+0x160>)
     4bc:	47a8      	blx	r5
byteOut(myAccelerometer->thisSpiModule,0x08); // disable
     4be:	6820      	ldr	r0, [r4, #0]
     4c0:	2108      	movs	r1, #8
     4c2:	47a8      	blx	r5
SaLDigitalOut(myAccelerometer->thisSpiModule->SS,TRUE);
     4c4:	6823      	ldr	r3, [r4, #0]
     4c6:	78db      	ldrb	r3, [r3, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     4c8:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     4ca:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     4cc:	2900      	cmp	r1, #0
     4ce:	d104      	bne.n	4da <initAccelerometer+0x14a>
        return &(ports[port_index]->Group[group_index]);
     4d0:	095a      	lsrs	r2, r3, #5
     4d2:	01d2      	lsls	r2, r2, #7
     4d4:	4905      	ldr	r1, [pc, #20]	; (4ec <initAccelerometer+0x15c>)
     4d6:	468c      	mov	ip, r1
     4d8:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     4da:	211f      	movs	r1, #31
     4dc:	400b      	ands	r3, r1
     4de:	391e      	subs	r1, #30
     4e0:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     4e2:	6191      	str	r1, [r2, #24]





     4e4:	b003      	add	sp, #12
     4e6:	bd30      	pop	{r4, r5, pc}
     4e8:	00000701 	.word	0x00000701
     4ec:	41004400 	.word	0x41004400
     4f0:	000004f5 	.word	0x000004f5

000004f4 <byteOut>:
#include "SaLBitBang.h"



void byteOut(struct spiModule *const module,
             uint8_t byte) {
     4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f6:	2408      	movs	r4, #8

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     4f8:	261f      	movs	r6, #31
     4fa:	2501      	movs	r5, #1

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(module->SCK,PINLOW);
     4fc:	7883      	ldrb	r3, [r0, #2]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     4fe:	09da      	lsrs	r2, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     500:	2700      	movs	r7, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     502:	2a00      	cmp	r2, #0
     504:	d104      	bne.n	510 <byteOut+0x1c>
        return &(ports[port_index]->Group[group_index]);
     506:	095f      	lsrs	r7, r3, #5
     508:	01ff      	lsls	r7, r7, #7
     50a:	4a1e      	ldr	r2, [pc, #120]	; (584 <byteOut+0x90>)
     50c:	4694      	mov	ip, r2
     50e:	4467      	add	r7, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     510:	4033      	ands	r3, r6
     512:	1c2a      	adds	r2, r5, #0
     514:	409a      	lsls	r2, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     516:	617a      	str	r2, [r7, #20]
        if (byte & 0x80) {
     518:	b24b      	sxtb	r3, r1
     51a:	2b00      	cmp	r3, #0
     51c:	da0e      	bge.n	53c <byteOut+0x48>
            SaLDigitalOut(module->MOSI,true);
     51e:	7843      	ldrb	r3, [r0, #1]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     520:	09da      	lsrs	r2, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     522:	2700      	movs	r7, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     524:	2a00      	cmp	r2, #0
     526:	d104      	bne.n	532 <byteOut+0x3e>
        return &(ports[port_index]->Group[group_index]);
     528:	095f      	lsrs	r7, r3, #5
     52a:	01ff      	lsls	r7, r7, #7
     52c:	4a15      	ldr	r2, [pc, #84]	; (584 <byteOut+0x90>)
     52e:	4694      	mov	ip, r2
     530:	4467      	add	r7, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     532:	4033      	ands	r3, r6
     534:	1c2a      	adds	r2, r5, #0
     536:	409a      	lsls	r2, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     538:	61ba      	str	r2, [r7, #24]
     53a:	e00d      	b.n	558 <byteOut+0x64>
        } else {
            SaLDigitalOut(module->MOSI,false);
     53c:	7843      	ldrb	r3, [r0, #1]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     53e:	09da      	lsrs	r2, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     540:	2700      	movs	r7, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     542:	2a00      	cmp	r2, #0
     544:	d104      	bne.n	550 <byteOut+0x5c>
        return &(ports[port_index]->Group[group_index]);
     546:	095f      	lsrs	r7, r3, #5
     548:	01ff      	lsls	r7, r7, #7
     54a:	4a0e      	ldr	r2, [pc, #56]	; (584 <byteOut+0x90>)
     54c:	4694      	mov	ip, r2
     54e:	4467      	add	r7, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     550:	4033      	ands	r3, r6
     552:	1c2a      	adds	r2, r5, #0
     554:	409a      	lsls	r2, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     556:	617a      	str	r2, [r7, #20]
        }
        SaLDigitalOut(module->SCK,PINHIGH);
     558:	7883      	ldrb	r3, [r0, #2]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     55a:	09da      	lsrs	r2, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     55c:	2700      	movs	r7, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     55e:	2a00      	cmp	r2, #0
     560:	d104      	bne.n	56c <byteOut+0x78>
        return &(ports[port_index]->Group[group_index]);
     562:	095f      	lsrs	r7, r3, #5
     564:	01ff      	lsls	r7, r7, #7
     566:	4a07      	ldr	r2, [pc, #28]	; (584 <byteOut+0x90>)
     568:	4694      	mov	ip, r2
     56a:	4467      	add	r7, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     56c:	4033      	ands	r3, r6
     56e:	1c2a      	adds	r2, r5, #0
     570:	409a      	lsls	r2, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     572:	61ba      	str	r2, [r7, #24]
        byte <<= 1;
     574:	0049      	lsls	r1, r1, #1
     576:	b2c9      	uxtb	r1, r1
     578:	3c01      	subs	r4, #1
     57a:	b2e4      	uxtb	r4, r4


void byteOut(struct spiModule *const module,
             uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     57c:	2c00      	cmp	r4, #0
     57e:	d1bd      	bne.n	4fc <byteOut+0x8>
        }
        SaLDigitalOut(module->SCK,PINHIGH);
        byte <<= 1;
    }

}
     580:	bdf0      	pop	{r4, r5, r6, r7, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	41004400 	.word	0x41004400

00000588 <getByte>:
        dataBits <<= 1;
    }

}

uint8_t getByte(struct spiModule *const module) {
     588:	b5f0      	push	{r4, r5, r6, r7, lr}
     58a:	1c07      	adds	r7, r0, #0
     58c:	2408      	movs	r4, #8
    uint8_t byte = 0x00;
     58e:	2300      	movs	r3, #0

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     590:	261f      	movs	r6, #31
     592:	2501      	movs	r5, #1
    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(module->SCK,PINLOW);
     594:	78ba      	ldrb	r2, [r7, #2]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     596:	09d1      	lsrs	r1, r2, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     598:	2000      	movs	r0, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     59a:	2900      	cmp	r1, #0
     59c:	d104      	bne.n	5a8 <getByte+0x20>
        return &(ports[port_index]->Group[group_index]);
     59e:	0950      	lsrs	r0, r2, #5
     5a0:	01c0      	lsls	r0, r0, #7
     5a2:	4919      	ldr	r1, [pc, #100]	; (608 <getByte+0x80>)
     5a4:	468c      	mov	ip, r1
     5a6:	4460      	add	r0, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     5a8:	4032      	ands	r2, r6
     5aa:	1c29      	adds	r1, r5, #0
     5ac:	4091      	lsls	r1, r2
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     5ae:	6141      	str	r1, [r0, #20]
        byte = (byte << 1 ) | SaLDigitalIn(module->MISO);
     5b0:	005b      	lsls	r3, r3, #1
     5b2:	b2d8      	uxtb	r0, r3
     5b4:	783b      	ldrb	r3, [r7, #0]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     5b6:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     5b8:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     5ba:	2900      	cmp	r1, #0
     5bc:	d104      	bne.n	5c8 <getByte+0x40>
        return &(ports[port_index]->Group[group_index]);
     5be:	095a      	lsrs	r2, r3, #5
     5c0:	01d2      	lsls	r2, r2, #7
     5c2:	4911      	ldr	r1, [pc, #68]	; (608 <getByte+0x80>)
     5c4:	468c      	mov	ip, r1
     5c6:	4462      	add	r2, ip
}

static inline bool SaLDigitalIn(uint8_t pin) {
	PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	bool level = (port->IN.reg & pin_mask);
     5c8:	6a11      	ldr	r1, [r2, #32]
	}
}

static inline bool SaLDigitalIn(uint8_t pin) {
	PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     5ca:	4033      	ands	r3, r6
     5cc:	1c1a      	adds	r2, r3, #0
     5ce:	1c2b      	adds	r3, r5, #0
     5d0:	4093      	lsls	r3, r2
     5d2:	1c1a      	adds	r2, r3, #0
	bool level = (port->IN.reg & pin_mask);
     5d4:	1c0b      	adds	r3, r1, #0
     5d6:	4013      	ands	r3, r2
     5d8:	1e5a      	subs	r2, r3, #1
     5da:	4193      	sbcs	r3, r2
     5dc:	4303      	orrs	r3, r0
        SaLDigitalOut(module->SCK,PINHIGH);
     5de:	78ba      	ldrb	r2, [r7, #2]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     5e0:	09d1      	lsrs	r1, r2, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     5e2:	2000      	movs	r0, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     5e4:	2900      	cmp	r1, #0
     5e6:	d104      	bne.n	5f2 <getByte+0x6a>
        return &(ports[port_index]->Group[group_index]);
     5e8:	0950      	lsrs	r0, r2, #5
     5ea:	01c0      	lsls	r0, r0, #7
     5ec:	4906      	ldr	r1, [pc, #24]	; (608 <getByte+0x80>)
     5ee:	468c      	mov	ip, r1
     5f0:	4460      	add	r0, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     5f2:	4032      	ands	r2, r6
     5f4:	1c29      	adds	r1, r5, #0
     5f6:	4091      	lsls	r1, r2
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     5f8:	6181      	str	r1, [r0, #24]
     5fa:	3c01      	subs	r4, #1
     5fc:	b2e4      	uxtb	r4, r4

}

uint8_t getByte(struct spiModule *const module) {
    uint8_t byte = 0x00;
    for (uint8_t i = 0; i<8; ++i) {
     5fe:	2c00      	cmp	r4, #0
     600:	d1c8      	bne.n	594 <getByte+0xc>
        SaLDigitalOut(module->SCK,PINLOW);
        byte = (byte << 1 ) | SaLDigitalIn(module->MISO);
        SaLDigitalOut(module->SCK,PINHIGH);
    }
    return byte;
}
     602:	1c18      	adds	r0, r3, #0
     604:	bdf0      	pop	{r4, r5, r6, r7, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	41004400 	.word	0x41004400

0000060c <SaLPlayTone>:

#include <SaLBuzzer.h>


void SaLPlayTone(int16_t tone_) {
     60c:	b5f0      	push	{r4, r5, r6, r7, lr}
     60e:	464f      	mov	r7, r9
     610:	4646      	mov	r6, r8
     612:	b4c0      	push	{r6, r7}
     614:	b083      	sub	sp, #12
     616:	4680      	mov	r8, r0
    int32_t duration = 100000;

    while (elapsed_time < duration) {

        SaLDigitalOut(BUZZER,true);
        delay_us(tone_/2);
     618:	0fc6      	lsrs	r6, r0, #31
     61a:	4446      	add	r6, r8
     61c:	1073      	asrs	r3, r6, #1
     61e:	9301      	str	r3, [sp, #4]


void SaLPlayTone(int16_t tone_) {


    int32_t elapsed_time = 0;
     620:	2400      	movs	r4, #0
     622:	4f0b      	ldr	r7, [pc, #44]	; (650 <SaLPlayTone+0x44>)
     624:	2380      	movs	r3, #128	; 0x80
     626:	015b      	lsls	r3, r3, #5
     628:	4699      	mov	r9, r3
     62a:	1c1e      	adds	r6, r3, #0
     62c:	61be      	str	r6, [r7, #24]
    int32_t duration = 100000;

    while (elapsed_time < duration) {

        SaLDigitalOut(BUZZER,true);
        delay_us(tone_/2);
     62e:	9801      	ldr	r0, [sp, #4]
     630:	4d08      	ldr	r5, [pc, #32]	; (654 <SaLPlayTone+0x48>)
     632:	47a8      	blx	r5
		} else {
		port->OUTCLR.reg = pin_mask;
     634:	464b      	mov	r3, r9
     636:	617b      	str	r3, [r7, #20]

        SaLDigitalOut(BUZZER, false);
        delay_us(tone_/2);
     638:	9801      	ldr	r0, [sp, #4]
     63a:	47a8      	blx	r5
     63c:	4444      	add	r4, r8


    int32_t elapsed_time = 0;
    int32_t duration = 100000;

    while (elapsed_time < duration) {
     63e:	4b06      	ldr	r3, [pc, #24]	; (658 <SaLPlayTone+0x4c>)
     640:	429c      	cmp	r4, r3
     642:	ddf3      	ble.n	62c <SaLPlayTone+0x20>


    }


     644:	b003      	add	sp, #12
     646:	bc0c      	pop	{r2, r3}
     648:	4690      	mov	r8, r2
     64a:	4699      	mov	r9, r3
     64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     64e:	46c0      	nop			; (mov r8, r8)
     650:	41004400 	.word	0x41004400
     654:	0000067d 	.word	0x0000067d
     658:	0001869f 	.word	0x0001869f

0000065c <SaLDelayInit>:
static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void SaLDelayInit(void) {
    cycles_per_ms = 41900000UL;
    cycles_per_ms /= 1000;
     65c:	4b04      	ldr	r3, [pc, #16]	; (670 <SaLDelayInit+0x14>)
     65e:	4a05      	ldr	r2, [pc, #20]	; (674 <SaLDelayInit+0x18>)
     660:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     662:	2229      	movs	r2, #41	; 0x29
     664:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     666:	3a24      	subs	r2, #36	; 0x24
     668:	4b03      	ldr	r3, [pc, #12]	; (678 <SaLDelayInit+0x1c>)
     66a:	601a      	str	r2, [r3, #0]
}
     66c:	4770      	bx	lr
     66e:	46c0      	nop			; (mov r8, r8)
     670:	20000000 	.word	0x20000000
     674:	0000a3ac 	.word	0x0000a3ac
     678:	e000e010 	.word	0xe000e010

0000067c <delay_us>:
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
     67c:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     67e:	4b08      	ldr	r3, [pc, #32]	; (6a0 <delay_us+0x24>)
     680:	685c      	ldr	r4, [r3, #4]
void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     682:	4a08      	ldr	r2, [pc, #32]	; (6a4 <delay_us+0x28>)
        SysTick->VAL = 0;
     684:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     686:	2180      	movs	r1, #128	; 0x80
     688:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
    while (n--) {
     68a:	e006      	b.n	69a <delay_us+0x1e>

void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     68c:	2c00      	cmp	r4, #0
     68e:	d004      	beq.n	69a <delay_us+0x1e>
        SysTick->LOAD = n;
     690:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     692:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     694:	6813      	ldr	r3, [r2, #0]
     696:	420b      	tst	r3, r1
     698:	d0fc      	beq.n	694 <delay_us+0x18>
     69a:	3801      	subs	r0, #1
     69c:	d2f6      	bcs.n	68c <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     69e:	bd30      	pop	{r4, r5, pc}
     6a0:	20000000 	.word	0x20000000
     6a4:	e000e010 	.word	0xe000e010

000006a8 <SaLPinMode>:


#include <SaLPort.h>

void SaLPinMode(uint8_t pin,uint8_t DIR) {
     6a8:	b510      	push	{r4, lr}
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     6aa:	09c2      	lsrs	r2, r0, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     6ac:	2300      	movs	r3, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     6ae:	2a00      	cmp	r2, #0
     6b0:	d104      	bne.n	6bc <SaLPinMode+0x14>
        return &(ports[port_index]->Group[group_index]);
     6b2:	0943      	lsrs	r3, r0, #5
     6b4:	01db      	lsls	r3, r3, #7
     6b6:	4a11      	ldr	r2, [pc, #68]	; (6fc <SaLPinMode+0x54>)
     6b8:	4694      	mov	ip, r2
     6ba:	4463      	add	r3, ip
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     6bc:	221f      	movs	r2, #31
     6be:	4002      	ands	r2, r0
     6c0:	2401      	movs	r4, #1
     6c2:	4094      	lsls	r4, r2

    if ( DIR == OUTPUT) {
     6c4:	2901      	cmp	r1, #1
     6c6:	d105      	bne.n	6d4 <SaLPinMode+0x2c>
        port->DIRSET.reg = pin_mask;
     6c8:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0;
     6ca:	1818      	adds	r0, r3, r0
     6cc:	3040      	adds	r0, #64	; 0x40
     6ce:	2300      	movs	r3, #0
     6d0:	7003      	strb	r3, [r0, #0]
     6d2:	e012      	b.n	6fa <SaLPinMode+0x52>

    } else if(DIR == INPUT) {
     6d4:	2900      	cmp	r1, #0
     6d6:	d109      	bne.n	6ec <SaLPinMode+0x44>
        port->DIRCLR.reg = pin_mask;
     6d8:	605c      	str	r4, [r3, #4]
        port->PINCFG[pin].reg = PORT_PINCFG_INEN;
     6da:	1818      	adds	r0, r3, r0
     6dc:	3040      	adds	r0, #64	; 0x40
     6de:	2302      	movs	r3, #2
     6e0:	7003      	strb	r3, [r0, #0]
        port->PINCFG[pin].reg |= PORT_PINCFG_PULLEN;
     6e2:	7802      	ldrb	r2, [r0, #0]
     6e4:	3302      	adds	r3, #2
     6e6:	4313      	orrs	r3, r2
     6e8:	7003      	strb	r3, [r0, #0]
     6ea:	e006      	b.n	6fa <SaLPinMode+0x52>
    } else if (DIR == OUTSTRONG) {
     6ec:	2903      	cmp	r1, #3
     6ee:	d104      	bne.n	6fa <SaLPinMode+0x52>
        port->DIRSET.reg = pin_mask;
     6f0:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0x40;
     6f2:	1818      	adds	r0, r3, r0
     6f4:	3040      	adds	r0, #64	; 0x40
     6f6:	2340      	movs	r3, #64	; 0x40
     6f8:	7003      	strb	r3, [r0, #0]

    }
     6fa:	bd10      	pop	{r4, pc}
     6fc:	41004400 	.word	0x41004400

00000700 <configSpiModule>:

void configSpiModule(struct spiModule *const module,
                     uint8_t MOSI_PIN,
                     uint8_t MISO_pin,
                     uint8_t SCK_PIN,
                     uint8_t SS_PIN ) {
     700:	b538      	push	{r3, r4, r5, lr}
     702:	1c04      	adds	r4, r0, #0
     704:	a804      	add	r0, sp, #16
     706:	7800      	ldrb	r0, [r0, #0]
    module->MOSI		= MOSI_PIN;
     708:	7061      	strb	r1, [r4, #1]
    module->MISO		= MISO_pin;
     70a:	7022      	strb	r2, [r4, #0]
    module->SCK		    = SCK_PIN;
     70c:	70a3      	strb	r3, [r4, #2]
    module->SS			= SS_PIN;
     70e:	70e0      	strb	r0, [r4, #3]

    SaLPinMode(module->MOSI,OUTPUT);
     710:	1c08      	adds	r0, r1, #0
     712:	2101      	movs	r1, #1
     714:	4d0e      	ldr	r5, [pc, #56]	; (750 <configSpiModule+0x50>)
     716:	47a8      	blx	r5
    SaLPinMode(module->SCK ,OUTPUT);
     718:	78a0      	ldrb	r0, [r4, #2]
     71a:	2101      	movs	r1, #1
     71c:	47a8      	blx	r5
    SaLPinMode(module->SS,  OUTPUT);
     71e:	78e0      	ldrb	r0, [r4, #3]
     720:	2101      	movs	r1, #1
     722:	47a8      	blx	r5
    SaLPinMode(module->MISO,INPUT);
     724:	7820      	ldrb	r0, [r4, #0]
     726:	2100      	movs	r1, #0
     728:	47a8      	blx	r5
    SaLDigitalOut(module->SS,true);
     72a:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     72c:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     72e:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     730:	2900      	cmp	r1, #0
     732:	d104      	bne.n	73e <configSpiModule+0x3e>
        return &(ports[port_index]->Group[group_index]);
     734:	095a      	lsrs	r2, r3, #5
     736:	01d2      	lsls	r2, r2, #7
     738:	4906      	ldr	r1, [pc, #24]	; (754 <configSpiModule+0x54>)
     73a:	468c      	mov	ip, r1
     73c:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     73e:	211f      	movs	r1, #31
     740:	400b      	ands	r3, r1
     742:	391e      	subs	r1, #30
     744:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     746:	6191      	str	r1, [r2, #24]



    module->BYTEIN		= 0x00;
     748:	2300      	movs	r3, #0
     74a:	7163      	strb	r3, [r4, #5]
    module->BYTEOUT		= 0x00;
     74c:	7123      	strb	r3, [r4, #4]
     74e:	bd38      	pop	{r3, r4, r5, pc}
     750:	000006a9 	.word	0x000006a9
     754:	41004400 	.word	0x41004400

00000758 <configUSARTModule>:

void configUSARTModule( struct USARTModule *const module,
uint8_t TX_PIN,
uint8_t RX_PIN,
uint16_t BAUDRATE,
uint8_t SERCOMNUM) {
     758:	b510      	push	{r4, lr}
     75a:	ac02      	add	r4, sp, #8
     75c:	7824      	ldrb	r4, [r4, #0]

	module->TX				= TX_PIN;
     75e:	7001      	strb	r1, [r0, #0]
	module->RX				= RX_PIN;
     760:	7042      	strb	r2, [r0, #1]
	module->BAUD			= BAUDRATE;
     762:	8043      	strh	r3, [r0, #2]
	module->SERCOMNUMBER	= SERCOMNUM;
     764:	7104      	strb	r4, [r0, #4]

	//SaLPinMode(module->TX,OUTPUT);
	//SaLPinMode(module->RX,INPUT);


     766:	bd10      	pop	{r4, pc}

00000768 <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     768:	f3ef 8305 	mrs	r3, IPSR
     76c:	e7fc      	b.n	768 <Dummy_Handler>
     76e:	46c0      	nop			; (mov r8, r8)

00000770 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     770:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     772:	4b2e      	ldr	r3, [pc, #184]	; (82c <Reset_Handler+0xbc>)
     774:	4a2e      	ldr	r2, [pc, #184]	; (830 <Reset_Handler+0xc0>)
     776:	429a      	cmp	r2, r3
     778:	d003      	beq.n	782 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     77a:	4b2e      	ldr	r3, [pc, #184]	; (834 <Reset_Handler+0xc4>)
     77c:	4a2b      	ldr	r2, [pc, #172]	; (82c <Reset_Handler+0xbc>)
     77e:	429a      	cmp	r2, r3
     780:	d304      	bcc.n	78c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     782:	4b2d      	ldr	r3, [pc, #180]	; (838 <Reset_Handler+0xc8>)
     784:	4a2d      	ldr	r2, [pc, #180]	; (83c <Reset_Handler+0xcc>)
     786:	429a      	cmp	r2, r3
     788:	d310      	bcc.n	7ac <Reset_Handler+0x3c>
     78a:	e01e      	b.n	7ca <Reset_Handler+0x5a>
     78c:	4a2c      	ldr	r2, [pc, #176]	; (840 <Reset_Handler+0xd0>)
     78e:	4b29      	ldr	r3, [pc, #164]	; (834 <Reset_Handler+0xc4>)
     790:	3303      	adds	r3, #3
     792:	1a9b      	subs	r3, r3, r2
     794:	089b      	lsrs	r3, r3, #2
     796:	3301      	adds	r3, #1
     798:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     79a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     79c:	4823      	ldr	r0, [pc, #140]	; (82c <Reset_Handler+0xbc>)
     79e:	4924      	ldr	r1, [pc, #144]	; (830 <Reset_Handler+0xc0>)
     7a0:	588c      	ldr	r4, [r1, r2]
     7a2:	5084      	str	r4, [r0, r2]
     7a4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     7a6:	429a      	cmp	r2, r3
     7a8:	d1fa      	bne.n	7a0 <Reset_Handler+0x30>
     7aa:	e7ea      	b.n	782 <Reset_Handler+0x12>
     7ac:	4a25      	ldr	r2, [pc, #148]	; (844 <Reset_Handler+0xd4>)
     7ae:	4b22      	ldr	r3, [pc, #136]	; (838 <Reset_Handler+0xc8>)
     7b0:	3303      	adds	r3, #3
     7b2:	1a9b      	subs	r3, r3, r2
     7b4:	089b      	lsrs	r3, r3, #2
     7b6:	3301      	adds	r3, #1
     7b8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7ba:	2200      	movs	r2, #0
                *pDest++ = 0;
     7bc:	481f      	ldr	r0, [pc, #124]	; (83c <Reset_Handler+0xcc>)
     7be:	2100      	movs	r1, #0
     7c0:	1814      	adds	r4, r2, r0
     7c2:	6021      	str	r1, [r4, #0]
     7c4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     7c6:	429a      	cmp	r2, r3
     7c8:	d1fa      	bne.n	7c0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     7ca:	4a1f      	ldr	r2, [pc, #124]	; (848 <Reset_Handler+0xd8>)
     7cc:	21ff      	movs	r1, #255	; 0xff
     7ce:	4b1f      	ldr	r3, [pc, #124]	; (84c <Reset_Handler+0xdc>)
     7d0:	438b      	bics	r3, r1
     7d2:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     7d4:	39fd      	subs	r1, #253	; 0xfd
     7d6:	2390      	movs	r3, #144	; 0x90
     7d8:	005b      	lsls	r3, r3, #1
     7da:	4a1d      	ldr	r2, [pc, #116]	; (850 <Reset_Handler+0xe0>)
     7dc:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     7de:	481d      	ldr	r0, [pc, #116]	; (854 <Reset_Handler+0xe4>)
     7e0:	78c3      	ldrb	r3, [r0, #3]
     7e2:	2403      	movs	r4, #3
     7e4:	43a3      	bics	r3, r4
     7e6:	2202      	movs	r2, #2
     7e8:	4313      	orrs	r3, r2
     7ea:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     7ec:	78c3      	ldrb	r3, [r0, #3]
     7ee:	260c      	movs	r6, #12
     7f0:	43b3      	bics	r3, r6
     7f2:	2108      	movs	r1, #8
     7f4:	430b      	orrs	r3, r1
     7f6:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     7f8:	4b17      	ldr	r3, [pc, #92]	; (858 <Reset_Handler+0xe8>)
     7fa:	7b98      	ldrb	r0, [r3, #14]
     7fc:	2530      	movs	r5, #48	; 0x30
     7fe:	43a8      	bics	r0, r5
     800:	1c05      	adds	r5, r0, #0
     802:	2020      	movs	r0, #32
     804:	4328      	orrs	r0, r5
     806:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     808:	7b98      	ldrb	r0, [r3, #14]
     80a:	43b0      	bics	r0, r6
     80c:	4301      	orrs	r1, r0
     80e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     810:	7b99      	ldrb	r1, [r3, #14]
     812:	43a1      	bics	r1, r4
     814:	430a      	orrs	r2, r1
     816:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     818:	4a10      	ldr	r2, [pc, #64]	; (85c <Reset_Handler+0xec>)
     81a:	6851      	ldr	r1, [r2, #4]
     81c:	2380      	movs	r3, #128	; 0x80
     81e:	430b      	orrs	r3, r1
     820:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     822:	4b0f      	ldr	r3, [pc, #60]	; (860 <Reset_Handler+0xf0>)
     824:	4798      	blx	r3

        /* Branch to main function */
        main();
     826:	4b0f      	ldr	r3, [pc, #60]	; (864 <Reset_Handler+0xf4>)
     828:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     82a:	e7fe      	b.n	82a <Reset_Handler+0xba>
     82c:	20000000 	.word	0x20000000
     830:	0000144c 	.word	0x0000144c
     834:	20000438 	.word	0x20000438
     838:	2000334c 	.word	0x2000334c
     83c:	20000438 	.word	0x20000438
     840:	20000004 	.word	0x20000004
     844:	2000043c 	.word	0x2000043c
     848:	e000ed00 	.word	0xe000ed00
     84c:	00000000 	.word	0x00000000
     850:	41007000 	.word	0x41007000
     854:	41005000 	.word	0x41005000
     858:	41004800 	.word	0x41004800
     85c:	41004000 	.word	0x41004000
     860:	000011ed 	.word	0x000011ed
     864:	00000a01 	.word	0x00000a01

00000868 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     868:	4a01      	ldr	r2, [pc, #4]	; (870 <SystemInit+0x8>)
     86a:	4b02      	ldr	r3, [pc, #8]	; (874 <SystemInit+0xc>)
     86c:	601a      	str	r2, [r3, #0]
	return;
}
     86e:	4770      	bx	lr
     870:	000f4240 	.word	0x000f4240
     874:	20000008 	.word	0x20000008

00000878 <ClockInit>:



void ClockInit() {

    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     878:	491a      	ldr	r1, [pc, #104]	; (8e4 <ClockInit+0x6c>)
     87a:	23c2      	movs	r3, #194	; 0xc2
     87c:	00db      	lsls	r3, r3, #3
     87e:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;

    NVMCTRL->CTRLB.bit.RWS = 1;
     880:	4819      	ldr	r0, [pc, #100]	; (8e8 <ClockInit+0x70>)
     882:	6843      	ldr	r3, [r0, #4]
     884:	221e      	movs	r2, #30
     886:	4393      	bics	r3, r2
     888:	3a1c      	subs	r2, #28
     88a:	4313      	orrs	r3, r2
     88c:	6043      	str	r3, [r0, #4]

    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     88e:	4b17      	ldr	r3, [pc, #92]	; (8ec <ClockInit+0x74>)
     890:	828b      	strh	r3, [r1, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);
    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     892:	68cb      	ldr	r3, [r1, #12]
     894:	421a      	tst	r2, r3
     896:	d0fc      	beq.n	892 <ClockInit+0x1a>
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(1) |
     898:	4b15      	ldr	r3, [pc, #84]	; (8f0 <ClockInit+0x78>)
     89a:	2202      	movs	r2, #2
     89c:	32ff      	adds	r2, #255	; 0xff
     89e:	609a      	str	r2, [r3, #8]
                       GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) |
     8a0:	4a14      	ldr	r2, [pc, #80]	; (8f4 <ClockInit+0x7c>)
     8a2:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_XOSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(1) |
     8a4:	2282      	movs	r2, #130	; 0x82
     8a6:	01d2      	lsls	r2, r2, #7
     8a8:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_ID_DFLL48;

    //Configure the FDLL48MHz FLL, we will use this to provide a clock to the CPU
    //Set the course and fine step sizes, these should be less than 50% of the values used for the course and fine values (P150)
    SYSCTRL->DFLLCTRL.reg = (SYSCTRL_DFLLCTRL_ENABLE); //Enable the DFLL
     8aa:	4b0e      	ldr	r3, [pc, #56]	; (8e4 <ClockInit+0x6c>)
     8ac:	2202      	movs	r2, #2
     8ae:	849a      	strh	r2, [r3, #36]	; 0x24
    SYSCTRL->DFLLMUL.reg = (SYSCTRL_DFLLMUL_CSTEP(7) | SYSCTRL_DFLLMUL_FSTEP(30));
     8b0:	4a11      	ldr	r2, [pc, #68]	; (8f8 <ClockInit+0x80>)
     8b2:	62da      	str	r2, [r3, #44]	; 0x2c
    SYSCTRL->DFLLMUL.reg |= (SYSCTRL_DFLLMUL_MUL(1280));
     8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     8b6:	21a0      	movs	r1, #160	; 0xa0
     8b8:	00c9      	lsls	r1, r1, #3
     8ba:	430a      	orrs	r2, r1
     8bc:	62da      	str	r2, [r3, #44]	; 0x2c
    SYSCTRL->DFLLCTRL.reg |= (SYSCTRL_DFLLCTRL_MODE);
     8be:	8c99      	ldrh	r1, [r3, #36]	; 0x24
     8c0:	2204      	movs	r2, #4
     8c2:	430a      	orrs	r2, r1
     8c4:	849a      	strh	r2, [r3, #36]	; 0x24

    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     8c6:	1c19      	adds	r1, r3, #0
     8c8:	2210      	movs	r2, #16
     8ca:	68cb      	ldr	r3, [r1, #12]
     8cc:	421a      	tst	r2, r3
     8ce:	d0fc      	beq.n	8ca <ClockInit+0x52>

    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(2)  | GCLK_GENDIV_ID(0));
     8d0:	4b07      	ldr	r3, [pc, #28]	; (8f0 <ClockInit+0x78>)
     8d2:	2280      	movs	r2, #128	; 0x80
     8d4:	0092      	lsls	r2, r2, #2
     8d6:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     8d8:	4a08      	ldr	r2, [pc, #32]	; (8fc <ClockInit+0x84>)
     8da:	605a      	str	r2, [r3, #4]
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN ) ;
     8dc:	2280      	movs	r2, #128	; 0x80
     8de:	01d2      	lsls	r2, r2, #7
     8e0:	805a      	strh	r2, [r3, #2]

    //set up OSC8M
}
     8e2:	4770      	bx	lr
     8e4:	40000800 	.word	0x40000800
     8e8:	41004000 	.word	0x41004000
     8ec:	0000060e 	.word	0x0000060e
     8f0:	40000c00 	.word	0x40000c00
     8f4:	00010501 	.word	0x00010501
     8f8:	1c1e0000 	.word	0x1c1e0000
     8fc:	00010700 	.word	0x00010700

00000900 <PinConfig>:

void PinConfig() {
     900:	b510      	push	{r4, lr}

    /* temp SS HIGH for other peripherals */
    SaLPinMode(PIN_PA07,INPUT);
     902:	2007      	movs	r0, #7
     904:	2100      	movs	r1, #0
     906:	4c09      	ldr	r4, [pc, #36]	; (92c <PinConfig+0x2c>)
     908:	47a0      	blx	r4
    SaLPinMode(PIN_PA10,OUTPUT);
     90a:	200a      	movs	r0, #10
     90c:	2101      	movs	r1, #1
     90e:	47a0      	blx	r4
    SaLPinMode(PIN_PA08,OUTPUT);
     910:	2008      	movs	r0, #8
     912:	2101      	movs	r1, #1
     914:	47a0      	blx	r4
    SaLPinMode(BUZZER,OUTSTRONG);
     916:	200c      	movs	r0, #12
     918:	2103      	movs	r1, #3
     91a:	47a0      	blx	r4
     91c:	4b04      	ldr	r3, [pc, #16]	; (930 <PinConfig+0x30>)
     91e:	2280      	movs	r2, #128	; 0x80
     920:	00d2      	lsls	r2, r2, #3
     922:	619a      	str	r2, [r3, #24]
     924:	2280      	movs	r2, #128	; 0x80
     926:	0052      	lsls	r2, r2, #1
     928:	619a      	str	r2, [r3, #24]
    SaLDigitalOut(PIN_PA10,true);
    SaLDigitalOut(PIN_PA08,true);
}
     92a:	bd10      	pop	{r4, pc}
     92c:	000006a9 	.word	0x000006a9
     930:	41004400 	.word	0x41004400

00000934 <baroModuleSetup>:

 struct spiModule baroModuleSetup() {
     934:	b530      	push	{r4, r5, lr}
     936:	b085      	sub	sp, #20
     938:	1c04      	adds	r4, r0, #0

    struct spiModule baroModule;
    configSpiModule(&baroModule,
     93a:	2309      	movs	r3, #9
     93c:	9300      	str	r3, [sp, #0]
     93e:	a802      	add	r0, sp, #8
     940:	210d      	movs	r1, #13
     942:	220e      	movs	r2, #14
     944:	3306      	adds	r3, #6
     946:	4d05      	ldr	r5, [pc, #20]	; (95c <baroModuleSetup+0x28>)
     948:	47a8      	blx	r5
                    MS5607_MOSI_PIN,
                    MS5607_MISO_PIN,
                    MS5607_SCK_PIN,
                    MS5607_SLAVE_SELECT_PIN);

    return baroModule;
     94a:	1c20      	adds	r0, r4, #0
     94c:	a902      	add	r1, sp, #8
     94e:	2206      	movs	r2, #6
     950:	4b03      	ldr	r3, [pc, #12]	; (960 <baroModuleSetup+0x2c>)
     952:	4798      	blx	r3
}
     954:	1c20      	adds	r0, r4, #0
     956:	b005      	add	sp, #20
     958:	bd30      	pop	{r4, r5, pc}
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	00000701 	.word	0x00000701
     960:	00001235 	.word	0x00001235

00000964 <GPSmoduleSetup>:


struct USARTModule GPSmoduleSetup() {
     964:	b530      	push	{r4, r5, lr}
     966:	b085      	sub	sp, #20
     968:	1c04      	adds	r4, r0, #0
    struct USARTModule gpsModule;
    configUSARTModule(&gpsModule,
     96a:	2305      	movs	r3, #5
     96c:	9300      	str	r3, [sp, #0]
     96e:	a802      	add	r0, sp, #8
     970:	2137      	movs	r1, #55	; 0x37
     972:	2236      	movs	r2, #54	; 0x36
     974:	4b05      	ldr	r3, [pc, #20]	; (98c <GPSmoduleSetup+0x28>)
     976:	4d06      	ldr	r5, [pc, #24]	; (990 <GPSmoduleSetup+0x2c>)
     978:	47a8      	blx	r5
                      PIN_PB23,
                      PIN_PB22,
                      5700,
                      5);

    return gpsModule;
     97a:	1c20      	adds	r0, r4, #0
     97c:	a902      	add	r1, sp, #8
     97e:	2206      	movs	r2, #6
     980:	4b04      	ldr	r3, [pc, #16]	; (994 <GPSmoduleSetup+0x30>)
     982:	4798      	blx	r3
}
     984:	1c20      	adds	r0, r4, #0
     986:	b005      	add	sp, #20
     988:	bd30      	pop	{r4, r5, pc}
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	00001644 	.word	0x00001644
     990:	00000759 	.word	0x00000759
     994:	00001235 	.word	0x00001235

00000998 <initBaroSensor>:



void initBaroSensor(struct spiModule *const module ) {
     998:	b510      	push	{r4, lr}
     99a:	1c04      	adds	r4, r0, #0
    /*=========================================================================
    			baro init stuff
    -----------------------------------------------------------------------*/
    SaLDigitalOut(module->SS,false);
     99c:	78c3      	ldrb	r3, [r0, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     99e:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     9a0:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     9a2:	2900      	cmp	r1, #0
     9a4:	d104      	bne.n	9b0 <initBaroSensor+0x18>
        return &(ports[port_index]->Group[group_index]);
     9a6:	095a      	lsrs	r2, r3, #5
     9a8:	01d2      	lsls	r2, r2, #7
     9aa:	4911      	ldr	r1, [pc, #68]	; (9f0 <initBaroSensor+0x58>)
     9ac:	468c      	mov	ip, r1
     9ae:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     9b0:	211f      	movs	r1, #31
     9b2:	400b      	ands	r3, r1
     9b4:	391e      	subs	r1, #30
     9b6:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     9b8:	6151      	str	r1, [r2, #20]
    byteOut(module,cmdReset_);
     9ba:	1c20      	adds	r0, r4, #0
     9bc:	211e      	movs	r1, #30
     9be:	4b0d      	ldr	r3, [pc, #52]	; (9f4 <initBaroSensor+0x5c>)
     9c0:	4798      	blx	r3
    SaLDigitalOut(module->SS,true);
     9c2:	78e3      	ldrb	r3, [r4, #3]
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     9c4:	09d9      	lsrs	r1, r3, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     9c6:	2200      	movs	r2, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     9c8:	2900      	cmp	r1, #0
     9ca:	d104      	bne.n	9d6 <initBaroSensor+0x3e>
        return &(ports[port_index]->Group[group_index]);
     9cc:	095a      	lsrs	r2, r3, #5
     9ce:	01d2      	lsls	r2, r2, #7
     9d0:	4907      	ldr	r1, [pc, #28]	; (9f0 <initBaroSensor+0x58>)
     9d2:	468c      	mov	ip, r1
     9d4:	4462      	add	r2, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, uint8_t level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     9d6:	211f      	movs	r1, #31
     9d8:	400b      	ands	r3, r1
     9da:	391e      	subs	r1, #30
     9dc:	4099      	lsls	r1, r3
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     9de:	6191      	str	r1, [r2, #24]
    delay_us(30);
     9e0:	201e      	movs	r0, #30
     9e2:	4b05      	ldr	r3, [pc, #20]	; (9f8 <initBaroSensor+0x60>)
     9e4:	4798      	blx	r3
    read_coeff(module);
     9e6:	1c20      	adds	r0, r4, #0
     9e8:	4b04      	ldr	r3, [pc, #16]	; (9fc <initBaroSensor+0x64>)
     9ea:	4798      	blx	r3
    /*=========================================================================*/
}
     9ec:	bd10      	pop	{r4, pc}
     9ee:	46c0      	nop			; (mov r8, r8)
     9f0:	41004400 	.word	0x41004400
     9f4:	000004f5 	.word	0x000004f5
     9f8:	0000067d 	.word	0x0000067d
     9fc:	000002f5 	.word	0x000002f5

00000a00 <main>:

}

volatile uint32_t counter = 0;

int main(void) {
     a00:	b5f0      	push	{r4, r5, r6, r7, lr}
     a02:	b08f      	sub	sp, #60	; 0x3c
    SystemInit();
     a04:	4b25      	ldr	r3, [pc, #148]	; (a9c <main+0x9c>)
     a06:	4798      	blx	r3
    ClockInit();
     a08:	4b25      	ldr	r3, [pc, #148]	; (aa0 <main+0xa0>)
     a0a:	4798      	blx	r3
    SaLDelayInit();
     a0c:	4b25      	ldr	r3, [pc, #148]	; (aa4 <main+0xa4>)
     a0e:	4798      	blx	r3
    PinConfig();
     a10:	4b25      	ldr	r3, [pc, #148]	; (aa8 <main+0xa8>)
     a12:	4798      	blx	r3
	
	struct Accelerometer myAccelerometer;
	initAccelerometer(&myAccelerometer);
     a14:	a807      	add	r0, sp, #28
     a16:	4b25      	ldr	r3, [pc, #148]	; (aac <main+0xac>)
     a18:	4798      	blx	r3
	
    struct spiModule baroModule =baroModuleSetup();
     a1a:	a805      	add	r0, sp, #20
     a1c:	4b24      	ldr	r3, [pc, #144]	; (ab0 <main+0xb0>)
     a1e:	4798      	blx	r3
    struct USARTModule gpsModule =GPSmoduleSetup();
     a20:	a803      	add	r0, sp, #12
     a22:	4b24      	ldr	r3, [pc, #144]	; (ab4 <main+0xb4>)
     a24:	4798      	blx	r3

    initBaroSensor(&baroModule);
     a26:	a805      	add	r0, sp, #20
     a28:	4b23      	ldr	r3, [pc, #140]	; (ab8 <main+0xb8>)
     a2a:	4798      	blx	r3
    initGPS(&gpsModule);

    volatile float accelX = 0;
     a2c:	2300      	movs	r3, #0
     a2e:	9302      	str	r3, [sp, #8]
    volatile float accelY = 0;
     a30:	9301      	str	r3, [sp, #4]
    volatile float accelZ = 0;
     a32:	9300      	str	r3, [sp, #0]

    SaLPlayTone(900);
     a34:	20e1      	movs	r0, #225	; 0xe1
     a36:	0080      	lsls	r0, r0, #2
     a38:	4c20      	ldr	r4, [pc, #128]	; (abc <main+0xbc>)
     a3a:	47a0      	blx	r4
    SaLPlayTone(800);
     a3c:	20c8      	movs	r0, #200	; 0xc8
     a3e:	0080      	lsls	r0, r0, #2
     a40:	47a0      	blx	r4
    SaLPlayTone(700);
     a42:	20af      	movs	r0, #175	; 0xaf
     a44:	0080      	lsls	r0, r0, #2
     a46:	47a0      	blx	r4
    SaLPlayTone(600);
     a48:	2096      	movs	r0, #150	; 0x96
     a4a:	0080      	lsls	r0, r0, #2
     a4c:	47a0      	blx	r4
    SaLPlayTone(500);
     a4e:	20fa      	movs	r0, #250	; 0xfa
     a50:	0040      	lsls	r0, r0, #1
     a52:	47a0      	blx	r4

    uint32_t index = 0;
     a54:	2400      	movs	r4, #0
    while (1) {
        counter++;
     a56:	4d1a      	ldr	r5, [pc, #104]	; (ac0 <main+0xc0>)
        getevents(&(myAccelerometer.thisSpiModule));
     a58:	4f1a      	ldr	r7, [pc, #104]	; (ac4 <main+0xc4>)
        accelX = currentX();
     a5a:	4e1b      	ldr	r6, [pc, #108]	; (ac8 <main+0xc8>)
    SaLPlayTone(600);
    SaLPlayTone(500);

    uint32_t index = 0;
    while (1) {
        counter++;
     a5c:	682b      	ldr	r3, [r5, #0]
     a5e:	3301      	adds	r3, #1
     a60:	602b      	str	r3, [r5, #0]
        getevents(&(myAccelerometer.thisSpiModule));
     a62:	a807      	add	r0, sp, #28
     a64:	47b8      	blx	r7
        accelX = currentX();
     a66:	47b0      	blx	r6
     a68:	9002      	str	r0, [sp, #8]
        accelY = currentY();
     a6a:	4b18      	ldr	r3, [pc, #96]	; (acc <main+0xcc>)
     a6c:	4798      	blx	r3
     a6e:	9001      	str	r0, [sp, #4]
        accelZ = currentZ();
     a70:	4b17      	ldr	r3, [pc, #92]	; (ad0 <main+0xd0>)
     a72:	4798      	blx	r3
     a74:	9000      	str	r0, [sp, #0]

        accelDataX[index] = accelX;
     a76:	9902      	ldr	r1, [sp, #8]
     a78:	00a3      	lsls	r3, r4, #2
     a7a:	4a16      	ldr	r2, [pc, #88]	; (ad4 <main+0xd4>)
     a7c:	5099      	str	r1, [r3, r2]
        accelDataY[index] = accelY;
     a7e:	9901      	ldr	r1, [sp, #4]
     a80:	4a15      	ldr	r2, [pc, #84]	; (ad8 <main+0xd8>)
     a82:	5099      	str	r1, [r3, r2]
        accelDataZ[index] = accelZ;
     a84:	9900      	ldr	r1, [sp, #0]
     a86:	4a15      	ldr	r2, [pc, #84]	; (adc <main+0xdc>)
     a88:	5099      	str	r1, [r3, r2]
        index++;
     a8a:	3401      	adds	r4, #1
        if (index == 1000) {
            index = 0;
     a8c:	4b14      	ldr	r3, [pc, #80]	; (ae0 <main+0xe0>)
     a8e:	18e3      	adds	r3, r4, r3
     a90:	1e5a      	subs	r2, r3, #1
     a92:	4193      	sbcs	r3, r2
     a94:	425b      	negs	r3, r3
     a96:	401c      	ands	r4, r3
     a98:	e7e0      	b.n	a5c <main+0x5c>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00000869 	.word	0x00000869
     aa0:	00000879 	.word	0x00000879
     aa4:	0000065d 	.word	0x0000065d
     aa8:	00000901 	.word	0x00000901
     aac:	00000391 	.word	0x00000391
     ab0:	00000935 	.word	0x00000935
     ab4:	00000965 	.word	0x00000965
     ab8:	00000999 	.word	0x00000999
     abc:	0000060d 	.word	0x0000060d
     ac0:	20000454 	.word	0x20000454
     ac4:	00000115 	.word	0x00000115
     ac8:	00000259 	.word	0x00000259
     acc:	0000028d 	.word	0x0000028d
     ad0:	000002c1 	.word	0x000002c1
     ad4:	200023ac 	.word	0x200023ac
     ad8:	2000046c 	.word	0x2000046c
     adc:	2000140c 	.word	0x2000140c
     ae0:	fffffc18 	.word	0xfffffc18

00000ae4 <__aeabi_dmul>:
     ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ae6:	465f      	mov	r7, fp
     ae8:	4656      	mov	r6, sl
     aea:	464d      	mov	r5, r9
     aec:	4644      	mov	r4, r8
     aee:	b4f0      	push	{r4, r5, r6, r7}
     af0:	1c05      	adds	r5, r0, #0
     af2:	1c06      	adds	r6, r0, #0
     af4:	0308      	lsls	r0, r1, #12
     af6:	b087      	sub	sp, #28
     af8:	4699      	mov	r9, r3
     afa:	004f      	lsls	r7, r1, #1
     afc:	0b03      	lsrs	r3, r0, #12
     afe:	0fcc      	lsrs	r4, r1, #31
     b00:	4692      	mov	sl, r2
     b02:	469b      	mov	fp, r3
     b04:	0d7f      	lsrs	r7, r7, #21
     b06:	9401      	str	r4, [sp, #4]
     b08:	d067      	beq.n	bda <__aeabi_dmul+0xf6>
     b0a:	4b6c      	ldr	r3, [pc, #432]	; (cbc <__aeabi_dmul+0x1d8>)
     b0c:	429f      	cmp	r7, r3
     b0e:	d036      	beq.n	b7e <__aeabi_dmul+0x9a>
     b10:	2080      	movs	r0, #128	; 0x80
     b12:	465b      	mov	r3, fp
     b14:	0340      	lsls	r0, r0, #13
     b16:	4318      	orrs	r0, r3
     b18:	00c0      	lsls	r0, r0, #3
     b1a:	0f6b      	lsrs	r3, r5, #29
     b1c:	4318      	orrs	r0, r3
     b1e:	4b68      	ldr	r3, [pc, #416]	; (cc0 <__aeabi_dmul+0x1dc>)
     b20:	4683      	mov	fp, r0
     b22:	469c      	mov	ip, r3
     b24:	2300      	movs	r3, #0
     b26:	4698      	mov	r8, r3
     b28:	00ee      	lsls	r6, r5, #3
     b2a:	4467      	add	r7, ip
     b2c:	9300      	str	r3, [sp, #0]
     b2e:	464b      	mov	r3, r9
     b30:	4649      	mov	r1, r9
     b32:	031d      	lsls	r5, r3, #12
     b34:	0fc9      	lsrs	r1, r1, #31
     b36:	005b      	lsls	r3, r3, #1
     b38:	4652      	mov	r2, sl
     b3a:	0b2d      	lsrs	r5, r5, #12
     b3c:	0d5b      	lsrs	r3, r3, #21
     b3e:	4689      	mov	r9, r1
     b40:	d100      	bne.n	b44 <__aeabi_dmul+0x60>
     b42:	e06e      	b.n	c22 <__aeabi_dmul+0x13e>
     b44:	495d      	ldr	r1, [pc, #372]	; (cbc <__aeabi_dmul+0x1d8>)
     b46:	428b      	cmp	r3, r1
     b48:	d064      	beq.n	c14 <__aeabi_dmul+0x130>
     b4a:	2080      	movs	r0, #128	; 0x80
     b4c:	495c      	ldr	r1, [pc, #368]	; (cc0 <__aeabi_dmul+0x1dc>)
     b4e:	0340      	lsls	r0, r0, #13
     b50:	468c      	mov	ip, r1
     b52:	2100      	movs	r1, #0
     b54:	4305      	orrs	r5, r0
     b56:	00ed      	lsls	r5, r5, #3
     b58:	0f50      	lsrs	r0, r2, #29
     b5a:	4305      	orrs	r5, r0
     b5c:	00d2      	lsls	r2, r2, #3
     b5e:	4463      	add	r3, ip
     b60:	4648      	mov	r0, r9
     b62:	18ff      	adds	r7, r7, r3
     b64:	1c7b      	adds	r3, r7, #1
     b66:	469a      	mov	sl, r3
     b68:	9b00      	ldr	r3, [sp, #0]
     b6a:	4060      	eors	r0, r4
     b6c:	9002      	str	r0, [sp, #8]
     b6e:	430b      	orrs	r3, r1
     b70:	2b0f      	cmp	r3, #15
     b72:	d900      	bls.n	b76 <__aeabi_dmul+0x92>
     b74:	e0ac      	b.n	cd0 <__aeabi_dmul+0x1ec>
     b76:	4853      	ldr	r0, [pc, #332]	; (cc4 <__aeabi_dmul+0x1e0>)
     b78:	009b      	lsls	r3, r3, #2
     b7a:	58c3      	ldr	r3, [r0, r3]
     b7c:	469f      	mov	pc, r3
     b7e:	465b      	mov	r3, fp
     b80:	431d      	orrs	r5, r3
     b82:	d000      	beq.n	b86 <__aeabi_dmul+0xa2>
     b84:	e082      	b.n	c8c <__aeabi_dmul+0x1a8>
     b86:	2308      	movs	r3, #8
     b88:	9300      	str	r3, [sp, #0]
     b8a:	2300      	movs	r3, #0
     b8c:	469b      	mov	fp, r3
     b8e:	3302      	adds	r3, #2
     b90:	2600      	movs	r6, #0
     b92:	4698      	mov	r8, r3
     b94:	e7cb      	b.n	b2e <__aeabi_dmul+0x4a>
     b96:	9b02      	ldr	r3, [sp, #8]
     b98:	9301      	str	r3, [sp, #4]
     b9a:	4643      	mov	r3, r8
     b9c:	2b02      	cmp	r3, #2
     b9e:	d159      	bne.n	c54 <__aeabi_dmul+0x170>
     ba0:	2401      	movs	r4, #1
     ba2:	2500      	movs	r5, #0
     ba4:	2600      	movs	r6, #0
     ba6:	9b01      	ldr	r3, [sp, #4]
     ba8:	401c      	ands	r4, r3
     baa:	4b44      	ldr	r3, [pc, #272]	; (cbc <__aeabi_dmul+0x1d8>)
     bac:	2100      	movs	r1, #0
     bae:	032d      	lsls	r5, r5, #12
     bb0:	0d0a      	lsrs	r2, r1, #20
     bb2:	0512      	lsls	r2, r2, #20
     bb4:	0b2d      	lsrs	r5, r5, #12
     bb6:	4315      	orrs	r5, r2
     bb8:	4a43      	ldr	r2, [pc, #268]	; (cc8 <__aeabi_dmul+0x1e4>)
     bba:	051b      	lsls	r3, r3, #20
     bbc:	4015      	ands	r5, r2
     bbe:	431d      	orrs	r5, r3
     bc0:	006d      	lsls	r5, r5, #1
     bc2:	07e4      	lsls	r4, r4, #31
     bc4:	086d      	lsrs	r5, r5, #1
     bc6:	4325      	orrs	r5, r4
     bc8:	1c30      	adds	r0, r6, #0
     bca:	1c29      	adds	r1, r5, #0
     bcc:	b007      	add	sp, #28
     bce:	bc3c      	pop	{r2, r3, r4, r5}
     bd0:	4690      	mov	r8, r2
     bd2:	4699      	mov	r9, r3
     bd4:	46a2      	mov	sl, r4
     bd6:	46ab      	mov	fp, r5
     bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bda:	432b      	orrs	r3, r5
     bdc:	d04e      	beq.n	c7c <__aeabi_dmul+0x198>
     bde:	465b      	mov	r3, fp
     be0:	2b00      	cmp	r3, #0
     be2:	d100      	bne.n	be6 <__aeabi_dmul+0x102>
     be4:	e185      	b.n	ef2 <__aeabi_dmul+0x40e>
     be6:	4658      	mov	r0, fp
     be8:	f000 fae2 	bl	11b0 <__clzsi2>
     bec:	1c02      	adds	r2, r0, #0
     bee:	2328      	movs	r3, #40	; 0x28
     bf0:	1c29      	adds	r1, r5, #0
     bf2:	1a9b      	subs	r3, r3, r2
     bf4:	1c16      	adds	r6, r2, #0
     bf6:	4658      	mov	r0, fp
     bf8:	40d9      	lsrs	r1, r3
     bfa:	3e08      	subs	r6, #8
     bfc:	40b0      	lsls	r0, r6
     bfe:	1c0b      	adds	r3, r1, #0
     c00:	40b5      	lsls	r5, r6
     c02:	4303      	orrs	r3, r0
     c04:	469b      	mov	fp, r3
     c06:	1c2e      	adds	r6, r5, #0
     c08:	2300      	movs	r3, #0
     c0a:	4f30      	ldr	r7, [pc, #192]	; (ccc <__aeabi_dmul+0x1e8>)
     c0c:	9300      	str	r3, [sp, #0]
     c0e:	1abf      	subs	r7, r7, r2
     c10:	4698      	mov	r8, r3
     c12:	e78c      	b.n	b2e <__aeabi_dmul+0x4a>
     c14:	4651      	mov	r1, sl
     c16:	4329      	orrs	r1, r5
     c18:	d12e      	bne.n	c78 <__aeabi_dmul+0x194>
     c1a:	2500      	movs	r5, #0
     c1c:	2200      	movs	r2, #0
     c1e:	2102      	movs	r1, #2
     c20:	e79e      	b.n	b60 <__aeabi_dmul+0x7c>
     c22:	4651      	mov	r1, sl
     c24:	4329      	orrs	r1, r5
     c26:	d023      	beq.n	c70 <__aeabi_dmul+0x18c>
     c28:	2d00      	cmp	r5, #0
     c2a:	d100      	bne.n	c2e <__aeabi_dmul+0x14a>
     c2c:	e154      	b.n	ed8 <__aeabi_dmul+0x3f4>
     c2e:	1c28      	adds	r0, r5, #0
     c30:	f000 fabe 	bl	11b0 <__clzsi2>
     c34:	1c03      	adds	r3, r0, #0
     c36:	2128      	movs	r1, #40	; 0x28
     c38:	4650      	mov	r0, sl
     c3a:	1ac9      	subs	r1, r1, r3
     c3c:	1c1a      	adds	r2, r3, #0
     c3e:	40c8      	lsrs	r0, r1
     c40:	4651      	mov	r1, sl
     c42:	3a08      	subs	r2, #8
     c44:	4091      	lsls	r1, r2
     c46:	4095      	lsls	r5, r2
     c48:	1c0a      	adds	r2, r1, #0
     c4a:	4305      	orrs	r5, r0
     c4c:	481f      	ldr	r0, [pc, #124]	; (ccc <__aeabi_dmul+0x1e8>)
     c4e:	2100      	movs	r1, #0
     c50:	1ac3      	subs	r3, r0, r3
     c52:	e785      	b.n	b60 <__aeabi_dmul+0x7c>
     c54:	2b03      	cmp	r3, #3
     c56:	d100      	bne.n	c5a <__aeabi_dmul+0x176>
     c58:	e1c2      	b.n	fe0 <__aeabi_dmul+0x4fc>
     c5a:	2b01      	cmp	r3, #1
     c5c:	d000      	beq.n	c60 <__aeabi_dmul+0x17c>
     c5e:	e16d      	b.n	f3c <__aeabi_dmul+0x458>
     c60:	4644      	mov	r4, r8
     c62:	9b01      	ldr	r3, [sp, #4]
     c64:	2500      	movs	r5, #0
     c66:	401c      	ands	r4, r3
     c68:	b2e4      	uxtb	r4, r4
     c6a:	2300      	movs	r3, #0
     c6c:	2600      	movs	r6, #0
     c6e:	e79d      	b.n	bac <__aeabi_dmul+0xc8>
     c70:	2500      	movs	r5, #0
     c72:	2200      	movs	r2, #0
     c74:	2101      	movs	r1, #1
     c76:	e773      	b.n	b60 <__aeabi_dmul+0x7c>
     c78:	2103      	movs	r1, #3
     c7a:	e771      	b.n	b60 <__aeabi_dmul+0x7c>
     c7c:	2304      	movs	r3, #4
     c7e:	9300      	str	r3, [sp, #0]
     c80:	2300      	movs	r3, #0
     c82:	469b      	mov	fp, r3
     c84:	3301      	adds	r3, #1
     c86:	2600      	movs	r6, #0
     c88:	4698      	mov	r8, r3
     c8a:	e750      	b.n	b2e <__aeabi_dmul+0x4a>
     c8c:	230c      	movs	r3, #12
     c8e:	9300      	str	r3, [sp, #0]
     c90:	3b09      	subs	r3, #9
     c92:	4698      	mov	r8, r3
     c94:	e74b      	b.n	b2e <__aeabi_dmul+0x4a>
     c96:	2580      	movs	r5, #128	; 0x80
     c98:	2400      	movs	r4, #0
     c9a:	032d      	lsls	r5, r5, #12
     c9c:	2600      	movs	r6, #0
     c9e:	4b07      	ldr	r3, [pc, #28]	; (cbc <__aeabi_dmul+0x1d8>)
     ca0:	e784      	b.n	bac <__aeabi_dmul+0xc8>
     ca2:	464b      	mov	r3, r9
     ca4:	46ab      	mov	fp, r5
     ca6:	1c16      	adds	r6, r2, #0
     ca8:	9301      	str	r3, [sp, #4]
     caa:	4688      	mov	r8, r1
     cac:	e775      	b.n	b9a <__aeabi_dmul+0xb6>
     cae:	9b02      	ldr	r3, [sp, #8]
     cb0:	46ab      	mov	fp, r5
     cb2:	1c16      	adds	r6, r2, #0
     cb4:	9301      	str	r3, [sp, #4]
     cb6:	4688      	mov	r8, r1
     cb8:	e76f      	b.n	b9a <__aeabi_dmul+0xb6>
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	000007ff 	.word	0x000007ff
     cc0:	fffffc01 	.word	0xfffffc01
     cc4:	000013e0 	.word	0x000013e0
     cc8:	800fffff 	.word	0x800fffff
     ccc:	fffffc0d 	.word	0xfffffc0d
     cd0:	0c33      	lsrs	r3, r6, #16
     cd2:	0436      	lsls	r6, r6, #16
     cd4:	0c36      	lsrs	r6, r6, #16
     cd6:	469c      	mov	ip, r3
     cd8:	1c33      	adds	r3, r6, #0
     cda:	0c14      	lsrs	r4, r2, #16
     cdc:	0412      	lsls	r2, r2, #16
     cde:	0c12      	lsrs	r2, r2, #16
     ce0:	4353      	muls	r3, r2
     ce2:	4698      	mov	r8, r3
     ce4:	4663      	mov	r3, ip
     ce6:	4353      	muls	r3, r2
     ce8:	4699      	mov	r9, r3
     cea:	4663      	mov	r3, ip
     cec:	4363      	muls	r3, r4
     cee:	9301      	str	r3, [sp, #4]
     cf0:	1c33      	adds	r3, r6, #0
     cf2:	4641      	mov	r1, r8
     cf4:	4363      	muls	r3, r4
     cf6:	0c09      	lsrs	r1, r1, #16
     cf8:	444b      	add	r3, r9
     cfa:	185b      	adds	r3, r3, r1
     cfc:	4599      	cmp	r9, r3
     cfe:	d905      	bls.n	d0c <__aeabi_dmul+0x228>
     d00:	2080      	movs	r0, #128	; 0x80
     d02:	0240      	lsls	r0, r0, #9
     d04:	4681      	mov	r9, r0
     d06:	9901      	ldr	r1, [sp, #4]
     d08:	4449      	add	r1, r9
     d0a:	9101      	str	r1, [sp, #4]
     d0c:	0c19      	lsrs	r1, r3, #16
     d0e:	9103      	str	r1, [sp, #12]
     d10:	4641      	mov	r1, r8
     d12:	0409      	lsls	r1, r1, #16
     d14:	0c09      	lsrs	r1, r1, #16
     d16:	041b      	lsls	r3, r3, #16
     d18:	185b      	adds	r3, r3, r1
     d1a:	9304      	str	r3, [sp, #16]
     d1c:	0c2b      	lsrs	r3, r5, #16
     d1e:	4698      	mov	r8, r3
     d20:	1c33      	adds	r3, r6, #0
     d22:	042d      	lsls	r5, r5, #16
     d24:	0c29      	lsrs	r1, r5, #16
     d26:	434b      	muls	r3, r1
     d28:	4660      	mov	r0, ip
     d2a:	9300      	str	r3, [sp, #0]
     d2c:	4643      	mov	r3, r8
     d2e:	4665      	mov	r5, ip
     d30:	4358      	muls	r0, r3
     d32:	435e      	muls	r6, r3
     d34:	9b00      	ldr	r3, [sp, #0]
     d36:	434d      	muls	r5, r1
     d38:	0c1b      	lsrs	r3, r3, #16
     d3a:	4699      	mov	r9, r3
     d3c:	19ae      	adds	r6, r5, r6
     d3e:	444e      	add	r6, r9
     d40:	4684      	mov	ip, r0
     d42:	42b5      	cmp	r5, r6
     d44:	d903      	bls.n	d4e <__aeabi_dmul+0x26a>
     d46:	2380      	movs	r3, #128	; 0x80
     d48:	025b      	lsls	r3, r3, #9
     d4a:	4699      	mov	r9, r3
     d4c:	44cc      	add	ip, r9
     d4e:	0c35      	lsrs	r5, r6, #16
     d50:	1c2b      	adds	r3, r5, #0
     d52:	9803      	ldr	r0, [sp, #12]
     d54:	4463      	add	r3, ip
     d56:	4684      	mov	ip, r0
     d58:	9305      	str	r3, [sp, #20]
     d5a:	9b00      	ldr	r3, [sp, #0]
     d5c:	0436      	lsls	r6, r6, #16
     d5e:	041b      	lsls	r3, r3, #16
     d60:	0c1b      	lsrs	r3, r3, #16
     d62:	18f3      	adds	r3, r6, r3
     d64:	449c      	add	ip, r3
     d66:	4660      	mov	r0, ip
     d68:	9003      	str	r0, [sp, #12]
     d6a:	4658      	mov	r0, fp
     d6c:	0405      	lsls	r5, r0, #16
     d6e:	0c06      	lsrs	r6, r0, #16
     d70:	0c28      	lsrs	r0, r5, #16
     d72:	4684      	mov	ip, r0
     d74:	4350      	muls	r0, r2
     d76:	1c35      	adds	r5, r6, #0
     d78:	4681      	mov	r9, r0
     d7a:	4660      	mov	r0, ip
     d7c:	4365      	muls	r5, r4
     d7e:	4344      	muls	r4, r0
     d80:	4648      	mov	r0, r9
     d82:	0c00      	lsrs	r0, r0, #16
     d84:	4683      	mov	fp, r0
     d86:	4372      	muls	r2, r6
     d88:	1914      	adds	r4, r2, r4
     d8a:	445c      	add	r4, fp
     d8c:	42a2      	cmp	r2, r4
     d8e:	d903      	bls.n	d98 <__aeabi_dmul+0x2b4>
     d90:	2280      	movs	r2, #128	; 0x80
     d92:	0252      	lsls	r2, r2, #9
     d94:	4693      	mov	fp, r2
     d96:	445d      	add	r5, fp
     d98:	0c22      	lsrs	r2, r4, #16
     d9a:	18ad      	adds	r5, r5, r2
     d9c:	464a      	mov	r2, r9
     d9e:	0412      	lsls	r2, r2, #16
     da0:	0c12      	lsrs	r2, r2, #16
     da2:	0424      	lsls	r4, r4, #16
     da4:	4640      	mov	r0, r8
     da6:	18a4      	adds	r4, r4, r2
     da8:	4662      	mov	r2, ip
     daa:	434a      	muls	r2, r1
     dac:	4371      	muls	r1, r6
     dae:	4346      	muls	r6, r0
     db0:	4660      	mov	r0, ip
     db2:	9600      	str	r6, [sp, #0]
     db4:	4646      	mov	r6, r8
     db6:	4370      	muls	r0, r6
     db8:	4680      	mov	r8, r0
     dba:	0c10      	lsrs	r0, r2, #16
     dbc:	4684      	mov	ip, r0
     dbe:	4488      	add	r8, r1
     dc0:	44e0      	add	r8, ip
     dc2:	4541      	cmp	r1, r8
     dc4:	d905      	bls.n	dd2 <__aeabi_dmul+0x2ee>
     dc6:	2180      	movs	r1, #128	; 0x80
     dc8:	0249      	lsls	r1, r1, #9
     dca:	468c      	mov	ip, r1
     dcc:	9900      	ldr	r1, [sp, #0]
     dce:	4461      	add	r1, ip
     dd0:	9100      	str	r1, [sp, #0]
     dd2:	9801      	ldr	r0, [sp, #4]
     dd4:	9903      	ldr	r1, [sp, #12]
     dd6:	4684      	mov	ip, r0
     dd8:	4461      	add	r1, ip
     dda:	4299      	cmp	r1, r3
     ddc:	419b      	sbcs	r3, r3
     dde:	425b      	negs	r3, r3
     de0:	4699      	mov	r9, r3
     de2:	9805      	ldr	r0, [sp, #20]
     de4:	4643      	mov	r3, r8
     de6:	4684      	mov	ip, r0
     de8:	0412      	lsls	r2, r2, #16
     dea:	0c12      	lsrs	r2, r2, #16
     dec:	041b      	lsls	r3, r3, #16
     dee:	189b      	adds	r3, r3, r2
     df0:	4463      	add	r3, ip
     df2:	469c      	mov	ip, r3
     df4:	46ab      	mov	fp, r5
     df6:	4283      	cmp	r3, r0
     df8:	419b      	sbcs	r3, r3
     dfa:	4640      	mov	r0, r8
     dfc:	190a      	adds	r2, r1, r4
     dfe:	44cc      	add	ip, r9
     e00:	42a2      	cmp	r2, r4
     e02:	4189      	sbcs	r1, r1
     e04:	44e3      	add	fp, ip
     e06:	45cc      	cmp	ip, r9
     e08:	41b6      	sbcs	r6, r6
     e0a:	465c      	mov	r4, fp
     e0c:	0c00      	lsrs	r0, r0, #16
     e0e:	4680      	mov	r8, r0
     e10:	4249      	negs	r1, r1
     e12:	4276      	negs	r6, r6
     e14:	425b      	negs	r3, r3
     e16:	1864      	adds	r4, r4, r1
     e18:	4333      	orrs	r3, r6
     e1a:	4498      	add	r8, r3
     e1c:	428c      	cmp	r4, r1
     e1e:	4189      	sbcs	r1, r1
     e20:	45ab      	cmp	fp, r5
     e22:	419b      	sbcs	r3, r3
     e24:	4249      	negs	r1, r1
     e26:	425b      	negs	r3, r3
     e28:	4319      	orrs	r1, r3
     e2a:	1c0d      	adds	r5, r1, #0
     e2c:	9b00      	ldr	r3, [sp, #0]
     e2e:	4445      	add	r5, r8
     e30:	18ee      	adds	r6, r5, r3
     e32:	0276      	lsls	r6, r6, #9
     e34:	0de5      	lsrs	r5, r4, #23
     e36:	432e      	orrs	r6, r5
     e38:	46b3      	mov	fp, r6
     e3a:	9b04      	ldr	r3, [sp, #16]
     e3c:	0256      	lsls	r6, r2, #9
     e3e:	431e      	orrs	r6, r3
     e40:	1e73      	subs	r3, r6, #1
     e42:	419e      	sbcs	r6, r3
     e44:	465b      	mov	r3, fp
     e46:	0dd2      	lsrs	r2, r2, #23
     e48:	4332      	orrs	r2, r6
     e4a:	0266      	lsls	r6, r4, #9
     e4c:	4316      	orrs	r6, r2
     e4e:	01db      	lsls	r3, r3, #7
     e50:	d50a      	bpl.n	e68 <__aeabi_dmul+0x384>
     e52:	2301      	movs	r3, #1
     e54:	4033      	ands	r3, r6
     e56:	0876      	lsrs	r6, r6, #1
     e58:	431e      	orrs	r6, r3
     e5a:	465b      	mov	r3, fp
     e5c:	07db      	lsls	r3, r3, #31
     e5e:	431e      	orrs	r6, r3
     e60:	465b      	mov	r3, fp
     e62:	085b      	lsrs	r3, r3, #1
     e64:	469b      	mov	fp, r3
     e66:	4657      	mov	r7, sl
     e68:	4b63      	ldr	r3, [pc, #396]	; (ff8 <__aeabi_dmul+0x514>)
     e6a:	18fb      	adds	r3, r7, r3
     e6c:	2b00      	cmp	r3, #0
     e6e:	dd5a      	ble.n	f26 <__aeabi_dmul+0x442>
     e70:	0772      	lsls	r2, r6, #29
     e72:	d009      	beq.n	e88 <__aeabi_dmul+0x3a4>
     e74:	220f      	movs	r2, #15
     e76:	4032      	ands	r2, r6
     e78:	2a04      	cmp	r2, #4
     e7a:	d005      	beq.n	e88 <__aeabi_dmul+0x3a4>
     e7c:	1d32      	adds	r2, r6, #4
     e7e:	42b2      	cmp	r2, r6
     e80:	41b6      	sbcs	r6, r6
     e82:	4276      	negs	r6, r6
     e84:	44b3      	add	fp, r6
     e86:	1c16      	adds	r6, r2, #0
     e88:	465a      	mov	r2, fp
     e8a:	01d2      	lsls	r2, r2, #7
     e8c:	d506      	bpl.n	e9c <__aeabi_dmul+0x3b8>
     e8e:	465a      	mov	r2, fp
     e90:	4b5a      	ldr	r3, [pc, #360]	; (ffc <__aeabi_dmul+0x518>)
     e92:	401a      	ands	r2, r3
     e94:	2380      	movs	r3, #128	; 0x80
     e96:	4693      	mov	fp, r2
     e98:	00db      	lsls	r3, r3, #3
     e9a:	18fb      	adds	r3, r7, r3
     e9c:	4a58      	ldr	r2, [pc, #352]	; (1000 <__aeabi_dmul+0x51c>)
     e9e:	4293      	cmp	r3, r2
     ea0:	dd34      	ble.n	f0c <__aeabi_dmul+0x428>
     ea2:	2401      	movs	r4, #1
     ea4:	9b02      	ldr	r3, [sp, #8]
     ea6:	2500      	movs	r5, #0
     ea8:	401c      	ands	r4, r3
     eaa:	2600      	movs	r6, #0
     eac:	4b55      	ldr	r3, [pc, #340]	; (1004 <__aeabi_dmul+0x520>)
     eae:	e67d      	b.n	bac <__aeabi_dmul+0xc8>
     eb0:	2080      	movs	r0, #128	; 0x80
     eb2:	465b      	mov	r3, fp
     eb4:	0300      	lsls	r0, r0, #12
     eb6:	4203      	tst	r3, r0
     eb8:	d008      	beq.n	ecc <__aeabi_dmul+0x3e8>
     eba:	4205      	tst	r5, r0
     ebc:	d106      	bne.n	ecc <__aeabi_dmul+0x3e8>
     ebe:	4305      	orrs	r5, r0
     ec0:	032d      	lsls	r5, r5, #12
     ec2:	0b2d      	lsrs	r5, r5, #12
     ec4:	464c      	mov	r4, r9
     ec6:	1c16      	adds	r6, r2, #0
     ec8:	4b4e      	ldr	r3, [pc, #312]	; (1004 <__aeabi_dmul+0x520>)
     eca:	e66f      	b.n	bac <__aeabi_dmul+0xc8>
     ecc:	465d      	mov	r5, fp
     ece:	4305      	orrs	r5, r0
     ed0:	032d      	lsls	r5, r5, #12
     ed2:	0b2d      	lsrs	r5, r5, #12
     ed4:	4b4b      	ldr	r3, [pc, #300]	; (1004 <__aeabi_dmul+0x520>)
     ed6:	e669      	b.n	bac <__aeabi_dmul+0xc8>
     ed8:	4650      	mov	r0, sl
     eda:	f000 f969 	bl	11b0 <__clzsi2>
     ede:	1c03      	adds	r3, r0, #0
     ee0:	3320      	adds	r3, #32
     ee2:	2b27      	cmp	r3, #39	; 0x27
     ee4:	dc00      	bgt.n	ee8 <__aeabi_dmul+0x404>
     ee6:	e6a6      	b.n	c36 <__aeabi_dmul+0x152>
     ee8:	4655      	mov	r5, sl
     eea:	3808      	subs	r0, #8
     eec:	4085      	lsls	r5, r0
     eee:	2200      	movs	r2, #0
     ef0:	e6ac      	b.n	c4c <__aeabi_dmul+0x168>
     ef2:	1c28      	adds	r0, r5, #0
     ef4:	f000 f95c 	bl	11b0 <__clzsi2>
     ef8:	1c02      	adds	r2, r0, #0
     efa:	3220      	adds	r2, #32
     efc:	2a27      	cmp	r2, #39	; 0x27
     efe:	dc00      	bgt.n	f02 <__aeabi_dmul+0x41e>
     f00:	e675      	b.n	bee <__aeabi_dmul+0x10a>
     f02:	3808      	subs	r0, #8
     f04:	4085      	lsls	r5, r0
     f06:	2600      	movs	r6, #0
     f08:	46ab      	mov	fp, r5
     f0a:	e67d      	b.n	c08 <__aeabi_dmul+0x124>
     f0c:	465a      	mov	r2, fp
     f0e:	08f6      	lsrs	r6, r6, #3
     f10:	0752      	lsls	r2, r2, #29
     f12:	4316      	orrs	r6, r2
     f14:	465a      	mov	r2, fp
     f16:	2401      	movs	r4, #1
     f18:	0255      	lsls	r5, r2, #9
     f1a:	9a02      	ldr	r2, [sp, #8]
     f1c:	055b      	lsls	r3, r3, #21
     f1e:	0b2d      	lsrs	r5, r5, #12
     f20:	0d5b      	lsrs	r3, r3, #21
     f22:	4014      	ands	r4, r2
     f24:	e642      	b.n	bac <__aeabi_dmul+0xc8>
     f26:	4d38      	ldr	r5, [pc, #224]	; (1008 <__aeabi_dmul+0x524>)
     f28:	1bed      	subs	r5, r5, r7
     f2a:	2d38      	cmp	r5, #56	; 0x38
     f2c:	dd0a      	ble.n	f44 <__aeabi_dmul+0x460>
     f2e:	2401      	movs	r4, #1
     f30:	9b02      	ldr	r3, [sp, #8]
     f32:	2500      	movs	r5, #0
     f34:	401c      	ands	r4, r3
     f36:	2600      	movs	r6, #0
     f38:	2300      	movs	r3, #0
     f3a:	e637      	b.n	bac <__aeabi_dmul+0xc8>
     f3c:	9b01      	ldr	r3, [sp, #4]
     f3e:	4657      	mov	r7, sl
     f40:	9302      	str	r3, [sp, #8]
     f42:	e791      	b.n	e68 <__aeabi_dmul+0x384>
     f44:	2d1f      	cmp	r5, #31
     f46:	dc25      	bgt.n	f94 <__aeabi_dmul+0x4b0>
     f48:	4b30      	ldr	r3, [pc, #192]	; (100c <__aeabi_dmul+0x528>)
     f4a:	1c32      	adds	r2, r6, #0
     f4c:	469c      	mov	ip, r3
     f4e:	4467      	add	r7, ip
     f50:	40be      	lsls	r6, r7
     f52:	465b      	mov	r3, fp
     f54:	40bb      	lsls	r3, r7
     f56:	1c37      	adds	r7, r6, #0
     f58:	40ea      	lsrs	r2, r5
     f5a:	1e7e      	subs	r6, r7, #1
     f5c:	41b7      	sbcs	r7, r6
     f5e:	4313      	orrs	r3, r2
     f60:	433b      	orrs	r3, r7
     f62:	1c1e      	adds	r6, r3, #0
     f64:	465b      	mov	r3, fp
     f66:	40eb      	lsrs	r3, r5
     f68:	1c1d      	adds	r5, r3, #0
     f6a:	0773      	lsls	r3, r6, #29
     f6c:	d009      	beq.n	f82 <__aeabi_dmul+0x49e>
     f6e:	230f      	movs	r3, #15
     f70:	4033      	ands	r3, r6
     f72:	2b04      	cmp	r3, #4
     f74:	d005      	beq.n	f82 <__aeabi_dmul+0x49e>
     f76:	1d33      	adds	r3, r6, #4
     f78:	42b3      	cmp	r3, r6
     f7a:	41b6      	sbcs	r6, r6
     f7c:	4276      	negs	r6, r6
     f7e:	19ad      	adds	r5, r5, r6
     f80:	1c1e      	adds	r6, r3, #0
     f82:	022b      	lsls	r3, r5, #8
     f84:	d520      	bpl.n	fc8 <__aeabi_dmul+0x4e4>
     f86:	2401      	movs	r4, #1
     f88:	9b02      	ldr	r3, [sp, #8]
     f8a:	2500      	movs	r5, #0
     f8c:	401c      	ands	r4, r3
     f8e:	2600      	movs	r6, #0
     f90:	2301      	movs	r3, #1
     f92:	e60b      	b.n	bac <__aeabi_dmul+0xc8>
     f94:	465a      	mov	r2, fp
     f96:	4b1e      	ldr	r3, [pc, #120]	; (1010 <__aeabi_dmul+0x52c>)
     f98:	1bdb      	subs	r3, r3, r7
     f9a:	40da      	lsrs	r2, r3
     f9c:	1c13      	adds	r3, r2, #0
     f9e:	2d20      	cmp	r5, #32
     fa0:	d01c      	beq.n	fdc <__aeabi_dmul+0x4f8>
     fa2:	4a1c      	ldr	r2, [pc, #112]	; (1014 <__aeabi_dmul+0x530>)
     fa4:	4694      	mov	ip, r2
     fa6:	465a      	mov	r2, fp
     fa8:	4467      	add	r7, ip
     faa:	40ba      	lsls	r2, r7
     fac:	1c17      	adds	r7, r2, #0
     fae:	433e      	orrs	r6, r7
     fb0:	1e72      	subs	r2, r6, #1
     fb2:	4196      	sbcs	r6, r2
     fb4:	431e      	orrs	r6, r3
     fb6:	2307      	movs	r3, #7
     fb8:	2500      	movs	r5, #0
     fba:	4033      	ands	r3, r6
     fbc:	d007      	beq.n	fce <__aeabi_dmul+0x4ea>
     fbe:	230f      	movs	r3, #15
     fc0:	2500      	movs	r5, #0
     fc2:	4033      	ands	r3, r6
     fc4:	2b04      	cmp	r3, #4
     fc6:	d1d6      	bne.n	f76 <__aeabi_dmul+0x492>
     fc8:	076b      	lsls	r3, r5, #29
     fca:	026d      	lsls	r5, r5, #9
     fcc:	0b2d      	lsrs	r5, r5, #12
     fce:	2401      	movs	r4, #1
     fd0:	08f6      	lsrs	r6, r6, #3
     fd2:	431e      	orrs	r6, r3
     fd4:	9b02      	ldr	r3, [sp, #8]
     fd6:	401c      	ands	r4, r3
     fd8:	2300      	movs	r3, #0
     fda:	e5e7      	b.n	bac <__aeabi_dmul+0xc8>
     fdc:	2700      	movs	r7, #0
     fde:	e7e6      	b.n	fae <__aeabi_dmul+0x4ca>
     fe0:	2580      	movs	r5, #128	; 0x80
     fe2:	465b      	mov	r3, fp
     fe4:	2401      	movs	r4, #1
     fe6:	032d      	lsls	r5, r5, #12
     fe8:	431d      	orrs	r5, r3
     fea:	9b01      	ldr	r3, [sp, #4]
     fec:	032d      	lsls	r5, r5, #12
     fee:	4023      	ands	r3, r4
     ff0:	1c1c      	adds	r4, r3, #0
     ff2:	0b2d      	lsrs	r5, r5, #12
     ff4:	4b03      	ldr	r3, [pc, #12]	; (1004 <__aeabi_dmul+0x520>)
     ff6:	e5d9      	b.n	bac <__aeabi_dmul+0xc8>
     ff8:	000003ff 	.word	0x000003ff
     ffc:	feffffff 	.word	0xfeffffff
    1000:	000007fe 	.word	0x000007fe
    1004:	000007ff 	.word	0x000007ff
    1008:	fffffc02 	.word	0xfffffc02
    100c:	0000041e 	.word	0x0000041e
    1010:	fffffbe2 	.word	0xfffffbe2
    1014:	0000043e 	.word	0x0000043e

00001018 <__aeabi_i2d>:
    1018:	b538      	push	{r3, r4, r5, lr}
    101a:	1e04      	subs	r4, r0, #0
    101c:	d016      	beq.n	104c <__aeabi_i2d+0x34>
    101e:	0fc5      	lsrs	r5, r0, #31
    1020:	d000      	beq.n	1024 <__aeabi_i2d+0xc>
    1022:	4244      	negs	r4, r0
    1024:	1c20      	adds	r0, r4, #0
    1026:	f000 f8c3 	bl	11b0 <__clzsi2>
    102a:	4b17      	ldr	r3, [pc, #92]	; (1088 <__aeabi_i2d+0x70>)
    102c:	1a1b      	subs	r3, r3, r0
    102e:	280a      	cmp	r0, #10
    1030:	dc21      	bgt.n	1076 <__aeabi_i2d+0x5e>
    1032:	1c02      	adds	r2, r0, #0
    1034:	1c21      	adds	r1, r4, #0
    1036:	3215      	adds	r2, #21
    1038:	4091      	lsls	r1, r2
    103a:	1c0a      	adds	r2, r1, #0
    103c:	210b      	movs	r1, #11
    103e:	1a08      	subs	r0, r1, r0
    1040:	40c4      	lsrs	r4, r0
    1042:	055b      	lsls	r3, r3, #21
    1044:	0324      	lsls	r4, r4, #12
    1046:	0b24      	lsrs	r4, r4, #12
    1048:	0d5b      	lsrs	r3, r3, #21
    104a:	e003      	b.n	1054 <__aeabi_i2d+0x3c>
    104c:	2500      	movs	r5, #0
    104e:	2300      	movs	r3, #0
    1050:	2400      	movs	r4, #0
    1052:	2200      	movs	r2, #0
    1054:	2100      	movs	r1, #0
    1056:	1c10      	adds	r0, r2, #0
    1058:	0324      	lsls	r4, r4, #12
    105a:	0d0a      	lsrs	r2, r1, #20
    105c:	0512      	lsls	r2, r2, #20
    105e:	0b24      	lsrs	r4, r4, #12
    1060:	4314      	orrs	r4, r2
    1062:	4a0a      	ldr	r2, [pc, #40]	; (108c <__aeabi_i2d+0x74>)
    1064:	051b      	lsls	r3, r3, #20
    1066:	4014      	ands	r4, r2
    1068:	431c      	orrs	r4, r3
    106a:	0064      	lsls	r4, r4, #1
    106c:	07ed      	lsls	r5, r5, #31
    106e:	0864      	lsrs	r4, r4, #1
    1070:	432c      	orrs	r4, r5
    1072:	1c21      	adds	r1, r4, #0
    1074:	bd38      	pop	{r3, r4, r5, pc}
    1076:	380b      	subs	r0, #11
    1078:	4084      	lsls	r4, r0
    107a:	055b      	lsls	r3, r3, #21
    107c:	0324      	lsls	r4, r4, #12
    107e:	0b24      	lsrs	r4, r4, #12
    1080:	0d5b      	lsrs	r3, r3, #21
    1082:	2200      	movs	r2, #0
    1084:	e7e6      	b.n	1054 <__aeabi_i2d+0x3c>
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	0000041e 	.word	0x0000041e
    108c:	800fffff 	.word	0x800fffff

00001090 <__aeabi_d2f>:
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	030b      	lsls	r3, r1, #12
    1094:	004d      	lsls	r5, r1, #1
    1096:	0f44      	lsrs	r4, r0, #29
    1098:	0d6d      	lsrs	r5, r5, #21
    109a:	0a5b      	lsrs	r3, r3, #9
    109c:	4323      	orrs	r3, r4
    109e:	1c6c      	adds	r4, r5, #1
    10a0:	0564      	lsls	r4, r4, #21
    10a2:	0fc9      	lsrs	r1, r1, #31
    10a4:	00c2      	lsls	r2, r0, #3
    10a6:	0d64      	lsrs	r4, r4, #21
    10a8:	2c01      	cmp	r4, #1
    10aa:	dd2a      	ble.n	1102 <__aeabi_d2f+0x72>
    10ac:	4c3b      	ldr	r4, [pc, #236]	; (119c <__aeabi_d2f+0x10c>)
    10ae:	192c      	adds	r4, r5, r4
    10b0:	2cfe      	cmp	r4, #254	; 0xfe
    10b2:	dc1a      	bgt.n	10ea <__aeabi_d2f+0x5a>
    10b4:	2c00      	cmp	r4, #0
    10b6:	dd35      	ble.n	1124 <__aeabi_d2f+0x94>
    10b8:	0180      	lsls	r0, r0, #6
    10ba:	1e45      	subs	r5, r0, #1
    10bc:	41a8      	sbcs	r0, r5
    10be:	00db      	lsls	r3, r3, #3
    10c0:	4303      	orrs	r3, r0
    10c2:	0f52      	lsrs	r2, r2, #29
    10c4:	4313      	orrs	r3, r2
    10c6:	075a      	lsls	r2, r3, #29
    10c8:	d004      	beq.n	10d4 <__aeabi_d2f+0x44>
    10ca:	220f      	movs	r2, #15
    10cc:	401a      	ands	r2, r3
    10ce:	2a04      	cmp	r2, #4
    10d0:	d000      	beq.n	10d4 <__aeabi_d2f+0x44>
    10d2:	3304      	adds	r3, #4
    10d4:	2280      	movs	r2, #128	; 0x80
    10d6:	04d2      	lsls	r2, r2, #19
    10d8:	401a      	ands	r2, r3
    10da:	d027      	beq.n	112c <__aeabi_d2f+0x9c>
    10dc:	3401      	adds	r4, #1
    10de:	2cff      	cmp	r4, #255	; 0xff
    10e0:	d003      	beq.n	10ea <__aeabi_d2f+0x5a>
    10e2:	019b      	lsls	r3, r3, #6
    10e4:	0a5b      	lsrs	r3, r3, #9
    10e6:	b2e4      	uxtb	r4, r4
    10e8:	e001      	b.n	10ee <__aeabi_d2f+0x5e>
    10ea:	24ff      	movs	r4, #255	; 0xff
    10ec:	2300      	movs	r3, #0
    10ee:	025b      	lsls	r3, r3, #9
    10f0:	05e4      	lsls	r4, r4, #23
    10f2:	0a5b      	lsrs	r3, r3, #9
    10f4:	4323      	orrs	r3, r4
    10f6:	005b      	lsls	r3, r3, #1
    10f8:	07c9      	lsls	r1, r1, #31
    10fa:	085b      	lsrs	r3, r3, #1
    10fc:	430b      	orrs	r3, r1
    10fe:	1c18      	adds	r0, r3, #0
    1100:	bd70      	pop	{r4, r5, r6, pc}
    1102:	2d00      	cmp	r5, #0
    1104:	d106      	bne.n	1114 <__aeabi_d2f+0x84>
    1106:	4313      	orrs	r3, r2
    1108:	d10e      	bne.n	1128 <__aeabi_d2f+0x98>
    110a:	2400      	movs	r4, #0
    110c:	025b      	lsls	r3, r3, #9
    110e:	0a5b      	lsrs	r3, r3, #9
    1110:	b2e4      	uxtb	r4, r4
    1112:	e7ec      	b.n	10ee <__aeabi_d2f+0x5e>
    1114:	431a      	orrs	r2, r3
    1116:	d0e8      	beq.n	10ea <__aeabi_d2f+0x5a>
    1118:	2080      	movs	r0, #128	; 0x80
    111a:	00db      	lsls	r3, r3, #3
    111c:	0480      	lsls	r0, r0, #18
    111e:	4303      	orrs	r3, r0
    1120:	24ff      	movs	r4, #255	; 0xff
    1122:	e7d0      	b.n	10c6 <__aeabi_d2f+0x36>
    1124:	3417      	adds	r4, #23
    1126:	da0c      	bge.n	1142 <__aeabi_d2f+0xb2>
    1128:	2305      	movs	r3, #5
    112a:	2400      	movs	r4, #0
    112c:	08db      	lsrs	r3, r3, #3
    112e:	2cff      	cmp	r4, #255	; 0xff
    1130:	d1ec      	bne.n	110c <__aeabi_d2f+0x7c>
    1132:	2b00      	cmp	r3, #0
    1134:	d02d      	beq.n	1192 <__aeabi_d2f+0x102>
    1136:	2280      	movs	r2, #128	; 0x80
    1138:	03d2      	lsls	r2, r2, #15
    113a:	4313      	orrs	r3, r2
    113c:	025b      	lsls	r3, r3, #9
    113e:	0a5b      	lsrs	r3, r3, #9
    1140:	e7d5      	b.n	10ee <__aeabi_d2f+0x5e>
    1142:	2480      	movs	r4, #128	; 0x80
    1144:	4816      	ldr	r0, [pc, #88]	; (11a0 <__aeabi_d2f+0x110>)
    1146:	0424      	lsls	r4, r4, #16
    1148:	4323      	orrs	r3, r4
    114a:	1b40      	subs	r0, r0, r5
    114c:	281f      	cmp	r0, #31
    114e:	dc0d      	bgt.n	116c <__aeabi_d2f+0xdc>
    1150:	4c14      	ldr	r4, [pc, #80]	; (11a4 <__aeabi_d2f+0x114>)
    1152:	46a4      	mov	ip, r4
    1154:	4465      	add	r5, ip
    1156:	40ab      	lsls	r3, r5
    1158:	1c1c      	adds	r4, r3, #0
    115a:	1c13      	adds	r3, r2, #0
    115c:	40ab      	lsls	r3, r5
    115e:	1e5d      	subs	r5, r3, #1
    1160:	41ab      	sbcs	r3, r5
    1162:	40c2      	lsrs	r2, r0
    1164:	4323      	orrs	r3, r4
    1166:	4313      	orrs	r3, r2
    1168:	2400      	movs	r4, #0
    116a:	e7ac      	b.n	10c6 <__aeabi_d2f+0x36>
    116c:	1c1e      	adds	r6, r3, #0
    116e:	4c0e      	ldr	r4, [pc, #56]	; (11a8 <__aeabi_d2f+0x118>)
    1170:	1b64      	subs	r4, r4, r5
    1172:	40e6      	lsrs	r6, r4
    1174:	1c34      	adds	r4, r6, #0
    1176:	2820      	cmp	r0, #32
    1178:	d00d      	beq.n	1196 <__aeabi_d2f+0x106>
    117a:	480c      	ldr	r0, [pc, #48]	; (11ac <__aeabi_d2f+0x11c>)
    117c:	4684      	mov	ip, r0
    117e:	4465      	add	r5, ip
    1180:	40ab      	lsls	r3, r5
    1182:	1c1d      	adds	r5, r3, #0
    1184:	432a      	orrs	r2, r5
    1186:	1e53      	subs	r3, r2, #1
    1188:	419a      	sbcs	r2, r3
    118a:	1c13      	adds	r3, r2, #0
    118c:	4323      	orrs	r3, r4
    118e:	2400      	movs	r4, #0
    1190:	e799      	b.n	10c6 <__aeabi_d2f+0x36>
    1192:	2300      	movs	r3, #0
    1194:	e7ab      	b.n	10ee <__aeabi_d2f+0x5e>
    1196:	2500      	movs	r5, #0
    1198:	e7f4      	b.n	1184 <__aeabi_d2f+0xf4>
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	fffffc80 	.word	0xfffffc80
    11a0:	0000039e 	.word	0x0000039e
    11a4:	fffffc82 	.word	0xfffffc82
    11a8:	0000037e 	.word	0x0000037e
    11ac:	fffffca2 	.word	0xfffffca2

000011b0 <__clzsi2>:
    11b0:	211c      	movs	r1, #28
    11b2:	2301      	movs	r3, #1
    11b4:	041b      	lsls	r3, r3, #16
    11b6:	4298      	cmp	r0, r3
    11b8:	d301      	bcc.n	11be <__clzsi2+0xe>
    11ba:	0c00      	lsrs	r0, r0, #16
    11bc:	3910      	subs	r1, #16
    11be:	0a1b      	lsrs	r3, r3, #8
    11c0:	4298      	cmp	r0, r3
    11c2:	d301      	bcc.n	11c8 <__clzsi2+0x18>
    11c4:	0a00      	lsrs	r0, r0, #8
    11c6:	3908      	subs	r1, #8
    11c8:	091b      	lsrs	r3, r3, #4
    11ca:	4298      	cmp	r0, r3
    11cc:	d301      	bcc.n	11d2 <__clzsi2+0x22>
    11ce:	0900      	lsrs	r0, r0, #4
    11d0:	3904      	subs	r1, #4
    11d2:	a202      	add	r2, pc, #8	; (adr r2, 11dc <__clzsi2+0x2c>)
    11d4:	5c10      	ldrb	r0, [r2, r0]
    11d6:	1840      	adds	r0, r0, r1
    11d8:	4770      	bx	lr
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	02020304 	.word	0x02020304
    11e0:	01010101 	.word	0x01010101
	...

000011ec <__libc_init_array>:
    11ec:	b570      	push	{r4, r5, r6, lr}
    11ee:	4e0d      	ldr	r6, [pc, #52]	; (1224 <__libc_init_array+0x38>)
    11f0:	4d0d      	ldr	r5, [pc, #52]	; (1228 <__libc_init_array+0x3c>)
    11f2:	2400      	movs	r4, #0
    11f4:	1bad      	subs	r5, r5, r6
    11f6:	10ad      	asrs	r5, r5, #2
    11f8:	d005      	beq.n	1206 <__libc_init_array+0x1a>
    11fa:	00a3      	lsls	r3, r4, #2
    11fc:	58f3      	ldr	r3, [r6, r3]
    11fe:	3401      	adds	r4, #1
    1200:	4798      	blx	r3
    1202:	42a5      	cmp	r5, r4
    1204:	d1f9      	bne.n	11fa <__libc_init_array+0xe>
    1206:	f000 f90f 	bl	1428 <_init>
    120a:	4e08      	ldr	r6, [pc, #32]	; (122c <__libc_init_array+0x40>)
    120c:	4d08      	ldr	r5, [pc, #32]	; (1230 <__libc_init_array+0x44>)
    120e:	2400      	movs	r4, #0
    1210:	1bad      	subs	r5, r5, r6
    1212:	10ad      	asrs	r5, r5, #2
    1214:	d005      	beq.n	1222 <__libc_init_array+0x36>
    1216:	00a3      	lsls	r3, r4, #2
    1218:	58f3      	ldr	r3, [r6, r3]
    121a:	3401      	adds	r4, #1
    121c:	4798      	blx	r3
    121e:	42a5      	cmp	r5, r4
    1220:	d1f9      	bne.n	1216 <__libc_init_array+0x2a>
    1222:	bd70      	pop	{r4, r5, r6, pc}
    1224:	00001434 	.word	0x00001434
    1228:	00001434 	.word	0x00001434
    122c:	00001434 	.word	0x00001434
    1230:	0000143c 	.word	0x0000143c

00001234 <memcpy>:
    1234:	b570      	push	{r4, r5, r6, lr}
    1236:	2a0f      	cmp	r2, #15
    1238:	d932      	bls.n	12a0 <memcpy+0x6c>
    123a:	1c04      	adds	r4, r0, #0
    123c:	430c      	orrs	r4, r1
    123e:	1c0b      	adds	r3, r1, #0
    1240:	07a4      	lsls	r4, r4, #30
    1242:	d131      	bne.n	12a8 <memcpy+0x74>
    1244:	1c15      	adds	r5, r2, #0
    1246:	1c04      	adds	r4, r0, #0
    1248:	3d10      	subs	r5, #16
    124a:	092d      	lsrs	r5, r5, #4
    124c:	3501      	adds	r5, #1
    124e:	012d      	lsls	r5, r5, #4
    1250:	1949      	adds	r1, r1, r5
    1252:	681e      	ldr	r6, [r3, #0]
    1254:	6026      	str	r6, [r4, #0]
    1256:	685e      	ldr	r6, [r3, #4]
    1258:	6066      	str	r6, [r4, #4]
    125a:	689e      	ldr	r6, [r3, #8]
    125c:	60a6      	str	r6, [r4, #8]
    125e:	68de      	ldr	r6, [r3, #12]
    1260:	3310      	adds	r3, #16
    1262:	60e6      	str	r6, [r4, #12]
    1264:	3410      	adds	r4, #16
    1266:	4299      	cmp	r1, r3
    1268:	d1f3      	bne.n	1252 <memcpy+0x1e>
    126a:	230f      	movs	r3, #15
    126c:	1945      	adds	r5, r0, r5
    126e:	4013      	ands	r3, r2
    1270:	2b03      	cmp	r3, #3
    1272:	d91b      	bls.n	12ac <memcpy+0x78>
    1274:	1f1c      	subs	r4, r3, #4
    1276:	2300      	movs	r3, #0
    1278:	08a4      	lsrs	r4, r4, #2
    127a:	3401      	adds	r4, #1
    127c:	00a4      	lsls	r4, r4, #2
    127e:	58ce      	ldr	r6, [r1, r3]
    1280:	50ee      	str	r6, [r5, r3]
    1282:	3304      	adds	r3, #4
    1284:	42a3      	cmp	r3, r4
    1286:	d1fa      	bne.n	127e <memcpy+0x4a>
    1288:	18ed      	adds	r5, r5, r3
    128a:	18c9      	adds	r1, r1, r3
    128c:	2303      	movs	r3, #3
    128e:	401a      	ands	r2, r3
    1290:	d005      	beq.n	129e <memcpy+0x6a>
    1292:	2300      	movs	r3, #0
    1294:	5ccc      	ldrb	r4, [r1, r3]
    1296:	54ec      	strb	r4, [r5, r3]
    1298:	3301      	adds	r3, #1
    129a:	4293      	cmp	r3, r2
    129c:	d1fa      	bne.n	1294 <memcpy+0x60>
    129e:	bd70      	pop	{r4, r5, r6, pc}
    12a0:	1c05      	adds	r5, r0, #0
    12a2:	2a00      	cmp	r2, #0
    12a4:	d1f5      	bne.n	1292 <memcpy+0x5e>
    12a6:	e7fa      	b.n	129e <memcpy+0x6a>
    12a8:	1c05      	adds	r5, r0, #0
    12aa:	e7f2      	b.n	1292 <memcpy+0x5e>
    12ac:	1c1a      	adds	r2, r3, #0
    12ae:	e7f8      	b.n	12a2 <memcpy+0x6e>

000012b0 <register_fini>:
    12b0:	b508      	push	{r3, lr}
    12b2:	4b03      	ldr	r3, [pc, #12]	; (12c0 <register_fini+0x10>)
    12b4:	2b00      	cmp	r3, #0
    12b6:	d002      	beq.n	12be <register_fini+0xe>
    12b8:	4802      	ldr	r0, [pc, #8]	; (12c4 <register_fini+0x14>)
    12ba:	f000 f805 	bl	12c8 <atexit>
    12be:	bd08      	pop	{r3, pc}
    12c0:	00000000 	.word	0x00000000
    12c4:	000012d9 	.word	0x000012d9

000012c8 <atexit>:
    12c8:	b508      	push	{r3, lr}
    12ca:	1c01      	adds	r1, r0, #0
    12cc:	2200      	movs	r2, #0
    12ce:	2000      	movs	r0, #0
    12d0:	2300      	movs	r3, #0
    12d2:	f000 f81b 	bl	130c <__register_exitproc>
    12d6:	bd08      	pop	{r3, pc}

000012d8 <__libc_fini_array>:
    12d8:	b538      	push	{r3, r4, r5, lr}
    12da:	4b09      	ldr	r3, [pc, #36]	; (1300 <__libc_fini_array+0x28>)
    12dc:	4c09      	ldr	r4, [pc, #36]	; (1304 <__libc_fini_array+0x2c>)
    12de:	1ae4      	subs	r4, r4, r3
    12e0:	10a4      	asrs	r4, r4, #2
    12e2:	d009      	beq.n	12f8 <__libc_fini_array+0x20>
    12e4:	4a08      	ldr	r2, [pc, #32]	; (1308 <__libc_fini_array+0x30>)
    12e6:	18a5      	adds	r5, r4, r2
    12e8:	00ad      	lsls	r5, r5, #2
    12ea:	18ed      	adds	r5, r5, r3
    12ec:	682b      	ldr	r3, [r5, #0]
    12ee:	3c01      	subs	r4, #1
    12f0:	4798      	blx	r3
    12f2:	3d04      	subs	r5, #4
    12f4:	2c00      	cmp	r4, #0
    12f6:	d1f9      	bne.n	12ec <__libc_fini_array+0x14>
    12f8:	f000 f8a0 	bl	143c <_fini>
    12fc:	bd38      	pop	{r3, r4, r5, pc}
    12fe:	46c0      	nop			; (mov r8, r8)
    1300:	00001448 	.word	0x00001448
    1304:	0000144c 	.word	0x0000144c
    1308:	3fffffff 	.word	0x3fffffff

0000130c <__register_exitproc>:
    130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    130e:	4644      	mov	r4, r8
    1310:	465f      	mov	r7, fp
    1312:	4656      	mov	r6, sl
    1314:	464d      	mov	r5, r9
    1316:	469b      	mov	fp, r3
    1318:	4b2f      	ldr	r3, [pc, #188]	; (13d8 <__register_exitproc+0xcc>)
    131a:	b4f0      	push	{r4, r5, r6, r7}
    131c:	681c      	ldr	r4, [r3, #0]
    131e:	23a4      	movs	r3, #164	; 0xa4
    1320:	005b      	lsls	r3, r3, #1
    1322:	1c05      	adds	r5, r0, #0
    1324:	58e0      	ldr	r0, [r4, r3]
    1326:	1c0e      	adds	r6, r1, #0
    1328:	4690      	mov	r8, r2
    132a:	2800      	cmp	r0, #0
    132c:	d04b      	beq.n	13c6 <__register_exitproc+0xba>
    132e:	6843      	ldr	r3, [r0, #4]
    1330:	2b1f      	cmp	r3, #31
    1332:	dc0d      	bgt.n	1350 <__register_exitproc+0x44>
    1334:	1c5c      	adds	r4, r3, #1
    1336:	2d00      	cmp	r5, #0
    1338:	d121      	bne.n	137e <__register_exitproc+0x72>
    133a:	3302      	adds	r3, #2
    133c:	009b      	lsls	r3, r3, #2
    133e:	6044      	str	r4, [r0, #4]
    1340:	501e      	str	r6, [r3, r0]
    1342:	2000      	movs	r0, #0
    1344:	bc3c      	pop	{r2, r3, r4, r5}
    1346:	4690      	mov	r8, r2
    1348:	4699      	mov	r9, r3
    134a:	46a2      	mov	sl, r4
    134c:	46ab      	mov	fp, r5
    134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1350:	4b22      	ldr	r3, [pc, #136]	; (13dc <__register_exitproc+0xd0>)
    1352:	2b00      	cmp	r3, #0
    1354:	d03c      	beq.n	13d0 <__register_exitproc+0xc4>
    1356:	20c8      	movs	r0, #200	; 0xc8
    1358:	0040      	lsls	r0, r0, #1
    135a:	e000      	b.n	135e <__register_exitproc+0x52>
    135c:	bf00      	nop
    135e:	2800      	cmp	r0, #0
    1360:	d036      	beq.n	13d0 <__register_exitproc+0xc4>
    1362:	22a4      	movs	r2, #164	; 0xa4
    1364:	2300      	movs	r3, #0
    1366:	0052      	lsls	r2, r2, #1
    1368:	58a1      	ldr	r1, [r4, r2]
    136a:	6043      	str	r3, [r0, #4]
    136c:	6001      	str	r1, [r0, #0]
    136e:	50a0      	str	r0, [r4, r2]
    1370:	3240      	adds	r2, #64	; 0x40
    1372:	5083      	str	r3, [r0, r2]
    1374:	3204      	adds	r2, #4
    1376:	5083      	str	r3, [r0, r2]
    1378:	2401      	movs	r4, #1
    137a:	2d00      	cmp	r5, #0
    137c:	d0dd      	beq.n	133a <__register_exitproc+0x2e>
    137e:	009a      	lsls	r2, r3, #2
    1380:	4691      	mov	r9, r2
    1382:	4481      	add	r9, r0
    1384:	4642      	mov	r2, r8
    1386:	2188      	movs	r1, #136	; 0x88
    1388:	464f      	mov	r7, r9
    138a:	507a      	str	r2, [r7, r1]
    138c:	22c4      	movs	r2, #196	; 0xc4
    138e:	0052      	lsls	r2, r2, #1
    1390:	4690      	mov	r8, r2
    1392:	4480      	add	r8, r0
    1394:	4642      	mov	r2, r8
    1396:	3987      	subs	r1, #135	; 0x87
    1398:	4099      	lsls	r1, r3
    139a:	6812      	ldr	r2, [r2, #0]
    139c:	468a      	mov	sl, r1
    139e:	430a      	orrs	r2, r1
    13a0:	4694      	mov	ip, r2
    13a2:	4642      	mov	r2, r8
    13a4:	4661      	mov	r1, ip
    13a6:	6011      	str	r1, [r2, #0]
    13a8:	2284      	movs	r2, #132	; 0x84
    13aa:	4649      	mov	r1, r9
    13ac:	465f      	mov	r7, fp
    13ae:	0052      	lsls	r2, r2, #1
    13b0:	508f      	str	r7, [r1, r2]
    13b2:	2d02      	cmp	r5, #2
    13b4:	d1c1      	bne.n	133a <__register_exitproc+0x2e>
    13b6:	1c02      	adds	r2, r0, #0
    13b8:	4655      	mov	r5, sl
    13ba:	328d      	adds	r2, #141	; 0x8d
    13bc:	32ff      	adds	r2, #255	; 0xff
    13be:	6811      	ldr	r1, [r2, #0]
    13c0:	430d      	orrs	r5, r1
    13c2:	6015      	str	r5, [r2, #0]
    13c4:	e7b9      	b.n	133a <__register_exitproc+0x2e>
    13c6:	1c20      	adds	r0, r4, #0
    13c8:	304d      	adds	r0, #77	; 0x4d
    13ca:	30ff      	adds	r0, #255	; 0xff
    13cc:	50e0      	str	r0, [r4, r3]
    13ce:	e7ae      	b.n	132e <__register_exitproc+0x22>
    13d0:	2001      	movs	r0, #1
    13d2:	4240      	negs	r0, r0
    13d4:	e7b6      	b.n	1344 <__register_exitproc+0x38>
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00001424 	.word	0x00001424
    13dc:	00000000 	.word	0x00000000
    13e0:	00000cd0 	.word	0x00000cd0
    13e4:	00000cae 	.word	0x00000cae
    13e8:	00000cae 	.word	0x00000cae
    13ec:	00000ca2 	.word	0x00000ca2
    13f0:	00000b96 	.word	0x00000b96
    13f4:	00000b96 	.word	0x00000b96
    13f8:	00000c96 	.word	0x00000c96
    13fc:	00000ca2 	.word	0x00000ca2
    1400:	00000b96 	.word	0x00000b96
    1404:	00000c96 	.word	0x00000c96
    1408:	00000b96 	.word	0x00000b96
    140c:	00000ca2 	.word	0x00000ca2
    1410:	00000b9a 	.word	0x00000b9a
    1414:	00000b9a 	.word	0x00000b9a
    1418:	00000b9a 	.word	0x00000b9a
    141c:	00000eb0 	.word	0x00000eb0
    1420:	00000043 	.word	0x00000043

00001424 <_global_impure_ptr>:
    1424:	20000010                                ... 

00001428 <_init>:
    1428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    142e:	bc08      	pop	{r3}
    1430:	469e      	mov	lr, r3
    1432:	4770      	bx	lr

00001434 <__init_array_start>:
    1434:	000012b1 	.word	0x000012b1

00001438 <__frame_dummy_init_array_entry>:
    1438:	000000dd                                ....

0000143c <_fini>:
    143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1442:	bc08      	pop	{r3}
    1444:	469e      	mov	lr, r3
    1446:	4770      	bx	lr

00001448 <__fini_array_start>:
    1448:	000000b5 	.word	0x000000b5

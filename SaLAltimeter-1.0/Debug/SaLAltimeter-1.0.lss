
SaLAltimeter-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000115c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000115c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  20000438  00001594  00010438  2**2
                  ALLOC
  3 .stack        00002004  2000045c  000015b8  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000c1ef  00000000  00000000  000104bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001612  00000000  00000000  0001c6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000e5f  00000000  00000000  0001dcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001f8  00000000  00000000  0001eb1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000278  00000000  00000000  0001ed13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000143ea  00000000  00000000  0001ef8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000544b  00000000  00000000  00033375  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006e7cf  00000000  00000000  000387c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005e8  00000000  00000000  000a6f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002460 	.word	0x20002460
       4:	00000501 	.word	0x00000501
       8:	000004f9 	.word	0x000004f9
       c:	000004f9 	.word	0x000004f9
	...
      2c:	000004f9 	.word	0x000004f9
	...
      38:	000004f9 	.word	0x000004f9
      3c:	000004f9 	.word	0x000004f9
      40:	000004f9 	.word	0x000004f9
      44:	000004f9 	.word	0x000004f9
      48:	000004f9 	.word	0x000004f9
      4c:	00000791 	.word	0x00000791
      50:	000004f9 	.word	0x000004f9
      54:	000004f9 	.word	0x000004f9
      58:	000004f9 	.word	0x000004f9
      5c:	000004f9 	.word	0x000004f9
      60:	000004f9 	.word	0x000004f9
      64:	000004f9 	.word	0x000004f9
      68:	000004f9 	.word	0x000004f9
      6c:	000004f9 	.word	0x000004f9
      70:	000004f9 	.word	0x000004f9
      74:	000004f9 	.word	0x000004f9
      78:	000004f9 	.word	0x000004f9
      7c:	000004f9 	.word	0x000004f9
      80:	000004f9 	.word	0x000004f9
      84:	000004f9 	.word	0x000004f9
      88:	000004f9 	.word	0x000004f9
      8c:	000004f9 	.word	0x000004f9
      90:	000004f9 	.word	0x000004f9
	...
      9c:	000004f9 	.word	0x000004f9
      a0:	000004f9 	.word	0x000004f9
      a4:	000004f9 	.word	0x000004f9
      a8:	000004f9 	.word	0x000004f9
      ac:	000004f9 	.word	0x000004f9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000438 	.word	0x20000438
      d4:	00000000 	.word	0x00000000
      d8:	0000115c 	.word	0x0000115c

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	0000115c 	.word	0x0000115c
     108:	2000043c 	.word	0x2000043c
     10c:	0000115c 	.word	0x0000115c
     110:	00000000 	.word	0x00000000

00000114 <getADXL345Event>:
    if (negative) {
        Zaccel = ((_byte6 | ~((1 << 8) - 1)) << 8 ) | _byte5;
    } else {
        Zaccel = (_byte6 << 8) | _byte5;
    }
}
     114:	b570      	push	{r4, r5, r6, lr}
     116:	1c05      	adds	r5, r0, #0
     118:	2280      	movs	r2, #128	; 0x80
     11a:	0252      	lsls	r2, r2, #9
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <getADXL345Event+0x34>)
     11e:	615a      	str	r2, [r3, #20]
}

void getADXL345Event(uint8_t *values) {

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,FALSE);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
     120:	200f      	movs	r0, #15
     122:	210d      	movs	r1, #13
     124:	22f2      	movs	r2, #242	; 0xf2
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <getADXL345Event+0x38>)
     128:	4798      	blx	r3
     12a:	1c2c      	adds	r4, r5, #0
     12c:	3506      	adds	r5, #6
    for (uint8_t i = 0; i < 6; i++) {
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
     12e:	4e08      	ldr	r6, [pc, #32]	; (150 <getADXL345Event+0x3c>)
     130:	200f      	movs	r0, #15
     132:	210e      	movs	r1, #14
     134:	47b0      	blx	r6
     136:	7020      	strb	r0, [r4, #0]
     138:	3401      	adds	r4, #1

void getADXL345Event(uint8_t *values) {

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,FALSE);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
    for (uint8_t i = 0; i < 6; i++) {
     13a:	42ac      	cmp	r4, r5
     13c:	d1f8      	bne.n	130 <getADXL345Event+0x1c>
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     13e:	2280      	movs	r2, #128	; 0x80
     140:	0252      	lsls	r2, r2, #9
     142:	4b01      	ldr	r3, [pc, #4]	; (148 <getADXL345Event+0x34>)
     144:	619a      	str	r2, [r3, #24]
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
    }
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,TRUE);
}
     146:	bd70      	pop	{r4, r5, r6, pc}
     148:	41004400 	.word	0x41004400
     14c:	00000399 	.word	0x00000399
     150:	000003f9 	.word	0x000003f9

00000154 <getMS5607Coeff>:
	 
	 uint32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
	 return _receive;
}

void getMS5607Coeff(uint16_t *coefficients) {
     154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     156:	465f      	mov	r7, fp
     158:	4656      	mov	r6, sl
     15a:	464d      	mov	r5, r9
     15c:	4644      	mov	r4, r8
     15e:	b4f0      	push	{r4, r5, r6, r7}
     160:	4681      	mov	r9, r0
     162:	2400      	movs	r4, #0

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     164:	4f15      	ldr	r7, [pc, #84]	; (1bc <getMS5607Coeff+0x68>)
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     166:	4b16      	ldr	r3, [pc, #88]	; (1c0 <getMS5607Coeff+0x6c>)
     168:	4698      	mov	r8, r3
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     16a:	4e16      	ldr	r6, [pc, #88]	; (1c4 <getMS5607Coeff+0x70>)
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     16c:	2596      	movs	r5, #150	; 0x96
     16e:	00ad      	lsls	r5, r5, #2
     170:	1c28      	adds	r0, r5, #0
     172:	47b8      	blx	r7
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     174:	1c28      	adds	r0, r5, #0
     176:	47b8      	blx	r7
		} else {
		port->OUTCLR.reg = pin_mask;
     178:	4d13      	ldr	r5, [pc, #76]	; (1c8 <getMS5607Coeff+0x74>)
     17a:	2380      	movs	r3, #128	; 0x80
     17c:	009b      	lsls	r3, r3, #2
     17e:	469b      	mov	fp, r3
     180:	616b      	str	r3, [r5, #20]
     182:	1c22      	adds	r2, r4, #0
     184:	3a5e      	subs	r2, #94	; 0x5e
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     186:	b2d2      	uxtb	r2, r2
     188:	200f      	movs	r0, #15
     18a:	210d      	movs	r1, #13
     18c:	47c0      	blx	r8
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     18e:	200f      	movs	r0, #15
     190:	210e      	movs	r1, #14
     192:	47b0      	blx	r6
     194:	4682      	mov	sl, r0
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     196:	200f      	movs	r0, #15
     198:	210e      	movs	r1, #14
     19a:	47b0      	blx	r6
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     19c:	465b      	mov	r3, fp
     19e:	61ab      	str	r3, [r5, #24]
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
     1a0:	4653      	mov	r3, sl
     1a2:	021d      	lsls	r5, r3, #8
     1a4:	4328      	orrs	r0, r5
     1a6:	464b      	mov	r3, r9
     1a8:	5318      	strh	r0, [r3, r4]
     1aa:	3402      	adds	r4, #2
	 return _receive;
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     1ac:	2c0c      	cmp	r4, #12
     1ae:	d1dd      	bne.n	16c <getMS5607Coeff+0x18>
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
     1b0:	bc3c      	pop	{r2, r3, r4, r5}
     1b2:	4690      	mov	r8, r2
     1b4:	4699      	mov	r9, r3
     1b6:	46a2      	mov	sl, r4
     1b8:	46ab      	mov	fp, r5
     1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1bc:	00000475 	.word	0x00000475
     1c0:	00000399 	.word	0x00000399
     1c4:	000003f9 	.word	0x000003f9
     1c8:	41004400 	.word	0x41004400

000001cc <initAccelerometer>:

#include <SaLAccelerometer.h>
#include <SaLConv2C.h>

void initAccelerometer(
    Accelerometer *const myAccelerometer) {
     1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1ce:	1c07      	adds	r7, r0, #0

#ifdef HAS_ADXL345

    SaLPinMode(ADXL345_SLAVE_SELECT_PIN,OUTPUT);
     1d0:	2010      	movs	r0, #16
     1d2:	2101      	movs	r1, #1
     1d4:	4e1e      	ldr	r6, [pc, #120]	; (250 <initAccelerometer+0x84>)
     1d6:	47b0      	blx	r6
     1d8:	4c1e      	ldr	r4, [pc, #120]	; (254 <initAccelerometer+0x88>)
     1da:	2580      	movs	r5, #128	; 0x80
     1dc:	026d      	lsls	r5, r5, #9
     1de:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,TRUE);
    SaLPinMode(ADXL345_MOSI_PIN,OUTPUT);
     1e0:	200d      	movs	r0, #13
     1e2:	2101      	movs	r1, #1
     1e4:	47b0      	blx	r6
    SaLPinMode(ADXL345_SCK_PIN,OUTPUT);
     1e6:	200f      	movs	r0, #15
     1e8:	2101      	movs	r1, #1
     1ea:	47b0      	blx	r6
    SaLPinMode(ADXL345_MISO_PIN,INPUT);
     1ec:	200e      	movs	r0, #14
     1ee:	2100      	movs	r1, #0
     1f0:	47b0      	blx	r6

    myAccelerometer->rate_ = MY_ADXL345_DATA_RATE;
     1f2:	230e      	movs	r3, #14
     1f4:	707b      	strb	r3, [r7, #1]
    myAccelerometer->range_ = MY_ADXL345_RANGE;
     1f6:	3b06      	subs	r3, #6
     1f8:	703b      	strb	r3, [r7, #0]
		} else {
		port->OUTCLR.reg = pin_mask;
     1fa:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,FALSE);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     1fc:	200f      	movs	r0, #15
     1fe:	210d      	movs	r1, #13
     200:	222d      	movs	r2, #45	; 0x2d
     202:	4e15      	ldr	r6, [pc, #84]	; (258 <initAccelerometer+0x8c>)
     204:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x00); // disable
     206:	200f      	movs	r0, #15
     208:	210d      	movs	r1, #13
     20a:	2200      	movs	r2, #0
     20c:	47b0      	blx	r6
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     20e:	61a5      	str	r5, [r4, #24]
		} else {
		port->OUTCLR.reg = pin_mask;
     210:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,TRUE);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,FALSE);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     212:	200f      	movs	r0, #15
     214:	210d      	movs	r1, #13
     216:	222c      	movs	r2, #44	; 0x2c
     218:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->rate_);
     21a:	787a      	ldrb	r2, [r7, #1]
     21c:	200f      	movs	r0, #15
     21e:	210d      	movs	r1, #13
     220:	47b0      	blx	r6
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     222:	61a5      	str	r5, [r4, #24]
		} else {
		port->OUTCLR.reg = pin_mask;
     224:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,TRUE);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,FALSE);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     226:	200f      	movs	r0, #15
     228:	210d      	movs	r1, #13
     22a:	222c      	movs	r2, #44	; 0x2c
     22c:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->range_);
     22e:	783a      	ldrb	r2, [r7, #0]
     230:	200f      	movs	r0, #15
     232:	210d      	movs	r1, #13
     234:	47b0      	blx	r6
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     236:	61a5      	str	r5, [r4, #24]
		} else {
		port->OUTCLR.reg = pin_mask;
     238:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,TRUE);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,FALSE);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     23a:	200f      	movs	r0, #15
     23c:	210d      	movs	r1, #13
     23e:	222d      	movs	r2, #45	; 0x2d
     240:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x08); // enable
     242:	200f      	movs	r0, #15
     244:	210d      	movs	r1, #13
     246:	2208      	movs	r2, #8
     248:	47b0      	blx	r6
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     24a:	61a5      	str	r5, [r4, #24]





}
     24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     24e:	46c0      	nop			; (mov r8, r8)
     250:	000004a1 	.word	0x000004a1
     254:	41004400 	.word	0x41004400
     258:	00000399 	.word	0x00000399

0000025c <getAccelEvent>:

void getAccelEvent(Accelerometer *const myAccelerometer) {
     25c:	b5f0      	push	{r4, r5, r6, r7, lr}
     25e:	464f      	mov	r7, r9
     260:	4646      	mov	r6, r8
     262:	b4c0      	push	{r6, r7}
     264:	b083      	sub	sp, #12
     266:	1c06      	adds	r6, r0, #0

#ifdef HAS_ADXL345

    uint8_t regAccelData[6];

    getADXL345Event(&regAccelData[0]);
     268:	4668      	mov	r0, sp
     26a:	4b2d      	ldr	r3, [pc, #180]	; (320 <getAccelEvent+0xc4>)
     26c:	4798      	blx	r3
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     26e:	466b      	mov	r3, sp
     270:	785b      	ldrb	r3, [r3, #1]
    if (negative) {
     272:	b25a      	sxtb	r2, r3
     274:	2a00      	cmp	r2, #0
     276:	da07      	bge.n	288 <getAccelEvent+0x2c>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     278:	482a      	ldr	r0, [pc, #168]	; (324 <getAccelEvent+0xc8>)
     27a:	4303      	orrs	r3, r0
     27c:	021b      	lsls	r3, r3, #8
     27e:	466a      	mov	r2, sp
     280:	7810      	ldrb	r0, [r2, #0]
     282:	4303      	orrs	r3, r0
     284:	b29b      	uxth	r3, r3
     286:	e004      	b.n	292 <getAccelEvent+0x36>
    } else {
        result = (*(values + 1) << 8) + *values;
     288:	021b      	lsls	r3, r3, #8
     28a:	466a      	mov	r2, sp
     28c:	7810      	ldrb	r0, [r2, #0]
     28e:	18c3      	adds	r3, r0, r3
     290:	b29b      	uxth	r3, r3

    myAccelerometer->acceleration.X = Convert2C(&regAccelData[0]);
     292:	80b3      	strh	r3, [r6, #4]
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     294:	466a      	mov	r2, sp
     296:	78d4      	ldrb	r4, [r2, #3]
    if (negative) {
     298:	b262      	sxtb	r2, r4
     29a:	2a00      	cmp	r2, #0
     29c:	da07      	bge.n	2ae <getAccelEvent+0x52>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     29e:	4821      	ldr	r0, [pc, #132]	; (324 <getAccelEvent+0xc8>)
     2a0:	4304      	orrs	r4, r0
     2a2:	0224      	lsls	r4, r4, #8
     2a4:	466a      	mov	r2, sp
     2a6:	7890      	ldrb	r0, [r2, #2]
     2a8:	4304      	orrs	r4, r0
     2aa:	b2a4      	uxth	r4, r4
     2ac:	e004      	b.n	2b8 <getAccelEvent+0x5c>
    } else {
        result = (*(values + 1) << 8) + *values;
     2ae:	0224      	lsls	r4, r4, #8
     2b0:	466a      	mov	r2, sp
     2b2:	7890      	ldrb	r0, [r2, #2]
     2b4:	1904      	adds	r4, r0, r4
     2b6:	b2a4      	uxth	r4, r4
    myAccelerometer->acceleration.Y = Convert2C(&regAccelData[2]);
     2b8:	80f4      	strh	r4, [r6, #6]
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     2ba:	466a      	mov	r2, sp
     2bc:	7955      	ldrb	r5, [r2, #5]
    if (negative) {
     2be:	b26a      	sxtb	r2, r5
     2c0:	2a00      	cmp	r2, #0
     2c2:	da07      	bge.n	2d4 <getAccelEvent+0x78>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     2c4:	4817      	ldr	r0, [pc, #92]	; (324 <getAccelEvent+0xc8>)
     2c6:	4305      	orrs	r5, r0
     2c8:	022d      	lsls	r5, r5, #8
     2ca:	466a      	mov	r2, sp
     2cc:	7910      	ldrb	r0, [r2, #4]
     2ce:	4305      	orrs	r5, r0
     2d0:	b2ad      	uxth	r5, r5
     2d2:	e004      	b.n	2de <getAccelEvent+0x82>
    } else {
        result = (*(values + 1) << 8) + *values;
     2d4:	022d      	lsls	r5, r5, #8
     2d6:	466a      	mov	r2, sp
     2d8:	7910      	ldrb	r0, [r2, #4]
     2da:	1945      	adds	r5, r0, r5
     2dc:	b2ad      	uxth	r5, r5
    myAccelerometer->acceleration.Z = Convert2C(&regAccelData[4]);
     2de:	8135      	strh	r5, [r6, #8]

    myAccelerometer->acceleration.Xf = myAccelerometer->acceleration.X * ADXL345_MG2G_MULTIPLIER;
     2e0:	b218      	sxth	r0, r3
     2e2:	4b11      	ldr	r3, [pc, #68]	; (328 <getAccelEvent+0xcc>)
     2e4:	4698      	mov	r8, r3
     2e6:	4798      	blx	r3
     2e8:	4b10      	ldr	r3, [pc, #64]	; (32c <getAccelEvent+0xd0>)
     2ea:	4699      	mov	r9, r3
     2ec:	4a10      	ldr	r2, [pc, #64]	; (330 <getAccelEvent+0xd4>)
     2ee:	4b11      	ldr	r3, [pc, #68]	; (334 <getAccelEvent+0xd8>)
     2f0:	47c8      	blx	r9
     2f2:	4f11      	ldr	r7, [pc, #68]	; (338 <getAccelEvent+0xdc>)
     2f4:	47b8      	blx	r7
     2f6:	60f0      	str	r0, [r6, #12]
    myAccelerometer->acceleration.Yf = myAccelerometer->acceleration.Y * ADXL345_MG2G_MULTIPLIER;
     2f8:	b220      	sxth	r0, r4
     2fa:	47c0      	blx	r8
     2fc:	4a0c      	ldr	r2, [pc, #48]	; (330 <getAccelEvent+0xd4>)
     2fe:	4b0d      	ldr	r3, [pc, #52]	; (334 <getAccelEvent+0xd8>)
     300:	47c8      	blx	r9
     302:	47b8      	blx	r7
     304:	6130      	str	r0, [r6, #16]
    myAccelerometer->acceleration.Zf = myAccelerometer->acceleration.Z * ADXL345_MG2G_MULTIPLIER;
     306:	b228      	sxth	r0, r5
     308:	47c0      	blx	r8
     30a:	4a09      	ldr	r2, [pc, #36]	; (330 <getAccelEvent+0xd4>)
     30c:	4b09      	ldr	r3, [pc, #36]	; (334 <getAccelEvent+0xd8>)
     30e:	47c8      	blx	r9
     310:	47b8      	blx	r7
     312:	6170      	str	r0, [r6, #20]



#endif

     314:	b003      	add	sp, #12
     316:	bc0c      	pop	{r2, r3}
     318:	4690      	mov	r8, r2
     31a:	4699      	mov	r9, r3
     31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	00000115 	.word	0x00000115
     324:	ffffff00 	.word	0xffffff00
     328:	00000da5 	.word	0x00000da5
     32c:	00000871 	.word	0x00000871
     330:	8e8a71de 	.word	0x8e8a71de
     334:	3f6ff2e4 	.word	0x3f6ff2e4
     338:	00000e1d 	.word	0x00000e1d

0000033c <initBarometer>:

#include <SaLBarometer.h>



void initBarometer(Barometer *const myBarometer) {
     33c:	b570      	push	{r4, r5, r6, lr}
     33e:	1c05      	adds	r5, r0, #0

#ifdef HAS_MS5607
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     340:	2009      	movs	r0, #9
     342:	2101      	movs	r1, #1
     344:	4c0f      	ldr	r4, [pc, #60]	; (384 <initBarometer+0x48>)
     346:	47a0      	blx	r4
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,TRUE);
     348:	2009      	movs	r0, #9
     34a:	2101      	movs	r1, #1
     34c:	47a0      	blx	r4
    SaLPinMode(MS5607_MOSI_PIN,OUTPUT);
     34e:	200d      	movs	r0, #13
     350:	2101      	movs	r1, #1
     352:	47a0      	blx	r4
    SaLPinMode(MS5607_SCK_PIN,OUTPUT);
     354:	200f      	movs	r0, #15
     356:	2101      	movs	r1, #1
     358:	47a0      	blx	r4
    SaLPinMode(MS5607_MISO_PIN,INPUT);
     35a:	200e      	movs	r0, #14
     35c:	2100      	movs	r1, #0
     35e:	47a0      	blx	r4
		} else {
		port->OUTCLR.reg = pin_mask;
     360:	4c09      	ldr	r4, [pc, #36]	; (388 <initBarometer+0x4c>)
     362:	2680      	movs	r6, #128	; 0x80
     364:	00b6      	lsls	r6, r6, #2
     366:	6166      	str	r6, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,MS5607_CMD_RES);
     368:	200f      	movs	r0, #15
     36a:	210d      	movs	r1, #13
     36c:	221e      	movs	r2, #30
     36e:	4b07      	ldr	r3, [pc, #28]	; (38c <initBarometer+0x50>)
     370:	4798      	blx	r3
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     372:	61a6      	str	r6, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
    delay_us(600);
     374:	2096      	movs	r0, #150	; 0x96
     376:	0080      	lsls	r0, r0, #2
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <initBarometer+0x54>)
     37a:	4798      	blx	r3
    getMS5607Coeff(&myBarometer->coefficients_[0]);
     37c:	1d28      	adds	r0, r5, #4
     37e:	4b05      	ldr	r3, [pc, #20]	; (394 <initBarometer+0x58>)
     380:	4798      	blx	r3
#endif

}
     382:	bd70      	pop	{r4, r5, r6, pc}
     384:	000004a1 	.word	0x000004a1
     388:	41004400 	.word	0x41004400
     38c:	00000399 	.word	0x00000399
     390:	00000475 	.word	0x00000475
     394:	00000155 	.word	0x00000155

00000398 <byteOut>:



void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {
     398:	b570      	push	{r4, r5, r6, lr}
     39a:	09c3      	lsrs	r3, r0, #7
     39c:	2400      	movs	r4, #0
     39e:	2b00      	cmp	r3, #0
     3a0:	d104      	bne.n	3ac <byteOut+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     3a2:	0944      	lsrs	r4, r0, #5
     3a4:	01e4      	lsls	r4, r4, #7
     3a6:	4b13      	ldr	r3, [pc, #76]	; (3f4 <byteOut+0x5c>)
     3a8:	469c      	mov	ip, r3
     3aa:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     3ac:	231f      	movs	r3, #31
     3ae:	4018      	ands	r0, r3
     3b0:	3b1e      	subs	r3, #30
     3b2:	4083      	lsls	r3, r0
     3b4:	1c18      	adds	r0, r3, #0
     3b6:	09cb      	lsrs	r3, r1, #7
     3b8:	2600      	movs	r6, #0
     3ba:	2b00      	cmp	r3, #0
     3bc:	d104      	bne.n	3c8 <byteOut+0x30>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     3be:	094e      	lsrs	r6, r1, #5
     3c0:	01f6      	lsls	r6, r6, #7
     3c2:	4b0c      	ldr	r3, [pc, #48]	; (3f4 <byteOut+0x5c>)
     3c4:	469c      	mov	ip, r3
     3c6:	4466      	add	r6, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     3c8:	231f      	movs	r3, #31
     3ca:	4019      	ands	r1, r3
     3cc:	3b1e      	subs	r3, #30
     3ce:	408b      	lsls	r3, r1
     3d0:	1c19      	adds	r1, r3, #0
     3d2:	2308      	movs	r3, #8
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     3d4:	6160      	str	r0, [r4, #20]

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        if (byte & 0x80) {
     3d6:	b255      	sxtb	r5, r2
     3d8:	2d00      	cmp	r5, #0
     3da:	da01      	bge.n	3e0 <byteOut+0x48>
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     3dc:	61b1      	str	r1, [r6, #24]
     3de:	e000      	b.n	3e2 <byteOut+0x4a>
		} else {
		port->OUTCLR.reg = pin_mask;
     3e0:	6171      	str	r1, [r6, #20]
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     3e2:	61a0      	str	r0, [r4, #24]
            SaLDigitalOut(MOSI_PIN,true);
        } else {
            SaLDigitalOut(MOSI_PIN,false);
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
     3e4:	0052      	lsls	r2, r2, #1
     3e6:	b2d2      	uxtb	r2, r2
     3e8:	3b01      	subs	r3, #1
     3ea:	b2db      	uxtb	r3, r3

void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     3ec:	2b00      	cmp	r3, #0
     3ee:	d1f1      	bne.n	3d4 <byteOut+0x3c>
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
    }

}
     3f0:	bd70      	pop	{r4, r5, r6, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	41004400 	.word	0x41004400

000003f8 <getByte>:
    }

}

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
     3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3fa:	09c3      	lsrs	r3, r0, #7
     3fc:	2400      	movs	r4, #0
     3fe:	2b00      	cmp	r3, #0
     400:	d104      	bne.n	40c <getByte+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     402:	0944      	lsrs	r4, r0, #5
     404:	01e4      	lsls	r4, r4, #7
     406:	4b12      	ldr	r3, [pc, #72]	; (450 <getByte+0x58>)
     408:	469c      	mov	ip, r3
     40a:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     40c:	251f      	movs	r5, #31
     40e:	4028      	ands	r0, r5
     410:	3d1e      	subs	r5, #30
     412:	4085      	lsls	r5, r0
     414:	09cb      	lsrs	r3, r1, #7
     416:	2600      	movs	r6, #0
     418:	2b00      	cmp	r3, #0
     41a:	d104      	bne.n	426 <getByte+0x2e>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     41c:	094e      	lsrs	r6, r1, #5
     41e:	01f6      	lsls	r6, r6, #7
     420:	4b0b      	ldr	r3, [pc, #44]	; (450 <getByte+0x58>)
     422:	469c      	mov	ip, r3
     424:	4466      	add	r6, ip
	}
}

static inline bool SaLDigitalIn(uint8_t pin) {
	PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
     426:	231f      	movs	r3, #31
     428:	4019      	ands	r1, r3
     42a:	3b1e      	subs	r3, #30
     42c:	408b      	lsls	r3, r1
     42e:	1c19      	adds	r1, r3, #0
     430:	2208      	movs	r2, #8
    uint8_t byte = 0x00;
     432:	2000      	movs	r0, #0
	

	if (level) {
		port->OUTSET.reg = pin_mask;
		} else {
		port->OUTCLR.reg = pin_mask;
     434:	6165      	str	r5, [r4, #20]
}

static inline bool SaLDigitalIn(uint8_t pin) {
	PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	bool level = (port->IN.reg & pin_mask);
     436:	6a33      	ldr	r3, [r6, #32]
     438:	400b      	ands	r3, r1
     43a:	1e5f      	subs	r7, r3, #1
     43c:	41bb      	sbcs	r3, r7

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
     43e:	0040      	lsls	r0, r0, #1
     440:	4318      	orrs	r0, r3
     442:	b2c0      	uxtb	r0, r0
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     444:	61a5      	str	r5, [r4, #24]
     446:	3a01      	subs	r2, #1
     448:	b2d2      	uxtb	r2, r2

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
    uint8_t byte = 0x00;

    for (uint8_t i = 0; i<8; ++i) {
     44a:	2a00      	cmp	r2, #0
     44c:	d1f2      	bne.n	434 <getByte+0x3c>
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
        SaLDigitalOut(SCK_PIN,TRUE);
    }
    return byte;
}
     44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     450:	41004400 	.word	0x41004400

00000454 <SaLDelayInit>:
static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void SaLDelayInit(void) {
    cycles_per_ms = 41900000UL;
    cycles_per_ms /= 1000;
     454:	4b04      	ldr	r3, [pc, #16]	; (468 <SaLDelayInit+0x14>)
     456:	4a05      	ldr	r2, [pc, #20]	; (46c <SaLDelayInit+0x18>)
     458:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     45a:	2229      	movs	r2, #41	; 0x29
     45c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     45e:	3a24      	subs	r2, #36	; 0x24
     460:	4b03      	ldr	r3, [pc, #12]	; (470 <SaLDelayInit+0x1c>)
     462:	601a      	str	r2, [r3, #0]
}
     464:	4770      	bx	lr
     466:	46c0      	nop			; (mov r8, r8)
     468:	20000000 	.word	0x20000000
     46c:	0000a3ac 	.word	0x0000a3ac
     470:	e000e010 	.word	0xe000e010

00000474 <delay_us>:
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
     474:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     476:	4b08      	ldr	r3, [pc, #32]	; (498 <delay_us+0x24>)
     478:	685c      	ldr	r4, [r3, #4]
void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     47a:	4a08      	ldr	r2, [pc, #32]	; (49c <delay_us+0x28>)
        SysTick->VAL = 0;
     47c:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     47e:	2180      	movs	r1, #128	; 0x80
     480:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
    while (n--) {
     482:	e006      	b.n	492 <delay_us+0x1e>

void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     484:	2c00      	cmp	r4, #0
     486:	d004      	beq.n	492 <delay_us+0x1e>
        SysTick->LOAD = n;
     488:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     48a:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     48c:	6813      	ldr	r3, [r2, #0]
     48e:	420b      	tst	r3, r1
     490:	d0fc      	beq.n	48c <delay_us+0x18>
     492:	3801      	subs	r0, #1
     494:	d2f6      	bcs.n	484 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     496:	bd30      	pop	{r4, r5, pc}
     498:	20000000 	.word	0x20000000
     49c:	e000e010 	.word	0xe000e010

000004a0 <SaLPinMode>:


#include <SaLPort.h>

void SaLPinMode(uint8_t pin,uint8_t DIR) {
     4a0:	b510      	push	{r4, lr}
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     4a2:	09c2      	lsrs	r2, r0, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     4a4:	2300      	movs	r3, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     4a6:	2a00      	cmp	r2, #0
     4a8:	d104      	bne.n	4b4 <SaLPinMode+0x14>
        return &(ports[port_index]->Group[group_index]);
     4aa:	0943      	lsrs	r3, r0, #5
     4ac:	01db      	lsls	r3, r3, #7
     4ae:	4a11      	ldr	r2, [pc, #68]	; (4f4 <SaLPinMode+0x54>)
     4b0:	4694      	mov	ip, r2
     4b2:	4463      	add	r3, ip
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     4b4:	221f      	movs	r2, #31
     4b6:	4002      	ands	r2, r0
     4b8:	2401      	movs	r4, #1
     4ba:	4094      	lsls	r4, r2

    if ( DIR == OUTPUT) {
     4bc:	2901      	cmp	r1, #1
     4be:	d105      	bne.n	4cc <SaLPinMode+0x2c>
        port->DIRSET.reg = pin_mask;
     4c0:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0;
     4c2:	1818      	adds	r0, r3, r0
     4c4:	3040      	adds	r0, #64	; 0x40
     4c6:	2300      	movs	r3, #0
     4c8:	7003      	strb	r3, [r0, #0]
     4ca:	e012      	b.n	4f2 <SaLPinMode+0x52>

    } else if(DIR == INPUT) {
     4cc:	2900      	cmp	r1, #0
     4ce:	d109      	bne.n	4e4 <SaLPinMode+0x44>
        port->DIRCLR.reg = pin_mask;
     4d0:	605c      	str	r4, [r3, #4]
        port->PINCFG[pin].reg = PORT_PINCFG_INEN;
     4d2:	1818      	adds	r0, r3, r0
     4d4:	3040      	adds	r0, #64	; 0x40
     4d6:	2302      	movs	r3, #2
     4d8:	7003      	strb	r3, [r0, #0]
        port->PINCFG[pin].reg |= PORT_PINCFG_PULLEN;
     4da:	7802      	ldrb	r2, [r0, #0]
     4dc:	3302      	adds	r3, #2
     4de:	4313      	orrs	r3, r2
     4e0:	7003      	strb	r3, [r0, #0]
     4e2:	e006      	b.n	4f2 <SaLPinMode+0x52>
    } else if (DIR == OUTSTRONG) {
     4e4:	2903      	cmp	r1, #3
     4e6:	d104      	bne.n	4f2 <SaLPinMode+0x52>
        port->DIRSET.reg = pin_mask;
     4e8:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0x40;
     4ea:	1818      	adds	r0, r3, r0
     4ec:	3040      	adds	r0, #64	; 0x40
     4ee:	2340      	movs	r3, #64	; 0x40
     4f0:	7003      	strb	r3, [r0, #0]

    }
     4f2:	bd10      	pop	{r4, pc}
     4f4:	41004400 	.word	0x41004400

000004f8 <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     4f8:	f3ef 8305 	mrs	r3, IPSR
     4fc:	e7fc      	b.n	4f8 <Dummy_Handler>
     4fe:	46c0      	nop			; (mov r8, r8)

00000500 <Reset_Handler>:
     500:	b570      	push	{r4, r5, r6, lr}
     502:	4b2e      	ldr	r3, [pc, #184]	; (5bc <Reset_Handler+0xbc>)
     504:	4a2e      	ldr	r2, [pc, #184]	; (5c0 <Reset_Handler+0xc0>)
     506:	429a      	cmp	r2, r3
     508:	d003      	beq.n	512 <Reset_Handler+0x12>
     50a:	4b2e      	ldr	r3, [pc, #184]	; (5c4 <Reset_Handler+0xc4>)
     50c:	4a2b      	ldr	r2, [pc, #172]	; (5bc <Reset_Handler+0xbc>)
     50e:	429a      	cmp	r2, r3
     510:	d304      	bcc.n	51c <Reset_Handler+0x1c>
     512:	4b2d      	ldr	r3, [pc, #180]	; (5c8 <Reset_Handler+0xc8>)
     514:	4a2d      	ldr	r2, [pc, #180]	; (5cc <Reset_Handler+0xcc>)
     516:	429a      	cmp	r2, r3
     518:	d310      	bcc.n	53c <Reset_Handler+0x3c>
     51a:	e01e      	b.n	55a <Reset_Handler+0x5a>
     51c:	4a2c      	ldr	r2, [pc, #176]	; (5d0 <Reset_Handler+0xd0>)
     51e:	4b29      	ldr	r3, [pc, #164]	; (5c4 <Reset_Handler+0xc4>)
     520:	3303      	adds	r3, #3
     522:	1a9b      	subs	r3, r3, r2
     524:	089b      	lsrs	r3, r3, #2
     526:	3301      	adds	r3, #1
     528:	009b      	lsls	r3, r3, #2
     52a:	2200      	movs	r2, #0
     52c:	4823      	ldr	r0, [pc, #140]	; (5bc <Reset_Handler+0xbc>)
     52e:	4924      	ldr	r1, [pc, #144]	; (5c0 <Reset_Handler+0xc0>)
     530:	588c      	ldr	r4, [r1, r2]
     532:	5084      	str	r4, [r0, r2]
     534:	3204      	adds	r2, #4
     536:	429a      	cmp	r2, r3
     538:	d1fa      	bne.n	530 <Reset_Handler+0x30>
     53a:	e7ea      	b.n	512 <Reset_Handler+0x12>
     53c:	4a25      	ldr	r2, [pc, #148]	; (5d4 <Reset_Handler+0xd4>)
     53e:	4b22      	ldr	r3, [pc, #136]	; (5c8 <Reset_Handler+0xc8>)
     540:	3303      	adds	r3, #3
     542:	1a9b      	subs	r3, r3, r2
     544:	089b      	lsrs	r3, r3, #2
     546:	3301      	adds	r3, #1
     548:	009b      	lsls	r3, r3, #2
     54a:	2200      	movs	r2, #0
     54c:	481f      	ldr	r0, [pc, #124]	; (5cc <Reset_Handler+0xcc>)
     54e:	2100      	movs	r1, #0
     550:	1814      	adds	r4, r2, r0
     552:	6021      	str	r1, [r4, #0]
     554:	3204      	adds	r2, #4
     556:	429a      	cmp	r2, r3
     558:	d1fa      	bne.n	550 <Reset_Handler+0x50>
     55a:	4a1f      	ldr	r2, [pc, #124]	; (5d8 <Reset_Handler+0xd8>)
     55c:	21ff      	movs	r1, #255	; 0xff
     55e:	4b1f      	ldr	r3, [pc, #124]	; (5dc <Reset_Handler+0xdc>)
     560:	438b      	bics	r3, r1
     562:	6093      	str	r3, [r2, #8]
     564:	39fd      	subs	r1, #253	; 0xfd
     566:	2390      	movs	r3, #144	; 0x90
     568:	005b      	lsls	r3, r3, #1
     56a:	4a1d      	ldr	r2, [pc, #116]	; (5e0 <Reset_Handler+0xe0>)
     56c:	50d1      	str	r1, [r2, r3]
     56e:	481d      	ldr	r0, [pc, #116]	; (5e4 <Reset_Handler+0xe4>)
     570:	78c3      	ldrb	r3, [r0, #3]
     572:	2403      	movs	r4, #3
     574:	43a3      	bics	r3, r4
     576:	2202      	movs	r2, #2
     578:	4313      	orrs	r3, r2
     57a:	70c3      	strb	r3, [r0, #3]
     57c:	78c3      	ldrb	r3, [r0, #3]
     57e:	260c      	movs	r6, #12
     580:	43b3      	bics	r3, r6
     582:	2108      	movs	r1, #8
     584:	430b      	orrs	r3, r1
     586:	70c3      	strb	r3, [r0, #3]
     588:	4b17      	ldr	r3, [pc, #92]	; (5e8 <Reset_Handler+0xe8>)
     58a:	7b98      	ldrb	r0, [r3, #14]
     58c:	2530      	movs	r5, #48	; 0x30
     58e:	43a8      	bics	r0, r5
     590:	1c05      	adds	r5, r0, #0
     592:	2020      	movs	r0, #32
     594:	4328      	orrs	r0, r5
     596:	7398      	strb	r0, [r3, #14]
     598:	7b98      	ldrb	r0, [r3, #14]
     59a:	43b0      	bics	r0, r6
     59c:	4301      	orrs	r1, r0
     59e:	7399      	strb	r1, [r3, #14]
     5a0:	7b99      	ldrb	r1, [r3, #14]
     5a2:	43a1      	bics	r1, r4
     5a4:	430a      	orrs	r2, r1
     5a6:	739a      	strb	r2, [r3, #14]
     5a8:	4a10      	ldr	r2, [pc, #64]	; (5ec <Reset_Handler+0xec>)
     5aa:	6851      	ldr	r1, [r2, #4]
     5ac:	2380      	movs	r3, #128	; 0x80
     5ae:	430b      	orrs	r3, r1
     5b0:	6053      	str	r3, [r2, #4]
     5b2:	4b0f      	ldr	r3, [pc, #60]	; (5f0 <Reset_Handler+0xf0>)
     5b4:	4798      	blx	r3
     5b6:	4b0f      	ldr	r3, [pc, #60]	; (5f4 <Reset_Handler+0xf4>)
     5b8:	4798      	blx	r3
     5ba:	e7fe      	b.n	5ba <Reset_Handler+0xba>
     5bc:	20000000 	.word	0x20000000
     5c0:	0000115c 	.word	0x0000115c
     5c4:	20000438 	.word	0x20000438
     5c8:	2000045c 	.word	0x2000045c
     5cc:	20000438 	.word	0x20000438
     5d0:	20000004 	.word	0x20000004
     5d4:	2000043c 	.word	0x2000043c
     5d8:	e000ed00 	.word	0xe000ed00
     5dc:	00000000 	.word	0x00000000
     5e0:	41007000 	.word	0x41007000
     5e4:	41005000 	.word	0x41005000
     5e8:	41004800 	.word	0x41004800
     5ec:	41004000 	.word	0x41004000
     5f0:	00000f79 	.word	0x00000f79
     5f4:	000007b5 	.word	0x000007b5

000005f8 <SystemInit>:
     5f8:	4a01      	ldr	r2, [pc, #4]	; (600 <SystemInit+0x8>)
     5fa:	4b02      	ldr	r3, [pc, #8]	; (604 <SystemInit+0xc>)
     5fc:	601a      	str	r2, [r3, #0]
     5fe:	4770      	bx	lr
     600:	000f4240 	.word	0x000f4240
     604:	20000008 	.word	0x20000008

00000608 <GclkInit>:
float accelDataZ[1000];
float currentHeight[1000];

void GclkInit() {

    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     608:	491e      	ldr	r1, [pc, #120]	; (684 <GclkInit+0x7c>)
     60a:	23c2      	movs	r3, #194	; 0xc2
     60c:	00db      	lsls	r3, r3, #3
     60e:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 1;
     610:	481d      	ldr	r0, [pc, #116]	; (688 <GclkInit+0x80>)
     612:	6843      	ldr	r3, [r0, #4]
     614:	221e      	movs	r2, #30
     616:	4393      	bics	r3, r2
     618:	3a1c      	subs	r2, #28
     61a:	4313      	orrs	r3, r2
     61c:	6043      	str	r3, [r0, #4]

    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     61e:	4b1b      	ldr	r3, [pc, #108]	; (68c <GclkInit+0x84>)
     620:	828b      	strh	r3, [r1, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);
    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     622:	68cb      	ldr	r3, [r1, #12]
     624:	421a      	tst	r2, r3
     626:	d0fc      	beq.n	622 <GclkInit+0x1a>

    //config xosc32k for the dfll via gen1
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(1) |
     628:	4b19      	ldr	r3, [pc, #100]	; (690 <GclkInit+0x88>)
     62a:	2202      	movs	r2, #2
     62c:	32ff      	adds	r2, #255	; 0xff
     62e:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) |
     630:	4a18      	ldr	r2, [pc, #96]	; (694 <GclkInit+0x8c>)
     632:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_XOSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(1) |
     634:	2282      	movs	r2, #130	; 0x82
     636:	01d2      	lsls	r2, r2, #7
     638:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_ID_DFLL48;

    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(2) |
     63a:	2281      	movs	r2, #129	; 0x81
     63c:	0052      	lsls	r2, r2, #1
     63e:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     640:	4a15      	ldr	r2, [pc, #84]	; (698 <GclkInit+0x90>)
     642:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(2) |
     644:	4a15      	ldr	r2, [pc, #84]	; (69c <GclkInit+0x94>)
     646:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_ID(TC3_GCLK_ID);

    //Configure the FDLL48MHz FLL, we will use this to provide a clock to the CPU
    //Set the course and fine step sizes, these should be less than 50% of the values used for the course and fine values (P150)
    SYSCTRL->DFLLCTRL.reg = (SYSCTRL_DFLLCTRL_ENABLE); //Enable the DFLL
     648:	4b0e      	ldr	r3, [pc, #56]	; (684 <GclkInit+0x7c>)
     64a:	2202      	movs	r2, #2
     64c:	849a      	strh	r2, [r3, #36]	; 0x24
    SYSCTRL->DFLLMUL.reg = (SYSCTRL_DFLLMUL_CSTEP(7) | SYSCTRL_DFLLMUL_FSTEP(30));
     64e:	4a14      	ldr	r2, [pc, #80]	; (6a0 <GclkInit+0x98>)
     650:	62da      	str	r2, [r3, #44]	; 0x2c
    SYSCTRL->DFLLMUL.reg |= (SYSCTRL_DFLLMUL_MUL(1280));
     652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     654:	21a0      	movs	r1, #160	; 0xa0
     656:	00c9      	lsls	r1, r1, #3
     658:	430a      	orrs	r2, r1
     65a:	62da      	str	r2, [r3, #44]	; 0x2c
    SYSCTRL->DFLLCTRL.reg |= (SYSCTRL_DFLLCTRL_MODE);
     65c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
     65e:	2204      	movs	r2, #4
     660:	430a      	orrs	r2, r1
     662:	849a      	strh	r2, [r3, #36]	; 0x24
    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     664:	1c19      	adds	r1, r3, #0
     666:	2210      	movs	r2, #16
     668:	68cb      	ldr	r3, [r1, #12]
     66a:	421a      	tst	r2, r3
     66c:	d0fc      	beq.n	668 <GclkInit+0x60>
    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(2)  | GCLK_GENDIV_ID(0));
     66e:	4b08      	ldr	r3, [pc, #32]	; (690 <GclkInit+0x88>)
     670:	2280      	movs	r2, #128	; 0x80
     672:	0092      	lsls	r2, r2, #2
     674:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     676:	4a0b      	ldr	r2, [pc, #44]	; (6a4 <GclkInit+0x9c>)
     678:	605a      	str	r2, [r3, #4]
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN ) ;
     67a:	2280      	movs	r2, #128	; 0x80
     67c:	01d2      	lsls	r2, r2, #7
     67e:	805a      	strh	r2, [r3, #2]
    //set up OSC8M
}
     680:	4770      	bx	lr
     682:	46c0      	nop			; (mov r8, r8)
     684:	40000800 	.word	0x40000800
     688:	41004000 	.word	0x41004000
     68c:	0000060e 	.word	0x0000060e
     690:	40000c00 	.word	0x40000c00
     694:	00010501 	.word	0x00010501
     698:	00010402 	.word	0x00010402
     69c:	0000421b 	.word	0x0000421b
     6a0:	1c1e0000 	.word	0x1c1e0000
     6a4:	00010700 	.word	0x00010700

000006a8 <PinConfig>:
void PinConfig() {
     6a8:	b538      	push	{r3, r4, r5, lr}
    /* temp SS HIGH for other peripherals */
    SaLPinMode(PIN_PA07,INPUT);
     6aa:	2007      	movs	r0, #7
     6ac:	2100      	movs	r1, #0
     6ae:	4c0c      	ldr	r4, [pc, #48]	; (6e0 <PinConfig+0x38>)
     6b0:	47a0      	blx	r4
    SaLPinMode(PIN_PA10,OUTPUT);
     6b2:	200a      	movs	r0, #10
     6b4:	2101      	movs	r1, #1
     6b6:	47a0      	blx	r4
    SaLPinMode(PIN_PA08,OUTPUT);
     6b8:	2008      	movs	r0, #8
     6ba:	2101      	movs	r1, #1
     6bc:	47a0      	blx	r4
    SaLPinMode(BUZZER,OUTSTRONG);
     6be:	200c      	movs	r0, #12
     6c0:	2103      	movs	r1, #3
     6c2:	47a0      	blx	r4
	volatile PortGroup *const port = SaLGetPort(pin);
	uint32_t pin_mask = (1UL << (pin % 32));
	

	if (level) {
		port->OUTSET.reg = pin_mask;
     6c4:	4d07      	ldr	r5, [pc, #28]	; (6e4 <PinConfig+0x3c>)
     6c6:	2380      	movs	r3, #128	; 0x80
     6c8:	00db      	lsls	r3, r3, #3
     6ca:	61ab      	str	r3, [r5, #24]
     6cc:	2380      	movs	r3, #128	; 0x80
     6ce:	005b      	lsls	r3, r3, #1
     6d0:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(PIN_PA10,true);
    SaLDigitalOut(PIN_PA08,true);
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     6d2:	2009      	movs	r0, #9
     6d4:	2101      	movs	r1, #1
     6d6:	47a0      	blx	r4
     6d8:	2380      	movs	r3, #128	; 0x80
     6da:	009b      	lsls	r3, r3, #2
     6dc:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
     6de:	bd38      	pop	{r3, r4, r5, pc}
     6e0:	000004a1 	.word	0x000004a1
     6e4:	41004400 	.word	0x41004400

000006e8 <RTCInit>:

void RTCInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE | SYSCTRL_OSC32K_EN1K;
     6e8:	220a      	movs	r2, #10
     6ea:	4b21      	ldr	r3, [pc, #132]	; (770 <RTCInit+0x88>)
     6ec:	619a      	str	r2, [r3, #24]
    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);
     6ee:	1c19      	adds	r1, r3, #0
     6f0:	3a06      	subs	r2, #6
     6f2:	68cb      	ldr	r3, [r1, #12]
     6f4:	421a      	tst	r2, r3
     6f6:	d0fc      	beq.n	6f2 <RTCInit+0xa>

    SYSCTRL->OSC8M.reg = SYSCTRL_OSC8M_ENABLE;
     6f8:	2202      	movs	r2, #2
     6fa:	4b1d      	ldr	r3, [pc, #116]	; (770 <RTCInit+0x88>)
     6fc:	621a      	str	r2, [r3, #32]
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     6fe:	4b1d      	ldr	r3, [pc, #116]	; (774 <RTCInit+0x8c>)
     700:	3201      	adds	r2, #1
     702:	32ff      	adds	r2, #255	; 0xff
     704:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) | GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
     706:	4a1c      	ldr	r2, [pc, #112]	; (778 <RTCInit+0x90>)
     708:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_IDC | GCLK_GENCTRL_RUNSTDBY | GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     70a:	1c1a      	adds	r2, r3, #0
     70c:	7853      	ldrb	r3, [r2, #1]
     70e:	b25b      	sxtb	r3, r3
     710:	2b00      	cmp	r3, #0
     712:	dbfb      	blt.n	70c <RTCInit+0x24>

    // Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     714:	4a19      	ldr	r2, [pc, #100]	; (77c <RTCInit+0x94>)
     716:	4b17      	ldr	r3, [pc, #92]	; (774 <RTCInit+0x8c>)
     718:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     71a:	2204      	movs	r2, #4
     71c:	4b18      	ldr	r3, [pc, #96]	; (780 <RTCInit+0x98>)
     71e:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     720:	1c1a      	adds	r2, r3, #0
     722:	7a93      	ldrb	r3, [r2, #10]
     724:	09db      	lsrs	r3, r3, #7
     726:	d1fc      	bne.n	722 <RTCInit+0x3a>

    // Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     728:	4a15      	ldr	r2, [pc, #84]	; (780 <RTCInit+0x98>)
     72a:	8811      	ldrh	r1, [r2, #0]
     72c:	23a0      	movs	r3, #160	; 0xa0
     72e:	00db      	lsls	r3, r3, #3
     730:	430b      	orrs	r3, r1
     732:	8013      	strh	r3, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     734:	7a93      	ldrb	r3, [r2, #10]
     736:	09db      	lsrs	r3, r3, #7
     738:	d1fc      	bne.n	734 <RTCInit+0x4c>

    RTC->MODE1.PER.reg = 998;
     73a:	4a12      	ldr	r2, [pc, #72]	; (784 <RTCInit+0x9c>)
     73c:	4b10      	ldr	r3, [pc, #64]	; (780 <RTCInit+0x98>)
     73e:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     740:	1c1a      	adds	r2, r3, #0
     742:	7a93      	ldrb	r3, [r2, #10]
     744:	09db      	lsrs	r3, r3, #7
     746:	d1fc      	bne.n	742 <RTCInit+0x5a>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     748:	4b0d      	ldr	r3, [pc, #52]	; (780 <RTCInit+0x98>)
     74a:	8859      	ldrh	r1, [r3, #2]
     74c:	4a0e      	ldr	r2, [pc, #56]	; (788 <RTCInit+0xa0>)
     74e:	430a      	orrs	r2, r1
     750:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     752:	2280      	movs	r2, #128	; 0x80
     754:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     756:	8819      	ldrh	r1, [r3, #0]
     758:	2202      	movs	r2, #2
     75a:	430a      	orrs	r2, r1
     75c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     75e:	1c1a      	adds	r2, r3, #0
     760:	7a93      	ldrb	r3, [r2, #10]
     762:	09db      	lsrs	r3, r3, #7
     764:	d1fc      	bne.n	760 <RTCInit+0x78>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     766:	2208      	movs	r2, #8
     768:	4b08      	ldr	r3, [pc, #32]	; (78c <RTCInit+0xa4>)
     76a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     76c:	4770      	bx	lr
     76e:	46c0      	nop			; (mov r8, r8)
     770:	40000800 	.word	0x40000800
     774:	40000c00 	.word	0x40000c00
     778:	00230002 	.word	0x00230002
     77c:	00004204 	.word	0x00004204
     780:	40001400 	.word	0x40001400
     784:	000003e6 	.word	0x000003e6
     788:	00004010 	.word	0x00004010
     78c:	e000e100 	.word	0xe000e100

00000790 <RTC_Handler>:

void RTC_Handler(void) {
    time_ms += 1000;
     790:	4a06      	ldr	r2, [pc, #24]	; (7ac <RTC_Handler+0x1c>)
     792:	6813      	ldr	r3, [r2, #0]
     794:	21fa      	movs	r1, #250	; 0xfa
     796:	0089      	lsls	r1, r1, #2
     798:	468c      	mov	ip, r1
     79a:	4463      	add	r3, ip
     79c:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.bit.OVF = 1;
     79e:	4a04      	ldr	r2, [pc, #16]	; (7b0 <RTC_Handler+0x20>)
     7a0:	7a13      	ldrb	r3, [r2, #8]
     7a2:	2180      	movs	r1, #128	; 0x80
     7a4:	4249      	negs	r1, r1
     7a6:	430b      	orrs	r3, r1
     7a8:	7213      	strb	r3, [r2, #8]
}
     7aa:	4770      	bx	lr
     7ac:	20000454 	.word	0x20000454
     7b0:	40001400 	.word	0x40001400

000007b4 <main>:
    return ms;
}

volatile uint32_t counter = 0;

int main(void) {
     7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7b6:	4647      	mov	r7, r8
     7b8:	b480      	push	{r7}
     7ba:	b092      	sub	sp, #72	; 0x48
    SystemInit();
     7bc:	4b21      	ldr	r3, [pc, #132]	; (844 <main+0x90>)
     7be:	4798      	blx	r3
    SaLDelayInit();
     7c0:	4b21      	ldr	r3, [pc, #132]	; (848 <main+0x94>)
     7c2:	4798      	blx	r3
    GclkInit();
     7c4:	4b21      	ldr	r3, [pc, #132]	; (84c <main+0x98>)
     7c6:	4798      	blx	r3
    RTCInit();
     7c8:	4b21      	ldr	r3, [pc, #132]	; (850 <main+0x9c>)
     7ca:	4798      	blx	r3
    PinConfig();
     7cc:	4b21      	ldr	r3, [pc, #132]	; (854 <main+0xa0>)
     7ce:	4798      	blx	r3

    Accelerometer myAccelerometer;
    initAccelerometer(&myAccelerometer);
     7d0:	a80c      	add	r0, sp, #48	; 0x30
     7d2:	4b21      	ldr	r3, [pc, #132]	; (858 <main+0xa4>)
     7d4:	4798      	blx	r3

    Barometer myBarometer;
    initBarometer(&myBarometer);
     7d6:	a805      	add	r0, sp, #20
     7d8:	4b20      	ldr	r3, [pc, #128]	; (85c <main+0xa8>)
     7da:	4798      	blx	r3

    getAccelEvent(&myAccelerometer);
     7dc:	a80c      	add	r0, sp, #48	; 0x30
     7de:	4b20      	ldr	r3, [pc, #128]	; (860 <main+0xac>)
     7e0:	4798      	blx	r3

    volatile float accelX = 0;
     7e2:	2300      	movs	r3, #0
     7e4:	9304      	str	r3, [sp, #16]
    volatile float accelY = 0;
     7e6:	9303      	str	r3, [sp, #12]
    volatile float accelZ = 0;
     7e8:	9302      	str	r3, [sp, #8]
     7ea:	2208      	movs	r2, #8
     7ec:	4b1d      	ldr	r3, [pc, #116]	; (864 <main+0xb0>)
     7ee:	601a      	str	r2, [r3, #0]

    //startUpTone();
    NVIC_EnableIRQ(RTC_IRQn);
    uint32_t lasttime = 0;
    uint32_t index = 0;
    volatile uint32_t seconds = 0;
     7f0:	2300      	movs	r3, #0
     7f2:	9301      	str	r3, [sp, #4]
    volatile uint32_t milliseconds = 0;
     7f4:	9300      	str	r3, [sp, #0]
    volatile float accelY = 0;
    volatile float accelZ = 0;

    //startUpTone();
    NVIC_EnableIRQ(RTC_IRQn);
    uint32_t lasttime = 0;
     7f6:	2500      	movs	r5, #0
    uint32_t index = 0;
    volatile uint32_t seconds = 0;
    volatile uint32_t milliseconds = 0;
    while (1) {
        counter++;
     7f8:	481b      	ldr	r0, [pc, #108]	; (868 <main+0xb4>)
static uint32_t millis(void) {
    uint32_t ms;

    ATOMIC_SECTION_ENTER

    ms = time_ms + RTC->MODE1.COUNT.reg;
     7fa:	4c1c      	ldr	r4, [pc, #112]	; (86c <main+0xb8>)

    if (RTC->MODE1.INTFLAG.bit.OVF)
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     7fc:	1c07      	adds	r7, r0, #0
    volatile uint32_t milliseconds = 0;
    while (1) {
        counter++;
        milliseconds = millis();

        if (milliseconds - lasttime > 1000) {
     7fe:	26fa      	movs	r6, #250	; 0xfa
     800:	00b6      	lsls	r6, r6, #2
    uint32_t lasttime = 0;
    uint32_t index = 0;
    volatile uint32_t seconds = 0;
    volatile uint32_t milliseconds = 0;
    while (1) {
        counter++;
     802:	6843      	ldr	r3, [r0, #4]
     804:	3301      	adds	r3, #1
     806:	6043      	str	r3, [r0, #4]
}

static uint32_t millis(void) {
    uint32_t ms;

    ATOMIC_SECTION_ENTER
     808:	f3ef 8c10 	mrs	ip, PRIMASK
     80c:	b672      	cpsid	i

    ms = time_ms + RTC->MODE1.COUNT.reg;
     80e:	8a23      	ldrh	r3, [r4, #16]
     810:	b29b      	uxth	r3, r3
     812:	6802      	ldr	r2, [r0, #0]

    if (RTC->MODE1.INTFLAG.bit.OVF)
     814:	7a21      	ldrb	r1, [r4, #8]
     816:	09c9      	lsrs	r1, r1, #7
static uint32_t millis(void) {
    uint32_t ms;

    ATOMIC_SECTION_ENTER

    ms = time_ms + RTC->MODE1.COUNT.reg;
     818:	189b      	adds	r3, r3, r2

    if (RTC->MODE1.INTFLAG.bit.OVF)
     81a:	2900      	cmp	r1, #0
     81c:	d006      	beq.n	82c <main+0x78>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     81e:	8a22      	ldrh	r2, [r4, #16]
     820:	683b      	ldr	r3, [r7, #0]
     822:	21fa      	movs	r1, #250	; 0xfa
     824:	0089      	lsls	r1, r1, #2
     826:	4688      	mov	r8, r1
     828:	4443      	add	r3, r8
     82a:	18d3      	adds	r3, r2, r3

    ATOMIC_SECTION_LEAVE
     82c:	f38c 8810 	msr	PRIMASK, ip
    uint32_t index = 0;
    volatile uint32_t seconds = 0;
    volatile uint32_t milliseconds = 0;
    while (1) {
        counter++;
        milliseconds = millis();
     830:	9300      	str	r3, [sp, #0]

        if (milliseconds - lasttime > 1000) {
     832:	9b00      	ldr	r3, [sp, #0]
     834:	1b5b      	subs	r3, r3, r5
     836:	42b3      	cmp	r3, r6
     838:	d9e3      	bls.n	802 <main+0x4e>
            lasttime = milliseconds;
     83a:	9d00      	ldr	r5, [sp, #0]
            //SaLPlayTone(400);
            seconds++;
     83c:	9b01      	ldr	r3, [sp, #4]
     83e:	3301      	adds	r3, #1
     840:	9301      	str	r3, [sp, #4]
     842:	e7de      	b.n	802 <main+0x4e>
     844:	000005f9 	.word	0x000005f9
     848:	00000455 	.word	0x00000455
     84c:	00000609 	.word	0x00000609
     850:	000006e9 	.word	0x000006e9
     854:	000006a9 	.word	0x000006a9
     858:	000001cd 	.word	0x000001cd
     85c:	0000033d 	.word	0x0000033d
     860:	0000025d 	.word	0x0000025d
     864:	e000e100 	.word	0xe000e100
     868:	20000454 	.word	0x20000454
     86c:	40001400 	.word	0x40001400

00000870 <__aeabi_dmul>:
     870:	b5f0      	push	{r4, r5, r6, r7, lr}
     872:	465f      	mov	r7, fp
     874:	4656      	mov	r6, sl
     876:	464d      	mov	r5, r9
     878:	4644      	mov	r4, r8
     87a:	b4f0      	push	{r4, r5, r6, r7}
     87c:	1c05      	adds	r5, r0, #0
     87e:	1c06      	adds	r6, r0, #0
     880:	0308      	lsls	r0, r1, #12
     882:	b087      	sub	sp, #28
     884:	4699      	mov	r9, r3
     886:	004f      	lsls	r7, r1, #1
     888:	0b03      	lsrs	r3, r0, #12
     88a:	0fcc      	lsrs	r4, r1, #31
     88c:	4692      	mov	sl, r2
     88e:	469b      	mov	fp, r3
     890:	0d7f      	lsrs	r7, r7, #21
     892:	9401      	str	r4, [sp, #4]
     894:	d067      	beq.n	966 <__aeabi_dmul+0xf6>
     896:	4b6c      	ldr	r3, [pc, #432]	; (a48 <__aeabi_dmul+0x1d8>)
     898:	429f      	cmp	r7, r3
     89a:	d036      	beq.n	90a <__aeabi_dmul+0x9a>
     89c:	2080      	movs	r0, #128	; 0x80
     89e:	465b      	mov	r3, fp
     8a0:	0340      	lsls	r0, r0, #13
     8a2:	4318      	orrs	r0, r3
     8a4:	00c0      	lsls	r0, r0, #3
     8a6:	0f6b      	lsrs	r3, r5, #29
     8a8:	4318      	orrs	r0, r3
     8aa:	4b68      	ldr	r3, [pc, #416]	; (a4c <__aeabi_dmul+0x1dc>)
     8ac:	4683      	mov	fp, r0
     8ae:	469c      	mov	ip, r3
     8b0:	2300      	movs	r3, #0
     8b2:	4698      	mov	r8, r3
     8b4:	00ee      	lsls	r6, r5, #3
     8b6:	4467      	add	r7, ip
     8b8:	9300      	str	r3, [sp, #0]
     8ba:	464b      	mov	r3, r9
     8bc:	4649      	mov	r1, r9
     8be:	031d      	lsls	r5, r3, #12
     8c0:	0fc9      	lsrs	r1, r1, #31
     8c2:	005b      	lsls	r3, r3, #1
     8c4:	4652      	mov	r2, sl
     8c6:	0b2d      	lsrs	r5, r5, #12
     8c8:	0d5b      	lsrs	r3, r3, #21
     8ca:	4689      	mov	r9, r1
     8cc:	d100      	bne.n	8d0 <__aeabi_dmul+0x60>
     8ce:	e06e      	b.n	9ae <__aeabi_dmul+0x13e>
     8d0:	495d      	ldr	r1, [pc, #372]	; (a48 <__aeabi_dmul+0x1d8>)
     8d2:	428b      	cmp	r3, r1
     8d4:	d064      	beq.n	9a0 <__aeabi_dmul+0x130>
     8d6:	2080      	movs	r0, #128	; 0x80
     8d8:	495c      	ldr	r1, [pc, #368]	; (a4c <__aeabi_dmul+0x1dc>)
     8da:	0340      	lsls	r0, r0, #13
     8dc:	468c      	mov	ip, r1
     8de:	2100      	movs	r1, #0
     8e0:	4305      	orrs	r5, r0
     8e2:	00ed      	lsls	r5, r5, #3
     8e4:	0f50      	lsrs	r0, r2, #29
     8e6:	4305      	orrs	r5, r0
     8e8:	00d2      	lsls	r2, r2, #3
     8ea:	4463      	add	r3, ip
     8ec:	4648      	mov	r0, r9
     8ee:	18ff      	adds	r7, r7, r3
     8f0:	1c7b      	adds	r3, r7, #1
     8f2:	469a      	mov	sl, r3
     8f4:	9b00      	ldr	r3, [sp, #0]
     8f6:	4060      	eors	r0, r4
     8f8:	9002      	str	r0, [sp, #8]
     8fa:	430b      	orrs	r3, r1
     8fc:	2b0f      	cmp	r3, #15
     8fe:	d900      	bls.n	902 <__aeabi_dmul+0x92>
     900:	e0ac      	b.n	a5c <__aeabi_dmul+0x1ec>
     902:	4853      	ldr	r0, [pc, #332]	; (a50 <__aeabi_dmul+0x1e0>)
     904:	009b      	lsls	r3, r3, #2
     906:	58c3      	ldr	r3, [r0, r3]
     908:	469f      	mov	pc, r3
     90a:	465b      	mov	r3, fp
     90c:	431d      	orrs	r5, r3
     90e:	d000      	beq.n	912 <__aeabi_dmul+0xa2>
     910:	e082      	b.n	a18 <__aeabi_dmul+0x1a8>
     912:	2308      	movs	r3, #8
     914:	9300      	str	r3, [sp, #0]
     916:	2300      	movs	r3, #0
     918:	469b      	mov	fp, r3
     91a:	3302      	adds	r3, #2
     91c:	2600      	movs	r6, #0
     91e:	4698      	mov	r8, r3
     920:	e7cb      	b.n	8ba <__aeabi_dmul+0x4a>
     922:	9b02      	ldr	r3, [sp, #8]
     924:	9301      	str	r3, [sp, #4]
     926:	4643      	mov	r3, r8
     928:	2b02      	cmp	r3, #2
     92a:	d159      	bne.n	9e0 <__aeabi_dmul+0x170>
     92c:	2401      	movs	r4, #1
     92e:	2500      	movs	r5, #0
     930:	2600      	movs	r6, #0
     932:	9b01      	ldr	r3, [sp, #4]
     934:	401c      	ands	r4, r3
     936:	4b44      	ldr	r3, [pc, #272]	; (a48 <__aeabi_dmul+0x1d8>)
     938:	2100      	movs	r1, #0
     93a:	032d      	lsls	r5, r5, #12
     93c:	0d0a      	lsrs	r2, r1, #20
     93e:	0512      	lsls	r2, r2, #20
     940:	0b2d      	lsrs	r5, r5, #12
     942:	4315      	orrs	r5, r2
     944:	4a43      	ldr	r2, [pc, #268]	; (a54 <__aeabi_dmul+0x1e4>)
     946:	051b      	lsls	r3, r3, #20
     948:	4015      	ands	r5, r2
     94a:	431d      	orrs	r5, r3
     94c:	006d      	lsls	r5, r5, #1
     94e:	07e4      	lsls	r4, r4, #31
     950:	086d      	lsrs	r5, r5, #1
     952:	4325      	orrs	r5, r4
     954:	1c30      	adds	r0, r6, #0
     956:	1c29      	adds	r1, r5, #0
     958:	b007      	add	sp, #28
     95a:	bc3c      	pop	{r2, r3, r4, r5}
     95c:	4690      	mov	r8, r2
     95e:	4699      	mov	r9, r3
     960:	46a2      	mov	sl, r4
     962:	46ab      	mov	fp, r5
     964:	bdf0      	pop	{r4, r5, r6, r7, pc}
     966:	432b      	orrs	r3, r5
     968:	d04e      	beq.n	a08 <__aeabi_dmul+0x198>
     96a:	465b      	mov	r3, fp
     96c:	2b00      	cmp	r3, #0
     96e:	d100      	bne.n	972 <__aeabi_dmul+0x102>
     970:	e185      	b.n	c7e <__aeabi_dmul+0x40e>
     972:	4658      	mov	r0, fp
     974:	f000 fae2 	bl	f3c <__clzsi2>
     978:	1c02      	adds	r2, r0, #0
     97a:	2328      	movs	r3, #40	; 0x28
     97c:	1c29      	adds	r1, r5, #0
     97e:	1a9b      	subs	r3, r3, r2
     980:	1c16      	adds	r6, r2, #0
     982:	4658      	mov	r0, fp
     984:	40d9      	lsrs	r1, r3
     986:	3e08      	subs	r6, #8
     988:	40b0      	lsls	r0, r6
     98a:	1c0b      	adds	r3, r1, #0
     98c:	40b5      	lsls	r5, r6
     98e:	4303      	orrs	r3, r0
     990:	469b      	mov	fp, r3
     992:	1c2e      	adds	r6, r5, #0
     994:	2300      	movs	r3, #0
     996:	4f30      	ldr	r7, [pc, #192]	; (a58 <__aeabi_dmul+0x1e8>)
     998:	9300      	str	r3, [sp, #0]
     99a:	1abf      	subs	r7, r7, r2
     99c:	4698      	mov	r8, r3
     99e:	e78c      	b.n	8ba <__aeabi_dmul+0x4a>
     9a0:	4651      	mov	r1, sl
     9a2:	4329      	orrs	r1, r5
     9a4:	d12e      	bne.n	a04 <__aeabi_dmul+0x194>
     9a6:	2500      	movs	r5, #0
     9a8:	2200      	movs	r2, #0
     9aa:	2102      	movs	r1, #2
     9ac:	e79e      	b.n	8ec <__aeabi_dmul+0x7c>
     9ae:	4651      	mov	r1, sl
     9b0:	4329      	orrs	r1, r5
     9b2:	d023      	beq.n	9fc <__aeabi_dmul+0x18c>
     9b4:	2d00      	cmp	r5, #0
     9b6:	d100      	bne.n	9ba <__aeabi_dmul+0x14a>
     9b8:	e154      	b.n	c64 <__aeabi_dmul+0x3f4>
     9ba:	1c28      	adds	r0, r5, #0
     9bc:	f000 fabe 	bl	f3c <__clzsi2>
     9c0:	1c03      	adds	r3, r0, #0
     9c2:	2128      	movs	r1, #40	; 0x28
     9c4:	4650      	mov	r0, sl
     9c6:	1ac9      	subs	r1, r1, r3
     9c8:	1c1a      	adds	r2, r3, #0
     9ca:	40c8      	lsrs	r0, r1
     9cc:	4651      	mov	r1, sl
     9ce:	3a08      	subs	r2, #8
     9d0:	4091      	lsls	r1, r2
     9d2:	4095      	lsls	r5, r2
     9d4:	1c0a      	adds	r2, r1, #0
     9d6:	4305      	orrs	r5, r0
     9d8:	481f      	ldr	r0, [pc, #124]	; (a58 <__aeabi_dmul+0x1e8>)
     9da:	2100      	movs	r1, #0
     9dc:	1ac3      	subs	r3, r0, r3
     9de:	e785      	b.n	8ec <__aeabi_dmul+0x7c>
     9e0:	2b03      	cmp	r3, #3
     9e2:	d100      	bne.n	9e6 <__aeabi_dmul+0x176>
     9e4:	e1c2      	b.n	d6c <__aeabi_dmul+0x4fc>
     9e6:	2b01      	cmp	r3, #1
     9e8:	d000      	beq.n	9ec <__aeabi_dmul+0x17c>
     9ea:	e16d      	b.n	cc8 <__aeabi_dmul+0x458>
     9ec:	4644      	mov	r4, r8
     9ee:	9b01      	ldr	r3, [sp, #4]
     9f0:	2500      	movs	r5, #0
     9f2:	401c      	ands	r4, r3
     9f4:	b2e4      	uxtb	r4, r4
     9f6:	2300      	movs	r3, #0
     9f8:	2600      	movs	r6, #0
     9fa:	e79d      	b.n	938 <__aeabi_dmul+0xc8>
     9fc:	2500      	movs	r5, #0
     9fe:	2200      	movs	r2, #0
     a00:	2101      	movs	r1, #1
     a02:	e773      	b.n	8ec <__aeabi_dmul+0x7c>
     a04:	2103      	movs	r1, #3
     a06:	e771      	b.n	8ec <__aeabi_dmul+0x7c>
     a08:	2304      	movs	r3, #4
     a0a:	9300      	str	r3, [sp, #0]
     a0c:	2300      	movs	r3, #0
     a0e:	469b      	mov	fp, r3
     a10:	3301      	adds	r3, #1
     a12:	2600      	movs	r6, #0
     a14:	4698      	mov	r8, r3
     a16:	e750      	b.n	8ba <__aeabi_dmul+0x4a>
     a18:	230c      	movs	r3, #12
     a1a:	9300      	str	r3, [sp, #0]
     a1c:	3b09      	subs	r3, #9
     a1e:	4698      	mov	r8, r3
     a20:	e74b      	b.n	8ba <__aeabi_dmul+0x4a>
     a22:	2580      	movs	r5, #128	; 0x80
     a24:	2400      	movs	r4, #0
     a26:	032d      	lsls	r5, r5, #12
     a28:	2600      	movs	r6, #0
     a2a:	4b07      	ldr	r3, [pc, #28]	; (a48 <__aeabi_dmul+0x1d8>)
     a2c:	e784      	b.n	938 <__aeabi_dmul+0xc8>
     a2e:	464b      	mov	r3, r9
     a30:	46ab      	mov	fp, r5
     a32:	1c16      	adds	r6, r2, #0
     a34:	9301      	str	r3, [sp, #4]
     a36:	4688      	mov	r8, r1
     a38:	e775      	b.n	926 <__aeabi_dmul+0xb6>
     a3a:	9b02      	ldr	r3, [sp, #8]
     a3c:	46ab      	mov	fp, r5
     a3e:	1c16      	adds	r6, r2, #0
     a40:	9301      	str	r3, [sp, #4]
     a42:	4688      	mov	r8, r1
     a44:	e76f      	b.n	926 <__aeabi_dmul+0xb6>
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	000007ff 	.word	0x000007ff
     a4c:	fffffc01 	.word	0xfffffc01
     a50:	000010f0 	.word	0x000010f0
     a54:	800fffff 	.word	0x800fffff
     a58:	fffffc0d 	.word	0xfffffc0d
     a5c:	0c33      	lsrs	r3, r6, #16
     a5e:	0436      	lsls	r6, r6, #16
     a60:	0c36      	lsrs	r6, r6, #16
     a62:	469c      	mov	ip, r3
     a64:	1c33      	adds	r3, r6, #0
     a66:	0c14      	lsrs	r4, r2, #16
     a68:	0412      	lsls	r2, r2, #16
     a6a:	0c12      	lsrs	r2, r2, #16
     a6c:	4353      	muls	r3, r2
     a6e:	4698      	mov	r8, r3
     a70:	4663      	mov	r3, ip
     a72:	4353      	muls	r3, r2
     a74:	4699      	mov	r9, r3
     a76:	4663      	mov	r3, ip
     a78:	4363      	muls	r3, r4
     a7a:	9301      	str	r3, [sp, #4]
     a7c:	1c33      	adds	r3, r6, #0
     a7e:	4641      	mov	r1, r8
     a80:	4363      	muls	r3, r4
     a82:	0c09      	lsrs	r1, r1, #16
     a84:	444b      	add	r3, r9
     a86:	185b      	adds	r3, r3, r1
     a88:	4599      	cmp	r9, r3
     a8a:	d905      	bls.n	a98 <__aeabi_dmul+0x228>
     a8c:	2080      	movs	r0, #128	; 0x80
     a8e:	0240      	lsls	r0, r0, #9
     a90:	4681      	mov	r9, r0
     a92:	9901      	ldr	r1, [sp, #4]
     a94:	4449      	add	r1, r9
     a96:	9101      	str	r1, [sp, #4]
     a98:	0c19      	lsrs	r1, r3, #16
     a9a:	9103      	str	r1, [sp, #12]
     a9c:	4641      	mov	r1, r8
     a9e:	0409      	lsls	r1, r1, #16
     aa0:	0c09      	lsrs	r1, r1, #16
     aa2:	041b      	lsls	r3, r3, #16
     aa4:	185b      	adds	r3, r3, r1
     aa6:	9304      	str	r3, [sp, #16]
     aa8:	0c2b      	lsrs	r3, r5, #16
     aaa:	4698      	mov	r8, r3
     aac:	1c33      	adds	r3, r6, #0
     aae:	042d      	lsls	r5, r5, #16
     ab0:	0c29      	lsrs	r1, r5, #16
     ab2:	434b      	muls	r3, r1
     ab4:	4660      	mov	r0, ip
     ab6:	9300      	str	r3, [sp, #0]
     ab8:	4643      	mov	r3, r8
     aba:	4665      	mov	r5, ip
     abc:	4358      	muls	r0, r3
     abe:	435e      	muls	r6, r3
     ac0:	9b00      	ldr	r3, [sp, #0]
     ac2:	434d      	muls	r5, r1
     ac4:	0c1b      	lsrs	r3, r3, #16
     ac6:	4699      	mov	r9, r3
     ac8:	19ae      	adds	r6, r5, r6
     aca:	444e      	add	r6, r9
     acc:	4684      	mov	ip, r0
     ace:	42b5      	cmp	r5, r6
     ad0:	d903      	bls.n	ada <__aeabi_dmul+0x26a>
     ad2:	2380      	movs	r3, #128	; 0x80
     ad4:	025b      	lsls	r3, r3, #9
     ad6:	4699      	mov	r9, r3
     ad8:	44cc      	add	ip, r9
     ada:	0c35      	lsrs	r5, r6, #16
     adc:	1c2b      	adds	r3, r5, #0
     ade:	9803      	ldr	r0, [sp, #12]
     ae0:	4463      	add	r3, ip
     ae2:	4684      	mov	ip, r0
     ae4:	9305      	str	r3, [sp, #20]
     ae6:	9b00      	ldr	r3, [sp, #0]
     ae8:	0436      	lsls	r6, r6, #16
     aea:	041b      	lsls	r3, r3, #16
     aec:	0c1b      	lsrs	r3, r3, #16
     aee:	18f3      	adds	r3, r6, r3
     af0:	449c      	add	ip, r3
     af2:	4660      	mov	r0, ip
     af4:	9003      	str	r0, [sp, #12]
     af6:	4658      	mov	r0, fp
     af8:	0405      	lsls	r5, r0, #16
     afa:	0c06      	lsrs	r6, r0, #16
     afc:	0c28      	lsrs	r0, r5, #16
     afe:	4684      	mov	ip, r0
     b00:	4350      	muls	r0, r2
     b02:	1c35      	adds	r5, r6, #0
     b04:	4681      	mov	r9, r0
     b06:	4660      	mov	r0, ip
     b08:	4365      	muls	r5, r4
     b0a:	4344      	muls	r4, r0
     b0c:	4648      	mov	r0, r9
     b0e:	0c00      	lsrs	r0, r0, #16
     b10:	4683      	mov	fp, r0
     b12:	4372      	muls	r2, r6
     b14:	1914      	adds	r4, r2, r4
     b16:	445c      	add	r4, fp
     b18:	42a2      	cmp	r2, r4
     b1a:	d903      	bls.n	b24 <__aeabi_dmul+0x2b4>
     b1c:	2280      	movs	r2, #128	; 0x80
     b1e:	0252      	lsls	r2, r2, #9
     b20:	4693      	mov	fp, r2
     b22:	445d      	add	r5, fp
     b24:	0c22      	lsrs	r2, r4, #16
     b26:	18ad      	adds	r5, r5, r2
     b28:	464a      	mov	r2, r9
     b2a:	0412      	lsls	r2, r2, #16
     b2c:	0c12      	lsrs	r2, r2, #16
     b2e:	0424      	lsls	r4, r4, #16
     b30:	4640      	mov	r0, r8
     b32:	18a4      	adds	r4, r4, r2
     b34:	4662      	mov	r2, ip
     b36:	434a      	muls	r2, r1
     b38:	4371      	muls	r1, r6
     b3a:	4346      	muls	r6, r0
     b3c:	4660      	mov	r0, ip
     b3e:	9600      	str	r6, [sp, #0]
     b40:	4646      	mov	r6, r8
     b42:	4370      	muls	r0, r6
     b44:	4680      	mov	r8, r0
     b46:	0c10      	lsrs	r0, r2, #16
     b48:	4684      	mov	ip, r0
     b4a:	4488      	add	r8, r1
     b4c:	44e0      	add	r8, ip
     b4e:	4541      	cmp	r1, r8
     b50:	d905      	bls.n	b5e <__aeabi_dmul+0x2ee>
     b52:	2180      	movs	r1, #128	; 0x80
     b54:	0249      	lsls	r1, r1, #9
     b56:	468c      	mov	ip, r1
     b58:	9900      	ldr	r1, [sp, #0]
     b5a:	4461      	add	r1, ip
     b5c:	9100      	str	r1, [sp, #0]
     b5e:	9801      	ldr	r0, [sp, #4]
     b60:	9903      	ldr	r1, [sp, #12]
     b62:	4684      	mov	ip, r0
     b64:	4461      	add	r1, ip
     b66:	4299      	cmp	r1, r3
     b68:	419b      	sbcs	r3, r3
     b6a:	425b      	negs	r3, r3
     b6c:	4699      	mov	r9, r3
     b6e:	9805      	ldr	r0, [sp, #20]
     b70:	4643      	mov	r3, r8
     b72:	4684      	mov	ip, r0
     b74:	0412      	lsls	r2, r2, #16
     b76:	0c12      	lsrs	r2, r2, #16
     b78:	041b      	lsls	r3, r3, #16
     b7a:	189b      	adds	r3, r3, r2
     b7c:	4463      	add	r3, ip
     b7e:	469c      	mov	ip, r3
     b80:	46ab      	mov	fp, r5
     b82:	4283      	cmp	r3, r0
     b84:	419b      	sbcs	r3, r3
     b86:	4640      	mov	r0, r8
     b88:	190a      	adds	r2, r1, r4
     b8a:	44cc      	add	ip, r9
     b8c:	42a2      	cmp	r2, r4
     b8e:	4189      	sbcs	r1, r1
     b90:	44e3      	add	fp, ip
     b92:	45cc      	cmp	ip, r9
     b94:	41b6      	sbcs	r6, r6
     b96:	465c      	mov	r4, fp
     b98:	0c00      	lsrs	r0, r0, #16
     b9a:	4680      	mov	r8, r0
     b9c:	4249      	negs	r1, r1
     b9e:	4276      	negs	r6, r6
     ba0:	425b      	negs	r3, r3
     ba2:	1864      	adds	r4, r4, r1
     ba4:	4333      	orrs	r3, r6
     ba6:	4498      	add	r8, r3
     ba8:	428c      	cmp	r4, r1
     baa:	4189      	sbcs	r1, r1
     bac:	45ab      	cmp	fp, r5
     bae:	419b      	sbcs	r3, r3
     bb0:	4249      	negs	r1, r1
     bb2:	425b      	negs	r3, r3
     bb4:	4319      	orrs	r1, r3
     bb6:	1c0d      	adds	r5, r1, #0
     bb8:	9b00      	ldr	r3, [sp, #0]
     bba:	4445      	add	r5, r8
     bbc:	18ee      	adds	r6, r5, r3
     bbe:	0276      	lsls	r6, r6, #9
     bc0:	0de5      	lsrs	r5, r4, #23
     bc2:	432e      	orrs	r6, r5
     bc4:	46b3      	mov	fp, r6
     bc6:	9b04      	ldr	r3, [sp, #16]
     bc8:	0256      	lsls	r6, r2, #9
     bca:	431e      	orrs	r6, r3
     bcc:	1e73      	subs	r3, r6, #1
     bce:	419e      	sbcs	r6, r3
     bd0:	465b      	mov	r3, fp
     bd2:	0dd2      	lsrs	r2, r2, #23
     bd4:	4332      	orrs	r2, r6
     bd6:	0266      	lsls	r6, r4, #9
     bd8:	4316      	orrs	r6, r2
     bda:	01db      	lsls	r3, r3, #7
     bdc:	d50a      	bpl.n	bf4 <__aeabi_dmul+0x384>
     bde:	2301      	movs	r3, #1
     be0:	4033      	ands	r3, r6
     be2:	0876      	lsrs	r6, r6, #1
     be4:	431e      	orrs	r6, r3
     be6:	465b      	mov	r3, fp
     be8:	07db      	lsls	r3, r3, #31
     bea:	431e      	orrs	r6, r3
     bec:	465b      	mov	r3, fp
     bee:	085b      	lsrs	r3, r3, #1
     bf0:	469b      	mov	fp, r3
     bf2:	4657      	mov	r7, sl
     bf4:	4b63      	ldr	r3, [pc, #396]	; (d84 <__aeabi_dmul+0x514>)
     bf6:	18fb      	adds	r3, r7, r3
     bf8:	2b00      	cmp	r3, #0
     bfa:	dd5a      	ble.n	cb2 <__aeabi_dmul+0x442>
     bfc:	0772      	lsls	r2, r6, #29
     bfe:	d009      	beq.n	c14 <__aeabi_dmul+0x3a4>
     c00:	220f      	movs	r2, #15
     c02:	4032      	ands	r2, r6
     c04:	2a04      	cmp	r2, #4
     c06:	d005      	beq.n	c14 <__aeabi_dmul+0x3a4>
     c08:	1d32      	adds	r2, r6, #4
     c0a:	42b2      	cmp	r2, r6
     c0c:	41b6      	sbcs	r6, r6
     c0e:	4276      	negs	r6, r6
     c10:	44b3      	add	fp, r6
     c12:	1c16      	adds	r6, r2, #0
     c14:	465a      	mov	r2, fp
     c16:	01d2      	lsls	r2, r2, #7
     c18:	d506      	bpl.n	c28 <__aeabi_dmul+0x3b8>
     c1a:	465a      	mov	r2, fp
     c1c:	4b5a      	ldr	r3, [pc, #360]	; (d88 <__aeabi_dmul+0x518>)
     c1e:	401a      	ands	r2, r3
     c20:	2380      	movs	r3, #128	; 0x80
     c22:	4693      	mov	fp, r2
     c24:	00db      	lsls	r3, r3, #3
     c26:	18fb      	adds	r3, r7, r3
     c28:	4a58      	ldr	r2, [pc, #352]	; (d8c <__aeabi_dmul+0x51c>)
     c2a:	4293      	cmp	r3, r2
     c2c:	dd34      	ble.n	c98 <__aeabi_dmul+0x428>
     c2e:	2401      	movs	r4, #1
     c30:	9b02      	ldr	r3, [sp, #8]
     c32:	2500      	movs	r5, #0
     c34:	401c      	ands	r4, r3
     c36:	2600      	movs	r6, #0
     c38:	4b55      	ldr	r3, [pc, #340]	; (d90 <__aeabi_dmul+0x520>)
     c3a:	e67d      	b.n	938 <__aeabi_dmul+0xc8>
     c3c:	2080      	movs	r0, #128	; 0x80
     c3e:	465b      	mov	r3, fp
     c40:	0300      	lsls	r0, r0, #12
     c42:	4203      	tst	r3, r0
     c44:	d008      	beq.n	c58 <__aeabi_dmul+0x3e8>
     c46:	4205      	tst	r5, r0
     c48:	d106      	bne.n	c58 <__aeabi_dmul+0x3e8>
     c4a:	4305      	orrs	r5, r0
     c4c:	032d      	lsls	r5, r5, #12
     c4e:	0b2d      	lsrs	r5, r5, #12
     c50:	464c      	mov	r4, r9
     c52:	1c16      	adds	r6, r2, #0
     c54:	4b4e      	ldr	r3, [pc, #312]	; (d90 <__aeabi_dmul+0x520>)
     c56:	e66f      	b.n	938 <__aeabi_dmul+0xc8>
     c58:	465d      	mov	r5, fp
     c5a:	4305      	orrs	r5, r0
     c5c:	032d      	lsls	r5, r5, #12
     c5e:	0b2d      	lsrs	r5, r5, #12
     c60:	4b4b      	ldr	r3, [pc, #300]	; (d90 <__aeabi_dmul+0x520>)
     c62:	e669      	b.n	938 <__aeabi_dmul+0xc8>
     c64:	4650      	mov	r0, sl
     c66:	f000 f969 	bl	f3c <__clzsi2>
     c6a:	1c03      	adds	r3, r0, #0
     c6c:	3320      	adds	r3, #32
     c6e:	2b27      	cmp	r3, #39	; 0x27
     c70:	dc00      	bgt.n	c74 <__aeabi_dmul+0x404>
     c72:	e6a6      	b.n	9c2 <__aeabi_dmul+0x152>
     c74:	4655      	mov	r5, sl
     c76:	3808      	subs	r0, #8
     c78:	4085      	lsls	r5, r0
     c7a:	2200      	movs	r2, #0
     c7c:	e6ac      	b.n	9d8 <__aeabi_dmul+0x168>
     c7e:	1c28      	adds	r0, r5, #0
     c80:	f000 f95c 	bl	f3c <__clzsi2>
     c84:	1c02      	adds	r2, r0, #0
     c86:	3220      	adds	r2, #32
     c88:	2a27      	cmp	r2, #39	; 0x27
     c8a:	dc00      	bgt.n	c8e <__aeabi_dmul+0x41e>
     c8c:	e675      	b.n	97a <__aeabi_dmul+0x10a>
     c8e:	3808      	subs	r0, #8
     c90:	4085      	lsls	r5, r0
     c92:	2600      	movs	r6, #0
     c94:	46ab      	mov	fp, r5
     c96:	e67d      	b.n	994 <__aeabi_dmul+0x124>
     c98:	465a      	mov	r2, fp
     c9a:	08f6      	lsrs	r6, r6, #3
     c9c:	0752      	lsls	r2, r2, #29
     c9e:	4316      	orrs	r6, r2
     ca0:	465a      	mov	r2, fp
     ca2:	2401      	movs	r4, #1
     ca4:	0255      	lsls	r5, r2, #9
     ca6:	9a02      	ldr	r2, [sp, #8]
     ca8:	055b      	lsls	r3, r3, #21
     caa:	0b2d      	lsrs	r5, r5, #12
     cac:	0d5b      	lsrs	r3, r3, #21
     cae:	4014      	ands	r4, r2
     cb0:	e642      	b.n	938 <__aeabi_dmul+0xc8>
     cb2:	4d38      	ldr	r5, [pc, #224]	; (d94 <__aeabi_dmul+0x524>)
     cb4:	1bed      	subs	r5, r5, r7
     cb6:	2d38      	cmp	r5, #56	; 0x38
     cb8:	dd0a      	ble.n	cd0 <__aeabi_dmul+0x460>
     cba:	2401      	movs	r4, #1
     cbc:	9b02      	ldr	r3, [sp, #8]
     cbe:	2500      	movs	r5, #0
     cc0:	401c      	ands	r4, r3
     cc2:	2600      	movs	r6, #0
     cc4:	2300      	movs	r3, #0
     cc6:	e637      	b.n	938 <__aeabi_dmul+0xc8>
     cc8:	9b01      	ldr	r3, [sp, #4]
     cca:	4657      	mov	r7, sl
     ccc:	9302      	str	r3, [sp, #8]
     cce:	e791      	b.n	bf4 <__aeabi_dmul+0x384>
     cd0:	2d1f      	cmp	r5, #31
     cd2:	dc25      	bgt.n	d20 <__aeabi_dmul+0x4b0>
     cd4:	4b30      	ldr	r3, [pc, #192]	; (d98 <__aeabi_dmul+0x528>)
     cd6:	1c32      	adds	r2, r6, #0
     cd8:	469c      	mov	ip, r3
     cda:	4467      	add	r7, ip
     cdc:	40be      	lsls	r6, r7
     cde:	465b      	mov	r3, fp
     ce0:	40bb      	lsls	r3, r7
     ce2:	1c37      	adds	r7, r6, #0
     ce4:	40ea      	lsrs	r2, r5
     ce6:	1e7e      	subs	r6, r7, #1
     ce8:	41b7      	sbcs	r7, r6
     cea:	4313      	orrs	r3, r2
     cec:	433b      	orrs	r3, r7
     cee:	1c1e      	adds	r6, r3, #0
     cf0:	465b      	mov	r3, fp
     cf2:	40eb      	lsrs	r3, r5
     cf4:	1c1d      	adds	r5, r3, #0
     cf6:	0773      	lsls	r3, r6, #29
     cf8:	d009      	beq.n	d0e <__aeabi_dmul+0x49e>
     cfa:	230f      	movs	r3, #15
     cfc:	4033      	ands	r3, r6
     cfe:	2b04      	cmp	r3, #4
     d00:	d005      	beq.n	d0e <__aeabi_dmul+0x49e>
     d02:	1d33      	adds	r3, r6, #4
     d04:	42b3      	cmp	r3, r6
     d06:	41b6      	sbcs	r6, r6
     d08:	4276      	negs	r6, r6
     d0a:	19ad      	adds	r5, r5, r6
     d0c:	1c1e      	adds	r6, r3, #0
     d0e:	022b      	lsls	r3, r5, #8
     d10:	d520      	bpl.n	d54 <__aeabi_dmul+0x4e4>
     d12:	2401      	movs	r4, #1
     d14:	9b02      	ldr	r3, [sp, #8]
     d16:	2500      	movs	r5, #0
     d18:	401c      	ands	r4, r3
     d1a:	2600      	movs	r6, #0
     d1c:	2301      	movs	r3, #1
     d1e:	e60b      	b.n	938 <__aeabi_dmul+0xc8>
     d20:	465a      	mov	r2, fp
     d22:	4b1e      	ldr	r3, [pc, #120]	; (d9c <__aeabi_dmul+0x52c>)
     d24:	1bdb      	subs	r3, r3, r7
     d26:	40da      	lsrs	r2, r3
     d28:	1c13      	adds	r3, r2, #0
     d2a:	2d20      	cmp	r5, #32
     d2c:	d01c      	beq.n	d68 <__aeabi_dmul+0x4f8>
     d2e:	4a1c      	ldr	r2, [pc, #112]	; (da0 <__aeabi_dmul+0x530>)
     d30:	4694      	mov	ip, r2
     d32:	465a      	mov	r2, fp
     d34:	4467      	add	r7, ip
     d36:	40ba      	lsls	r2, r7
     d38:	1c17      	adds	r7, r2, #0
     d3a:	433e      	orrs	r6, r7
     d3c:	1e72      	subs	r2, r6, #1
     d3e:	4196      	sbcs	r6, r2
     d40:	431e      	orrs	r6, r3
     d42:	2307      	movs	r3, #7
     d44:	2500      	movs	r5, #0
     d46:	4033      	ands	r3, r6
     d48:	d007      	beq.n	d5a <__aeabi_dmul+0x4ea>
     d4a:	230f      	movs	r3, #15
     d4c:	2500      	movs	r5, #0
     d4e:	4033      	ands	r3, r6
     d50:	2b04      	cmp	r3, #4
     d52:	d1d6      	bne.n	d02 <__aeabi_dmul+0x492>
     d54:	076b      	lsls	r3, r5, #29
     d56:	026d      	lsls	r5, r5, #9
     d58:	0b2d      	lsrs	r5, r5, #12
     d5a:	2401      	movs	r4, #1
     d5c:	08f6      	lsrs	r6, r6, #3
     d5e:	431e      	orrs	r6, r3
     d60:	9b02      	ldr	r3, [sp, #8]
     d62:	401c      	ands	r4, r3
     d64:	2300      	movs	r3, #0
     d66:	e5e7      	b.n	938 <__aeabi_dmul+0xc8>
     d68:	2700      	movs	r7, #0
     d6a:	e7e6      	b.n	d3a <__aeabi_dmul+0x4ca>
     d6c:	2580      	movs	r5, #128	; 0x80
     d6e:	465b      	mov	r3, fp
     d70:	2401      	movs	r4, #1
     d72:	032d      	lsls	r5, r5, #12
     d74:	431d      	orrs	r5, r3
     d76:	9b01      	ldr	r3, [sp, #4]
     d78:	032d      	lsls	r5, r5, #12
     d7a:	4023      	ands	r3, r4
     d7c:	1c1c      	adds	r4, r3, #0
     d7e:	0b2d      	lsrs	r5, r5, #12
     d80:	4b03      	ldr	r3, [pc, #12]	; (d90 <__aeabi_dmul+0x520>)
     d82:	e5d9      	b.n	938 <__aeabi_dmul+0xc8>
     d84:	000003ff 	.word	0x000003ff
     d88:	feffffff 	.word	0xfeffffff
     d8c:	000007fe 	.word	0x000007fe
     d90:	000007ff 	.word	0x000007ff
     d94:	fffffc02 	.word	0xfffffc02
     d98:	0000041e 	.word	0x0000041e
     d9c:	fffffbe2 	.word	0xfffffbe2
     da0:	0000043e 	.word	0x0000043e

00000da4 <__aeabi_i2d>:
     da4:	b538      	push	{r3, r4, r5, lr}
     da6:	1e04      	subs	r4, r0, #0
     da8:	d016      	beq.n	dd8 <__aeabi_i2d+0x34>
     daa:	0fc5      	lsrs	r5, r0, #31
     dac:	d000      	beq.n	db0 <__aeabi_i2d+0xc>
     dae:	4244      	negs	r4, r0
     db0:	1c20      	adds	r0, r4, #0
     db2:	f000 f8c3 	bl	f3c <__clzsi2>
     db6:	4b17      	ldr	r3, [pc, #92]	; (e14 <__aeabi_i2d+0x70>)
     db8:	1a1b      	subs	r3, r3, r0
     dba:	280a      	cmp	r0, #10
     dbc:	dc21      	bgt.n	e02 <__aeabi_i2d+0x5e>
     dbe:	1c02      	adds	r2, r0, #0
     dc0:	1c21      	adds	r1, r4, #0
     dc2:	3215      	adds	r2, #21
     dc4:	4091      	lsls	r1, r2
     dc6:	1c0a      	adds	r2, r1, #0
     dc8:	210b      	movs	r1, #11
     dca:	1a08      	subs	r0, r1, r0
     dcc:	40c4      	lsrs	r4, r0
     dce:	055b      	lsls	r3, r3, #21
     dd0:	0324      	lsls	r4, r4, #12
     dd2:	0b24      	lsrs	r4, r4, #12
     dd4:	0d5b      	lsrs	r3, r3, #21
     dd6:	e003      	b.n	de0 <__aeabi_i2d+0x3c>
     dd8:	2500      	movs	r5, #0
     dda:	2300      	movs	r3, #0
     ddc:	2400      	movs	r4, #0
     dde:	2200      	movs	r2, #0
     de0:	2100      	movs	r1, #0
     de2:	1c10      	adds	r0, r2, #0
     de4:	0324      	lsls	r4, r4, #12
     de6:	0d0a      	lsrs	r2, r1, #20
     de8:	0512      	lsls	r2, r2, #20
     dea:	0b24      	lsrs	r4, r4, #12
     dec:	4314      	orrs	r4, r2
     dee:	4a0a      	ldr	r2, [pc, #40]	; (e18 <__aeabi_i2d+0x74>)
     df0:	051b      	lsls	r3, r3, #20
     df2:	4014      	ands	r4, r2
     df4:	431c      	orrs	r4, r3
     df6:	0064      	lsls	r4, r4, #1
     df8:	07ed      	lsls	r5, r5, #31
     dfa:	0864      	lsrs	r4, r4, #1
     dfc:	432c      	orrs	r4, r5
     dfe:	1c21      	adds	r1, r4, #0
     e00:	bd38      	pop	{r3, r4, r5, pc}
     e02:	380b      	subs	r0, #11
     e04:	4084      	lsls	r4, r0
     e06:	055b      	lsls	r3, r3, #21
     e08:	0324      	lsls	r4, r4, #12
     e0a:	0b24      	lsrs	r4, r4, #12
     e0c:	0d5b      	lsrs	r3, r3, #21
     e0e:	2200      	movs	r2, #0
     e10:	e7e6      	b.n	de0 <__aeabi_i2d+0x3c>
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	0000041e 	.word	0x0000041e
     e18:	800fffff 	.word	0x800fffff

00000e1c <__aeabi_d2f>:
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	030b      	lsls	r3, r1, #12
     e20:	004d      	lsls	r5, r1, #1
     e22:	0f44      	lsrs	r4, r0, #29
     e24:	0d6d      	lsrs	r5, r5, #21
     e26:	0a5b      	lsrs	r3, r3, #9
     e28:	4323      	orrs	r3, r4
     e2a:	1c6c      	adds	r4, r5, #1
     e2c:	0564      	lsls	r4, r4, #21
     e2e:	0fc9      	lsrs	r1, r1, #31
     e30:	00c2      	lsls	r2, r0, #3
     e32:	0d64      	lsrs	r4, r4, #21
     e34:	2c01      	cmp	r4, #1
     e36:	dd2a      	ble.n	e8e <__aeabi_d2f+0x72>
     e38:	4c3b      	ldr	r4, [pc, #236]	; (f28 <__aeabi_d2f+0x10c>)
     e3a:	192c      	adds	r4, r5, r4
     e3c:	2cfe      	cmp	r4, #254	; 0xfe
     e3e:	dc1a      	bgt.n	e76 <__aeabi_d2f+0x5a>
     e40:	2c00      	cmp	r4, #0
     e42:	dd35      	ble.n	eb0 <__aeabi_d2f+0x94>
     e44:	0180      	lsls	r0, r0, #6
     e46:	1e45      	subs	r5, r0, #1
     e48:	41a8      	sbcs	r0, r5
     e4a:	00db      	lsls	r3, r3, #3
     e4c:	4303      	orrs	r3, r0
     e4e:	0f52      	lsrs	r2, r2, #29
     e50:	4313      	orrs	r3, r2
     e52:	075a      	lsls	r2, r3, #29
     e54:	d004      	beq.n	e60 <__aeabi_d2f+0x44>
     e56:	220f      	movs	r2, #15
     e58:	401a      	ands	r2, r3
     e5a:	2a04      	cmp	r2, #4
     e5c:	d000      	beq.n	e60 <__aeabi_d2f+0x44>
     e5e:	3304      	adds	r3, #4
     e60:	2280      	movs	r2, #128	; 0x80
     e62:	04d2      	lsls	r2, r2, #19
     e64:	401a      	ands	r2, r3
     e66:	d027      	beq.n	eb8 <__aeabi_d2f+0x9c>
     e68:	3401      	adds	r4, #1
     e6a:	2cff      	cmp	r4, #255	; 0xff
     e6c:	d003      	beq.n	e76 <__aeabi_d2f+0x5a>
     e6e:	019b      	lsls	r3, r3, #6
     e70:	0a5b      	lsrs	r3, r3, #9
     e72:	b2e4      	uxtb	r4, r4
     e74:	e001      	b.n	e7a <__aeabi_d2f+0x5e>
     e76:	24ff      	movs	r4, #255	; 0xff
     e78:	2300      	movs	r3, #0
     e7a:	025b      	lsls	r3, r3, #9
     e7c:	05e4      	lsls	r4, r4, #23
     e7e:	0a5b      	lsrs	r3, r3, #9
     e80:	4323      	orrs	r3, r4
     e82:	005b      	lsls	r3, r3, #1
     e84:	07c9      	lsls	r1, r1, #31
     e86:	085b      	lsrs	r3, r3, #1
     e88:	430b      	orrs	r3, r1
     e8a:	1c18      	adds	r0, r3, #0
     e8c:	bd70      	pop	{r4, r5, r6, pc}
     e8e:	2d00      	cmp	r5, #0
     e90:	d106      	bne.n	ea0 <__aeabi_d2f+0x84>
     e92:	4313      	orrs	r3, r2
     e94:	d10e      	bne.n	eb4 <__aeabi_d2f+0x98>
     e96:	2400      	movs	r4, #0
     e98:	025b      	lsls	r3, r3, #9
     e9a:	0a5b      	lsrs	r3, r3, #9
     e9c:	b2e4      	uxtb	r4, r4
     e9e:	e7ec      	b.n	e7a <__aeabi_d2f+0x5e>
     ea0:	431a      	orrs	r2, r3
     ea2:	d0e8      	beq.n	e76 <__aeabi_d2f+0x5a>
     ea4:	2080      	movs	r0, #128	; 0x80
     ea6:	00db      	lsls	r3, r3, #3
     ea8:	0480      	lsls	r0, r0, #18
     eaa:	4303      	orrs	r3, r0
     eac:	24ff      	movs	r4, #255	; 0xff
     eae:	e7d0      	b.n	e52 <__aeabi_d2f+0x36>
     eb0:	3417      	adds	r4, #23
     eb2:	da0c      	bge.n	ece <__aeabi_d2f+0xb2>
     eb4:	2305      	movs	r3, #5
     eb6:	2400      	movs	r4, #0
     eb8:	08db      	lsrs	r3, r3, #3
     eba:	2cff      	cmp	r4, #255	; 0xff
     ebc:	d1ec      	bne.n	e98 <__aeabi_d2f+0x7c>
     ebe:	2b00      	cmp	r3, #0
     ec0:	d02d      	beq.n	f1e <__aeabi_d2f+0x102>
     ec2:	2280      	movs	r2, #128	; 0x80
     ec4:	03d2      	lsls	r2, r2, #15
     ec6:	4313      	orrs	r3, r2
     ec8:	025b      	lsls	r3, r3, #9
     eca:	0a5b      	lsrs	r3, r3, #9
     ecc:	e7d5      	b.n	e7a <__aeabi_d2f+0x5e>
     ece:	2480      	movs	r4, #128	; 0x80
     ed0:	4816      	ldr	r0, [pc, #88]	; (f2c <__aeabi_d2f+0x110>)
     ed2:	0424      	lsls	r4, r4, #16
     ed4:	4323      	orrs	r3, r4
     ed6:	1b40      	subs	r0, r0, r5
     ed8:	281f      	cmp	r0, #31
     eda:	dc0d      	bgt.n	ef8 <__aeabi_d2f+0xdc>
     edc:	4c14      	ldr	r4, [pc, #80]	; (f30 <__aeabi_d2f+0x114>)
     ede:	46a4      	mov	ip, r4
     ee0:	4465      	add	r5, ip
     ee2:	40ab      	lsls	r3, r5
     ee4:	1c1c      	adds	r4, r3, #0
     ee6:	1c13      	adds	r3, r2, #0
     ee8:	40ab      	lsls	r3, r5
     eea:	1e5d      	subs	r5, r3, #1
     eec:	41ab      	sbcs	r3, r5
     eee:	40c2      	lsrs	r2, r0
     ef0:	4323      	orrs	r3, r4
     ef2:	4313      	orrs	r3, r2
     ef4:	2400      	movs	r4, #0
     ef6:	e7ac      	b.n	e52 <__aeabi_d2f+0x36>
     ef8:	1c1e      	adds	r6, r3, #0
     efa:	4c0e      	ldr	r4, [pc, #56]	; (f34 <__aeabi_d2f+0x118>)
     efc:	1b64      	subs	r4, r4, r5
     efe:	40e6      	lsrs	r6, r4
     f00:	1c34      	adds	r4, r6, #0
     f02:	2820      	cmp	r0, #32
     f04:	d00d      	beq.n	f22 <__aeabi_d2f+0x106>
     f06:	480c      	ldr	r0, [pc, #48]	; (f38 <__aeabi_d2f+0x11c>)
     f08:	4684      	mov	ip, r0
     f0a:	4465      	add	r5, ip
     f0c:	40ab      	lsls	r3, r5
     f0e:	1c1d      	adds	r5, r3, #0
     f10:	432a      	orrs	r2, r5
     f12:	1e53      	subs	r3, r2, #1
     f14:	419a      	sbcs	r2, r3
     f16:	1c13      	adds	r3, r2, #0
     f18:	4323      	orrs	r3, r4
     f1a:	2400      	movs	r4, #0
     f1c:	e799      	b.n	e52 <__aeabi_d2f+0x36>
     f1e:	2300      	movs	r3, #0
     f20:	e7ab      	b.n	e7a <__aeabi_d2f+0x5e>
     f22:	2500      	movs	r5, #0
     f24:	e7f4      	b.n	f10 <__aeabi_d2f+0xf4>
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	fffffc80 	.word	0xfffffc80
     f2c:	0000039e 	.word	0x0000039e
     f30:	fffffc82 	.word	0xfffffc82
     f34:	0000037e 	.word	0x0000037e
     f38:	fffffca2 	.word	0xfffffca2

00000f3c <__clzsi2>:
     f3c:	211c      	movs	r1, #28
     f3e:	2301      	movs	r3, #1
     f40:	041b      	lsls	r3, r3, #16
     f42:	4298      	cmp	r0, r3
     f44:	d301      	bcc.n	f4a <__clzsi2+0xe>
     f46:	0c00      	lsrs	r0, r0, #16
     f48:	3910      	subs	r1, #16
     f4a:	0a1b      	lsrs	r3, r3, #8
     f4c:	4298      	cmp	r0, r3
     f4e:	d301      	bcc.n	f54 <__clzsi2+0x18>
     f50:	0a00      	lsrs	r0, r0, #8
     f52:	3908      	subs	r1, #8
     f54:	091b      	lsrs	r3, r3, #4
     f56:	4298      	cmp	r0, r3
     f58:	d301      	bcc.n	f5e <__clzsi2+0x22>
     f5a:	0900      	lsrs	r0, r0, #4
     f5c:	3904      	subs	r1, #4
     f5e:	a202      	add	r2, pc, #8	; (adr r2, f68 <__clzsi2+0x2c>)
     f60:	5c10      	ldrb	r0, [r2, r0]
     f62:	1840      	adds	r0, r0, r1
     f64:	4770      	bx	lr
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	02020304 	.word	0x02020304
     f6c:	01010101 	.word	0x01010101
	...

00000f78 <__libc_init_array>:
     f78:	b570      	push	{r4, r5, r6, lr}
     f7a:	4e0d      	ldr	r6, [pc, #52]	; (fb0 <__libc_init_array+0x38>)
     f7c:	4d0d      	ldr	r5, [pc, #52]	; (fb4 <__libc_init_array+0x3c>)
     f7e:	2400      	movs	r4, #0
     f80:	1bad      	subs	r5, r5, r6
     f82:	10ad      	asrs	r5, r5, #2
     f84:	d005      	beq.n	f92 <__libc_init_array+0x1a>
     f86:	00a3      	lsls	r3, r4, #2
     f88:	58f3      	ldr	r3, [r6, r3]
     f8a:	3401      	adds	r4, #1
     f8c:	4798      	blx	r3
     f8e:	42a5      	cmp	r5, r4
     f90:	d1f9      	bne.n	f86 <__libc_init_array+0xe>
     f92:	f000 f8d1 	bl	1138 <_init>
     f96:	4e08      	ldr	r6, [pc, #32]	; (fb8 <__libc_init_array+0x40>)
     f98:	4d08      	ldr	r5, [pc, #32]	; (fbc <__libc_init_array+0x44>)
     f9a:	2400      	movs	r4, #0
     f9c:	1bad      	subs	r5, r5, r6
     f9e:	10ad      	asrs	r5, r5, #2
     fa0:	d005      	beq.n	fae <__libc_init_array+0x36>
     fa2:	00a3      	lsls	r3, r4, #2
     fa4:	58f3      	ldr	r3, [r6, r3]
     fa6:	3401      	adds	r4, #1
     fa8:	4798      	blx	r3
     faa:	42a5      	cmp	r5, r4
     fac:	d1f9      	bne.n	fa2 <__libc_init_array+0x2a>
     fae:	bd70      	pop	{r4, r5, r6, pc}
     fb0:	00001144 	.word	0x00001144
     fb4:	00001144 	.word	0x00001144
     fb8:	00001144 	.word	0x00001144
     fbc:	0000114c 	.word	0x0000114c

00000fc0 <register_fini>:
     fc0:	b508      	push	{r3, lr}
     fc2:	4b03      	ldr	r3, [pc, #12]	; (fd0 <register_fini+0x10>)
     fc4:	2b00      	cmp	r3, #0
     fc6:	d002      	beq.n	fce <register_fini+0xe>
     fc8:	4802      	ldr	r0, [pc, #8]	; (fd4 <register_fini+0x14>)
     fca:	f000 f805 	bl	fd8 <atexit>
     fce:	bd08      	pop	{r3, pc}
     fd0:	00000000 	.word	0x00000000
     fd4:	00000fe9 	.word	0x00000fe9

00000fd8 <atexit>:
     fd8:	b508      	push	{r3, lr}
     fda:	1c01      	adds	r1, r0, #0
     fdc:	2200      	movs	r2, #0
     fde:	2000      	movs	r0, #0
     fe0:	2300      	movs	r3, #0
     fe2:	f000 f81b 	bl	101c <__register_exitproc>
     fe6:	bd08      	pop	{r3, pc}

00000fe8 <__libc_fini_array>:
     fe8:	b538      	push	{r3, r4, r5, lr}
     fea:	4b09      	ldr	r3, [pc, #36]	; (1010 <__libc_fini_array+0x28>)
     fec:	4c09      	ldr	r4, [pc, #36]	; (1014 <__libc_fini_array+0x2c>)
     fee:	1ae4      	subs	r4, r4, r3
     ff0:	10a4      	asrs	r4, r4, #2
     ff2:	d009      	beq.n	1008 <__libc_fini_array+0x20>
     ff4:	4a08      	ldr	r2, [pc, #32]	; (1018 <__libc_fini_array+0x30>)
     ff6:	18a5      	adds	r5, r4, r2
     ff8:	00ad      	lsls	r5, r5, #2
     ffa:	18ed      	adds	r5, r5, r3
     ffc:	682b      	ldr	r3, [r5, #0]
     ffe:	3c01      	subs	r4, #1
    1000:	4798      	blx	r3
    1002:	3d04      	subs	r5, #4
    1004:	2c00      	cmp	r4, #0
    1006:	d1f9      	bne.n	ffc <__libc_fini_array+0x14>
    1008:	f000 f8a0 	bl	114c <_fini>
    100c:	bd38      	pop	{r3, r4, r5, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	00001158 	.word	0x00001158
    1014:	0000115c 	.word	0x0000115c
    1018:	3fffffff 	.word	0x3fffffff

0000101c <__register_exitproc>:
    101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    101e:	4644      	mov	r4, r8
    1020:	465f      	mov	r7, fp
    1022:	4656      	mov	r6, sl
    1024:	464d      	mov	r5, r9
    1026:	469b      	mov	fp, r3
    1028:	4b2f      	ldr	r3, [pc, #188]	; (10e8 <__register_exitproc+0xcc>)
    102a:	b4f0      	push	{r4, r5, r6, r7}
    102c:	681c      	ldr	r4, [r3, #0]
    102e:	23a4      	movs	r3, #164	; 0xa4
    1030:	005b      	lsls	r3, r3, #1
    1032:	1c05      	adds	r5, r0, #0
    1034:	58e0      	ldr	r0, [r4, r3]
    1036:	1c0e      	adds	r6, r1, #0
    1038:	4690      	mov	r8, r2
    103a:	2800      	cmp	r0, #0
    103c:	d04b      	beq.n	10d6 <__register_exitproc+0xba>
    103e:	6843      	ldr	r3, [r0, #4]
    1040:	2b1f      	cmp	r3, #31
    1042:	dc0d      	bgt.n	1060 <__register_exitproc+0x44>
    1044:	1c5c      	adds	r4, r3, #1
    1046:	2d00      	cmp	r5, #0
    1048:	d121      	bne.n	108e <__register_exitproc+0x72>
    104a:	3302      	adds	r3, #2
    104c:	009b      	lsls	r3, r3, #2
    104e:	6044      	str	r4, [r0, #4]
    1050:	501e      	str	r6, [r3, r0]
    1052:	2000      	movs	r0, #0
    1054:	bc3c      	pop	{r2, r3, r4, r5}
    1056:	4690      	mov	r8, r2
    1058:	4699      	mov	r9, r3
    105a:	46a2      	mov	sl, r4
    105c:	46ab      	mov	fp, r5
    105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1060:	4b22      	ldr	r3, [pc, #136]	; (10ec <__register_exitproc+0xd0>)
    1062:	2b00      	cmp	r3, #0
    1064:	d03c      	beq.n	10e0 <__register_exitproc+0xc4>
    1066:	20c8      	movs	r0, #200	; 0xc8
    1068:	0040      	lsls	r0, r0, #1
    106a:	e000      	b.n	106e <__register_exitproc+0x52>
    106c:	bf00      	nop
    106e:	2800      	cmp	r0, #0
    1070:	d036      	beq.n	10e0 <__register_exitproc+0xc4>
    1072:	22a4      	movs	r2, #164	; 0xa4
    1074:	2300      	movs	r3, #0
    1076:	0052      	lsls	r2, r2, #1
    1078:	58a1      	ldr	r1, [r4, r2]
    107a:	6043      	str	r3, [r0, #4]
    107c:	6001      	str	r1, [r0, #0]
    107e:	50a0      	str	r0, [r4, r2]
    1080:	3240      	adds	r2, #64	; 0x40
    1082:	5083      	str	r3, [r0, r2]
    1084:	3204      	adds	r2, #4
    1086:	5083      	str	r3, [r0, r2]
    1088:	2401      	movs	r4, #1
    108a:	2d00      	cmp	r5, #0
    108c:	d0dd      	beq.n	104a <__register_exitproc+0x2e>
    108e:	009a      	lsls	r2, r3, #2
    1090:	4691      	mov	r9, r2
    1092:	4481      	add	r9, r0
    1094:	4642      	mov	r2, r8
    1096:	2188      	movs	r1, #136	; 0x88
    1098:	464f      	mov	r7, r9
    109a:	507a      	str	r2, [r7, r1]
    109c:	22c4      	movs	r2, #196	; 0xc4
    109e:	0052      	lsls	r2, r2, #1
    10a0:	4690      	mov	r8, r2
    10a2:	4480      	add	r8, r0
    10a4:	4642      	mov	r2, r8
    10a6:	3987      	subs	r1, #135	; 0x87
    10a8:	4099      	lsls	r1, r3
    10aa:	6812      	ldr	r2, [r2, #0]
    10ac:	468a      	mov	sl, r1
    10ae:	430a      	orrs	r2, r1
    10b0:	4694      	mov	ip, r2
    10b2:	4642      	mov	r2, r8
    10b4:	4661      	mov	r1, ip
    10b6:	6011      	str	r1, [r2, #0]
    10b8:	2284      	movs	r2, #132	; 0x84
    10ba:	4649      	mov	r1, r9
    10bc:	465f      	mov	r7, fp
    10be:	0052      	lsls	r2, r2, #1
    10c0:	508f      	str	r7, [r1, r2]
    10c2:	2d02      	cmp	r5, #2
    10c4:	d1c1      	bne.n	104a <__register_exitproc+0x2e>
    10c6:	1c02      	adds	r2, r0, #0
    10c8:	4655      	mov	r5, sl
    10ca:	328d      	adds	r2, #141	; 0x8d
    10cc:	32ff      	adds	r2, #255	; 0xff
    10ce:	6811      	ldr	r1, [r2, #0]
    10d0:	430d      	orrs	r5, r1
    10d2:	6015      	str	r5, [r2, #0]
    10d4:	e7b9      	b.n	104a <__register_exitproc+0x2e>
    10d6:	1c20      	adds	r0, r4, #0
    10d8:	304d      	adds	r0, #77	; 0x4d
    10da:	30ff      	adds	r0, #255	; 0xff
    10dc:	50e0      	str	r0, [r4, r3]
    10de:	e7ae      	b.n	103e <__register_exitproc+0x22>
    10e0:	2001      	movs	r0, #1
    10e2:	4240      	negs	r0, r0
    10e4:	e7b6      	b.n	1054 <__register_exitproc+0x38>
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	00001134 	.word	0x00001134
    10ec:	00000000 	.word	0x00000000
    10f0:	00000a5c 	.word	0x00000a5c
    10f4:	00000a3a 	.word	0x00000a3a
    10f8:	00000a3a 	.word	0x00000a3a
    10fc:	00000a2e 	.word	0x00000a2e
    1100:	00000922 	.word	0x00000922
    1104:	00000922 	.word	0x00000922
    1108:	00000a22 	.word	0x00000a22
    110c:	00000a2e 	.word	0x00000a2e
    1110:	00000922 	.word	0x00000922
    1114:	00000a22 	.word	0x00000a22
    1118:	00000922 	.word	0x00000922
    111c:	00000a2e 	.word	0x00000a2e
    1120:	00000926 	.word	0x00000926
    1124:	00000926 	.word	0x00000926
    1128:	00000926 	.word	0x00000926
    112c:	00000c3c 	.word	0x00000c3c
    1130:	00000043 	.word	0x00000043

00001134 <_global_impure_ptr>:
    1134:	20000010                                ... 

00001138 <_init>:
    1138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    113e:	bc08      	pop	{r3}
    1140:	469e      	mov	lr, r3
    1142:	4770      	bx	lr

00001144 <__init_array_start>:
    1144:	00000fc1 	.word	0x00000fc1

00001148 <__frame_dummy_init_array_entry>:
    1148:	000000dd                                ....

0000114c <_fini>:
    114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1152:	bc08      	pop	{r3}
    1154:	469e      	mov	lr, r3
    1156:	4770      	bx	lr

00001158 <__fini_array_start>:
    1158:	000000b5 	.word	0x000000b5


SaLAltimeter-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002068  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00002068  00002068  0000a068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000000c  20000000  00002070  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000012c  2000000c  0000207c  0001000c  2**2
                  ALLOC
  4 .stack        00002000  20000138  000021a8  0001000c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014a6a  00000000  00000000  0001008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000020b3  00000000  00000000  00024af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001ae9  00000000  00000000  00026bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000330  00000000  00000000  00028695  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000360  00000000  00000000  000289c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000161df  00000000  00000000  00028d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008b9b  00000000  00000000  0003ef04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006fe13  00000000  00000000  00047a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000094c  00000000  00000000  000b78b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002138 	.word	0x20002138
       4:	00000d75 	.word	0x00000d75
       8:	00000d6d 	.word	0x00000d6d
       c:	00000d6d 	.word	0x00000d6d
	...
      2c:	00000d6d 	.word	0x00000d6d
	...
      38:	00000d6d 	.word	0x00000d6d
      3c:	00000d6d 	.word	0x00000d6d
      40:	00000d6d 	.word	0x00000d6d
      44:	00000d6d 	.word	0x00000d6d
      48:	00000d6d 	.word	0x00000d6d
      4c:	00000951 	.word	0x00000951
      50:	00000d6d 	.word	0x00000d6d
      54:	00000d6d 	.word	0x00000d6d
      58:	00000d6d 	.word	0x00000d6d
      5c:	00000d6d 	.word	0x00000d6d
      60:	00000d6d 	.word	0x00000d6d
      64:	00000d6d 	.word	0x00000d6d
      68:	00000d6d 	.word	0x00000d6d
      6c:	00000d6d 	.word	0x00000d6d
      70:	00000d6d 	.word	0x00000d6d
      74:	00000d6d 	.word	0x00000d6d
      78:	00000d6d 	.word	0x00000d6d
      7c:	00000d6d 	.word	0x00000d6d
      80:	00000d6d 	.word	0x00000d6d
      84:	00000d6d 	.word	0x00000d6d
      88:	00000d6d 	.word	0x00000d6d
      8c:	00000ebd 	.word	0x00000ebd
      90:	00000d6d 	.word	0x00000d6d
	...
      9c:	00000d6d 	.word	0x00000d6d
      a0:	00000d6d 	.word	0x00000d6d
      a4:	00000d6d 	.word	0x00000d6d
      a8:	00000d6d 	.word	0x00000d6d
      ac:	00000d6d 	.word	0x00000d6d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00002070 	.word	0x00002070

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00002070 	.word	0x00002070
     108:	20000010 	.word	0x20000010
     10c:	00002070 	.word	0x00002070
     110:	00000000 	.word	0x00000000

00000114 <getADXL345Event>:
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATA_FORMAT);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,_cmd);
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
}

void getADXL345Event(uint8_t *values) {
     114:	b570      	push	{r4, r5, r6, lr}
     116:	1c05      	adds	r5, r0, #0


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     118:	2280      	movs	r2, #128	; 0x80
     11a:	0252      	lsls	r2, r2, #9
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <getADXL345Event+0x34>)
     11e:	615a      	str	r2, [r3, #20]

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
     120:	200f      	movs	r0, #15
     122:	210d      	movs	r1, #13
     124:	22f2      	movs	r2, #242	; 0xf2
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <getADXL345Event+0x38>)
     128:	4798      	blx	r3
     12a:	1c2c      	adds	r4, r5, #0
     12c:	3506      	adds	r5, #6
    for (uint8_t i = 0; i < 6; i++) {
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
     12e:	4e08      	ldr	r6, [pc, #32]	; (150 <getADXL345Event+0x3c>)
     130:	200f      	movs	r0, #15
     132:	210e      	movs	r1, #14
     134:	47b0      	blx	r6
     136:	7020      	strb	r0, [r4, #0]
     138:	3401      	adds	r4, #1

void getADXL345Event(uint8_t *values) {

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
    for (uint8_t i = 0; i < 6; i++) {
     13a:	42ac      	cmp	r4, r5
     13c:	d1f8      	bne.n	130 <getADXL345Event+0x1c>
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     13e:	2280      	movs	r2, #128	; 0x80
     140:	0252      	lsls	r2, r2, #9
     142:	4b01      	ldr	r3, [pc, #4]	; (148 <getADXL345Event+0x34>)
     144:	619a      	str	r2, [r3, #24]
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
    }
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
}
     146:	bd70      	pop	{r4, r5, r6, pc}
     148:	41004400 	.word	0x41004400
     14c:	000006e1 	.word	0x000006e1
     150:	00000741 	.word	0x00000741

00000154 <readMS5607AdcResults>:

    return _receive;

}

uint32_t readMS5607AdcResults() {
     154:	b5f0      	push	{r4, r5, r6, r7, lr}
     156:	4647      	mov	r7, r8
     158:	b480      	push	{r7}
    } else {
        port->OUTCLR.reg = pin_mask;
     15a:	4f0f      	ldr	r7, [pc, #60]	; (198 <readMS5607AdcResults+0x44>)
     15c:	2480      	movs	r4, #128	; 0x80
     15e:	00a4      	lsls	r4, r4, #2
     160:	617c      	str	r4, [r7, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,cmdAdcRead_);
     162:	200f      	movs	r0, #15
     164:	210d      	movs	r1, #13
     166:	2200      	movs	r2, #0
     168:	4b0c      	ldr	r3, [pc, #48]	; (19c <readMS5607AdcResults+0x48>)
     16a:	4798      	blx	r3
    uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     16c:	200f      	movs	r0, #15
     16e:	210e      	movs	r1, #14
     170:	4e0b      	ldr	r6, [pc, #44]	; (1a0 <readMS5607AdcResults+0x4c>)
     172:	47b0      	blx	r6
     174:	1c05      	adds	r5, r0, #0
    uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     176:	200f      	movs	r0, #15
     178:	210e      	movs	r1, #14
     17a:	47b0      	blx	r6
     17c:	4680      	mov	r8, r0
    uint8_t _byte3 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     17e:	200f      	movs	r0, #15
     180:	210e      	movs	r1, #14
     182:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     184:	61bc      	str	r4, [r7, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);

    uint32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     186:	042d      	lsls	r5, r5, #16
     188:	4643      	mov	r3, r8
     18a:	021c      	lsls	r4, r3, #8
     18c:	432c      	orrs	r4, r5
     18e:	4320      	orrs	r0, r4
    return _receive;
}
     190:	bc04      	pop	{r2}
     192:	4690      	mov	r8, r2
     194:	bdf0      	pop	{r4, r5, r6, r7, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	41004400 	.word	0x41004400
     19c:	000006e1 	.word	0x000006e1
     1a0:	00000741 	.word	0x00000741

000001a4 <getMS5607Coeff>:

void getMS5607Coeff(uint16_t *coefficients) {
     1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1a6:	465f      	mov	r7, fp
     1a8:	4656      	mov	r6, sl
     1aa:	464d      	mov	r5, r9
     1ac:	4644      	mov	r4, r8
     1ae:	b4f0      	push	{r4, r5, r6, r7}
     1b0:	4681      	mov	r9, r0
     1b2:	2400      	movs	r4, #0

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     1b4:	4f15      	ldr	r7, [pc, #84]	; (20c <getMS5607Coeff+0x68>)
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <getMS5607Coeff+0x6c>)
     1b8:	4698      	mov	r8, r3
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1ba:	4e16      	ldr	r6, [pc, #88]	; (214 <getMS5607Coeff+0x70>)
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     1bc:	2596      	movs	r5, #150	; 0x96
     1be:	00ad      	lsls	r5, r5, #2
     1c0:	1c28      	adds	r0, r5, #0
     1c2:	47b8      	blx	r7
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     1c4:	1c28      	adds	r0, r5, #0
     1c6:	47b8      	blx	r7
    } else {
        port->OUTCLR.reg = pin_mask;
     1c8:	4d13      	ldr	r5, [pc, #76]	; (218 <getMS5607Coeff+0x74>)
     1ca:	2380      	movs	r3, #128	; 0x80
     1cc:	009b      	lsls	r3, r3, #2
     1ce:	469b      	mov	fp, r3
     1d0:	616b      	str	r3, [r5, #20]
     1d2:	1c22      	adds	r2, r4, #0
     1d4:	3a5e      	subs	r2, #94	; 0x5e
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     1d6:	b2d2      	uxtb	r2, r2
     1d8:	200f      	movs	r0, #15
     1da:	210d      	movs	r1, #13
     1dc:	47c0      	blx	r8
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1de:	200f      	movs	r0, #15
     1e0:	210e      	movs	r1, #14
     1e2:	47b0      	blx	r6
     1e4:	4682      	mov	sl, r0
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1e6:	200f      	movs	r0, #15
     1e8:	210e      	movs	r1, #14
     1ea:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     1ec:	465b      	mov	r3, fp
     1ee:	61ab      	str	r3, [r5, #24]
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
     1f0:	4653      	mov	r3, sl
     1f2:	021d      	lsls	r5, r3, #8
     1f4:	4328      	orrs	r0, r5
     1f6:	464b      	mov	r3, r9
     1f8:	5318      	strh	r0, [r3, r4]
     1fa:	3402      	adds	r4, #2
    return _receive;
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     1fc:	2c0c      	cmp	r4, #12
     1fe:	d1dd      	bne.n	1bc <getMS5607Coeff+0x18>
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
     200:	bc3c      	pop	{r2, r3, r4, r5}
     202:	4690      	mov	r8, r2
     204:	4699      	mov	r9, r3
     206:	46a2      	mov	sl, r4
     208:	46ab      	mov	fp, r5
     20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     20c:	000009c9 	.word	0x000009c9
     210:	000006e1 	.word	0x000006e1
     214:	00000741 	.word	0x00000741
     218:	41004400 	.word	0x41004400

0000021c <ConvertPressureTemperature>:
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	4647      	mov	r7, r8
     220:	b480      	push	{r7}
     222:	b082      	sub	sp, #8
     224:	4690      	mov	r8, r2
    const uint64_t C4 = (uint64_t)(*(coefficients + 3));
    const uint64_t C5 = (uint64_t)(*(coefficients + 4));
    const uint64_t C6 = (uint64_t)(*(coefficients + 5));

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
     226:	8917      	ldrh	r7, [r2, #8]
     228:	023f      	lsls	r7, r7, #8
     22a:	680b      	ldr	r3, [r1, #0]
     22c:	1bdf      	subs	r7, r3, r7
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     22e:	17fb      	asrs	r3, r7, #31
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     230:	6804      	ldr	r4, [r0, #0]
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
    const uint64_t C3 = (uint64_t)(*(coefficients + 2));
     232:	8892      	ldrh	r2, [r2, #4]
    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
     234:	4e1c      	ldr	r6, [pc, #112]	; (2a8 <ConvertPressureTemperature+0x8c>)
     236:	1c38      	adds	r0, r7, #0
     238:	9301      	str	r3, [sp, #4]
     23a:	1c19      	adds	r1, r3, #0
     23c:	2300      	movs	r3, #0
     23e:	47b0      	blx	r6
     240:	064d      	lsls	r5, r1, #25
     242:	09c2      	lsrs	r2, r0, #7
     244:	432a      	orrs	r2, r5
     246:	09cb      	lsrs	r3, r1, #7
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
     248:	4640      	mov	r0, r8
     24a:	8805      	ldrh	r5, [r0, #0]
    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
     24c:	2100      	movs	r1, #0
     24e:	0428      	lsls	r0, r5, #16
     250:	1812      	adds	r2, r2, r0
     252:	414b      	adcs	r3, r1
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     254:	1c20      	adds	r0, r4, #0
     256:	2100      	movs	r1, #0
     258:	47b0      	blx	r6
     25a:	17cc      	asrs	r4, r1, #31
     25c:	0ae2      	lsrs	r2, r4, #11
     25e:	2300      	movs	r3, #0
     260:	1880      	adds	r0, r0, r2
     262:	4159      	adcs	r1, r3
     264:	02cb      	lsls	r3, r1, #11
     266:	0d44      	lsrs	r4, r0, #21
     268:	431c      	orrs	r4, r3
     26a:	154d      	asrs	r5, r1, #21
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
    const uint64_t C3 = (uint64_t)(*(coefficients + 2));
    const uint64_t C4 = (uint64_t)(*(coefficients + 3));
     26c:	4642      	mov	r2, r8
     26e:	88d2      	ldrh	r2, [r2, #6]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     270:	1c38      	adds	r0, r7, #0
     272:	9901      	ldr	r1, [sp, #4]
     274:	2300      	movs	r3, #0
     276:	47b0      	blx	r6
     278:	068b      	lsls	r3, r1, #26
     27a:	0986      	lsrs	r6, r0, #6
     27c:	431e      	orrs	r6, r3
     27e:	098f      	lsrs	r7, r1, #6
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
    const uint64_t C1 = (uint64_t)(*coefficients);
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
     280:	4643      	mov	r3, r8
     282:	8859      	ldrh	r1, [r3, #2]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT    = *temperature - (C5 * 256);
    const  int32_t temp  = 2000 + (dT * C6) / (8388608) ;

    const  int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     284:	0bcb      	lsrs	r3, r1, #15
     286:	044a      	lsls	r2, r1, #17
     288:	1992      	adds	r2, r2, r6
     28a:	417b      	adcs	r3, r7
    const  int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
    const  int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     28c:	1aa4      	subs	r4, r4, r2
     28e:	419d      	sbcs	r5, r3
     290:	17eb      	asrs	r3, r5, #31
     292:	0c58      	lsrs	r0, r3, #17
     294:	2100      	movs	r1, #0
     296:	1824      	adds	r4, r4, r0
     298:	414d      	adcs	r5, r1
     29a:	046b      	lsls	r3, r5, #17
     29c:	0be0      	lsrs	r0, r4, #15
     29e:	4318      	orrs	r0, r3
    return press;
}
     2a0:	b002      	add	sp, #8
     2a2:	bc04      	pop	{r2}
     2a4:	4690      	mov	r8, r2
     2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2a8:	000010d1 	.word	0x000010d1

000002ac <pascalToCent>:

    double altFeet = (1-pow((pressMillibar/1013.25),(0.190284)))*145366.45;
    return (float)altFeet;
}

uint32_t pascalToCent(const int32_t pressurePa) {
     2ac:	b530      	push	{r4, r5, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    if (pressurePa > PA_INIT)
     2ae:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <pascalToCent+0x38>)
     2b0:	4298      	cmp	r0, r3
     2b2:	dc12      	bgt.n	2da <pascalToCent+0x2e>
        return lookupTable[0];
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
     2b4:	1a1b      	subs	r3, r3, r0
     2b6:	129b      	asrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     2b8:	2b4b      	cmp	r3, #75	; 0x4b
     2ba:	dc10      	bgt.n	2de <pascalToCent+0x32>
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     2bc:	4c0a      	ldr	r4, [pc, #40]	; (2e8 <pascalToCent+0x3c>)
     2be:	009a      	lsls	r2, r3, #2
     2c0:	5912      	ldr	r2, [r2, r4]
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
     2c2:	029d      	lsls	r5, r3, #10
     2c4:	4907      	ldr	r1, [pc, #28]	; (2e4 <pascalToCent+0x38>)
     2c6:	1b49      	subs	r1, r1, r5
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
     2c8:	1a08      	subs	r0, r1, r0
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     2ca:	3301      	adds	r3, #1
     2cc:	009b      	lsls	r3, r3, #2
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
     2ce:	591b      	ldr	r3, [r3, r4]
     2d0:	1a9b      	subs	r3, r3, r2
     2d2:	4358      	muls	r0, r3
     2d4:	1280      	asrs	r0, r0, #10
     2d6:	1880      	adds	r0, r0, r2
     2d8:	e002      	b.n	2e0 <pascalToCent+0x34>
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    if (pressurePa > PA_INIT)
        return lookupTable[0];
     2da:	4804      	ldr	r0, [pc, #16]	; (2ec <pascalToCent+0x40>)
     2dc:	e000      	b.n	2e0 <pascalToCent+0x34>
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
     2de:	4804      	ldr	r0, [pc, #16]	; (2f0 <pascalToCent+0x44>)
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
        }
    }
     2e0:	bd30      	pop	{r4, r5, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	000199cc 	.word	0x000199cc
     2e8:	00001e90 	.word	0x00001e90
     2ec:	ffff8d20 	.word	0xffff8d20
     2f0:	000f048e 	.word	0x000f048e

000002f4 <accelSample>:
int16_t Z;
float Xf;
float Yf;
float Zf;

bool accelSample() {
     2f4:	b510      	push	{r4, lr}

    switch(accelSampleState) {
     2f6:	4b4b      	ldr	r3, [pc, #300]	; (424 <accelSample+0x130>)
     2f8:	781a      	ldrb	r2, [r3, #0]
     2fa:	2a07      	cmp	r2, #7
     2fc:	d803      	bhi.n	306 <accelSample+0x12>
     2fe:	0093      	lsls	r3, r2, #2
     300:	4a49      	ldr	r2, [pc, #292]	; (428 <accelSample+0x134>)
     302:	58d3      	ldr	r3, [r2, r3]
     304:	469f      	mov	pc, r3

        return true;
        break;
		
    default:
        return false;
     306:	2000      	movs	r0, #0
     308:	e08a      	b.n	420 <accelSample+0x12c>

bool accelSample() {

    switch(accelSampleState) {
    case accelSampleEmpty:
        getADXL345Event(&regAccelData[0]);
     30a:	4848      	ldr	r0, [pc, #288]	; (42c <accelSample+0x138>)
     30c:	4b48      	ldr	r3, [pc, #288]	; (430 <accelSample+0x13c>)
     30e:	4798      	blx	r3
        accelSampleState++;
     310:	4a44      	ldr	r2, [pc, #272]	; (424 <accelSample+0x130>)
     312:	7813      	ldrb	r3, [r2, #0]
     314:	3301      	adds	r3, #1
     316:	7013      	strb	r3, [r2, #0]
        return false;
     318:	2000      	movs	r0, #0
     31a:	e081      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     31c:	4b43      	ldr	r3, [pc, #268]	; (42c <accelSample+0x138>)
     31e:	785b      	ldrb	r3, [r3, #1]
    if (negative) {
     320:	b25a      	sxtb	r2, r3
     322:	2a00      	cmp	r2, #0
     324:	da07      	bge.n	336 <accelSample+0x42>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     326:	4a43      	ldr	r2, [pc, #268]	; (434 <accelSample+0x140>)
     328:	4313      	orrs	r3, r2
     32a:	021b      	lsls	r3, r3, #8
     32c:	4a3f      	ldr	r2, [pc, #252]	; (42c <accelSample+0x138>)
     32e:	7812      	ldrb	r2, [r2, #0]
     330:	4313      	orrs	r3, r2
     332:	b29b      	uxth	r3, r3
     334:	e004      	b.n	340 <accelSample+0x4c>
    } else {
        result = (*(values + 1) << 8) + *values;
     336:	021b      	lsls	r3, r3, #8
     338:	4a3c      	ldr	r2, [pc, #240]	; (42c <accelSample+0x138>)
     33a:	7812      	ldrb	r2, [r2, #0]
     33c:	18d3      	adds	r3, r2, r3
     33e:	b29b      	uxth	r3, r3
        break;
    case accelSampleretreaved:
        X = Convert2C(&regAccelData[0]);
     340:	4a3d      	ldr	r2, [pc, #244]	; (438 <accelSample+0x144>)
     342:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     344:	2202      	movs	r2, #2
     346:	4b37      	ldr	r3, [pc, #220]	; (424 <accelSample+0x130>)
     348:	701a      	strb	r2, [r3, #0]
        return false;
     34a:	2000      	movs	r0, #0
     34c:	e068      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     34e:	4b37      	ldr	r3, [pc, #220]	; (42c <accelSample+0x138>)
     350:	78db      	ldrb	r3, [r3, #3]
    if (negative) {
     352:	b25a      	sxtb	r2, r3
     354:	2a00      	cmp	r2, #0
     356:	da07      	bge.n	368 <accelSample+0x74>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     358:	4a36      	ldr	r2, [pc, #216]	; (434 <accelSample+0x140>)
     35a:	4313      	orrs	r3, r2
     35c:	021b      	lsls	r3, r3, #8
     35e:	4a33      	ldr	r2, [pc, #204]	; (42c <accelSample+0x138>)
     360:	7892      	ldrb	r2, [r2, #2]
     362:	4313      	orrs	r3, r2
     364:	b29b      	uxth	r3, r3
     366:	e004      	b.n	372 <accelSample+0x7e>
    } else {
        result = (*(values + 1) << 8) + *values;
     368:	021b      	lsls	r3, r3, #8
     36a:	4a30      	ldr	r2, [pc, #192]	; (42c <accelSample+0x138>)
     36c:	7892      	ldrb	r2, [r2, #2]
     36e:	18d3      	adds	r3, r2, r3
     370:	b29b      	uxth	r3, r3
        break;
    case accelSampleXIntConverted:
        Y = Convert2C(&regAccelData[2]);
     372:	4a32      	ldr	r2, [pc, #200]	; (43c <accelSample+0x148>)
     374:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     376:	2203      	movs	r2, #3
     378:	4b2a      	ldr	r3, [pc, #168]	; (424 <accelSample+0x130>)
     37a:	701a      	strb	r2, [r3, #0]
        return false;
     37c:	2000      	movs	r0, #0
     37e:	e04f      	b.n	420 <accelSample+0x12c>
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     380:	4b2a      	ldr	r3, [pc, #168]	; (42c <accelSample+0x138>)
     382:	795b      	ldrb	r3, [r3, #5]
    if (negative) {
     384:	b25a      	sxtb	r2, r3
     386:	2a00      	cmp	r2, #0
     388:	da07      	bge.n	39a <accelSample+0xa6>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     38a:	4a2a      	ldr	r2, [pc, #168]	; (434 <accelSample+0x140>)
     38c:	4313      	orrs	r3, r2
     38e:	021b      	lsls	r3, r3, #8
     390:	4a26      	ldr	r2, [pc, #152]	; (42c <accelSample+0x138>)
     392:	7912      	ldrb	r2, [r2, #4]
     394:	4313      	orrs	r3, r2
     396:	b29b      	uxth	r3, r3
     398:	e004      	b.n	3a4 <accelSample+0xb0>
    } else {
        result = (*(values + 1) << 8) + *values;
     39a:	021b      	lsls	r3, r3, #8
     39c:	4a23      	ldr	r2, [pc, #140]	; (42c <accelSample+0x138>)
     39e:	7912      	ldrb	r2, [r2, #4]
     3a0:	18d3      	adds	r3, r2, r3
     3a2:	b29b      	uxth	r3, r3
        break;
    case accelSampleYIntConverted:
        Z = Convert2C(&regAccelData[4]);
     3a4:	4a26      	ldr	r2, [pc, #152]	; (440 <accelSample+0x14c>)
     3a6:	8013      	strh	r3, [r2, #0]
        accelSampleState++;
     3a8:	2204      	movs	r2, #4
     3aa:	4b1e      	ldr	r3, [pc, #120]	; (424 <accelSample+0x130>)
     3ac:	701a      	strb	r2, [r3, #0]
        return false;
     3ae:	2000      	movs	r0, #0
     3b0:	e036      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleZIntConverted:
        Xf = X * ADXL345_MG2G_MULTIPLIER;
     3b2:	4b21      	ldr	r3, [pc, #132]	; (438 <accelSample+0x144>)
     3b4:	2000      	movs	r0, #0
     3b6:	5e18      	ldrsh	r0, [r3, r0]
     3b8:	4b22      	ldr	r3, [pc, #136]	; (444 <accelSample+0x150>)
     3ba:	4798      	blx	r3
     3bc:	4a22      	ldr	r2, [pc, #136]	; (448 <accelSample+0x154>)
     3be:	4b23      	ldr	r3, [pc, #140]	; (44c <accelSample+0x158>)
     3c0:	4c23      	ldr	r4, [pc, #140]	; (450 <accelSample+0x15c>)
     3c2:	47a0      	blx	r4
     3c4:	4b23      	ldr	r3, [pc, #140]	; (454 <accelSample+0x160>)
     3c6:	4798      	blx	r3
     3c8:	4b23      	ldr	r3, [pc, #140]	; (458 <accelSample+0x164>)
     3ca:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     3cc:	2205      	movs	r2, #5
     3ce:	4b15      	ldr	r3, [pc, #84]	; (424 <accelSample+0x130>)
     3d0:	701a      	strb	r2, [r3, #0]
        return false;
     3d2:	2000      	movs	r0, #0
     3d4:	e024      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleXFloatConverted:
        Yf = Y * ADXL345_MG2G_MULTIPLIER;
     3d6:	4b19      	ldr	r3, [pc, #100]	; (43c <accelSample+0x148>)
     3d8:	2000      	movs	r0, #0
     3da:	5e18      	ldrsh	r0, [r3, r0]
     3dc:	4b19      	ldr	r3, [pc, #100]	; (444 <accelSample+0x150>)
     3de:	4798      	blx	r3
     3e0:	4a19      	ldr	r2, [pc, #100]	; (448 <accelSample+0x154>)
     3e2:	4b1a      	ldr	r3, [pc, #104]	; (44c <accelSample+0x158>)
     3e4:	4c1a      	ldr	r4, [pc, #104]	; (450 <accelSample+0x15c>)
     3e6:	47a0      	blx	r4
     3e8:	4b1a      	ldr	r3, [pc, #104]	; (454 <accelSample+0x160>)
     3ea:	4798      	blx	r3
     3ec:	4b1b      	ldr	r3, [pc, #108]	; (45c <accelSample+0x168>)
     3ee:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     3f0:	2206      	movs	r2, #6
     3f2:	4b0c      	ldr	r3, [pc, #48]	; (424 <accelSample+0x130>)
     3f4:	701a      	strb	r2, [r3, #0]
        return false;
     3f6:	2000      	movs	r0, #0
     3f8:	e012      	b.n	420 <accelSample+0x12c>
        break;
    case accelSampleYFloatConverted:
        Zf = Z * ADXL345_MG2G_MULTIPLIER;
     3fa:	4b11      	ldr	r3, [pc, #68]	; (440 <accelSample+0x14c>)
     3fc:	2000      	movs	r0, #0
     3fe:	5e18      	ldrsh	r0, [r3, r0]
     400:	4b10      	ldr	r3, [pc, #64]	; (444 <accelSample+0x150>)
     402:	4798      	blx	r3
     404:	4a10      	ldr	r2, [pc, #64]	; (448 <accelSample+0x154>)
     406:	4b11      	ldr	r3, [pc, #68]	; (44c <accelSample+0x158>)
     408:	4c11      	ldr	r4, [pc, #68]	; (450 <accelSample+0x15c>)
     40a:	47a0      	blx	r4
     40c:	4b11      	ldr	r3, [pc, #68]	; (454 <accelSample+0x160>)
     40e:	4798      	blx	r3
     410:	4b13      	ldr	r3, [pc, #76]	; (460 <accelSample+0x16c>)
     412:	6018      	str	r0, [r3, #0]
        accelSampleState++;
     414:	2207      	movs	r2, #7
     416:	4b03      	ldr	r3, [pc, #12]	; (424 <accelSample+0x130>)
     418:	701a      	strb	r2, [r3, #0]
        return false;
     41a:	2000      	movs	r0, #0
     41c:	e000      	b.n	420 <accelSample+0x12c>
        break;
    case accelSapleCooked:

        return true;
     41e:	2001      	movs	r0, #1
        return false;
        break;

    }

}
     420:	bd10      	pop	{r4, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	20000062 	.word	0x20000062
     428:	00001fc4 	.word	0x00001fc4
     42c:	2000005c 	.word	0x2000005c
     430:	00000115 	.word	0x00000115
     434:	ffffff00 	.word	0xffffff00
     438:	20000064 	.word	0x20000064
     43c:	20000048 	.word	0x20000048
     440:	20000058 	.word	0x20000058
     444:	000018f9 	.word	0x000018f9
     448:	8e8a71de 	.word	0x8e8a71de
     44c:	3f6ff2e4 	.word	0x3f6ff2e4
     450:	000013c5 	.word	0x000013c5
     454:	000019d5 	.word	0x000019d5
     458:	20000050 	.word	0x20000050
     45c:	20000054 	.word	0x20000054
     460:	2000004c 	.word	0x2000004c

00000464 <initAccelerometer>:





void initAccelerometer(struct AccelerometerModule *myAccelerometer) {
     464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     466:	1c07      	adds	r7, r0, #0

    accelSampleState = accelSampleEmpty;
     468:	2200      	movs	r2, #0
     46a:	4b20      	ldr	r3, [pc, #128]	; (4ec <initAccelerometer+0x88>)
     46c:	701a      	strb	r2, [r3, #0]



#ifdef HAS_ADXL345

    SaLPinMode(ADXL345_SLAVE_SELECT_PIN,OUTPUT);
     46e:	2010      	movs	r0, #16
     470:	2101      	movs	r1, #1
     472:	4e1f      	ldr	r6, [pc, #124]	; (4f0 <initAccelerometer+0x8c>)
     474:	47b0      	blx	r6
     476:	4c1f      	ldr	r4, [pc, #124]	; (4f4 <initAccelerometer+0x90>)
     478:	2580      	movs	r5, #128	; 0x80
     47a:	026d      	lsls	r5, r5, #9
     47c:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
    SaLPinMode(ADXL345_MOSI_PIN,OUTPUT);
     47e:	200d      	movs	r0, #13
     480:	2101      	movs	r1, #1
     482:	47b0      	blx	r6
    SaLPinMode(ADXL345_SCK_PIN,OUTPUT);
     484:	200f      	movs	r0, #15
     486:	2101      	movs	r1, #1
     488:	47b0      	blx	r6
    SaLPinMode(ADXL345_MISO_PIN,INPUT);
     48a:	200e      	movs	r0, #14
     48c:	2100      	movs	r1, #0
     48e:	47b0      	blx	r6

    myAccelerometer->rate_ = MY_ADXL345_DATA_RATE;
     490:	230e      	movs	r3, #14
     492:	707b      	strb	r3, [r7, #1]
    myAccelerometer->range_ = MY_ADXL345_RANGE;
     494:	3b06      	subs	r3, #6
     496:	703b      	strb	r3, [r7, #0]
    } else {
        port->OUTCLR.reg = pin_mask;
     498:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     49a:	200f      	movs	r0, #15
     49c:	210d      	movs	r1, #13
     49e:	222d      	movs	r2, #45	; 0x2d
     4a0:	4e15      	ldr	r6, [pc, #84]	; (4f8 <initAccelerometer+0x94>)
     4a2:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x00); // disable
     4a4:	200f      	movs	r0, #15
     4a6:	210d      	movs	r1, #13
     4a8:	2200      	movs	r2, #0
     4aa:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4ac:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4ae:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     4b0:	200f      	movs	r0, #15
     4b2:	210d      	movs	r1, #13
     4b4:	222c      	movs	r2, #44	; 0x2c
     4b6:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->rate_);
     4b8:	787a      	ldrb	r2, [r7, #1]
     4ba:	200f      	movs	r0, #15
     4bc:	210d      	movs	r1, #13
     4be:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4c0:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4c2:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     4c4:	200f      	movs	r0, #15
     4c6:	210d      	movs	r1, #13
     4c8:	222c      	movs	r2, #44	; 0x2c
     4ca:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->range_);
     4cc:	783a      	ldrb	r2, [r7, #0]
     4ce:	200f      	movs	r0, #15
     4d0:	210d      	movs	r1, #13
     4d2:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4d4:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     4d6:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     4d8:	200f      	movs	r0, #15
     4da:	210d      	movs	r1, #13
     4dc:	222d      	movs	r2, #45	; 0x2d
     4de:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x08); // enable
     4e0:	200f      	movs	r0, #15
     4e2:	210d      	movs	r1, #13
     4e4:	2208      	movs	r2, #8
     4e6:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4e8:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

#endif

}
     4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4ec:	20000062 	.word	0x20000062
     4f0:	00000a1d 	.word	0x00000a1d
     4f4:	41004400 	.word	0x41004400
     4f8:	000006e1 	.word	0x000006e1

000004fc <SaLGetAccelX>:


float SaLGetAccelX(){
	return Xf;
     4fc:	4b01      	ldr	r3, [pc, #4]	; (504 <SaLGetAccelX+0x8>)
     4fe:	6818      	ldr	r0, [r3, #0]
}
     500:	4770      	bx	lr
     502:	46c0      	nop			; (mov r8, r8)
     504:	20000050 	.word	0x20000050

00000508 <SaLGetAccelY>:
float SaLGetAccelY(){
	return Yf;
     508:	4b01      	ldr	r3, [pc, #4]	; (510 <SaLGetAccelY+0x8>)
     50a:	6818      	ldr	r0, [r3, #0]
}
     50c:	4770      	bx	lr
     50e:	46c0      	nop			; (mov r8, r8)
     510:	20000054 	.word	0x20000054

00000514 <SaLGetAccelZ>:
float SaLGetAccelZ(){
	return Zf;
     514:	4b01      	ldr	r3, [pc, #4]	; (51c <SaLGetAccelZ+0x8>)
     516:	6818      	ldr	r0, [r3, #0]
     518:	4770      	bx	lr
     51a:	46c0      	nop			; (mov r8, r8)
     51c:	2000004c 	.word	0x2000004c

00000520 <initBarometer>:
        break;
    };
};


void initBarometer() {
     520:	b538      	push	{r3, r4, r5, lr}

    baroSampleState = baroSampleEmpty;
     522:	2200      	movs	r2, #0
     524:	4b11      	ldr	r3, [pc, #68]	; (56c <initBarometer+0x4c>)
     526:	701a      	strb	r2, [r3, #0]

#ifdef HAS_MS5607
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     528:	2009      	movs	r0, #9
     52a:	2101      	movs	r1, #1
     52c:	4c10      	ldr	r4, [pc, #64]	; (570 <initBarometer+0x50>)
     52e:	47a0      	blx	r4
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,TRUE);
     530:	2009      	movs	r0, #9
     532:	2101      	movs	r1, #1
     534:	47a0      	blx	r4
    SaLPinMode(MS5607_MOSI_PIN,OUTPUT);
     536:	200d      	movs	r0, #13
     538:	2101      	movs	r1, #1
     53a:	47a0      	blx	r4
    SaLPinMode(MS5607_SCK_PIN,OUTPUT);
     53c:	200f      	movs	r0, #15
     53e:	2101      	movs	r1, #1
     540:	47a0      	blx	r4
    SaLPinMode(MS5607_MISO_PIN,INPUT);
     542:	200e      	movs	r0, #14
     544:	2100      	movs	r1, #0
     546:	47a0      	blx	r4
    } else {
        port->OUTCLR.reg = pin_mask;
     548:	4c0a      	ldr	r4, [pc, #40]	; (574 <initBarometer+0x54>)
     54a:	2580      	movs	r5, #128	; 0x80
     54c:	00ad      	lsls	r5, r5, #2
     54e:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,MS5607_CMD_RES);
     550:	200f      	movs	r0, #15
     552:	210d      	movs	r1, #13
     554:	221e      	movs	r2, #30
     556:	4b08      	ldr	r3, [pc, #32]	; (578 <initBarometer+0x58>)
     558:	4798      	blx	r3
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     55a:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
    delay_us(600);
     55c:	2096      	movs	r0, #150	; 0x96
     55e:	0080      	lsls	r0, r0, #2
     560:	4b06      	ldr	r3, [pc, #24]	; (57c <initBarometer+0x5c>)
     562:	4798      	blx	r3
    getMS5607Coeff(&coefficients_[0]);
     564:	4806      	ldr	r0, [pc, #24]	; (580 <initBarometer+0x60>)
     566:	4b07      	ldr	r3, [pc, #28]	; (584 <initBarometer+0x64>)
     568:	4798      	blx	r3
#endif

}
     56a:	bd38      	pop	{r3, r4, r5, pc}
     56c:	20000078 	.word	0x20000078
     570:	00000a1d 	.word	0x00000a1d
     574:	41004400 	.word	0x41004400
     578:	000006e1 	.word	0x000006e1
     57c:	000009c9 	.word	0x000009c9
     580:	2000003c 	.word	0x2000003c
     584:	000001a5 	.word	0x000001a5

00000588 <sendMS5607D2ReadReq>:

void sendMS5607D2ReadReq(uint8_t _cmd) {
     588:	b538      	push	{r3, r4, r5, lr}
     58a:	1c02      	adds	r2, r0, #0
    } else {
        port->OUTCLR.reg = pin_mask;
     58c:	4c04      	ldr	r4, [pc, #16]	; (5a0 <sendMS5607D2ReadReq+0x18>)
     58e:	2580      	movs	r5, #128	; 0x80
     590:	00ad      	lsls	r5, r5, #2
     592:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     594:	200f      	movs	r0, #15
     596:	210d      	movs	r1, #13
     598:	4b02      	ldr	r3, [pc, #8]	; (5a4 <sendMS5607D2ReadReq+0x1c>)
     59a:	4798      	blx	r3
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     59c:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
     59e:	bd38      	pop	{r3, r4, r5, pc}
     5a0:	41004400 	.word	0x41004400
     5a4:	000006e1 	.word	0x000006e1

000005a8 <baroSample>:
uint32_t mills;
enum baroSampleState baroSampleState;

uint16_t hits;

bool baroSample(void) {
     5a8:	b508      	push	{r3, lr}

    switch (baroSampleState) {
     5aa:	4b3c      	ldr	r3, [pc, #240]	; (69c <baroSample+0xf4>)
     5ac:	781a      	ldrb	r2, [r3, #0]
     5ae:	2a08      	cmp	r2, #8
     5b0:	d803      	bhi.n	5ba <baroSample+0x12>
     5b2:	0093      	lsls	r3, r2, #2
     5b4:	4a3a      	ldr	r2, [pc, #232]	; (6a0 <baroSample+0xf8>)
     5b6:	58d3      	ldr	r3, [r2, r3]
     5b8:	469f      	mov	pc, r3
    case baroSampleHeightCalculated:
        //some kind of baroSamplePut(currentAltinCm);
        return true;
        break;
    default:
        return false;
     5ba:	2000      	movs	r0, #0
     5bc:	e06d      	b.n	69a <baroSample+0xf2>

bool baroSample(void) {

    switch (baroSampleState) {
    case baroSampleEmpty:
        sendMS5607D2ReadReq(cmdAdcD1_);
     5be:	2040      	movs	r0, #64	; 0x40
     5c0:	4b38      	ldr	r3, [pc, #224]	; (6a4 <baroSample+0xfc>)
     5c2:	4798      	blx	r3
        baroSampleState++;
     5c4:	4a35      	ldr	r2, [pc, #212]	; (69c <baroSample+0xf4>)
     5c6:	7813      	ldrb	r3, [r2, #0]
     5c8:	3301      	adds	r3, #1
     5ca:	7013      	strb	r3, [r2, #0]
        mills = millis();
     5cc:	4b36      	ldr	r3, [pc, #216]	; (6a8 <baroSample+0x100>)
     5ce:	4798      	blx	r3
     5d0:	4b36      	ldr	r3, [pc, #216]	; (6ac <baroSample+0x104>)
     5d2:	6018      	str	r0, [r3, #0]
        return false;
     5d4:	2000      	movs	r0, #0
     5d6:	e060      	b.n	69a <baroSample+0xf2>
        break;
    case baroSamplePressureRequested:
        //timer interrupt will send baroSampleState++
        if (millis() - mills > 22) {
     5d8:	4b33      	ldr	r3, [pc, #204]	; (6a8 <baroSample+0x100>)
     5da:	4798      	blx	r3
     5dc:	4b33      	ldr	r3, [pc, #204]	; (6ac <baroSample+0x104>)
     5de:	681b      	ldr	r3, [r3, #0]
     5e0:	1ac0      	subs	r0, r0, r3
     5e2:	2816      	cmp	r0, #22
     5e4:	d905      	bls.n	5f2 <baroSample+0x4a>
            baroSampleState++;
     5e6:	4a2d      	ldr	r2, [pc, #180]	; (69c <baroSample+0xf4>)
     5e8:	7813      	ldrb	r3, [r2, #0]
     5ea:	3301      	adds	r3, #1
     5ec:	7013      	strb	r3, [r2, #0]
        } else {
            hits++;
        }
        return false;
     5ee:	2000      	movs	r0, #0
     5f0:	e053      	b.n	69a <baroSample+0xf2>
    case baroSamplePressureRequested:
        //timer interrupt will send baroSampleState++
        if (millis() - mills > 22) {
            baroSampleState++;
        } else {
            hits++;
     5f2:	4a2f      	ldr	r2, [pc, #188]	; (6b0 <baroSample+0x108>)
     5f4:	8813      	ldrh	r3, [r2, #0]
     5f6:	3301      	adds	r3, #1
     5f8:	8013      	strh	r3, [r2, #0]
        }
        return false;
     5fa:	2000      	movs	r0, #0
     5fc:	e04d      	b.n	69a <baroSample+0xf2>
        break;
    case baroSamplePressureReady:
        pressure = readMS5607AdcResults();
     5fe:	4b2d      	ldr	r3, [pc, #180]	; (6b4 <baroSample+0x10c>)
     600:	4798      	blx	r3
     602:	4b2d      	ldr	r3, [pc, #180]	; (6b8 <baroSample+0x110>)
     604:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     606:	4a25      	ldr	r2, [pc, #148]	; (69c <baroSample+0xf4>)
     608:	7813      	ldrb	r3, [r2, #0]
     60a:	3301      	adds	r3, #1
     60c:	7013      	strb	r3, [r2, #0]
        return false;
     60e:	2000      	movs	r0, #0
     610:	e043      	b.n	69a <baroSample+0xf2>
        break;
    case baroSamplePressureRetreaved:
        sendMS5607D2ReadReq(cmdAdcD2_);
     612:	2050      	movs	r0, #80	; 0x50
     614:	4b23      	ldr	r3, [pc, #140]	; (6a4 <baroSample+0xfc>)
     616:	4798      	blx	r3
        baroSampleState++;
     618:	4a20      	ldr	r2, [pc, #128]	; (69c <baroSample+0xf4>)
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	3301      	adds	r3, #1
     61e:	7013      	strb	r3, [r2, #0]
        mills = millis();
     620:	4b21      	ldr	r3, [pc, #132]	; (6a8 <baroSample+0x100>)
     622:	4798      	blx	r3
     624:	4b21      	ldr	r3, [pc, #132]	; (6ac <baroSample+0x104>)
     626:	6018      	str	r0, [r3, #0]
        return false;
     628:	2000      	movs	r0, #0
     62a:	e036      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRequested:
        if (millis() - mills > 22) {
     62c:	4b1e      	ldr	r3, [pc, #120]	; (6a8 <baroSample+0x100>)
     62e:	4798      	blx	r3
     630:	4b1e      	ldr	r3, [pc, #120]	; (6ac <baroSample+0x104>)
     632:	681b      	ldr	r3, [r3, #0]
     634:	1ac0      	subs	r0, r0, r3
     636:	2816      	cmp	r0, #22
     638:	d905      	bls.n	646 <baroSample+0x9e>
            baroSampleState++;
     63a:	4a18      	ldr	r2, [pc, #96]	; (69c <baroSample+0xf4>)
     63c:	7813      	ldrb	r3, [r2, #0]
     63e:	3301      	adds	r3, #1
     640:	7013      	strb	r3, [r2, #0]
        } else {
            hits++;
        }
        return false;
     642:	2000      	movs	r0, #0
     644:	e029      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRequested:
        if (millis() - mills > 22) {
            baroSampleState++;
        } else {
            hits++;
     646:	4a1a      	ldr	r2, [pc, #104]	; (6b0 <baroSample+0x108>)
     648:	8813      	ldrh	r3, [r2, #0]
     64a:	3301      	adds	r3, #1
     64c:	8013      	strh	r3, [r2, #0]
        }
        return false;
     64e:	2000      	movs	r0, #0
     650:	e023      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleTemperatureReady:
        temperature = readMS5607AdcResults();
     652:	4b18      	ldr	r3, [pc, #96]	; (6b4 <baroSample+0x10c>)
     654:	4798      	blx	r3
     656:	4b19      	ldr	r3, [pc, #100]	; (6bc <baroSample+0x114>)
     658:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     65a:	4a10      	ldr	r2, [pc, #64]	; (69c <baroSample+0xf4>)
     65c:	7813      	ldrb	r3, [r2, #0]
     65e:	3301      	adds	r3, #1
     660:	7013      	strb	r3, [r2, #0]
        return false;
     662:	2000      	movs	r0, #0
     664:	e019      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleTemperatureRetreaved:
        pascelFromPresTempConv = ConvertPressureTemperature(&pressure, &temperature,&coefficients_[0]);
     666:	4814      	ldr	r0, [pc, #80]	; (6b8 <baroSample+0x110>)
     668:	4914      	ldr	r1, [pc, #80]	; (6bc <baroSample+0x114>)
     66a:	4a15      	ldr	r2, [pc, #84]	; (6c0 <baroSample+0x118>)
     66c:	4b15      	ldr	r3, [pc, #84]	; (6c4 <baroSample+0x11c>)
     66e:	4798      	blx	r3
     670:	4b15      	ldr	r3, [pc, #84]	; (6c8 <baroSample+0x120>)
     672:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     674:	4a09      	ldr	r2, [pc, #36]	; (69c <baroSample+0xf4>)
     676:	7813      	ldrb	r3, [r2, #0]
     678:	3301      	adds	r3, #1
     67a:	7013      	strb	r3, [r2, #0]
        return false;
     67c:	2000      	movs	r0, #0
     67e:	e00c      	b.n	69a <baroSample+0xf2>
        break;
    case baroSamplePascelCalculated:
        currentAltinCm = pascalToCent(pascelFromPresTempConv);
     680:	4b11      	ldr	r3, [pc, #68]	; (6c8 <baroSample+0x120>)
     682:	6818      	ldr	r0, [r3, #0]
     684:	4b11      	ldr	r3, [pc, #68]	; (6cc <baroSample+0x124>)
     686:	4798      	blx	r3
     688:	4b11      	ldr	r3, [pc, #68]	; (6d0 <baroSample+0x128>)
     68a:	6018      	str	r0, [r3, #0]
        baroSampleState++;
     68c:	4a03      	ldr	r2, [pc, #12]	; (69c <baroSample+0xf4>)
     68e:	7813      	ldrb	r3, [r2, #0]
     690:	3301      	adds	r3, #1
     692:	7013      	strb	r3, [r2, #0]
        return false;
     694:	2000      	movs	r0, #0
     696:	e000      	b.n	69a <baroSample+0xf2>
        break;
    case baroSampleHeightCalculated:
        //some kind of baroSamplePut(currentAltinCm);
        return true;
     698:	2001      	movs	r0, #1
        break;
    default:
        return false;
        break;
    };
};
     69a:	bd08      	pop	{r3, pc}
     69c:	20000078 	.word	0x20000078
     6a0:	00001fe4 	.word	0x00001fe4
     6a4:	00000589 	.word	0x00000589
     6a8:	00000971 	.word	0x00000971
     6ac:	20000074 	.word	0x20000074
     6b0:	20000070 	.word	0x20000070
     6b4:	00000155 	.word	0x00000155
     6b8:	2000006c 	.word	0x2000006c
     6bc:	20000068 	.word	0x20000068
     6c0:	2000003c 	.word	0x2000003c
     6c4:	0000021d 	.word	0x0000021d
     6c8:	20000080 	.word	0x20000080
     6cc:	000002ad 	.word	0x000002ad
     6d0:	2000007c 	.word	0x2000007c

000006d4 <SaLBaroGetHeight>:
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}


uint32_t SaLBaroGetHeight() {
    return currentAltinCm;
     6d4:	4b01      	ldr	r3, [pc, #4]	; (6dc <SaLBaroGetHeight+0x8>)
     6d6:	6818      	ldr	r0, [r3, #0]
     6d8:	4770      	bx	lr
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	2000007c 	.word	0x2000007c

000006e0 <byteOut>:



void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {
     6e0:	b570      	push	{r4, r5, r6, lr}
     6e2:	09c3      	lsrs	r3, r0, #7
     6e4:	2400      	movs	r4, #0
     6e6:	2b00      	cmp	r3, #0
     6e8:	d104      	bne.n	6f4 <byteOut+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     6ea:	0944      	lsrs	r4, r0, #5
     6ec:	01e4      	lsls	r4, r4, #7
     6ee:	4b13      	ldr	r3, [pc, #76]	; (73c <byteOut+0x5c>)
     6f0:	469c      	mov	ip, r3
     6f2:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     6f4:	231f      	movs	r3, #31
     6f6:	4018      	ands	r0, r3
     6f8:	3b1e      	subs	r3, #30
     6fa:	4083      	lsls	r3, r0
     6fc:	1c18      	adds	r0, r3, #0
     6fe:	09cb      	lsrs	r3, r1, #7
     700:	2600      	movs	r6, #0
     702:	2b00      	cmp	r3, #0
     704:	d104      	bne.n	710 <byteOut+0x30>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     706:	094e      	lsrs	r6, r1, #5
     708:	01f6      	lsls	r6, r6, #7
     70a:	4b0c      	ldr	r3, [pc, #48]	; (73c <byteOut+0x5c>)
     70c:	469c      	mov	ip, r3
     70e:	4466      	add	r6, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     710:	231f      	movs	r3, #31
     712:	4019      	ands	r1, r3
     714:	3b1e      	subs	r3, #30
     716:	408b      	lsls	r3, r1
     718:	1c19      	adds	r1, r3, #0
     71a:	2308      	movs	r3, #8


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     71c:	6160      	str	r0, [r4, #20]

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        if (byte & 0x80) {
     71e:	b255      	sxtb	r5, r2
     720:	2d00      	cmp	r5, #0
     722:	da01      	bge.n	728 <byteOut+0x48>
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     724:	61b1      	str	r1, [r6, #24]
     726:	e000      	b.n	72a <byteOut+0x4a>
    } else {
        port->OUTCLR.reg = pin_mask;
     728:	6171      	str	r1, [r6, #20]
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     72a:	61a0      	str	r0, [r4, #24]
            SaLDigitalOut(MOSI_PIN,true);
        } else {
            SaLDigitalOut(MOSI_PIN,false);
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
     72c:	0052      	lsls	r2, r2, #1
     72e:	b2d2      	uxtb	r2, r2
     730:	3b01      	subs	r3, #1
     732:	b2db      	uxtb	r3, r3

void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     734:	2b00      	cmp	r3, #0
     736:	d1f1      	bne.n	71c <byteOut+0x3c>
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
    }

}
     738:	bd70      	pop	{r4, r5, r6, pc}
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	41004400 	.word	0x41004400

00000740 <getByte>:
    }

}

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
     740:	b5f0      	push	{r4, r5, r6, r7, lr}
     742:	09c3      	lsrs	r3, r0, #7
     744:	2400      	movs	r4, #0
     746:	2b00      	cmp	r3, #0
     748:	d104      	bne.n	754 <getByte+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     74a:	0944      	lsrs	r4, r0, #5
     74c:	01e4      	lsls	r4, r4, #7
     74e:	4b12      	ldr	r3, [pc, #72]	; (798 <getByte+0x58>)
     750:	469c      	mov	ip, r3
     752:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     754:	251f      	movs	r5, #31
     756:	4028      	ands	r0, r5
     758:	3d1e      	subs	r5, #30
     75a:	4085      	lsls	r5, r0
     75c:	09cb      	lsrs	r3, r1, #7
     75e:	2600      	movs	r6, #0
     760:	2b00      	cmp	r3, #0
     762:	d104      	bne.n	76e <getByte+0x2e>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     764:	094e      	lsrs	r6, r1, #5
     766:	01f6      	lsls	r6, r6, #7
     768:	4b0b      	ldr	r3, [pc, #44]	; (798 <getByte+0x58>)
     76a:	469c      	mov	ip, r3
     76c:	4466      	add	r6, ip
    }
}

static inline bool SaLDigitalIn(uint8_t pin) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     76e:	231f      	movs	r3, #31
     770:	4019      	ands	r1, r3
     772:	3b1e      	subs	r3, #30
     774:	408b      	lsls	r3, r1
     776:	1c19      	adds	r1, r3, #0
     778:	2208      	movs	r2, #8
    uint8_t byte = 0x00;
     77a:	2000      	movs	r0, #0


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     77c:	6165      	str	r5, [r4, #20]
}

static inline bool SaLDigitalIn(uint8_t pin) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
    bool level = (port->IN.reg & pin_mask);
     77e:	6a33      	ldr	r3, [r6, #32]
     780:	400b      	ands	r3, r1
     782:	1e5f      	subs	r7, r3, #1
     784:	41bb      	sbcs	r3, r7

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
     786:	0040      	lsls	r0, r0, #1
     788:	4318      	orrs	r0, r3
     78a:	b2c0      	uxtb	r0, r0
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     78c:	61a5      	str	r5, [r4, #24]
     78e:	3a01      	subs	r2, #1
     790:	b2d2      	uxtb	r2, r2

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
    uint8_t byte = 0x00;

    for (uint8_t i = 0; i<8; ++i) {
     792:	2a00      	cmp	r2, #0
     794:	d1f2      	bne.n	77c <getByte+0x3c>
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
        SaLDigitalOut(SCK_PIN,TRUE);
    }
    return byte;
}
     796:	bdf0      	pop	{r4, r5, r6, r7, pc}
     798:	41004400 	.word	0x41004400

0000079c <SaLPlayTone>:

#include <SaLBuzzer.h>


void SaLPlayTone(int16_t tone_) {
     79c:	b5f0      	push	{r4, r5, r6, r7, lr}
     79e:	464f      	mov	r7, r9
     7a0:	4646      	mov	r6, r8
     7a2:	b4c0      	push	{r6, r7}
     7a4:	b083      	sub	sp, #12
     7a6:	4680      	mov	r8, r0
    int32_t duration = 100000;

    while (elapsed_time < duration) {

        SaLDigitalOut(BUZZER,true);
        delay_us(tone_/2);
     7a8:	0fc6      	lsrs	r6, r0, #31
     7aa:	4446      	add	r6, r8
     7ac:	1073      	asrs	r3, r6, #1
     7ae:	9301      	str	r3, [sp, #4]


void SaLPlayTone(int16_t tone_) {


    int32_t elapsed_time = 0;
     7b0:	2400      	movs	r4, #0
     7b2:	4f0b      	ldr	r7, [pc, #44]	; (7e0 <SaLPlayTone+0x44>)
     7b4:	2380      	movs	r3, #128	; 0x80
     7b6:	015b      	lsls	r3, r3, #5
     7b8:	4699      	mov	r9, r3
     7ba:	1c1e      	adds	r6, r3, #0
     7bc:	61be      	str	r6, [r7, #24]
    int32_t duration = 100000;

    while (elapsed_time < duration) {

        SaLDigitalOut(BUZZER,true);
        delay_us(tone_/2);
     7be:	9801      	ldr	r0, [sp, #4]
     7c0:	4d08      	ldr	r5, [pc, #32]	; (7e4 <SaLPlayTone+0x48>)
     7c2:	47a8      	blx	r5
    } else {
        port->OUTCLR.reg = pin_mask;
     7c4:	464b      	mov	r3, r9
     7c6:	617b      	str	r3, [r7, #20]

        SaLDigitalOut(BUZZER, false);
        delay_us(tone_/2);
     7c8:	9801      	ldr	r0, [sp, #4]
     7ca:	47a8      	blx	r5
     7cc:	4444      	add	r4, r8


    int32_t elapsed_time = 0;
    int32_t duration = 100000;

    while (elapsed_time < duration) {
     7ce:	4b06      	ldr	r3, [pc, #24]	; (7e8 <SaLPlayTone+0x4c>)
     7d0:	429c      	cmp	r4, r3
     7d2:	ddf3      	ble.n	7bc <SaLPlayTone+0x20>


    }


     7d4:	b003      	add	sp, #12
     7d6:	bc0c      	pop	{r2, r3}
     7d8:	4690      	mov	r8, r2
     7da:	4699      	mov	r9, r3
     7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	41004400 	.word	0x41004400
     7e4:	000009c9 	.word	0x000009c9
     7e8:	0001869f 	.word	0x0001869f

000007ec <SalGclkInit>:
#include <SaLClocks.h>


void SalGclkInit() {

    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     7ec:	4a1e      	ldr	r2, [pc, #120]	; (868 <SalGclkInit+0x7c>)
     7ee:	23c2      	movs	r3, #194	; 0xc2
     7f0:	00db      	lsls	r3, r3, #3
     7f2:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     7f4:	491d      	ldr	r1, [pc, #116]	; (86c <SalGclkInit+0x80>)
     7f6:	6848      	ldr	r0, [r1, #4]
     7f8:	2302      	movs	r3, #2
     7fa:	4303      	orrs	r3, r0
     7fc:	604b      	str	r3, [r1, #4]

// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     7fe:	4b1c      	ldr	r3, [pc, #112]	; (870 <SalGclkInit+0x84>)
     800:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

//wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     802:	1c11      	adds	r1, r2, #0
     804:	2202      	movs	r2, #2
     806:	68cb      	ldr	r3, [r1, #12]
     808:	421a      	tst	r2, r3
     80a:	d0fc      	beq.n	806 <SalGclkInit+0x1a>

//config xosc32k for the dfll via gen1
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(1) |
     80c:	4b19      	ldr	r3, [pc, #100]	; (874 <SalGclkInit+0x88>)
     80e:	2202      	movs	r2, #2
     810:	32ff      	adds	r2, #255	; 0xff
     812:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) |
     814:	4918      	ldr	r1, [pc, #96]	; (878 <SalGclkInit+0x8c>)
     816:	6059      	str	r1, [r3, #4]
                        GCLK_GENCTRL_SRC_XOSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(1) |
     818:	2182      	movs	r1, #130	; 0x82
     81a:	01c9      	lsls	r1, r1, #7
     81c:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_ID_DFLL48;

    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(2) |
     81e:	2181      	movs	r1, #129	; 0x81
     820:	0049      	lsls	r1, r1, #1
     822:	6099      	str	r1, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     824:	4915      	ldr	r1, [pc, #84]	; (87c <SalGclkInit+0x90>)
     826:	6059      	str	r1, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(2) |
     828:	4915      	ldr	r1, [pc, #84]	; (880 <SalGclkInit+0x94>)
     82a:	8059      	strh	r1, [r3, #2]
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
        fine = 0x1ff;
    }
//For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(1));
     82c:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     82e:	4a15      	ldr	r2, [pc, #84]	; (884 <SalGclkInit+0x98>)
     830:	605a      	str	r2, [r3, #4]
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN ) ;
     832:	2280      	movs	r2, #128	; 0x80
     834:	01d2      	lsls	r2, r2, #7
     836:	805a      	strh	r2, [r3, #2]

    SYSCTRL->DFLLCTRL.reg = (SYSCTRL_DFLLCTRL_MODE) |
     838:	4b0b      	ldr	r3, [pc, #44]	; (868 <SalGclkInit+0x7c>)
     83a:	2226      	movs	r2, #38	; 0x26
     83c:	849a      	strh	r2, [r3, #36]	; 0x24
                             SYSCTRL_DFLLCTRL_USBCRM |
                             SYSCTRL_DFLLCTRL_ENABLE;

    SYSCTRL->DFLLMUL.reg = (SYSCTRL_DFLLMUL_CSTEP(1) | SYSCTRL_DFLLMUL_FSTEP(1));
     83e:	4a12      	ldr	r2, [pc, #72]	; (888 <SalGclkInit+0x9c>)
     840:	62da      	str	r2, [r3, #44]	; 0x2c
    SYSCTRL->DFLLMUL.reg |= (SYSCTRL_DFLLMUL_MUL(48000000/32768));
     842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     844:	21b7      	movs	r1, #183	; 0xb7
     846:	00c9      	lsls	r1, r1, #3
     848:	430a      	orrs	r2, r1
     84a:	62da      	str	r2, [r3, #44]	; 0x2c

//Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     84c:	1c19      	adds	r1, r3, #0
     84e:	2210      	movs	r2, #16
     850:	68cb      	ldr	r3, [r1, #12]
     852:	421a      	tst	r2, r3
     854:	d0fc      	beq.n	850 <SalGclkInit+0x64>


    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(4) |
     856:	4b07      	ldr	r3, [pc, #28]	; (874 <SalGclkInit+0x88>)
     858:	2282      	movs	r2, #130	; 0x82
     85a:	0052      	lsls	r2, r2, #1
     85c:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(4) |
     85e:	4a0b      	ldr	r2, [pc, #44]	; (88c <SalGclkInit+0xa0>)
     860:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC4_TC5 |
     862:	4a0b      	ldr	r2, [pc, #44]	; (890 <SalGclkInit+0xa4>)
     864:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_GEN_GCLK4 |
                        GCLK_CLKCTRL_CLKEN;

}
     866:	4770      	bx	lr
     868:	40000800 	.word	0x40000800
     86c:	41004000 	.word	0x41004000
     870:	0000060e 	.word	0x0000060e
     874:	40000c00 	.word	0x40000c00
     878:	00010501 	.word	0x00010501
     87c:	00010402 	.word	0x00010402
     880:	0000421b 	.word	0x0000421b
     884:	00010700 	.word	0x00010700
     888:	04010000 	.word	0x04010000
     88c:	00230604 	.word	0x00230604
     890:	0000441c 	.word	0x0000441c

00000894 <SaLTC4Init>:

void SaLTC4Init() {

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     894:	4a0a      	ldr	r2, [pc, #40]	; (8c0 <SaLTC4Init+0x2c>)
     896:	6a13      	ldr	r3, [r2, #32]
     898:	2180      	movs	r1, #128	; 0x80
     89a:	0149      	lsls	r1, r1, #5
     89c:	430b      	orrs	r3, r1
     89e:	6213      	str	r3, [r2, #32]

    TC4->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 |
     8a0:	4b08      	ldr	r3, [pc, #32]	; (8c4 <SaLTC4Init+0x30>)
     8a2:	22b0      	movs	r2, #176	; 0xb0
     8a4:	0112      	lsls	r2, r2, #4
     8a6:	801a      	strh	r2, [r3, #0]
                             TC_CTRLA_RUNSTDBY |
                             TC_CTRLA_PRESCALER_DIV8;
    //  TC3->COUNT16.PER.reg = 0xFE;

    TC4->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
     8a8:	2201      	movs	r2, #1
     8aa:	735a      	strb	r2, [r3, #13]

    TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     8ac:	8819      	ldrh	r1, [r3, #0]
     8ae:	3201      	adds	r2, #1
     8b0:	430a      	orrs	r2, r1
     8b2:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     8b4:	2280      	movs	r2, #128	; 0x80
     8b6:	0312      	lsls	r2, r2, #12
     8b8:	4b03      	ldr	r3, [pc, #12]	; (8c8 <SaLTC4Init+0x34>)
     8ba:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     8bc:	4770      	bx	lr
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	40000400 	.word	0x40000400
     8c4:	42003000 	.word	0x42003000
     8c8:	e000e100 	.word	0xe000e100

000008cc <SaLRtcInit>:
// }



void SaLRtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     8cc:	4b19      	ldr	r3, [pc, #100]	; (934 <SaLRtcInit+0x68>)
     8ce:	2281      	movs	r2, #129	; 0x81
     8d0:	0052      	lsls	r2, r2, #1
     8d2:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     8d4:	4a18      	ldr	r2, [pc, #96]	; (938 <SaLRtcInit+0x6c>)
     8d6:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     8d8:	1c1a      	adds	r2, r3, #0
     8da:	7853      	ldrb	r3, [r2, #1]
     8dc:	b25b      	sxtb	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	dbfb      	blt.n	8da <SaLRtcInit+0xe>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     8e2:	4a16      	ldr	r2, [pc, #88]	; (93c <SaLRtcInit+0x70>)
     8e4:	4b13      	ldr	r3, [pc, #76]	; (934 <SaLRtcInit+0x68>)
     8e6:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16 |
     8e8:	2204      	movs	r2, #4
     8ea:	4b15      	ldr	r3, [pc, #84]	; (940 <SaLRtcInit+0x74>)
     8ec:	801a      	strh	r2, [r3, #0]
                          RTC_MODE1_CTRL_PRESCALER_DIV1;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     8ee:	1c1a      	adds	r2, r3, #0
     8f0:	7a93      	ldrb	r3, [r2, #10]
     8f2:	09db      	lsrs	r3, r3, #7
     8f4:	d1fc      	bne.n	8f0 <SaLRtcInit+0x24>

// Prescaler needs to be enabled separately from the mode for some reason
//  RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV1;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     8f6:	4a12      	ldr	r2, [pc, #72]	; (940 <SaLRtcInit+0x74>)
     8f8:	7a93      	ldrb	r3, [r2, #10]
     8fa:	09db      	lsrs	r3, r3, #7
     8fc:	d1fc      	bne.n	8f8 <SaLRtcInit+0x2c>

    RTC->MODE1.PER.reg = 998;
     8fe:	4a11      	ldr	r2, [pc, #68]	; (944 <SaLRtcInit+0x78>)
     900:	4b0f      	ldr	r3, [pc, #60]	; (940 <SaLRtcInit+0x74>)
     902:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     904:	1c1a      	adds	r2, r3, #0
     906:	7a93      	ldrb	r3, [r2, #10]
     908:	09db      	lsrs	r3, r3, #7
     90a:	d1fc      	bne.n	906 <SaLRtcInit+0x3a>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     90c:	4b0c      	ldr	r3, [pc, #48]	; (940 <SaLRtcInit+0x74>)
     90e:	8859      	ldrh	r1, [r3, #2]
     910:	4a0d      	ldr	r2, [pc, #52]	; (948 <SaLRtcInit+0x7c>)
     912:	430a      	orrs	r2, r1
     914:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     916:	2280      	movs	r2, #128	; 0x80
     918:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     91a:	8819      	ldrh	r1, [r3, #0]
     91c:	2202      	movs	r2, #2
     91e:	430a      	orrs	r2, r1
     920:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     922:	1c1a      	adds	r2, r3, #0
     924:	7a93      	ldrb	r3, [r2, #10]
     926:	09db      	lsrs	r3, r3, #7
     928:	d1fc      	bne.n	924 <SaLRtcInit+0x58>
     92a:	2208      	movs	r2, #8
     92c:	4b07      	ldr	r3, [pc, #28]	; (94c <SaLRtcInit+0x80>)
     92e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     930:	4770      	bx	lr
     932:	46c0      	nop			; (mov r8, r8)
     934:	40000c00 	.word	0x40000c00
     938:	00230002 	.word	0x00230002
     93c:	00004204 	.word	0x00004204
     940:	40001400 	.word	0x40001400
     944:	000003e6 	.word	0x000003e6
     948:	00004010 	.word	0x00004010
     94c:	e000e100 	.word	0xe000e100

00000950 <RTC_Handler>:

volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     950:	4a05      	ldr	r2, [pc, #20]	; (968 <RTC_Handler+0x18>)
     952:	6813      	ldr	r3, [r2, #0]
     954:	21fa      	movs	r1, #250	; 0xfa
     956:	0089      	lsls	r1, r1, #2
     958:	468c      	mov	ip, r1
     95a:	4463      	add	r3, ip
     95c:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     95e:	22ff      	movs	r2, #255	; 0xff
     960:	4b02      	ldr	r3, [pc, #8]	; (96c <RTC_Handler+0x1c>)
     962:	721a      	strb	r2, [r3, #8]
}
     964:	4770      	bx	lr
     966:	46c0      	nop			; (mov r8, r8)
     968:	20000028 	.word	0x20000028
     96c:	40001400 	.word	0x40001400

00000970 <millis>:

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     970:	f3ef 8110 	mrs	r1, PRIMASK
     974:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     976:	4a0b      	ldr	r2, [pc, #44]	; (9a4 <millis+0x34>)
     978:	8a10      	ldrh	r0, [r2, #16]
     97a:	b280      	uxth	r0, r0
     97c:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <millis+0x38>)
     97e:	681b      	ldr	r3, [r3, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     980:	7a12      	ldrb	r2, [r2, #8]
     982:	09d2      	lsrs	r2, r2, #7
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     984:	18c0      	adds	r0, r0, r3
    if (RTC->MODE1.INTFLAG.bit.OVF)
     986:	2a00      	cmp	r2, #0
     988:	d008      	beq.n	99c <millis+0x2c>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     98a:	4b06      	ldr	r3, [pc, #24]	; (9a4 <millis+0x34>)
     98c:	8a1b      	ldrh	r3, [r3, #16]
     98e:	4a06      	ldr	r2, [pc, #24]	; (9a8 <millis+0x38>)
     990:	6810      	ldr	r0, [r2, #0]
     992:	22fa      	movs	r2, #250	; 0xfa
     994:	0092      	lsls	r2, r2, #2
     996:	4694      	mov	ip, r2
     998:	4460      	add	r0, ip
     99a:	1818      	adds	r0, r3, r0
    ATOMIC_SECTION_LEAVE
     99c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     9a0:	4770      	bx	lr
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	40001400 	.word	0x40001400
     9a8:	20000028 	.word	0x20000028

000009ac <SaLDelayInit>:
static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void SaLDelayInit(void) {
    cycles_per_ms = 32000000UL;
    cycles_per_ms /= 1000;
     9ac:	4b04      	ldr	r3, [pc, #16]	; (9c0 <SaLDelayInit+0x14>)
     9ae:	22fa      	movs	r2, #250	; 0xfa
     9b0:	01d2      	lsls	r2, r2, #7
     9b2:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     9b4:	2220      	movs	r2, #32
     9b6:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     9b8:	3a1b      	subs	r2, #27
     9ba:	4b02      	ldr	r3, [pc, #8]	; (9c4 <SaLDelayInit+0x18>)
     9bc:	601a      	str	r2, [r3, #0]
}
     9be:	4770      	bx	lr
     9c0:	20000000 	.word	0x20000000
     9c4:	e000e010 	.word	0xe000e010

000009c8 <delay_us>:
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
     9c8:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     9ca:	4b08      	ldr	r3, [pc, #32]	; (9ec <delay_us+0x24>)
     9cc:	685c      	ldr	r4, [r3, #4]
void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     9ce:	4a08      	ldr	r2, [pc, #32]	; (9f0 <delay_us+0x28>)
        SysTick->VAL = 0;
     9d0:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9d2:	2180      	movs	r1, #128	; 0x80
     9d4:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
    while (n--) {
     9d6:	e006      	b.n	9e6 <delay_us+0x1e>

void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     9d8:	2c00      	cmp	r4, #0
     9da:	d004      	beq.n	9e6 <delay_us+0x1e>
        SysTick->LOAD = n;
     9dc:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     9de:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9e0:	6813      	ldr	r3, [r2, #0]
     9e2:	420b      	tst	r3, r1
     9e4:	d0fc      	beq.n	9e0 <delay_us+0x18>
     9e6:	3801      	subs	r0, #1
     9e8:	d2f6      	bcs.n	9d8 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     9ea:	bd30      	pop	{r4, r5, pc}
     9ec:	20000000 	.word	0x20000000
     9f0:	e000e010 	.word	0xe000e010

000009f4 <SaLFlashMemInit>:


#include <SaLFlashMem.h>


void SaLFlashMemInit() {
     9f4:	b510      	push	{r4, lr}

#ifdef HAS_AT25SF

    SaLPinMode(AT25SF_SLAVE_SELECT_PIN,OUTPUT);
     9f6:	2008      	movs	r0, #8
     9f8:	2101      	movs	r1, #1
     9fa:	4c07      	ldr	r4, [pc, #28]	; (a18 <SaLFlashMemInit+0x24>)
     9fc:	47a0      	blx	r4
    SaLPinMode(AT25SF_SLAVE_SELECT_PIN,TRUE);
     9fe:	2008      	movs	r0, #8
     a00:	2101      	movs	r1, #1
     a02:	47a0      	blx	r4
    SaLPinMode(AT25SF_MOSI_PIN,OUTPUT);
     a04:	200d      	movs	r0, #13
     a06:	2101      	movs	r1, #1
     a08:	47a0      	blx	r4
    SaLPinMode(AT25SF_SCK_PIN,OUTPUT);
     a0a:	200f      	movs	r0, #15
     a0c:	2101      	movs	r1, #1
     a0e:	47a0      	blx	r4
    SaLPinMode(AT25SF_MISO_PIN,INPUT);
     a10:	200e      	movs	r0, #14
     a12:	2100      	movs	r1, #0
     a14:	47a0      	blx	r4

#endif
}
     a16:	bd10      	pop	{r4, pc}
     a18:	00000a1d 	.word	0x00000a1d

00000a1c <SaLPinMode>:


#include <SaLPort.h>

void SaLPinMode(uint8_t pin,uint8_t DIR) {
     a1c:	b510      	push	{r4, lr}
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     a1e:	09c2      	lsrs	r2, r0, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     a20:	2300      	movs	r3, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     a22:	2a00      	cmp	r2, #0
     a24:	d104      	bne.n	a30 <SaLPinMode+0x14>
        return &(ports[port_index]->Group[group_index]);
     a26:	0943      	lsrs	r3, r0, #5
     a28:	01db      	lsls	r3, r3, #7
     a2a:	4a11      	ldr	r2, [pc, #68]	; (a70 <SaLPinMode+0x54>)
     a2c:	4694      	mov	ip, r2
     a2e:	4463      	add	r3, ip
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     a30:	221f      	movs	r2, #31
     a32:	4002      	ands	r2, r0
     a34:	2401      	movs	r4, #1
     a36:	4094      	lsls	r4, r2

    if ( DIR == OUTPUT) {
     a38:	2901      	cmp	r1, #1
     a3a:	d105      	bne.n	a48 <SaLPinMode+0x2c>
        port->DIRSET.reg = pin_mask;
     a3c:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0;
     a3e:	1818      	adds	r0, r3, r0
     a40:	3040      	adds	r0, #64	; 0x40
     a42:	2300      	movs	r3, #0
     a44:	7003      	strb	r3, [r0, #0]
     a46:	e012      	b.n	a6e <SaLPinMode+0x52>

    } else if(DIR == INPUT) {
     a48:	2900      	cmp	r1, #0
     a4a:	d109      	bne.n	a60 <SaLPinMode+0x44>
        port->DIRCLR.reg = pin_mask;
     a4c:	605c      	str	r4, [r3, #4]
        port->PINCFG[pin].reg = PORT_PINCFG_INEN;
     a4e:	1818      	adds	r0, r3, r0
     a50:	3040      	adds	r0, #64	; 0x40
     a52:	2302      	movs	r3, #2
     a54:	7003      	strb	r3, [r0, #0]
        port->PINCFG[pin].reg |= PORT_PINCFG_PULLEN;
     a56:	7802      	ldrb	r2, [r0, #0]
     a58:	3302      	adds	r3, #2
     a5a:	4313      	orrs	r3, r2
     a5c:	7003      	strb	r3, [r0, #0]
     a5e:	e006      	b.n	a6e <SaLPinMode+0x52>
    } else if (DIR == OUTSTRONG) {
     a60:	2903      	cmp	r1, #3
     a62:	d104      	bne.n	a6e <SaLPinMode+0x52>
        port->DIRSET.reg = pin_mask;
     a64:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0x40;
     a66:	1818      	adds	r0, r3, r0
     a68:	3040      	adds	r0, #64	; 0x40
     a6a:	2340      	movs	r3, #64	; 0x40
     a6c:	7003      	strb	r3, [r0, #0]

    }
     a6e:	bd10      	pop	{r4, pc}
     a70:	41004400 	.word	0x41004400

00000a74 <sampleTick>:
int16_t index222 = 0;
uint16_t thisTime;
uint16_t lastTime;
uint16_t deltatt;

void sampleTick() {
     a74:	b570      	push	{r4, r5, r6, lr}

    if (!baroSampleReady) baroSampleReady = baroSample();
     a76:	4b31      	ldr	r3, [pc, #196]	; (b3c <sampleTick+0xc8>)
     a78:	781b      	ldrb	r3, [r3, #0]
     a7a:	2b00      	cmp	r3, #0
     a7c:	d157      	bne.n	b2e <sampleTick+0xba>
     a7e:	4b30      	ldr	r3, [pc, #192]	; (b40 <sampleTick+0xcc>)
     a80:	4798      	blx	r3
     a82:	4b2e      	ldr	r3, [pc, #184]	; (b3c <sampleTick+0xc8>)
     a84:	7018      	strb	r0, [r3, #0]
    if (!accelSampleReady) accelSampleReady = accelSample();
     a86:	4b2f      	ldr	r3, [pc, #188]	; (b44 <sampleTick+0xd0>)
     a88:	781b      	ldrb	r3, [r3, #0]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d14a      	bne.n	b24 <sampleTick+0xb0>
     a8e:	4b2e      	ldr	r3, [pc, #184]	; (b48 <sampleTick+0xd4>)
     a90:	4798      	blx	r3
     a92:	4a2c      	ldr	r2, [pc, #176]	; (b44 <sampleTick+0xd0>)
     a94:	7010      	strb	r0, [r2, #0]


    if (baroSampleReady && accelSampleReady) {
     a96:	4a29      	ldr	r2, [pc, #164]	; (b3c <sampleTick+0xc8>)
     a98:	7812      	ldrb	r2, [r2, #0]
     a9a:	2a00      	cmp	r2, #0
     a9c:	d04c      	beq.n	b38 <sampleTick+0xc4>
     a9e:	2800      	cmp	r0, #0
     aa0:	d04a      	beq.n	b38 <sampleTick+0xc4>

        sampleBeingCooked.sampleMills = millis();
     aa2:	4b2a      	ldr	r3, [pc, #168]	; (b4c <sampleTick+0xd8>)
     aa4:	4798      	blx	r3
     aa6:	4d2a      	ldr	r5, [pc, #168]	; (b50 <sampleTick+0xdc>)
     aa8:	62a8      	str	r0, [r5, #40]	; 0x28
        sampleBeingCooked.deltaT = sampleBeingCooked.sampleMills - cookedSample.sampleMills;
     aaa:	4e2a      	ldr	r6, [pc, #168]	; (b54 <sampleTick+0xe0>)
     aac:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     aae:	1ac0      	subs	r0, r0, r3
     ab0:	62e8      	str	r0, [r5, #44]	; 0x2c
        sampleBeingCooked.altitude = SaLBaroGetHeight();
     ab2:	4c29      	ldr	r4, [pc, #164]	; (b58 <sampleTick+0xe4>)
     ab4:	47a0      	blx	r4
     ab6:	6068      	str	r0, [r5, #4]
        sampleBeingCooked.accelerationInX = SaLGetAccelX();
     ab8:	4b28      	ldr	r3, [pc, #160]	; (b5c <sampleTick+0xe8>)
     aba:	4798      	blx	r3
     abc:	60e8      	str	r0, [r5, #12]
        sampleBeingCooked.accelerationInY = SaLGetAccelY();
     abe:	4b28      	ldr	r3, [pc, #160]	; (b60 <sampleTick+0xec>)
     ac0:	4798      	blx	r3
     ac2:	6128      	str	r0, [r5, #16]
        sampleBeingCooked.accelerationInZ = SaLGetAccelZ();
     ac4:	4b27      	ldr	r3, [pc, #156]	; (b64 <sampleTick+0xf0>)
     ac6:	4798      	blx	r3
     ac8:	6168      	str	r0, [r5, #20]
        sampleBeingCooked.position = SaLBaroGetHeight();
     aca:	47a0      	blx	r4
     acc:	63a8      	str	r0, [r5, #56]	; 0x38

        //  sampleBeingCooked.velocityStar = cookedSample.positionStar + sampleBeingCooked.accelerationInX*sampleBeingCooked.deltaT;
        //  sampleBeingCooked.positionStar = cookedSample.position +
        //                                 cookedSample.velocityStar * sampleBeingCooked.deltaT +
        //                                   sampleBeingCooked.accelerationInZ *  (pow(sampleBeingCooked.deltaT,2)/2);
        index222++;
     ace:	4b26      	ldr	r3, [pc, #152]	; (b68 <sampleTick+0xf4>)
     ad0:	881c      	ldrh	r4, [r3, #0]
     ad2:	3401      	adds	r4, #1
     ad4:	b2a4      	uxth	r4, r4
     ad6:	801c      	strh	r4, [r3, #0]

        baroSampleState = 0;
     ad8:	2300      	movs	r3, #0
     ada:	4a24      	ldr	r2, [pc, #144]	; (b6c <sampleTick+0xf8>)
     adc:	7013      	strb	r3, [r2, #0]
        accelSampleState = 0;
     ade:	4a24      	ldr	r2, [pc, #144]	; (b70 <sampleTick+0xfc>)
     ae0:	7013      	strb	r3, [r2, #0]
        baroSampleReady = false;
     ae2:	4a16      	ldr	r2, [pc, #88]	; (b3c <sampleTick+0xc8>)
     ae4:	7013      	strb	r3, [r2, #0]
        accelSampleReady = false;
     ae6:	4a17      	ldr	r2, [pc, #92]	; (b44 <sampleTick+0xd0>)
     ae8:	7013      	strb	r3, [r2, #0]
        cookedSample = sampleBeingCooked;
     aea:	1c30      	adds	r0, r6, #0
     aec:	1c29      	adds	r1, r5, #0
     aee:	2240      	movs	r2, #64	; 0x40
     af0:	4b20      	ldr	r3, [pc, #128]	; (b74 <sampleTick+0x100>)
     af2:	4798      	blx	r3


        if (index222 > 5000) {
     af4:	b224      	sxth	r4, r4
     af6:	4b20      	ldr	r3, [pc, #128]	; (b78 <sampleTick+0x104>)
     af8:	429c      	cmp	r4, r3
     afa:	dd1d      	ble.n	b38 <sampleTick+0xc4>
            index222 = 0;
     afc:	2200      	movs	r2, #0
     afe:	4b1a      	ldr	r3, [pc, #104]	; (b68 <sampleTick+0xf4>)
     b00:	801a      	strh	r2, [r3, #0]
            thisTime = millis();
     b02:	4d12      	ldr	r5, [pc, #72]	; (b4c <sampleTick+0xd8>)
     b04:	47a8      	blx	r5
     b06:	b280      	uxth	r0, r0
     b08:	4b1c      	ldr	r3, [pc, #112]	; (b7c <sampleTick+0x108>)
     b0a:	8018      	strh	r0, [r3, #0]
            deltatt = thisTime - lastTime;
     b0c:	4c1c      	ldr	r4, [pc, #112]	; (b80 <sampleTick+0x10c>)
     b0e:	8823      	ldrh	r3, [r4, #0]
     b10:	1ac0      	subs	r0, r0, r3
     b12:	4b1c      	ldr	r3, [pc, #112]	; (b84 <sampleTick+0x110>)
     b14:	8018      	strh	r0, [r3, #0]
            lastTime = millis();
     b16:	47a8      	blx	r5
     b18:	8020      	strh	r0, [r4, #0]
			            SaLPlayTone(400);
     b1a:	20c8      	movs	r0, #200	; 0xc8
     b1c:	0040      	lsls	r0, r0, #1
     b1e:	4b1a      	ldr	r3, [pc, #104]	; (b88 <sampleTick+0x114>)
     b20:	4798      	blx	r3
     b22:	e009      	b.n	b38 <sampleTick+0xc4>

    if (!baroSampleReady) baroSampleReady = baroSample();
    if (!accelSampleReady) accelSampleReady = accelSample();


    if (baroSampleReady && accelSampleReady) {
     b24:	4b05      	ldr	r3, [pc, #20]	; (b3c <sampleTick+0xc8>)
     b26:	781b      	ldrb	r3, [r3, #0]
     b28:	2b00      	cmp	r3, #0
     b2a:	d1ba      	bne.n	aa2 <sampleTick+0x2e>
     b2c:	e004      	b.n	b38 <sampleTick+0xc4>
uint16_t deltatt;

void sampleTick() {

    if (!baroSampleReady) baroSampleReady = baroSample();
    if (!accelSampleReady) accelSampleReady = accelSample();
     b2e:	4b05      	ldr	r3, [pc, #20]	; (b44 <sampleTick+0xd0>)
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	2b00      	cmp	r3, #0
     b34:	d1b5      	bne.n	aa2 <sampleTick+0x2e>
     b36:	e7aa      	b.n	a8e <sampleTick+0x1a>
            lastTime = millis();
			            SaLPlayTone(400);

        }
    }
}
     b38:	bd70      	pop	{r4, r5, r6, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	200000ca 	.word	0x200000ca
     b40:	000005a9 	.word	0x000005a9
     b44:	200000c9 	.word	0x200000c9
     b48:	000002f5 	.word	0x000002f5
     b4c:	00000971 	.word	0x00000971
     b50:	20000088 	.word	0x20000088
     b54:	200000d4 	.word	0x200000d4
     b58:	000006d5 	.word	0x000006d5
     b5c:	000004fd 	.word	0x000004fd
     b60:	00000509 	.word	0x00000509
     b64:	00000515 	.word	0x00000515
     b68:	2000002c 	.word	0x2000002c
     b6c:	20000078 	.word	0x20000078
     b70:	20000062 	.word	0x20000062
     b74:	00000ffd 	.word	0x00000ffd
     b78:	00001388 	.word	0x00001388
     b7c:	200000d2 	.word	0x200000d2
     b80:	200000d0 	.word	0x200000d0
     b84:	20000084 	.word	0x20000084
     b88:	0000079d 	.word	0x0000079d

00000b8c <sampleInit>:

void sampleInit() {
     b8c:	b508      	push	{r3, lr}

    baroSampleReady = false;
     b8e:	2300      	movs	r3, #0
     b90:	4a05      	ldr	r2, [pc, #20]	; (ba8 <sampleInit+0x1c>)
     b92:	7013      	strb	r3, [r2, #0]
    accelSampleReady = false;
     b94:	4a05      	ldr	r2, [pc, #20]	; (bac <sampleInit+0x20>)
     b96:	7013      	strb	r3, [r2, #0]
    gpsSampleReady = false;
     b98:	4a05      	ldr	r2, [pc, #20]	; (bb0 <sampleInit+0x24>)
     b9a:	7013      	strb	r3, [r2, #0]
    cookedSample.sampleMills = millis();
     b9c:	4b05      	ldr	r3, [pc, #20]	; (bb4 <sampleInit+0x28>)
     b9e:	4798      	blx	r3
     ba0:	4b05      	ldr	r3, [pc, #20]	; (bb8 <sampleInit+0x2c>)
     ba2:	6298      	str	r0, [r3, #40]	; 0x28
}
     ba4:	bd08      	pop	{r3, pc}
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	200000ca 	.word	0x200000ca
     bac:	200000c9 	.word	0x200000c9
     bb0:	200000c8 	.word	0x200000c8
     bb4:	00000971 	.word	0x00000971
     bb8:	200000d4 	.word	0x200000d4

00000bbc <uart_init>:


#include <SaLUSART.h>

void uart_init(uint32_t baud) {
     bbc:	b510      	push	{r4, lr}

    uint32_t UART_CLKGEN_F = 8000000UL;
    uint64_t br = (uint64_t)65536 * (UART_CLKGEN_F - 16 * baud) / UART_CLKGEN_F;
     bbe:	0100      	lsls	r0, r0, #4
     bc0:	4b2d      	ldr	r3, [pc, #180]	; (c78 <uart_init+0xbc>)
     bc2:	1a18      	subs	r0, r3, r0
     bc4:	0c01      	lsrs	r1, r0, #16
     bc6:	0400      	lsls	r0, r0, #16
     bc8:	4a2b      	ldr	r2, [pc, #172]	; (c78 <uart_init+0xbc>)
     bca:	2300      	movs	r3, #0
     bcc:	4c2b      	ldr	r4, [pc, #172]	; (c7c <uart_init+0xc0>)
     bce:	47a0      	blx	r4

    //enable GPS pins
    //  SaLPinMode(MTK3339_RX_PIN,INPUT);
    //  SaLPinMode(MTK3339_TX_PIN,OUTPUT);
    SYSCTRL->OSC8M.reg -= SYSCTRL_OSC8M_ENABLE;
     bd0:	4b2b      	ldr	r3, [pc, #172]	; (c80 <uart_init+0xc4>)
     bd2:	6a1a      	ldr	r2, [r3, #32]
     bd4:	3a02      	subs	r2, #2
     bd6:	621a      	str	r2, [r3, #32]
    SYSCTRL->OSC8M.reg -= SYSCTRL_OSC8M_PRESC_3;
     bd8:	6a1a      	ldr	r2, [r3, #32]
     bda:	492a      	ldr	r1, [pc, #168]	; (c84 <uart_init+0xc8>)
     bdc:	468c      	mov	ip, r1
     bde:	4462      	add	r2, ip
     be0:	621a      	str	r2, [r3, #32]
    SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     be2:	6a19      	ldr	r1, [r3, #32]
     be4:	2202      	movs	r2, #2
     be6:	430a      	orrs	r2, r1
     be8:	621a      	str	r2, [r3, #32]

    //portB22->PINCFG->reg = 0x44;
    // portB23->PINCFG->reg = 0x44;

    // GPS pin configs
    ((Port *)PORT)->Group[1].PINCFG[22].reg = 0x41;
     bea:	4b27      	ldr	r3, [pc, #156]	; (c88 <uart_init+0xcc>)
     bec:	2241      	movs	r2, #65	; 0x41
     bee:	21d6      	movs	r1, #214	; 0xd6
     bf0:	545a      	strb	r2, [r3, r1]
    ((Port *)PORT)->Group[1].PINCFG[23].reg = 0x41;
     bf2:	3101      	adds	r1, #1
     bf4:	545a      	strb	r2, [r3, r1]
    ((Port *)PORT)->Group[1].PMUX[11].reg = 0x32;
     bf6:	39a5      	subs	r1, #165	; 0xa5
     bf8:	327a      	adds	r2, #122	; 0x7a
     bfa:	5499      	strb	r1, [r3, r2]
   // ((Port *)PORT)->Group[0].PINCFG[25].reg = 0x41;
   // ((Port *)PORT)->Group[0].PMUX[12].reg = 0x24;


    //enable power to sercom 5 module
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
     bfc:	4a23      	ldr	r2, [pc, #140]	; (c8c <uart_init+0xd0>)
     bfe:	6a11      	ldr	r1, [r2, #32]
     c00:	2380      	movs	r3, #128	; 0x80
     c02:	430b      	orrs	r3, r1
     c04:	6213      	str	r3, [r2, #32]
    //enable and configure the sercom clock
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(3) |
     c06:	4b22      	ldr	r3, [pc, #136]	; (c90 <uart_init+0xd4>)
     c08:	2204      	movs	r2, #4
     c0a:	32ff      	adds	r2, #255	; 0xff
     c0c:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(3) |
     c0e:	4a21      	ldr	r2, [pc, #132]	; (c94 <uart_init+0xd8>)
     c10:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOM5_CORE |
     c12:	4a21      	ldr	r2, [pc, #132]	; (c98 <uart_init+0xdc>)
     c14:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_GEN_GCLK3 |
                        GCLK_CLKCTRL_CLKEN;
    //     GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOMX_SLOW |
    //                         GCLK_CLKCTRL_GEN_GCLK3 |
    //                         GCLK_CLKCTRL_CLKEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOM3_CORE |
     c16:	4a21      	ldr	r2, [pc, #132]	; (c9c <uart_init+0xe0>)
     c18:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_GEN_GCLK3 |
                        GCLK_CLKCTRL_CLKEN;

    //configure the sercom module for the gps (sercom 5)
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_DORD |
     c1a:	4a21      	ldr	r2, [pc, #132]	; (ca0 <uart_init+0xe4>)
     c1c:	4b21      	ldr	r3, [pc, #132]	; (ca4 <uart_init+0xe8>)
     c1e:	601a      	str	r2, [r3, #0]
#include <SaLIo.h>

typedef uint16_t SaLSercomUsartDataReg_t;

static inline void uart_sync(const void *const hw) {
  while (((Sercom *)hw)->USART.SYNCBUSY.bit.CTRLB);
     c20:	1c19      	adds	r1, r3, #0
     c22:	2201      	movs	r2, #1
     c24:	69cb      	ldr	r3, [r1, #28]
     c26:	089b      	lsrs	r3, r3, #2
     c28:	421a      	tst	r2, r3
     c2a:	d1fb      	bne.n	c24 <uart_init+0x68>
                               SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_RXPO(3) |
                               SERCOM_USART_CTRLA_TXPO(1);
    uart_sync(SERCOM5);
    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
     c2c:	22c0      	movs	r2, #192	; 0xc0
     c2e:	0292      	lsls	r2, r2, #10
     c30:	4b1c      	ldr	r3, [pc, #112]	; (ca4 <uart_init+0xe8>)
     c32:	605a      	str	r2, [r3, #4]
     c34:	1c19      	adds	r1, r3, #0
     c36:	2201      	movs	r2, #1
     c38:	69cb      	ldr	r3, [r1, #28]
     c3a:	089b      	lsrs	r3, r3, #2
     c3c:	421a      	tst	r2, r3
     c3e:	d1fb      	bne.n	c38 <uart_init+0x7c>
                               SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
    // SERCOM_USART_CTRLB_SFDE;
    uart_sync(SERCOM5);
    SERCOM5->USART.BAUD.reg = (uint16_t)br;
     c40:	b280      	uxth	r0, r0
     c42:	4b18      	ldr	r3, [pc, #96]	; (ca4 <uart_init+0xe8>)
     c44:	8198      	strh	r0, [r3, #12]
     c46:	1c19      	adds	r1, r3, #0
     c48:	2201      	movs	r2, #1
     c4a:	69cb      	ldr	r3, [r1, #28]
     c4c:	089b      	lsrs	r3, r3, #2
     c4e:	421a      	tst	r2, r3
     c50:	d1fb      	bne.n	c4a <uart_init+0x8e>
    uart_sync(SERCOM5);
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c52:	4a14      	ldr	r2, [pc, #80]	; (ca4 <uart_init+0xe8>)
     c54:	6811      	ldr	r1, [r2, #0]
     c56:	2302      	movs	r3, #2
     c58:	430b      	orrs	r3, r1
     c5a:	6013      	str	r3, [r2, #0]
     c5c:	1c11      	adds	r1, r2, #0
     c5e:	2201      	movs	r2, #1
     c60:	69cb      	ldr	r3, [r1, #28]
     c62:	089b      	lsrs	r3, r3, #2
     c64:	421a      	tst	r2, r3
     c66:	d1fb      	bne.n	c60 <uart_init+0xa4>
                                 const uint16_t length);

int32_t SaLInitUsart(struct SaLUsartDescriptor *const descr,
                     void *const hw) {

    descr->device.hw = hw;
     c68:	4b0f      	ldr	r3, [pc, #60]	; (ca8 <uart_init+0xec>)
     c6a:	4a0e      	ldr	r2, [pc, #56]	; (ca4 <uart_init+0xe8>)
     c6c:	609a      	str	r2, [r3, #8]
    descr->io.read = SaLUsartDataRead;
     c6e:	4a0f      	ldr	r2, [pc, #60]	; (cac <uart_init+0xf0>)
     c70:	605a      	str	r2, [r3, #4]
    descr->io.write = SaLUsartDataWrite;
     c72:	4a0f      	ldr	r2, [pc, #60]	; (cb0 <uart_init+0xf4>)
     c74:	601a      	str	r2, [r3, #0]
    uart_sync(SERCOM5);

    SaLInitUsart(&USART_0,SERCOM5);


}
     c76:	bd10      	pop	{r4, pc}
     c78:	007a1200 	.word	0x007a1200
     c7c:	00001091 	.word	0x00001091
     c80:	40000800 	.word	0x40000800
     c84:	fffffd00 	.word	0xfffffd00
     c88:	41004400 	.word	0x41004400
     c8c:	40000400 	.word	0x40000400
     c90:	40000c00 	.word	0x40000c00
     c94:	00230603 	.word	0x00230603
     c98:	00004319 	.word	0x00004319
     c9c:	00004317 	.word	0x00004317
     ca0:	40310004 	.word	0x40310004
     ca4:	42001c00 	.word	0x42001c00
     ca8:	20000114 	.word	0x20000114
     cac:	00000cc5 	.word	0x00000cc5
     cb0:	00000d15 	.word	0x00000d15

00000cb4 <SaLSyncUsartIo>:
};


void SaLSyncUsartIo(struct SaLUsartDescriptor *const descr,
                    struct IoDescriptor **Io) {
    *Io = &descr->io;
     cb4:	6008      	str	r0, [r1, #0]
};
     cb6:	4770      	bx	lr

00000cb8 <_usartByteRecieved>:

bool _usartByteRecieved(const struct _UsartDevice *const device) {
    return _usartGetInteruptRCX(device->hw);
     cb8:	6803      	ldr	r3, [r0, #0]
static inline SaLSercomUsartDataReg_t _usartGetDataReg(const void *const hw) {
    return ((Sercom *)hw)->USART.DATA.reg;
}

static inline bool _usartGetInteruptRCX(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     cba:	7e18      	ldrb	r0, [r3, #24]
     cbc:	0740      	lsls	r0, r0, #29
     cbe:	0fc0      	lsrs	r0, r0, #31
};
     cc0:	4770      	bx	lr
     cc2:	46c0      	nop			; (mov r8, r8)

00000cc4 <SaLUsartDataRead>:



static int32_t SaLUsartDataRead(struct IoDescriptor *const ioDescr,
                                uint8_t *const buf,
                                const uint16_t length) {
     cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cc6:	464f      	mov	r7, r9
     cc8:	4646      	mov	r6, r8
     cca:	b4c0      	push	{r6, r7}
     ccc:	4680      	mov	r8, r0
     cce:	4689      	mov	r9, r1
     cd0:	1c17      	adds	r7, r2, #0

    int32_t offset = 0;
     cd2:	2600      	movs	r6, #0
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    do {
        while (!_usartByteRecieved(&descr->device));
     cd4:	1c05      	adds	r5, r0, #0
     cd6:	3508      	adds	r5, #8
     cd8:	4c0a      	ldr	r4, [pc, #40]	; (d04 <SaLUsartDataRead+0x40>)
     cda:	1c28      	adds	r0, r5, #0
     cdc:	47a0      	blx	r4
     cde:	2800      	cmp	r0, #0
     ce0:	d0fb      	beq.n	cda <SaLUsartDataRead+0x16>
    ((Sercom *)hw)->USART.DATA.reg = data;
    ATOMIC_SECTION_LEAVE
}

static inline SaLSercomUsartDataReg_t _usartGetDataReg(const void *const hw) {
    return ((Sercom *)hw)->USART.DATA.reg;
     ce2:	4643      	mov	r3, r8
     ce4:	689b      	ldr	r3, [r3, #8]
     ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
bool _usartByteRecieved(const struct _UsartDevice *const device) {
    return _usartGetInteruptRCX(device->hw);
};

uint8_t _usartGetData(const struct _UsartDevice *const device) {
    return _usartGetDataReg(device->hw);
     ce8:	464a      	mov	r2, r9
     cea:	5593      	strb	r3, [r2, r6]
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    do {
        while (!_usartByteRecieved(&descr->device));
        buf[offset] = _usartGetData(&descr->device);
    } while (++offset < length);
     cec:	3601      	adds	r6, #1
     cee:	1c38      	adds	r0, r7, #0
     cf0:	42be      	cmp	r6, r7
     cf2:	dbf2      	blt.n	cda <SaLUsartDataRead+0x16>
     cf4:	2f00      	cmp	r7, #0
     cf6:	dc00      	bgt.n	cfa <SaLUsartDataRead+0x36>
     cf8:	2001      	movs	r0, #1

    return (int32_t)offset;
}
     cfa:	bc0c      	pop	{r2, r3}
     cfc:	4690      	mov	r8, r2
     cfe:	4699      	mov	r9, r3
     d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00000cb9 	.word	0x00000cb9

00000d08 <_usartGetDreInterupt>:
uint8_t _usartGetData(const struct _UsartDevice *const device) {
    return _usartGetDataReg(device->hw);
}

bool _usartGetDreInterupt(const struct _UsartDevice *const device) {
    return _usartGetDreInteruptReg(device->hw);
     d08:	6803      	ldr	r3, [r0, #0]
static inline bool _usartGetInteruptRCX(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;

};
static inline bool _usartGetDreInteruptReg(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     d0a:	7e18      	ldrb	r0, [r3, #24]
     d0c:	2301      	movs	r3, #1
     d0e:	4018      	ands	r0, r3
}
     d10:	4770      	bx	lr
     d12:	46c0      	nop			; (mov r8, r8)

00000d14 <SaLUsartDataWrite>:
    return (int32_t)offset;
}

static int32_t SaLUsartDataWrite(struct IoDescriptor *const ioDescr,
                                 const uint8_t *const buf,
                                 const uint16_t length) {
     d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d16:	464f      	mov	r7, r9
     d18:	4646      	mov	r6, r8
     d1a:	b4c0      	push	{r6, r7}
     d1c:	4680      	mov	r8, r0
     d1e:	4689      	mov	r9, r1
     d20:	1c17      	adds	r7, r2, #0

    int32_t offset = 0;
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    while (!_usartGetDreInterupt(&descr->device));
     d22:	1c05      	adds	r5, r0, #0
     d24:	3508      	adds	r5, #8
     d26:	4e10      	ldr	r6, [pc, #64]	; (d68 <SaLUsartDataWrite+0x54>)
     d28:	1c2c      	adds	r4, r5, #0
     d2a:	1c28      	adds	r0, r5, #0
     d2c:	47b0      	blx	r6
     d2e:	2800      	cmp	r0, #0
     d30:	d0fa      	beq.n	d28 <SaLUsartDataWrite+0x14>
     d32:	2600      	movs	r6, #0
    do {
        _usartSetDataReg(&descr->device,buf[offset]);
        while (!_usartGetDreInterupt(&descr->device));
     d34:	4d0c      	ldr	r5, [pc, #48]	; (d68 <SaLUsartDataWrite+0x54>)

void SaLSyncUsartIo(struct SaLUsartDescriptor *const descr,
                    struct IoDescriptor **Io);

static inline void _usartSetDataReg(const void *const hw, uint8_t data ) {
    ATOMIC_SECTION_ENTER
     d36:	f3ef 8310 	mrs	r3, PRIMASK
     d3a:	b672      	cpsid	i
    ((Sercom *)hw)->USART.DATA.reg = data;
     d3c:	464a      	mov	r2, r9
     d3e:	5d92      	ldrb	r2, [r2, r6]
     d40:	4641      	mov	r1, r8
     d42:	860a      	strh	r2, [r1, #48]	; 0x30
    ATOMIC_SECTION_LEAVE
     d44:	f383 8810 	msr	PRIMASK, r3
     d48:	1c20      	adds	r0, r4, #0
     d4a:	47a8      	blx	r5
     d4c:	2800      	cmp	r0, #0
     d4e:	d0fb      	beq.n	d48 <SaLUsartDataWrite+0x34>
    } while (++offset < length);
     d50:	3601      	adds	r6, #1
     d52:	1c38      	adds	r0, r7, #0
     d54:	42be      	cmp	r6, r7
     d56:	dbee      	blt.n	d36 <SaLUsartDataWrite+0x22>
     d58:	2f00      	cmp	r7, #0
     d5a:	dc00      	bgt.n	d5e <SaLUsartDataWrite+0x4a>
     d5c:	2001      	movs	r0, #1
    return offset;

}
     d5e:	bc0c      	pop	{r2, r3}
     d60:	4690      	mov	r8, r2
     d62:	4699      	mov	r9, r3
     d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	00000d09 	.word	0x00000d09

00000d6c <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     d6c:	f3ef 8305 	mrs	r3, IPSR
     d70:	e7fc      	b.n	d6c <Dummy_Handler>
     d72:	46c0      	nop			; (mov r8, r8)

00000d74 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     d74:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     d76:	4b2e      	ldr	r3, [pc, #184]	; (e30 <Reset_Handler+0xbc>)
     d78:	4a2e      	ldr	r2, [pc, #184]	; (e34 <Reset_Handler+0xc0>)
     d7a:	429a      	cmp	r2, r3
     d7c:	d003      	beq.n	d86 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     d7e:	4b2e      	ldr	r3, [pc, #184]	; (e38 <Reset_Handler+0xc4>)
     d80:	4a2b      	ldr	r2, [pc, #172]	; (e30 <Reset_Handler+0xbc>)
     d82:	429a      	cmp	r2, r3
     d84:	d304      	bcc.n	d90 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     d86:	4b2d      	ldr	r3, [pc, #180]	; (e3c <Reset_Handler+0xc8>)
     d88:	4a2d      	ldr	r2, [pc, #180]	; (e40 <Reset_Handler+0xcc>)
     d8a:	429a      	cmp	r2, r3
     d8c:	d310      	bcc.n	db0 <Reset_Handler+0x3c>
     d8e:	e01e      	b.n	dce <Reset_Handler+0x5a>
     d90:	4a2c      	ldr	r2, [pc, #176]	; (e44 <Reset_Handler+0xd0>)
     d92:	4b29      	ldr	r3, [pc, #164]	; (e38 <Reset_Handler+0xc4>)
     d94:	3303      	adds	r3, #3
     d96:	1a9b      	subs	r3, r3, r2
     d98:	089b      	lsrs	r3, r3, #2
     d9a:	3301      	adds	r3, #1
     d9c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     d9e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     da0:	4823      	ldr	r0, [pc, #140]	; (e30 <Reset_Handler+0xbc>)
     da2:	4924      	ldr	r1, [pc, #144]	; (e34 <Reset_Handler+0xc0>)
     da4:	588c      	ldr	r4, [r1, r2]
     da6:	5084      	str	r4, [r0, r2]
     da8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     daa:	429a      	cmp	r2, r3
     dac:	d1fa      	bne.n	da4 <Reset_Handler+0x30>
     dae:	e7ea      	b.n	d86 <Reset_Handler+0x12>
     db0:	4a25      	ldr	r2, [pc, #148]	; (e48 <Reset_Handler+0xd4>)
     db2:	4b22      	ldr	r3, [pc, #136]	; (e3c <Reset_Handler+0xc8>)
     db4:	3303      	adds	r3, #3
     db6:	1a9b      	subs	r3, r3, r2
     db8:	089b      	lsrs	r3, r3, #2
     dba:	3301      	adds	r3, #1
     dbc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     dbe:	2200      	movs	r2, #0
                *pDest++ = 0;
     dc0:	481f      	ldr	r0, [pc, #124]	; (e40 <Reset_Handler+0xcc>)
     dc2:	2100      	movs	r1, #0
     dc4:	1814      	adds	r4, r2, r0
     dc6:	6021      	str	r1, [r4, #0]
     dc8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     dca:	429a      	cmp	r2, r3
     dcc:	d1fa      	bne.n	dc4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     dce:	4a1f      	ldr	r2, [pc, #124]	; (e4c <Reset_Handler+0xd8>)
     dd0:	21ff      	movs	r1, #255	; 0xff
     dd2:	4b1f      	ldr	r3, [pc, #124]	; (e50 <Reset_Handler+0xdc>)
     dd4:	438b      	bics	r3, r1
     dd6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     dd8:	39fd      	subs	r1, #253	; 0xfd
     dda:	2390      	movs	r3, #144	; 0x90
     ddc:	005b      	lsls	r3, r3, #1
     dde:	4a1d      	ldr	r2, [pc, #116]	; (e54 <Reset_Handler+0xe0>)
     de0:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     de2:	481d      	ldr	r0, [pc, #116]	; (e58 <Reset_Handler+0xe4>)
     de4:	78c3      	ldrb	r3, [r0, #3]
     de6:	2403      	movs	r4, #3
     de8:	43a3      	bics	r3, r4
     dea:	2202      	movs	r2, #2
     dec:	4313      	orrs	r3, r2
     dee:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     df0:	78c3      	ldrb	r3, [r0, #3]
     df2:	260c      	movs	r6, #12
     df4:	43b3      	bics	r3, r6
     df6:	2108      	movs	r1, #8
     df8:	430b      	orrs	r3, r1
     dfa:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     dfc:	4b17      	ldr	r3, [pc, #92]	; (e5c <Reset_Handler+0xe8>)
     dfe:	7b98      	ldrb	r0, [r3, #14]
     e00:	2530      	movs	r5, #48	; 0x30
     e02:	43a8      	bics	r0, r5
     e04:	1c05      	adds	r5, r0, #0
     e06:	2020      	movs	r0, #32
     e08:	4328      	orrs	r0, r5
     e0a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     e0c:	7b98      	ldrb	r0, [r3, #14]
     e0e:	43b0      	bics	r0, r6
     e10:	4301      	orrs	r1, r0
     e12:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     e14:	7b99      	ldrb	r1, [r3, #14]
     e16:	43a1      	bics	r1, r4
     e18:	430a      	orrs	r2, r1
     e1a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     e1c:	4a10      	ldr	r2, [pc, #64]	; (e60 <Reset_Handler+0xec>)
     e1e:	6851      	ldr	r1, [r2, #4]
     e20:	2380      	movs	r3, #128	; 0x80
     e22:	430b      	orrs	r3, r1
     e24:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     e26:	4b0f      	ldr	r3, [pc, #60]	; (e64 <Reset_Handler+0xf0>)
     e28:	4798      	blx	r3

        /* Branch to main function */
        main();
     e2a:	4b0f      	ldr	r3, [pc, #60]	; (e68 <Reset_Handler+0xf4>)
     e2c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     e2e:	e7fe      	b.n	e2e <Reset_Handler+0xba>
     e30:	20000000 	.word	0x20000000
     e34:	00002070 	.word	0x00002070
     e38:	2000000c 	.word	0x2000000c
     e3c:	20000138 	.word	0x20000138
     e40:	2000000c 	.word	0x2000000c
     e44:	20000004 	.word	0x20000004
     e48:	20000010 	.word	0x20000010
     e4c:	e000ed00 	.word	0xe000ed00
     e50:	00000000 	.word	0x00000000
     e54:	41007000 	.word	0x41007000
     e58:	41005000 	.word	0x41005000
     e5c:	41004800 	.word	0x41004800
     e60:	41004000 	.word	0x41004000
     e64:	00000fb1 	.word	0x00000fb1
     e68:	00000ed5 	.word	0x00000ed5

00000e6c <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     e6c:	4a01      	ldr	r2, [pc, #4]	; (e74 <SystemInit+0x8>)
     e6e:	4b02      	ldr	r3, [pc, #8]	; (e78 <SystemInit+0xc>)
     e70:	601a      	str	r2, [r3, #0]
	return;
}
     e72:	4770      	bx	lr
     e74:	000f4240 	.word	0x000f4240
     e78:	20000008 	.word	0x20000008

00000e7c <PinConfig>:
bool retrieveSample;
uint32_t index2;



void PinConfig() {
     e7c:	b538      	push	{r3, r4, r5, lr}
    /* temp SS HIGH for other peripherals */
    SaLPinMode(PIN_PA07,INPUT);
     e7e:	2007      	movs	r0, #7
     e80:	2100      	movs	r1, #0
     e82:	4c0c      	ldr	r4, [pc, #48]	; (eb4 <PinConfig+0x38>)
     e84:	47a0      	blx	r4
    SaLPinMode(PIN_PA10,OUTPUT);
     e86:	200a      	movs	r0, #10
     e88:	2101      	movs	r1, #1
     e8a:	47a0      	blx	r4
    SaLPinMode(PIN_PA08,OUTPUT);
     e8c:	2008      	movs	r0, #8
     e8e:	2101      	movs	r1, #1
     e90:	47a0      	blx	r4
    SaLPinMode(BUZZER,OUTSTRONG);
     e92:	200c      	movs	r0, #12
     e94:	2103      	movs	r1, #3
     e96:	47a0      	blx	r4
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     e98:	4d07      	ldr	r5, [pc, #28]	; (eb8 <PinConfig+0x3c>)
     e9a:	2380      	movs	r3, #128	; 0x80
     e9c:	00db      	lsls	r3, r3, #3
     e9e:	61ab      	str	r3, [r5, #24]
     ea0:	2380      	movs	r3, #128	; 0x80
     ea2:	005b      	lsls	r3, r3, #1
     ea4:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(PIN_PA10,true);
    SaLDigitalOut(PIN_PA08,true);
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     ea6:	2009      	movs	r0, #9
     ea8:	2101      	movs	r1, #1
     eaa:	47a0      	blx	r4
     eac:	2380      	movs	r3, #128	; 0x80
     eae:	009b      	lsls	r3, r3, #2
     eb0:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
     eb2:	bd38      	pop	{r3, r4, r5, pc}
     eb4:	00000a1d 	.word	0x00000a1d
     eb8:	41004400 	.word	0x41004400

00000ebc <TC4_Handler>:

void TC4_Handler(void) {
    retrieveSample = true;
     ebc:	2201      	movs	r2, #1
     ebe:	4b03      	ldr	r3, [pc, #12]	; (ecc <TC4_Handler+0x10>)
     ec0:	701a      	strb	r2, [r3, #0]
    TC4->COUNT16.INTFLAG.reg = 0XFF;
     ec2:	32fe      	adds	r2, #254	; 0xfe
     ec4:	4b02      	ldr	r3, [pc, #8]	; (ed0 <TC4_Handler+0x14>)
     ec6:	739a      	strb	r2, [r3, #14]
}
     ec8:	4770      	bx	lr
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	20000130 	.word	0x20000130
     ed0:	42003000 	.word	0x42003000

00000ed4 <main>:



}

int main(void) {
     ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed6:	464f      	mov	r7, r9
     ed8:	4646      	mov	r6, r8
     eda:	b4c0      	push	{r6, r7}
     edc:	b08b      	sub	sp, #44	; 0x2c
    SystemInit();
     ede:	4b20      	ldr	r3, [pc, #128]	; (f60 <main+0x8c>)
     ee0:	4798      	blx	r3
    SaLDelayInit();
     ee2:	4b20      	ldr	r3, [pc, #128]	; (f64 <main+0x90>)
     ee4:	4798      	blx	r3
    SalGclkInit();
     ee6:	4b20      	ldr	r3, [pc, #128]	; (f68 <main+0x94>)
     ee8:	4798      	blx	r3
    SaLRtcInit();
     eea:	4b20      	ldr	r3, [pc, #128]	; (f6c <main+0x98>)
     eec:	4798      	blx	r3
    PinConfig();
     eee:	4b20      	ldr	r3, [pc, #128]	; (f70 <main+0x9c>)
     ef0:	4798      	blx	r3
    uart_init(9600);
     ef2:	2096      	movs	r0, #150	; 0x96
     ef4:	0180      	lsls	r0, r0, #6
     ef6:	4b1f      	ldr	r3, [pc, #124]	; (f74 <main+0xa0>)
     ef8:	4798      	blx	r3
    SaLTC4Init();
     efa:	4b1f      	ldr	r3, [pc, #124]	; (f78 <main+0xa4>)
     efc:	4798      	blx	r3
    sampleInit();
     efe:	4b1f      	ldr	r3, [pc, #124]	; (f7c <main+0xa8>)
     f00:	4798      	blx	r3
    struct IoDescriptor *UsartIoModule;
    struct IoDescriptor *UsartIoModuleUsb;

    struct AccelerometerModule myAccelerometer;

    SaLSyncUsartIo(&USART_0, &UsartIoModule);
     f02:	481f      	ldr	r0, [pc, #124]	; (f80 <main+0xac>)
     f04:	a909      	add	r1, sp, #36	; 0x24
     f06:	4c1f      	ldr	r4, [pc, #124]	; (f84 <main+0xb0>)
     f08:	47a0      	blx	r4
    SaLSyncUsartIo(&USART_1, &UsartIoModuleUsb);
     f0a:	481f      	ldr	r0, [pc, #124]	; (f88 <main+0xb4>)
     f0c:	a908      	add	r1, sp, #32
     f0e:	47a0      	blx	r4

    initAccelerometer(&myAccelerometer);
     f10:	a802      	add	r0, sp, #8
     f12:	4b1e      	ldr	r3, [pc, #120]	; (f8c <main+0xb8>)
     f14:	4798      	blx	r3
    initBarometer();
     f16:	4b1e      	ldr	r3, [pc, #120]	; (f90 <main+0xbc>)
     f18:	4798      	blx	r3
	SaLFlashMemInit();
     f1a:	4b1e      	ldr	r3, [pc, #120]	; (f94 <main+0xc0>)
     f1c:	4798      	blx	r3
//     }
//
//     volatile int32_t groundAlt = groundHeight.mean;
//     variance = GetVariance(&groundHeight,&groundHeight.mean);

    volatile uint16_t ticks = 0;
     f1e:	2200      	movs	r2, #0
     f20:	466b      	mov	r3, sp
     f22:	80da      	strh	r2, [r3, #6]
    uint32_t milliseconds = 0;
    uint32_t lastTime = 0;
     f24:	2600      	movs	r6, #0
//     AT25SFWriteByte(0x00101,251);
//   volatile uint8_t byte = AT25SFGetByte(0x00101);

    while (1) {
        ticks++;
        counter++;
     f26:	4d1c      	ldr	r5, [pc, #112]	; (f98 <main+0xc4>)
        milliseconds = millis();
     f28:	4b1c      	ldr	r3, [pc, #112]	; (f9c <main+0xc8>)
     f2a:	4698      	mov	r8, r3
        if (milliseconds - lastTime > 150000*3.3) {
     f2c:	4b1c      	ldr	r3, [pc, #112]	; (fa0 <main+0xcc>)
     f2e:	4699      	mov	r9, r3
//     AT25SFErace4KBlock(0);
//     AT25SFWriteByte(0x00101,251);
//   volatile uint8_t byte = AT25SFGetByte(0x00101);

    while (1) {
        ticks++;
     f30:	466b      	mov	r3, sp
     f32:	1d9a      	adds	r2, r3, #6
     f34:	88db      	ldrh	r3, [r3, #6]
     f36:	3301      	adds	r3, #1
     f38:	b29b      	uxth	r3, r3
     f3a:	8013      	strh	r3, [r2, #0]
        counter++;
     f3c:	682b      	ldr	r3, [r5, #0]
     f3e:	3301      	adds	r3, #1
     f40:	602b      	str	r3, [r5, #0]
        milliseconds = millis();
     f42:	47c0      	blx	r8
     f44:	1c04      	adds	r4, r0, #0
        if (milliseconds - lastTime > 150000*3.3) {
     f46:	1b80      	subs	r0, r0, r6
     f48:	47c8      	blx	r9
     f4a:	2200      	movs	r2, #0
     f4c:	4b15      	ldr	r3, [pc, #84]	; (fa4 <main+0xd0>)
     f4e:	4f16      	ldr	r7, [pc, #88]	; (fa8 <main+0xd4>)
     f50:	47b8      	blx	r7
     f52:	2800      	cmp	r0, #0
     f54:	d000      	beq.n	f58 <main+0x84>
            // bytesRead = SaLIoRead(UsartIoModule,&message[0],255);
            lastTime = milliseconds;
     f56:	1c26      	adds	r6, r4, #0
            //SaLPlayTone(400);
        }
        sampleTick();
     f58:	4b14      	ldr	r3, [pc, #80]	; (fac <main+0xd8>)
     f5a:	4798      	blx	r3

    }
     f5c:	e7e8      	b.n	f30 <main+0x5c>
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	00000e6d 	.word	0x00000e6d
     f64:	000009ad 	.word	0x000009ad
     f68:	000007ed 	.word	0x000007ed
     f6c:	000008cd 	.word	0x000008cd
     f70:	00000e7d 	.word	0x00000e7d
     f74:	00000bbd 	.word	0x00000bbd
     f78:	00000895 	.word	0x00000895
     f7c:	00000b8d 	.word	0x00000b8d
     f80:	20000114 	.word	0x20000114
     f84:	00000cb5 	.word	0x00000cb5
     f88:	20000120 	.word	0x20000120
     f8c:	00000465 	.word	0x00000465
     f90:	00000521 	.word	0x00000521
     f94:	000009f5 	.word	0x000009f5
     f98:	20000030 	.word	0x20000030
     f9c:	00000971 	.word	0x00000971
     fa0:	00001971 	.word	0x00001971
     fa4:	411e3660 	.word	0x411e3660
     fa8:	00001069 	.word	0x00001069
     fac:	00000a75 	.word	0x00000a75

00000fb0 <__libc_init_array>:
     fb0:	4b0e      	ldr	r3, [pc, #56]	; (fec <__libc_init_array+0x3c>)
     fb2:	b570      	push	{r4, r5, r6, lr}
     fb4:	2500      	movs	r5, #0
     fb6:	1c1e      	adds	r6, r3, #0
     fb8:	4c0d      	ldr	r4, [pc, #52]	; (ff0 <__libc_init_array+0x40>)
     fba:	1ae4      	subs	r4, r4, r3
     fbc:	10a4      	asrs	r4, r4, #2
     fbe:	42a5      	cmp	r5, r4
     fc0:	d004      	beq.n	fcc <__libc_init_array+0x1c>
     fc2:	00ab      	lsls	r3, r5, #2
     fc4:	58f3      	ldr	r3, [r6, r3]
     fc6:	4798      	blx	r3
     fc8:	3501      	adds	r5, #1
     fca:	e7f8      	b.n	fbe <__libc_init_array+0xe>
     fcc:	f001 f83c 	bl	2048 <_init>
     fd0:	4b08      	ldr	r3, [pc, #32]	; (ff4 <__libc_init_array+0x44>)
     fd2:	2500      	movs	r5, #0
     fd4:	1c1e      	adds	r6, r3, #0
     fd6:	4c08      	ldr	r4, [pc, #32]	; (ff8 <__libc_init_array+0x48>)
     fd8:	1ae4      	subs	r4, r4, r3
     fda:	10a4      	asrs	r4, r4, #2
     fdc:	42a5      	cmp	r5, r4
     fde:	d004      	beq.n	fea <__libc_init_array+0x3a>
     fe0:	00ab      	lsls	r3, r5, #2
     fe2:	58f3      	ldr	r3, [r6, r3]
     fe4:	4798      	blx	r3
     fe6:	3501      	adds	r5, #1
     fe8:	e7f8      	b.n	fdc <__libc_init_array+0x2c>
     fea:	bd70      	pop	{r4, r5, r6, pc}
     fec:	00002054 	.word	0x00002054
     ff0:	00002054 	.word	0x00002054
     ff4:	00002054 	.word	0x00002054
     ff8:	00002058 	.word	0x00002058

00000ffc <memcpy>:
     ffc:	2300      	movs	r3, #0
     ffe:	b510      	push	{r4, lr}
    1000:	4293      	cmp	r3, r2
    1002:	d003      	beq.n	100c <memcpy+0x10>
    1004:	5ccc      	ldrb	r4, [r1, r3]
    1006:	54c4      	strb	r4, [r0, r3]
    1008:	3301      	adds	r3, #1
    100a:	e7f9      	b.n	1000 <memcpy+0x4>
    100c:	bd10      	pop	{r4, pc}
	...

00001010 <__aeabi_idiv0>:
    1010:	4770      	bx	lr
    1012:	46c0      	nop			; (mov r8, r8)

00001014 <__aeabi_cdrcmple>:
    1014:	4684      	mov	ip, r0
    1016:	1c10      	adds	r0, r2, #0
    1018:	4662      	mov	r2, ip
    101a:	468c      	mov	ip, r1
    101c:	1c19      	adds	r1, r3, #0
    101e:	4663      	mov	r3, ip
    1020:	e000      	b.n	1024 <__aeabi_cdcmpeq>
    1022:	46c0      	nop			; (mov r8, r8)

00001024 <__aeabi_cdcmpeq>:
    1024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1026:	f000 f967 	bl	12f8 <__ledf2>
    102a:	2800      	cmp	r0, #0
    102c:	d401      	bmi.n	1032 <__aeabi_cdcmpeq+0xe>
    102e:	2100      	movs	r1, #0
    1030:	42c8      	cmn	r0, r1
    1032:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001034 <__aeabi_dcmpeq>:
    1034:	b510      	push	{r4, lr}
    1036:	f000 f8ab 	bl	1190 <__eqdf2>
    103a:	4240      	negs	r0, r0
    103c:	3001      	adds	r0, #1
    103e:	bd10      	pop	{r4, pc}

00001040 <__aeabi_dcmplt>:
    1040:	b510      	push	{r4, lr}
    1042:	f000 f959 	bl	12f8 <__ledf2>
    1046:	2800      	cmp	r0, #0
    1048:	db01      	blt.n	104e <__aeabi_dcmplt+0xe>
    104a:	2000      	movs	r0, #0
    104c:	bd10      	pop	{r4, pc}
    104e:	2001      	movs	r0, #1
    1050:	bd10      	pop	{r4, pc}
    1052:	46c0      	nop			; (mov r8, r8)

00001054 <__aeabi_dcmple>:
    1054:	b510      	push	{r4, lr}
    1056:	f000 f94f 	bl	12f8 <__ledf2>
    105a:	2800      	cmp	r0, #0
    105c:	dd01      	ble.n	1062 <__aeabi_dcmple+0xe>
    105e:	2000      	movs	r0, #0
    1060:	bd10      	pop	{r4, pc}
    1062:	2001      	movs	r0, #1
    1064:	bd10      	pop	{r4, pc}
    1066:	46c0      	nop			; (mov r8, r8)

00001068 <__aeabi_dcmpgt>:
    1068:	b510      	push	{r4, lr}
    106a:	f000 f8d5 	bl	1218 <__gedf2>
    106e:	2800      	cmp	r0, #0
    1070:	dc01      	bgt.n	1076 <__aeabi_dcmpgt+0xe>
    1072:	2000      	movs	r0, #0
    1074:	bd10      	pop	{r4, pc}
    1076:	2001      	movs	r0, #1
    1078:	bd10      	pop	{r4, pc}
    107a:	46c0      	nop			; (mov r8, r8)

0000107c <__aeabi_dcmpge>:
    107c:	b510      	push	{r4, lr}
    107e:	f000 f8cb 	bl	1218 <__gedf2>
    1082:	2800      	cmp	r0, #0
    1084:	da01      	bge.n	108a <__aeabi_dcmpge+0xe>
    1086:	2000      	movs	r0, #0
    1088:	bd10      	pop	{r4, pc}
    108a:	2001      	movs	r0, #1
    108c:	bd10      	pop	{r4, pc}
    108e:	46c0      	nop			; (mov r8, r8)

00001090 <__aeabi_uldivmod>:
    1090:	2b00      	cmp	r3, #0
    1092:	d111      	bne.n	10b8 <__aeabi_uldivmod+0x28>
    1094:	2a00      	cmp	r2, #0
    1096:	d10f      	bne.n	10b8 <__aeabi_uldivmod+0x28>
    1098:	2900      	cmp	r1, #0
    109a:	d100      	bne.n	109e <__aeabi_uldivmod+0xe>
    109c:	2800      	cmp	r0, #0
    109e:	d002      	beq.n	10a6 <__aeabi_uldivmod+0x16>
    10a0:	2100      	movs	r1, #0
    10a2:	43c9      	mvns	r1, r1
    10a4:	1c08      	adds	r0, r1, #0
    10a6:	b407      	push	{r0, r1, r2}
    10a8:	4802      	ldr	r0, [pc, #8]	; (10b4 <__aeabi_uldivmod+0x24>)
    10aa:	a102      	add	r1, pc, #8	; (adr r1, 10b4 <__aeabi_uldivmod+0x24>)
    10ac:	1840      	adds	r0, r0, r1
    10ae:	9002      	str	r0, [sp, #8]
    10b0:	bd03      	pop	{r0, r1, pc}
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	ffffff5d 	.word	0xffffff5d
    10b8:	b403      	push	{r0, r1}
    10ba:	4668      	mov	r0, sp
    10bc:	b501      	push	{r0, lr}
    10be:	9802      	ldr	r0, [sp, #8]
    10c0:	f000 f84c 	bl	115c <__gnu_uldivmod_helper>
    10c4:	9b01      	ldr	r3, [sp, #4]
    10c6:	469e      	mov	lr, r3
    10c8:	b002      	add	sp, #8
    10ca:	bc0c      	pop	{r2, r3}
    10cc:	4770      	bx	lr
    10ce:	46c0      	nop			; (mov r8, r8)

000010d0 <__aeabi_lmul>:
    10d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10d2:	464f      	mov	r7, r9
    10d4:	4646      	mov	r6, r8
    10d6:	0405      	lsls	r5, r0, #16
    10d8:	0c2d      	lsrs	r5, r5, #16
    10da:	1c2c      	adds	r4, r5, #0
    10dc:	b4c0      	push	{r6, r7}
    10de:	0417      	lsls	r7, r2, #16
    10e0:	0c16      	lsrs	r6, r2, #16
    10e2:	0c3f      	lsrs	r7, r7, #16
    10e4:	4699      	mov	r9, r3
    10e6:	0c03      	lsrs	r3, r0, #16
    10e8:	437c      	muls	r4, r7
    10ea:	4375      	muls	r5, r6
    10ec:	435f      	muls	r7, r3
    10ee:	4373      	muls	r3, r6
    10f0:	197d      	adds	r5, r7, r5
    10f2:	0c26      	lsrs	r6, r4, #16
    10f4:	19ad      	adds	r5, r5, r6
    10f6:	469c      	mov	ip, r3
    10f8:	42af      	cmp	r7, r5
    10fa:	d903      	bls.n	1104 <__aeabi_lmul+0x34>
    10fc:	2380      	movs	r3, #128	; 0x80
    10fe:	025b      	lsls	r3, r3, #9
    1100:	4698      	mov	r8, r3
    1102:	44c4      	add	ip, r8
    1104:	464b      	mov	r3, r9
    1106:	4351      	muls	r1, r2
    1108:	4343      	muls	r3, r0
    110a:	0424      	lsls	r4, r4, #16
    110c:	0c2e      	lsrs	r6, r5, #16
    110e:	0c24      	lsrs	r4, r4, #16
    1110:	042d      	lsls	r5, r5, #16
    1112:	4466      	add	r6, ip
    1114:	192c      	adds	r4, r5, r4
    1116:	1859      	adds	r1, r3, r1
    1118:	1989      	adds	r1, r1, r6
    111a:	1c20      	adds	r0, r4, #0
    111c:	bc0c      	pop	{r2, r3}
    111e:	4690      	mov	r8, r2
    1120:	4699      	mov	r9, r3
    1122:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001124 <__gnu_ldivmod_helper>:
    1124:	b5f0      	push	{r4, r5, r6, r7, lr}
    1126:	b083      	sub	sp, #12
    1128:	1c16      	adds	r6, r2, #0
    112a:	1c1f      	adds	r7, r3, #0
    112c:	9000      	str	r0, [sp, #0]
    112e:	9101      	str	r1, [sp, #4]
    1130:	f000 fcfe 	bl	1b30 <__divdi3>
    1134:	1c04      	adds	r4, r0, #0
    1136:	1c0d      	adds	r5, r1, #0
    1138:	1c22      	adds	r2, r4, #0
    113a:	1c2b      	adds	r3, r5, #0
    113c:	1c30      	adds	r0, r6, #0
    113e:	1c39      	adds	r1, r7, #0
    1140:	f7ff ffc6 	bl	10d0 <__aeabi_lmul>
    1144:	9a00      	ldr	r2, [sp, #0]
    1146:	9b01      	ldr	r3, [sp, #4]
    1148:	1a12      	subs	r2, r2, r0
    114a:	418b      	sbcs	r3, r1
    114c:	9908      	ldr	r1, [sp, #32]
    114e:	1c20      	adds	r0, r4, #0
    1150:	600a      	str	r2, [r1, #0]
    1152:	604b      	str	r3, [r1, #4]
    1154:	1c29      	adds	r1, r5, #0
    1156:	b003      	add	sp, #12
    1158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    115a:	46c0      	nop			; (mov r8, r8)

0000115c <__gnu_uldivmod_helper>:
    115c:	b5f0      	push	{r4, r5, r6, r7, lr}
    115e:	1c14      	adds	r4, r2, #0
    1160:	b083      	sub	sp, #12
    1162:	1c1d      	adds	r5, r3, #0
    1164:	9000      	str	r0, [sp, #0]
    1166:	9101      	str	r1, [sp, #4]
    1168:	f000 fdda 	bl	1d20 <__udivdi3>
    116c:	1c22      	adds	r2, r4, #0
    116e:	1c2b      	adds	r3, r5, #0
    1170:	1c06      	adds	r6, r0, #0
    1172:	1c0f      	adds	r7, r1, #0
    1174:	f7ff ffac 	bl	10d0 <__aeabi_lmul>
    1178:	9a00      	ldr	r2, [sp, #0]
    117a:	9b01      	ldr	r3, [sp, #4]
    117c:	1a12      	subs	r2, r2, r0
    117e:	418b      	sbcs	r3, r1
    1180:	9908      	ldr	r1, [sp, #32]
    1182:	1c30      	adds	r0, r6, #0
    1184:	600a      	str	r2, [r1, #0]
    1186:	604b      	str	r3, [r1, #4]
    1188:	1c39      	adds	r1, r7, #0
    118a:	b003      	add	sp, #12
    118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    118e:	46c0      	nop			; (mov r8, r8)

00001190 <__eqdf2>:
    1190:	b5f0      	push	{r4, r5, r6, r7, lr}
    1192:	465f      	mov	r7, fp
    1194:	464d      	mov	r5, r9
    1196:	4644      	mov	r4, r8
    1198:	4656      	mov	r6, sl
    119a:	b4f0      	push	{r4, r5, r6, r7}
    119c:	031f      	lsls	r7, r3, #12
    119e:	005c      	lsls	r4, r3, #1
    11a0:	0fdb      	lsrs	r3, r3, #31
    11a2:	4699      	mov	r9, r3
    11a4:	4b1b      	ldr	r3, [pc, #108]	; (1214 <__eqdf2+0x84>)
    11a6:	030e      	lsls	r6, r1, #12
    11a8:	004d      	lsls	r5, r1, #1
    11aa:	0fc9      	lsrs	r1, r1, #31
    11ac:	4684      	mov	ip, r0
    11ae:	0b36      	lsrs	r6, r6, #12
    11b0:	0d6d      	lsrs	r5, r5, #21
    11b2:	468b      	mov	fp, r1
    11b4:	4690      	mov	r8, r2
    11b6:	0b3f      	lsrs	r7, r7, #12
    11b8:	0d64      	lsrs	r4, r4, #21
    11ba:	429d      	cmp	r5, r3
    11bc:	d00c      	beq.n	11d8 <__eqdf2+0x48>
    11be:	4b15      	ldr	r3, [pc, #84]	; (1214 <__eqdf2+0x84>)
    11c0:	429c      	cmp	r4, r3
    11c2:	d010      	beq.n	11e6 <__eqdf2+0x56>
    11c4:	2301      	movs	r3, #1
    11c6:	42a5      	cmp	r5, r4
    11c8:	d014      	beq.n	11f4 <__eqdf2+0x64>
    11ca:	1c18      	adds	r0, r3, #0
    11cc:	bc3c      	pop	{r2, r3, r4, r5}
    11ce:	4690      	mov	r8, r2
    11d0:	4699      	mov	r9, r3
    11d2:	46a2      	mov	sl, r4
    11d4:	46ab      	mov	fp, r5
    11d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11d8:	1c31      	adds	r1, r6, #0
    11da:	2301      	movs	r3, #1
    11dc:	4301      	orrs	r1, r0
    11de:	d1f4      	bne.n	11ca <__eqdf2+0x3a>
    11e0:	4b0c      	ldr	r3, [pc, #48]	; (1214 <__eqdf2+0x84>)
    11e2:	429c      	cmp	r4, r3
    11e4:	d1ee      	bne.n	11c4 <__eqdf2+0x34>
    11e6:	433a      	orrs	r2, r7
    11e8:	2301      	movs	r3, #1
    11ea:	2a00      	cmp	r2, #0
    11ec:	d1ed      	bne.n	11ca <__eqdf2+0x3a>
    11ee:	2301      	movs	r3, #1
    11f0:	42a5      	cmp	r5, r4
    11f2:	d1ea      	bne.n	11ca <__eqdf2+0x3a>
    11f4:	42be      	cmp	r6, r7
    11f6:	d1e8      	bne.n	11ca <__eqdf2+0x3a>
    11f8:	45c4      	cmp	ip, r8
    11fa:	d1e6      	bne.n	11ca <__eqdf2+0x3a>
    11fc:	45cb      	cmp	fp, r9
    11fe:	d006      	beq.n	120e <__eqdf2+0x7e>
    1200:	2d00      	cmp	r5, #0
    1202:	d1e2      	bne.n	11ca <__eqdf2+0x3a>
    1204:	4330      	orrs	r0, r6
    1206:	1c03      	adds	r3, r0, #0
    1208:	1e58      	subs	r0, r3, #1
    120a:	4183      	sbcs	r3, r0
    120c:	e7dd      	b.n	11ca <__eqdf2+0x3a>
    120e:	2300      	movs	r3, #0
    1210:	e7db      	b.n	11ca <__eqdf2+0x3a>
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	000007ff 	.word	0x000007ff

00001218 <__gedf2>:
    1218:	b5f0      	push	{r4, r5, r6, r7, lr}
    121a:	4657      	mov	r7, sl
    121c:	4645      	mov	r5, r8
    121e:	464e      	mov	r6, r9
    1220:	b4e0      	push	{r5, r6, r7}
    1222:	030f      	lsls	r7, r1, #12
    1224:	004e      	lsls	r6, r1, #1
    1226:	0fc9      	lsrs	r1, r1, #31
    1228:	468a      	mov	sl, r1
    122a:	4932      	ldr	r1, [pc, #200]	; (12f4 <__gedf2+0xdc>)
    122c:	031d      	lsls	r5, r3, #12
    122e:	005c      	lsls	r4, r3, #1
    1230:	4684      	mov	ip, r0
    1232:	0b3f      	lsrs	r7, r7, #12
    1234:	0d76      	lsrs	r6, r6, #21
    1236:	4690      	mov	r8, r2
    1238:	0b2d      	lsrs	r5, r5, #12
    123a:	0d64      	lsrs	r4, r4, #21
    123c:	0fdb      	lsrs	r3, r3, #31
    123e:	428e      	cmp	r6, r1
    1240:	d00f      	beq.n	1262 <__gedf2+0x4a>
    1242:	428c      	cmp	r4, r1
    1244:	d039      	beq.n	12ba <__gedf2+0xa2>
    1246:	2e00      	cmp	r6, #0
    1248:	d110      	bne.n	126c <__gedf2+0x54>
    124a:	4338      	orrs	r0, r7
    124c:	4241      	negs	r1, r0
    124e:	4141      	adcs	r1, r0
    1250:	4689      	mov	r9, r1
    1252:	2c00      	cmp	r4, #0
    1254:	d127      	bne.n	12a6 <__gedf2+0x8e>
    1256:	432a      	orrs	r2, r5
    1258:	d125      	bne.n	12a6 <__gedf2+0x8e>
    125a:	2000      	movs	r0, #0
    125c:	2900      	cmp	r1, #0
    125e:	d10e      	bne.n	127e <__gedf2+0x66>
    1260:	e008      	b.n	1274 <__gedf2+0x5c>
    1262:	1c39      	adds	r1, r7, #0
    1264:	4301      	orrs	r1, r0
    1266:	d12e      	bne.n	12c6 <__gedf2+0xae>
    1268:	42b4      	cmp	r4, r6
    126a:	d026      	beq.n	12ba <__gedf2+0xa2>
    126c:	2c00      	cmp	r4, #0
    126e:	d00b      	beq.n	1288 <__gedf2+0x70>
    1270:	459a      	cmp	sl, r3
    1272:	d00d      	beq.n	1290 <__gedf2+0x78>
    1274:	4653      	mov	r3, sl
    1276:	4259      	negs	r1, r3
    1278:	2301      	movs	r3, #1
    127a:	4319      	orrs	r1, r3
    127c:	1c08      	adds	r0, r1, #0
    127e:	bc1c      	pop	{r2, r3, r4}
    1280:	4690      	mov	r8, r2
    1282:	4699      	mov	r9, r3
    1284:	46a2      	mov	sl, r4
    1286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1288:	432a      	orrs	r2, r5
    128a:	d0f3      	beq.n	1274 <__gedf2+0x5c>
    128c:	459a      	cmp	sl, r3
    128e:	d1f1      	bne.n	1274 <__gedf2+0x5c>
    1290:	42a6      	cmp	r6, r4
    1292:	dcef      	bgt.n	1274 <__gedf2+0x5c>
    1294:	da1a      	bge.n	12cc <__gedf2+0xb4>
    1296:	4650      	mov	r0, sl
    1298:	4241      	negs	r1, r0
    129a:	4148      	adcs	r0, r1
    129c:	2301      	movs	r3, #1
    129e:	4241      	negs	r1, r0
    12a0:	4319      	orrs	r1, r3
    12a2:	1c08      	adds	r0, r1, #0
    12a4:	e7eb      	b.n	127e <__gedf2+0x66>
    12a6:	464a      	mov	r2, r9
    12a8:	2a00      	cmp	r2, #0
    12aa:	d0e1      	beq.n	1270 <__gedf2+0x58>
    12ac:	4258      	negs	r0, r3
    12ae:	4158      	adcs	r0, r3
    12b0:	2201      	movs	r2, #1
    12b2:	4241      	negs	r1, r0
    12b4:	4311      	orrs	r1, r2
    12b6:	1c08      	adds	r0, r1, #0
    12b8:	e7e1      	b.n	127e <__gedf2+0x66>
    12ba:	1c29      	adds	r1, r5, #0
    12bc:	4311      	orrs	r1, r2
    12be:	d102      	bne.n	12c6 <__gedf2+0xae>
    12c0:	2e00      	cmp	r6, #0
    12c2:	d0c2      	beq.n	124a <__gedf2+0x32>
    12c4:	e7d4      	b.n	1270 <__gedf2+0x58>
    12c6:	2002      	movs	r0, #2
    12c8:	4240      	negs	r0, r0
    12ca:	e7d8      	b.n	127e <__gedf2+0x66>
    12cc:	42af      	cmp	r7, r5
    12ce:	d8d1      	bhi.n	1274 <__gedf2+0x5c>
    12d0:	d009      	beq.n	12e6 <__gedf2+0xce>
    12d2:	2000      	movs	r0, #0
    12d4:	42af      	cmp	r7, r5
    12d6:	d2d2      	bcs.n	127e <__gedf2+0x66>
    12d8:	4650      	mov	r0, sl
    12da:	4241      	negs	r1, r0
    12dc:	4148      	adcs	r0, r1
    12de:	2301      	movs	r3, #1
    12e0:	4240      	negs	r0, r0
    12e2:	4318      	orrs	r0, r3
    12e4:	e7cb      	b.n	127e <__gedf2+0x66>
    12e6:	45c4      	cmp	ip, r8
    12e8:	d8c4      	bhi.n	1274 <__gedf2+0x5c>
    12ea:	2000      	movs	r0, #0
    12ec:	45c4      	cmp	ip, r8
    12ee:	d3f3      	bcc.n	12d8 <__gedf2+0xc0>
    12f0:	e7c5      	b.n	127e <__gedf2+0x66>
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	000007ff 	.word	0x000007ff

000012f8 <__ledf2>:
    12f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12fa:	465f      	mov	r7, fp
    12fc:	464d      	mov	r5, r9
    12fe:	4644      	mov	r4, r8
    1300:	4656      	mov	r6, sl
    1302:	4680      	mov	r8, r0
    1304:	b4f0      	push	{r4, r5, r6, r7}
    1306:	1c06      	adds	r6, r0, #0
    1308:	0308      	lsls	r0, r1, #12
    130a:	0b00      	lsrs	r0, r0, #12
    130c:	4684      	mov	ip, r0
    130e:	482c      	ldr	r0, [pc, #176]	; (13c0 <__ledf2+0xc8>)
    1310:	004c      	lsls	r4, r1, #1
    1312:	031f      	lsls	r7, r3, #12
    1314:	005d      	lsls	r5, r3, #1
    1316:	0fc9      	lsrs	r1, r1, #31
    1318:	0d64      	lsrs	r4, r4, #21
    131a:	468b      	mov	fp, r1
    131c:	4691      	mov	r9, r2
    131e:	0b3f      	lsrs	r7, r7, #12
    1320:	0d6d      	lsrs	r5, r5, #21
    1322:	0fdb      	lsrs	r3, r3, #31
    1324:	4284      	cmp	r4, r0
    1326:	d012      	beq.n	134e <__ledf2+0x56>
    1328:	4285      	cmp	r5, r0
    132a:	d025      	beq.n	1378 <__ledf2+0x80>
    132c:	2c00      	cmp	r4, #0
    132e:	d114      	bne.n	135a <__ledf2+0x62>
    1330:	4661      	mov	r1, ip
    1332:	430e      	orrs	r6, r1
    1334:	4270      	negs	r0, r6
    1336:	4146      	adcs	r6, r0
    1338:	2d00      	cmp	r5, #0
    133a:	d035      	beq.n	13a8 <__ledf2+0xb0>
    133c:	2e00      	cmp	r6, #0
    133e:	d021      	beq.n	1384 <__ledf2+0x8c>
    1340:	4258      	negs	r0, r3
    1342:	4158      	adcs	r0, r3
    1344:	2101      	movs	r1, #1
    1346:	4243      	negs	r3, r0
    1348:	430b      	orrs	r3, r1
    134a:	1c18      	adds	r0, r3, #0
    134c:	e00e      	b.n	136c <__ledf2+0x74>
    134e:	4661      	mov	r1, ip
    1350:	2002      	movs	r0, #2
    1352:	4331      	orrs	r1, r6
    1354:	d10a      	bne.n	136c <__ledf2+0x74>
    1356:	42a5      	cmp	r5, r4
    1358:	d00e      	beq.n	1378 <__ledf2+0x80>
    135a:	2d00      	cmp	r5, #0
    135c:	d112      	bne.n	1384 <__ledf2+0x8c>
    135e:	433a      	orrs	r2, r7
    1360:	d110      	bne.n	1384 <__ledf2+0x8c>
    1362:	465b      	mov	r3, fp
    1364:	4259      	negs	r1, r3
    1366:	2301      	movs	r3, #1
    1368:	4319      	orrs	r1, r3
    136a:	1c08      	adds	r0, r1, #0
    136c:	bc3c      	pop	{r2, r3, r4, r5}
    136e:	4690      	mov	r8, r2
    1370:	4699      	mov	r9, r3
    1372:	46a2      	mov	sl, r4
    1374:	46ab      	mov	fp, r5
    1376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1378:	1c39      	adds	r1, r7, #0
    137a:	2002      	movs	r0, #2
    137c:	4311      	orrs	r1, r2
    137e:	d1f5      	bne.n	136c <__ledf2+0x74>
    1380:	2c00      	cmp	r4, #0
    1382:	d0d5      	beq.n	1330 <__ledf2+0x38>
    1384:	459b      	cmp	fp, r3
    1386:	d1ec      	bne.n	1362 <__ledf2+0x6a>
    1388:	42ac      	cmp	r4, r5
    138a:	dcea      	bgt.n	1362 <__ledf2+0x6a>
    138c:	db05      	blt.n	139a <__ledf2+0xa2>
    138e:	45bc      	cmp	ip, r7
    1390:	d8e7      	bhi.n	1362 <__ledf2+0x6a>
    1392:	d00f      	beq.n	13b4 <__ledf2+0xbc>
    1394:	2000      	movs	r0, #0
    1396:	45bc      	cmp	ip, r7
    1398:	d2e8      	bcs.n	136c <__ledf2+0x74>
    139a:	4658      	mov	r0, fp
    139c:	4241      	negs	r1, r0
    139e:	4148      	adcs	r0, r1
    13a0:	4241      	negs	r1, r0
    13a2:	2001      	movs	r0, #1
    13a4:	4308      	orrs	r0, r1
    13a6:	e7e1      	b.n	136c <__ledf2+0x74>
    13a8:	433a      	orrs	r2, r7
    13aa:	d1c7      	bne.n	133c <__ledf2+0x44>
    13ac:	2000      	movs	r0, #0
    13ae:	2e00      	cmp	r6, #0
    13b0:	d1dc      	bne.n	136c <__ledf2+0x74>
    13b2:	e7d6      	b.n	1362 <__ledf2+0x6a>
    13b4:	45c8      	cmp	r8, r9
    13b6:	d8d4      	bhi.n	1362 <__ledf2+0x6a>
    13b8:	2000      	movs	r0, #0
    13ba:	45c8      	cmp	r8, r9
    13bc:	d3ed      	bcc.n	139a <__ledf2+0xa2>
    13be:	e7d5      	b.n	136c <__ledf2+0x74>
    13c0:	000007ff 	.word	0x000007ff

000013c4 <__aeabi_dmul>:
    13c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13c6:	465f      	mov	r7, fp
    13c8:	4656      	mov	r6, sl
    13ca:	464d      	mov	r5, r9
    13cc:	4644      	mov	r4, r8
    13ce:	b4f0      	push	{r4, r5, r6, r7}
    13d0:	1c05      	adds	r5, r0, #0
    13d2:	1c06      	adds	r6, r0, #0
    13d4:	0308      	lsls	r0, r1, #12
    13d6:	b087      	sub	sp, #28
    13d8:	4699      	mov	r9, r3
    13da:	004f      	lsls	r7, r1, #1
    13dc:	0b03      	lsrs	r3, r0, #12
    13de:	0fcc      	lsrs	r4, r1, #31
    13e0:	4692      	mov	sl, r2
    13e2:	469b      	mov	fp, r3
    13e4:	0d7f      	lsrs	r7, r7, #21
    13e6:	9401      	str	r4, [sp, #4]
    13e8:	d067      	beq.n	14ba <__aeabi_dmul+0xf6>
    13ea:	4b6c      	ldr	r3, [pc, #432]	; (159c <__aeabi_dmul+0x1d8>)
    13ec:	429f      	cmp	r7, r3
    13ee:	d036      	beq.n	145e <__aeabi_dmul+0x9a>
    13f0:	2080      	movs	r0, #128	; 0x80
    13f2:	465b      	mov	r3, fp
    13f4:	0340      	lsls	r0, r0, #13
    13f6:	4318      	orrs	r0, r3
    13f8:	00c0      	lsls	r0, r0, #3
    13fa:	0f6b      	lsrs	r3, r5, #29
    13fc:	4318      	orrs	r0, r3
    13fe:	4b68      	ldr	r3, [pc, #416]	; (15a0 <__aeabi_dmul+0x1dc>)
    1400:	4683      	mov	fp, r0
    1402:	469c      	mov	ip, r3
    1404:	2300      	movs	r3, #0
    1406:	4698      	mov	r8, r3
    1408:	00ee      	lsls	r6, r5, #3
    140a:	4467      	add	r7, ip
    140c:	9300      	str	r3, [sp, #0]
    140e:	464b      	mov	r3, r9
    1410:	4649      	mov	r1, r9
    1412:	031d      	lsls	r5, r3, #12
    1414:	0fc9      	lsrs	r1, r1, #31
    1416:	005b      	lsls	r3, r3, #1
    1418:	4652      	mov	r2, sl
    141a:	0b2d      	lsrs	r5, r5, #12
    141c:	0d5b      	lsrs	r3, r3, #21
    141e:	4689      	mov	r9, r1
    1420:	d100      	bne.n	1424 <__aeabi_dmul+0x60>
    1422:	e06e      	b.n	1502 <__aeabi_dmul+0x13e>
    1424:	495d      	ldr	r1, [pc, #372]	; (159c <__aeabi_dmul+0x1d8>)
    1426:	428b      	cmp	r3, r1
    1428:	d064      	beq.n	14f4 <__aeabi_dmul+0x130>
    142a:	2080      	movs	r0, #128	; 0x80
    142c:	495c      	ldr	r1, [pc, #368]	; (15a0 <__aeabi_dmul+0x1dc>)
    142e:	0340      	lsls	r0, r0, #13
    1430:	468c      	mov	ip, r1
    1432:	2100      	movs	r1, #0
    1434:	4305      	orrs	r5, r0
    1436:	00ed      	lsls	r5, r5, #3
    1438:	0f50      	lsrs	r0, r2, #29
    143a:	4305      	orrs	r5, r0
    143c:	00d2      	lsls	r2, r2, #3
    143e:	4463      	add	r3, ip
    1440:	4648      	mov	r0, r9
    1442:	18ff      	adds	r7, r7, r3
    1444:	1c7b      	adds	r3, r7, #1
    1446:	469a      	mov	sl, r3
    1448:	9b00      	ldr	r3, [sp, #0]
    144a:	4060      	eors	r0, r4
    144c:	9002      	str	r0, [sp, #8]
    144e:	430b      	orrs	r3, r1
    1450:	2b0f      	cmp	r3, #15
    1452:	d900      	bls.n	1456 <__aeabi_dmul+0x92>
    1454:	e0ac      	b.n	15b0 <__aeabi_dmul+0x1ec>
    1456:	4853      	ldr	r0, [pc, #332]	; (15a4 <__aeabi_dmul+0x1e0>)
    1458:	009b      	lsls	r3, r3, #2
    145a:	58c3      	ldr	r3, [r0, r3]
    145c:	469f      	mov	pc, r3
    145e:	465b      	mov	r3, fp
    1460:	431d      	orrs	r5, r3
    1462:	d000      	beq.n	1466 <__aeabi_dmul+0xa2>
    1464:	e082      	b.n	156c <__aeabi_dmul+0x1a8>
    1466:	2308      	movs	r3, #8
    1468:	9300      	str	r3, [sp, #0]
    146a:	2300      	movs	r3, #0
    146c:	469b      	mov	fp, r3
    146e:	3302      	adds	r3, #2
    1470:	2600      	movs	r6, #0
    1472:	4698      	mov	r8, r3
    1474:	e7cb      	b.n	140e <__aeabi_dmul+0x4a>
    1476:	9b02      	ldr	r3, [sp, #8]
    1478:	9301      	str	r3, [sp, #4]
    147a:	4643      	mov	r3, r8
    147c:	2b02      	cmp	r3, #2
    147e:	d159      	bne.n	1534 <__aeabi_dmul+0x170>
    1480:	2401      	movs	r4, #1
    1482:	2500      	movs	r5, #0
    1484:	2600      	movs	r6, #0
    1486:	9b01      	ldr	r3, [sp, #4]
    1488:	401c      	ands	r4, r3
    148a:	4b44      	ldr	r3, [pc, #272]	; (159c <__aeabi_dmul+0x1d8>)
    148c:	2100      	movs	r1, #0
    148e:	032d      	lsls	r5, r5, #12
    1490:	0d0a      	lsrs	r2, r1, #20
    1492:	0512      	lsls	r2, r2, #20
    1494:	0b2d      	lsrs	r5, r5, #12
    1496:	4315      	orrs	r5, r2
    1498:	4a43      	ldr	r2, [pc, #268]	; (15a8 <__aeabi_dmul+0x1e4>)
    149a:	051b      	lsls	r3, r3, #20
    149c:	4015      	ands	r5, r2
    149e:	431d      	orrs	r5, r3
    14a0:	006d      	lsls	r5, r5, #1
    14a2:	07e4      	lsls	r4, r4, #31
    14a4:	086d      	lsrs	r5, r5, #1
    14a6:	4325      	orrs	r5, r4
    14a8:	1c30      	adds	r0, r6, #0
    14aa:	1c29      	adds	r1, r5, #0
    14ac:	b007      	add	sp, #28
    14ae:	bc3c      	pop	{r2, r3, r4, r5}
    14b0:	4690      	mov	r8, r2
    14b2:	4699      	mov	r9, r3
    14b4:	46a2      	mov	sl, r4
    14b6:	46ab      	mov	fp, r5
    14b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ba:	432b      	orrs	r3, r5
    14bc:	d04e      	beq.n	155c <__aeabi_dmul+0x198>
    14be:	465b      	mov	r3, fp
    14c0:	2b00      	cmp	r3, #0
    14c2:	d100      	bne.n	14c6 <__aeabi_dmul+0x102>
    14c4:	e185      	b.n	17d2 <__aeabi_dmul+0x40e>
    14c6:	4658      	mov	r0, fp
    14c8:	f000 fb14 	bl	1af4 <__clzsi2>
    14cc:	1c02      	adds	r2, r0, #0
    14ce:	2328      	movs	r3, #40	; 0x28
    14d0:	1c29      	adds	r1, r5, #0
    14d2:	1a9b      	subs	r3, r3, r2
    14d4:	1c16      	adds	r6, r2, #0
    14d6:	4658      	mov	r0, fp
    14d8:	40d9      	lsrs	r1, r3
    14da:	3e08      	subs	r6, #8
    14dc:	40b0      	lsls	r0, r6
    14de:	1c0b      	adds	r3, r1, #0
    14e0:	40b5      	lsls	r5, r6
    14e2:	4303      	orrs	r3, r0
    14e4:	469b      	mov	fp, r3
    14e6:	1c2e      	adds	r6, r5, #0
    14e8:	2300      	movs	r3, #0
    14ea:	4f30      	ldr	r7, [pc, #192]	; (15ac <__aeabi_dmul+0x1e8>)
    14ec:	9300      	str	r3, [sp, #0]
    14ee:	1abf      	subs	r7, r7, r2
    14f0:	4698      	mov	r8, r3
    14f2:	e78c      	b.n	140e <__aeabi_dmul+0x4a>
    14f4:	4651      	mov	r1, sl
    14f6:	4329      	orrs	r1, r5
    14f8:	d12e      	bne.n	1558 <__aeabi_dmul+0x194>
    14fa:	2500      	movs	r5, #0
    14fc:	2200      	movs	r2, #0
    14fe:	2102      	movs	r1, #2
    1500:	e79e      	b.n	1440 <__aeabi_dmul+0x7c>
    1502:	4651      	mov	r1, sl
    1504:	4329      	orrs	r1, r5
    1506:	d023      	beq.n	1550 <__aeabi_dmul+0x18c>
    1508:	2d00      	cmp	r5, #0
    150a:	d100      	bne.n	150e <__aeabi_dmul+0x14a>
    150c:	e154      	b.n	17b8 <__aeabi_dmul+0x3f4>
    150e:	1c28      	adds	r0, r5, #0
    1510:	f000 faf0 	bl	1af4 <__clzsi2>
    1514:	1c03      	adds	r3, r0, #0
    1516:	2128      	movs	r1, #40	; 0x28
    1518:	4650      	mov	r0, sl
    151a:	1ac9      	subs	r1, r1, r3
    151c:	1c1a      	adds	r2, r3, #0
    151e:	40c8      	lsrs	r0, r1
    1520:	4651      	mov	r1, sl
    1522:	3a08      	subs	r2, #8
    1524:	4091      	lsls	r1, r2
    1526:	4095      	lsls	r5, r2
    1528:	1c0a      	adds	r2, r1, #0
    152a:	4305      	orrs	r5, r0
    152c:	481f      	ldr	r0, [pc, #124]	; (15ac <__aeabi_dmul+0x1e8>)
    152e:	2100      	movs	r1, #0
    1530:	1ac3      	subs	r3, r0, r3
    1532:	e785      	b.n	1440 <__aeabi_dmul+0x7c>
    1534:	2b03      	cmp	r3, #3
    1536:	d100      	bne.n	153a <__aeabi_dmul+0x176>
    1538:	e1c2      	b.n	18c0 <__aeabi_dmul+0x4fc>
    153a:	2b01      	cmp	r3, #1
    153c:	d000      	beq.n	1540 <__aeabi_dmul+0x17c>
    153e:	e16d      	b.n	181c <__aeabi_dmul+0x458>
    1540:	4644      	mov	r4, r8
    1542:	9b01      	ldr	r3, [sp, #4]
    1544:	2500      	movs	r5, #0
    1546:	401c      	ands	r4, r3
    1548:	b2e4      	uxtb	r4, r4
    154a:	2300      	movs	r3, #0
    154c:	2600      	movs	r6, #0
    154e:	e79d      	b.n	148c <__aeabi_dmul+0xc8>
    1550:	2500      	movs	r5, #0
    1552:	2200      	movs	r2, #0
    1554:	2101      	movs	r1, #1
    1556:	e773      	b.n	1440 <__aeabi_dmul+0x7c>
    1558:	2103      	movs	r1, #3
    155a:	e771      	b.n	1440 <__aeabi_dmul+0x7c>
    155c:	2304      	movs	r3, #4
    155e:	9300      	str	r3, [sp, #0]
    1560:	2300      	movs	r3, #0
    1562:	469b      	mov	fp, r3
    1564:	3301      	adds	r3, #1
    1566:	2600      	movs	r6, #0
    1568:	4698      	mov	r8, r3
    156a:	e750      	b.n	140e <__aeabi_dmul+0x4a>
    156c:	230c      	movs	r3, #12
    156e:	9300      	str	r3, [sp, #0]
    1570:	3b09      	subs	r3, #9
    1572:	4698      	mov	r8, r3
    1574:	e74b      	b.n	140e <__aeabi_dmul+0x4a>
    1576:	2580      	movs	r5, #128	; 0x80
    1578:	2400      	movs	r4, #0
    157a:	032d      	lsls	r5, r5, #12
    157c:	2600      	movs	r6, #0
    157e:	4b07      	ldr	r3, [pc, #28]	; (159c <__aeabi_dmul+0x1d8>)
    1580:	e784      	b.n	148c <__aeabi_dmul+0xc8>
    1582:	464b      	mov	r3, r9
    1584:	46ab      	mov	fp, r5
    1586:	1c16      	adds	r6, r2, #0
    1588:	9301      	str	r3, [sp, #4]
    158a:	4688      	mov	r8, r1
    158c:	e775      	b.n	147a <__aeabi_dmul+0xb6>
    158e:	9b02      	ldr	r3, [sp, #8]
    1590:	46ab      	mov	fp, r5
    1592:	1c16      	adds	r6, r2, #0
    1594:	9301      	str	r3, [sp, #4]
    1596:	4688      	mov	r8, r1
    1598:	e76f      	b.n	147a <__aeabi_dmul+0xb6>
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	000007ff 	.word	0x000007ff
    15a0:	fffffc01 	.word	0xfffffc01
    15a4:	00002008 	.word	0x00002008
    15a8:	800fffff 	.word	0x800fffff
    15ac:	fffffc0d 	.word	0xfffffc0d
    15b0:	0c33      	lsrs	r3, r6, #16
    15b2:	0436      	lsls	r6, r6, #16
    15b4:	0c36      	lsrs	r6, r6, #16
    15b6:	469c      	mov	ip, r3
    15b8:	1c33      	adds	r3, r6, #0
    15ba:	0c14      	lsrs	r4, r2, #16
    15bc:	0412      	lsls	r2, r2, #16
    15be:	0c12      	lsrs	r2, r2, #16
    15c0:	4353      	muls	r3, r2
    15c2:	4698      	mov	r8, r3
    15c4:	4663      	mov	r3, ip
    15c6:	4353      	muls	r3, r2
    15c8:	4699      	mov	r9, r3
    15ca:	4663      	mov	r3, ip
    15cc:	4363      	muls	r3, r4
    15ce:	9301      	str	r3, [sp, #4]
    15d0:	1c33      	adds	r3, r6, #0
    15d2:	4641      	mov	r1, r8
    15d4:	4363      	muls	r3, r4
    15d6:	0c09      	lsrs	r1, r1, #16
    15d8:	444b      	add	r3, r9
    15da:	185b      	adds	r3, r3, r1
    15dc:	4599      	cmp	r9, r3
    15de:	d905      	bls.n	15ec <__aeabi_dmul+0x228>
    15e0:	2080      	movs	r0, #128	; 0x80
    15e2:	0240      	lsls	r0, r0, #9
    15e4:	4681      	mov	r9, r0
    15e6:	9901      	ldr	r1, [sp, #4]
    15e8:	4449      	add	r1, r9
    15ea:	9101      	str	r1, [sp, #4]
    15ec:	0c19      	lsrs	r1, r3, #16
    15ee:	9103      	str	r1, [sp, #12]
    15f0:	4641      	mov	r1, r8
    15f2:	0409      	lsls	r1, r1, #16
    15f4:	0c09      	lsrs	r1, r1, #16
    15f6:	041b      	lsls	r3, r3, #16
    15f8:	185b      	adds	r3, r3, r1
    15fa:	9304      	str	r3, [sp, #16]
    15fc:	0c2b      	lsrs	r3, r5, #16
    15fe:	4698      	mov	r8, r3
    1600:	1c33      	adds	r3, r6, #0
    1602:	042d      	lsls	r5, r5, #16
    1604:	0c29      	lsrs	r1, r5, #16
    1606:	434b      	muls	r3, r1
    1608:	4660      	mov	r0, ip
    160a:	9300      	str	r3, [sp, #0]
    160c:	4643      	mov	r3, r8
    160e:	4665      	mov	r5, ip
    1610:	4358      	muls	r0, r3
    1612:	435e      	muls	r6, r3
    1614:	9b00      	ldr	r3, [sp, #0]
    1616:	434d      	muls	r5, r1
    1618:	0c1b      	lsrs	r3, r3, #16
    161a:	4699      	mov	r9, r3
    161c:	19ae      	adds	r6, r5, r6
    161e:	444e      	add	r6, r9
    1620:	4684      	mov	ip, r0
    1622:	42b5      	cmp	r5, r6
    1624:	d903      	bls.n	162e <__aeabi_dmul+0x26a>
    1626:	2380      	movs	r3, #128	; 0x80
    1628:	025b      	lsls	r3, r3, #9
    162a:	4699      	mov	r9, r3
    162c:	44cc      	add	ip, r9
    162e:	0c35      	lsrs	r5, r6, #16
    1630:	1c2b      	adds	r3, r5, #0
    1632:	9803      	ldr	r0, [sp, #12]
    1634:	4463      	add	r3, ip
    1636:	4684      	mov	ip, r0
    1638:	9305      	str	r3, [sp, #20]
    163a:	9b00      	ldr	r3, [sp, #0]
    163c:	0436      	lsls	r6, r6, #16
    163e:	041b      	lsls	r3, r3, #16
    1640:	0c1b      	lsrs	r3, r3, #16
    1642:	18f3      	adds	r3, r6, r3
    1644:	449c      	add	ip, r3
    1646:	4660      	mov	r0, ip
    1648:	9003      	str	r0, [sp, #12]
    164a:	4658      	mov	r0, fp
    164c:	0405      	lsls	r5, r0, #16
    164e:	0c06      	lsrs	r6, r0, #16
    1650:	0c28      	lsrs	r0, r5, #16
    1652:	4684      	mov	ip, r0
    1654:	4350      	muls	r0, r2
    1656:	1c35      	adds	r5, r6, #0
    1658:	4681      	mov	r9, r0
    165a:	4660      	mov	r0, ip
    165c:	4365      	muls	r5, r4
    165e:	4344      	muls	r4, r0
    1660:	4648      	mov	r0, r9
    1662:	0c00      	lsrs	r0, r0, #16
    1664:	4683      	mov	fp, r0
    1666:	4372      	muls	r2, r6
    1668:	1914      	adds	r4, r2, r4
    166a:	445c      	add	r4, fp
    166c:	42a2      	cmp	r2, r4
    166e:	d903      	bls.n	1678 <__aeabi_dmul+0x2b4>
    1670:	2280      	movs	r2, #128	; 0x80
    1672:	0252      	lsls	r2, r2, #9
    1674:	4693      	mov	fp, r2
    1676:	445d      	add	r5, fp
    1678:	0c22      	lsrs	r2, r4, #16
    167a:	18ad      	adds	r5, r5, r2
    167c:	464a      	mov	r2, r9
    167e:	0412      	lsls	r2, r2, #16
    1680:	0c12      	lsrs	r2, r2, #16
    1682:	0424      	lsls	r4, r4, #16
    1684:	4640      	mov	r0, r8
    1686:	18a4      	adds	r4, r4, r2
    1688:	4662      	mov	r2, ip
    168a:	434a      	muls	r2, r1
    168c:	4371      	muls	r1, r6
    168e:	4346      	muls	r6, r0
    1690:	4660      	mov	r0, ip
    1692:	9600      	str	r6, [sp, #0]
    1694:	4646      	mov	r6, r8
    1696:	4370      	muls	r0, r6
    1698:	4680      	mov	r8, r0
    169a:	0c10      	lsrs	r0, r2, #16
    169c:	4684      	mov	ip, r0
    169e:	4488      	add	r8, r1
    16a0:	44e0      	add	r8, ip
    16a2:	4541      	cmp	r1, r8
    16a4:	d905      	bls.n	16b2 <__aeabi_dmul+0x2ee>
    16a6:	2180      	movs	r1, #128	; 0x80
    16a8:	0249      	lsls	r1, r1, #9
    16aa:	468c      	mov	ip, r1
    16ac:	9900      	ldr	r1, [sp, #0]
    16ae:	4461      	add	r1, ip
    16b0:	9100      	str	r1, [sp, #0]
    16b2:	9801      	ldr	r0, [sp, #4]
    16b4:	9903      	ldr	r1, [sp, #12]
    16b6:	4684      	mov	ip, r0
    16b8:	4461      	add	r1, ip
    16ba:	4299      	cmp	r1, r3
    16bc:	419b      	sbcs	r3, r3
    16be:	425b      	negs	r3, r3
    16c0:	4699      	mov	r9, r3
    16c2:	9805      	ldr	r0, [sp, #20]
    16c4:	4643      	mov	r3, r8
    16c6:	4684      	mov	ip, r0
    16c8:	0412      	lsls	r2, r2, #16
    16ca:	0c12      	lsrs	r2, r2, #16
    16cc:	041b      	lsls	r3, r3, #16
    16ce:	189b      	adds	r3, r3, r2
    16d0:	4463      	add	r3, ip
    16d2:	469c      	mov	ip, r3
    16d4:	46ab      	mov	fp, r5
    16d6:	4283      	cmp	r3, r0
    16d8:	419b      	sbcs	r3, r3
    16da:	4640      	mov	r0, r8
    16dc:	190a      	adds	r2, r1, r4
    16de:	44cc      	add	ip, r9
    16e0:	42a2      	cmp	r2, r4
    16e2:	4189      	sbcs	r1, r1
    16e4:	44e3      	add	fp, ip
    16e6:	45cc      	cmp	ip, r9
    16e8:	41b6      	sbcs	r6, r6
    16ea:	465c      	mov	r4, fp
    16ec:	0c00      	lsrs	r0, r0, #16
    16ee:	4680      	mov	r8, r0
    16f0:	4249      	negs	r1, r1
    16f2:	4276      	negs	r6, r6
    16f4:	425b      	negs	r3, r3
    16f6:	1864      	adds	r4, r4, r1
    16f8:	4333      	orrs	r3, r6
    16fa:	4498      	add	r8, r3
    16fc:	428c      	cmp	r4, r1
    16fe:	4189      	sbcs	r1, r1
    1700:	45ab      	cmp	fp, r5
    1702:	419b      	sbcs	r3, r3
    1704:	4249      	negs	r1, r1
    1706:	425b      	negs	r3, r3
    1708:	4319      	orrs	r1, r3
    170a:	1c0d      	adds	r5, r1, #0
    170c:	9b00      	ldr	r3, [sp, #0]
    170e:	4445      	add	r5, r8
    1710:	18ee      	adds	r6, r5, r3
    1712:	0276      	lsls	r6, r6, #9
    1714:	0de5      	lsrs	r5, r4, #23
    1716:	432e      	orrs	r6, r5
    1718:	46b3      	mov	fp, r6
    171a:	9b04      	ldr	r3, [sp, #16]
    171c:	0256      	lsls	r6, r2, #9
    171e:	431e      	orrs	r6, r3
    1720:	1e73      	subs	r3, r6, #1
    1722:	419e      	sbcs	r6, r3
    1724:	465b      	mov	r3, fp
    1726:	0dd2      	lsrs	r2, r2, #23
    1728:	4332      	orrs	r2, r6
    172a:	0266      	lsls	r6, r4, #9
    172c:	4316      	orrs	r6, r2
    172e:	01db      	lsls	r3, r3, #7
    1730:	d50a      	bpl.n	1748 <__aeabi_dmul+0x384>
    1732:	2301      	movs	r3, #1
    1734:	4033      	ands	r3, r6
    1736:	0876      	lsrs	r6, r6, #1
    1738:	431e      	orrs	r6, r3
    173a:	465b      	mov	r3, fp
    173c:	07db      	lsls	r3, r3, #31
    173e:	431e      	orrs	r6, r3
    1740:	465b      	mov	r3, fp
    1742:	085b      	lsrs	r3, r3, #1
    1744:	469b      	mov	fp, r3
    1746:	4657      	mov	r7, sl
    1748:	4b63      	ldr	r3, [pc, #396]	; (18d8 <__aeabi_dmul+0x514>)
    174a:	18fb      	adds	r3, r7, r3
    174c:	2b00      	cmp	r3, #0
    174e:	dd5a      	ble.n	1806 <__aeabi_dmul+0x442>
    1750:	0772      	lsls	r2, r6, #29
    1752:	d009      	beq.n	1768 <__aeabi_dmul+0x3a4>
    1754:	220f      	movs	r2, #15
    1756:	4032      	ands	r2, r6
    1758:	2a04      	cmp	r2, #4
    175a:	d005      	beq.n	1768 <__aeabi_dmul+0x3a4>
    175c:	1d32      	adds	r2, r6, #4
    175e:	42b2      	cmp	r2, r6
    1760:	41b6      	sbcs	r6, r6
    1762:	4276      	negs	r6, r6
    1764:	44b3      	add	fp, r6
    1766:	1c16      	adds	r6, r2, #0
    1768:	465a      	mov	r2, fp
    176a:	01d2      	lsls	r2, r2, #7
    176c:	d506      	bpl.n	177c <__aeabi_dmul+0x3b8>
    176e:	465a      	mov	r2, fp
    1770:	4b5a      	ldr	r3, [pc, #360]	; (18dc <__aeabi_dmul+0x518>)
    1772:	401a      	ands	r2, r3
    1774:	2380      	movs	r3, #128	; 0x80
    1776:	4693      	mov	fp, r2
    1778:	00db      	lsls	r3, r3, #3
    177a:	18fb      	adds	r3, r7, r3
    177c:	4a58      	ldr	r2, [pc, #352]	; (18e0 <__aeabi_dmul+0x51c>)
    177e:	4293      	cmp	r3, r2
    1780:	dd34      	ble.n	17ec <__aeabi_dmul+0x428>
    1782:	2401      	movs	r4, #1
    1784:	9b02      	ldr	r3, [sp, #8]
    1786:	2500      	movs	r5, #0
    1788:	401c      	ands	r4, r3
    178a:	2600      	movs	r6, #0
    178c:	4b55      	ldr	r3, [pc, #340]	; (18e4 <__aeabi_dmul+0x520>)
    178e:	e67d      	b.n	148c <__aeabi_dmul+0xc8>
    1790:	2080      	movs	r0, #128	; 0x80
    1792:	465b      	mov	r3, fp
    1794:	0300      	lsls	r0, r0, #12
    1796:	4203      	tst	r3, r0
    1798:	d008      	beq.n	17ac <__aeabi_dmul+0x3e8>
    179a:	4205      	tst	r5, r0
    179c:	d106      	bne.n	17ac <__aeabi_dmul+0x3e8>
    179e:	4305      	orrs	r5, r0
    17a0:	032d      	lsls	r5, r5, #12
    17a2:	0b2d      	lsrs	r5, r5, #12
    17a4:	464c      	mov	r4, r9
    17a6:	1c16      	adds	r6, r2, #0
    17a8:	4b4e      	ldr	r3, [pc, #312]	; (18e4 <__aeabi_dmul+0x520>)
    17aa:	e66f      	b.n	148c <__aeabi_dmul+0xc8>
    17ac:	465d      	mov	r5, fp
    17ae:	4305      	orrs	r5, r0
    17b0:	032d      	lsls	r5, r5, #12
    17b2:	0b2d      	lsrs	r5, r5, #12
    17b4:	4b4b      	ldr	r3, [pc, #300]	; (18e4 <__aeabi_dmul+0x520>)
    17b6:	e669      	b.n	148c <__aeabi_dmul+0xc8>
    17b8:	4650      	mov	r0, sl
    17ba:	f000 f99b 	bl	1af4 <__clzsi2>
    17be:	1c03      	adds	r3, r0, #0
    17c0:	3320      	adds	r3, #32
    17c2:	2b27      	cmp	r3, #39	; 0x27
    17c4:	dc00      	bgt.n	17c8 <__aeabi_dmul+0x404>
    17c6:	e6a6      	b.n	1516 <__aeabi_dmul+0x152>
    17c8:	4655      	mov	r5, sl
    17ca:	3808      	subs	r0, #8
    17cc:	4085      	lsls	r5, r0
    17ce:	2200      	movs	r2, #0
    17d0:	e6ac      	b.n	152c <__aeabi_dmul+0x168>
    17d2:	1c28      	adds	r0, r5, #0
    17d4:	f000 f98e 	bl	1af4 <__clzsi2>
    17d8:	1c02      	adds	r2, r0, #0
    17da:	3220      	adds	r2, #32
    17dc:	2a27      	cmp	r2, #39	; 0x27
    17de:	dc00      	bgt.n	17e2 <__aeabi_dmul+0x41e>
    17e0:	e675      	b.n	14ce <__aeabi_dmul+0x10a>
    17e2:	3808      	subs	r0, #8
    17e4:	4085      	lsls	r5, r0
    17e6:	2600      	movs	r6, #0
    17e8:	46ab      	mov	fp, r5
    17ea:	e67d      	b.n	14e8 <__aeabi_dmul+0x124>
    17ec:	465a      	mov	r2, fp
    17ee:	08f6      	lsrs	r6, r6, #3
    17f0:	0752      	lsls	r2, r2, #29
    17f2:	4316      	orrs	r6, r2
    17f4:	465a      	mov	r2, fp
    17f6:	2401      	movs	r4, #1
    17f8:	0255      	lsls	r5, r2, #9
    17fa:	9a02      	ldr	r2, [sp, #8]
    17fc:	055b      	lsls	r3, r3, #21
    17fe:	0b2d      	lsrs	r5, r5, #12
    1800:	0d5b      	lsrs	r3, r3, #21
    1802:	4014      	ands	r4, r2
    1804:	e642      	b.n	148c <__aeabi_dmul+0xc8>
    1806:	4d38      	ldr	r5, [pc, #224]	; (18e8 <__aeabi_dmul+0x524>)
    1808:	1bed      	subs	r5, r5, r7
    180a:	2d38      	cmp	r5, #56	; 0x38
    180c:	dd0a      	ble.n	1824 <__aeabi_dmul+0x460>
    180e:	2401      	movs	r4, #1
    1810:	9b02      	ldr	r3, [sp, #8]
    1812:	2500      	movs	r5, #0
    1814:	401c      	ands	r4, r3
    1816:	2600      	movs	r6, #0
    1818:	2300      	movs	r3, #0
    181a:	e637      	b.n	148c <__aeabi_dmul+0xc8>
    181c:	9b01      	ldr	r3, [sp, #4]
    181e:	4657      	mov	r7, sl
    1820:	9302      	str	r3, [sp, #8]
    1822:	e791      	b.n	1748 <__aeabi_dmul+0x384>
    1824:	2d1f      	cmp	r5, #31
    1826:	dc25      	bgt.n	1874 <__aeabi_dmul+0x4b0>
    1828:	4b30      	ldr	r3, [pc, #192]	; (18ec <__aeabi_dmul+0x528>)
    182a:	1c32      	adds	r2, r6, #0
    182c:	469c      	mov	ip, r3
    182e:	4467      	add	r7, ip
    1830:	40be      	lsls	r6, r7
    1832:	465b      	mov	r3, fp
    1834:	40bb      	lsls	r3, r7
    1836:	1c37      	adds	r7, r6, #0
    1838:	40ea      	lsrs	r2, r5
    183a:	1e7e      	subs	r6, r7, #1
    183c:	41b7      	sbcs	r7, r6
    183e:	4313      	orrs	r3, r2
    1840:	433b      	orrs	r3, r7
    1842:	1c1e      	adds	r6, r3, #0
    1844:	465b      	mov	r3, fp
    1846:	40eb      	lsrs	r3, r5
    1848:	1c1d      	adds	r5, r3, #0
    184a:	0773      	lsls	r3, r6, #29
    184c:	d009      	beq.n	1862 <__aeabi_dmul+0x49e>
    184e:	230f      	movs	r3, #15
    1850:	4033      	ands	r3, r6
    1852:	2b04      	cmp	r3, #4
    1854:	d005      	beq.n	1862 <__aeabi_dmul+0x49e>
    1856:	1d33      	adds	r3, r6, #4
    1858:	42b3      	cmp	r3, r6
    185a:	41b6      	sbcs	r6, r6
    185c:	4276      	negs	r6, r6
    185e:	19ad      	adds	r5, r5, r6
    1860:	1c1e      	adds	r6, r3, #0
    1862:	022b      	lsls	r3, r5, #8
    1864:	d520      	bpl.n	18a8 <__aeabi_dmul+0x4e4>
    1866:	2401      	movs	r4, #1
    1868:	9b02      	ldr	r3, [sp, #8]
    186a:	2500      	movs	r5, #0
    186c:	401c      	ands	r4, r3
    186e:	2600      	movs	r6, #0
    1870:	2301      	movs	r3, #1
    1872:	e60b      	b.n	148c <__aeabi_dmul+0xc8>
    1874:	465a      	mov	r2, fp
    1876:	4b1e      	ldr	r3, [pc, #120]	; (18f0 <__aeabi_dmul+0x52c>)
    1878:	1bdb      	subs	r3, r3, r7
    187a:	40da      	lsrs	r2, r3
    187c:	1c13      	adds	r3, r2, #0
    187e:	2d20      	cmp	r5, #32
    1880:	d01c      	beq.n	18bc <__aeabi_dmul+0x4f8>
    1882:	4a1c      	ldr	r2, [pc, #112]	; (18f4 <__aeabi_dmul+0x530>)
    1884:	4694      	mov	ip, r2
    1886:	465a      	mov	r2, fp
    1888:	4467      	add	r7, ip
    188a:	40ba      	lsls	r2, r7
    188c:	1c17      	adds	r7, r2, #0
    188e:	433e      	orrs	r6, r7
    1890:	1e72      	subs	r2, r6, #1
    1892:	4196      	sbcs	r6, r2
    1894:	431e      	orrs	r6, r3
    1896:	2307      	movs	r3, #7
    1898:	2500      	movs	r5, #0
    189a:	4033      	ands	r3, r6
    189c:	d007      	beq.n	18ae <__aeabi_dmul+0x4ea>
    189e:	230f      	movs	r3, #15
    18a0:	2500      	movs	r5, #0
    18a2:	4033      	ands	r3, r6
    18a4:	2b04      	cmp	r3, #4
    18a6:	d1d6      	bne.n	1856 <__aeabi_dmul+0x492>
    18a8:	076b      	lsls	r3, r5, #29
    18aa:	026d      	lsls	r5, r5, #9
    18ac:	0b2d      	lsrs	r5, r5, #12
    18ae:	2401      	movs	r4, #1
    18b0:	08f6      	lsrs	r6, r6, #3
    18b2:	431e      	orrs	r6, r3
    18b4:	9b02      	ldr	r3, [sp, #8]
    18b6:	401c      	ands	r4, r3
    18b8:	2300      	movs	r3, #0
    18ba:	e5e7      	b.n	148c <__aeabi_dmul+0xc8>
    18bc:	2700      	movs	r7, #0
    18be:	e7e6      	b.n	188e <__aeabi_dmul+0x4ca>
    18c0:	2580      	movs	r5, #128	; 0x80
    18c2:	465b      	mov	r3, fp
    18c4:	2401      	movs	r4, #1
    18c6:	032d      	lsls	r5, r5, #12
    18c8:	431d      	orrs	r5, r3
    18ca:	9b01      	ldr	r3, [sp, #4]
    18cc:	032d      	lsls	r5, r5, #12
    18ce:	4023      	ands	r3, r4
    18d0:	1c1c      	adds	r4, r3, #0
    18d2:	0b2d      	lsrs	r5, r5, #12
    18d4:	4b03      	ldr	r3, [pc, #12]	; (18e4 <__aeabi_dmul+0x520>)
    18d6:	e5d9      	b.n	148c <__aeabi_dmul+0xc8>
    18d8:	000003ff 	.word	0x000003ff
    18dc:	feffffff 	.word	0xfeffffff
    18e0:	000007fe 	.word	0x000007fe
    18e4:	000007ff 	.word	0x000007ff
    18e8:	fffffc02 	.word	0xfffffc02
    18ec:	0000041e 	.word	0x0000041e
    18f0:	fffffbe2 	.word	0xfffffbe2
    18f4:	0000043e 	.word	0x0000043e

000018f8 <__aeabi_i2d>:
    18f8:	b538      	push	{r3, r4, r5, lr}
    18fa:	1e04      	subs	r4, r0, #0
    18fc:	d016      	beq.n	192c <__aeabi_i2d+0x34>
    18fe:	0fc5      	lsrs	r5, r0, #31
    1900:	d000      	beq.n	1904 <__aeabi_i2d+0xc>
    1902:	4244      	negs	r4, r0
    1904:	1c20      	adds	r0, r4, #0
    1906:	f000 f8f5 	bl	1af4 <__clzsi2>
    190a:	4b17      	ldr	r3, [pc, #92]	; (1968 <__aeabi_i2d+0x70>)
    190c:	1a1b      	subs	r3, r3, r0
    190e:	280a      	cmp	r0, #10
    1910:	dc21      	bgt.n	1956 <__aeabi_i2d+0x5e>
    1912:	1c02      	adds	r2, r0, #0
    1914:	1c21      	adds	r1, r4, #0
    1916:	3215      	adds	r2, #21
    1918:	4091      	lsls	r1, r2
    191a:	1c0a      	adds	r2, r1, #0
    191c:	210b      	movs	r1, #11
    191e:	1a08      	subs	r0, r1, r0
    1920:	40c4      	lsrs	r4, r0
    1922:	055b      	lsls	r3, r3, #21
    1924:	0324      	lsls	r4, r4, #12
    1926:	0b24      	lsrs	r4, r4, #12
    1928:	0d5b      	lsrs	r3, r3, #21
    192a:	e003      	b.n	1934 <__aeabi_i2d+0x3c>
    192c:	2500      	movs	r5, #0
    192e:	2300      	movs	r3, #0
    1930:	2400      	movs	r4, #0
    1932:	2200      	movs	r2, #0
    1934:	2100      	movs	r1, #0
    1936:	1c10      	adds	r0, r2, #0
    1938:	0324      	lsls	r4, r4, #12
    193a:	0d0a      	lsrs	r2, r1, #20
    193c:	0512      	lsls	r2, r2, #20
    193e:	0b24      	lsrs	r4, r4, #12
    1940:	4314      	orrs	r4, r2
    1942:	4a0a      	ldr	r2, [pc, #40]	; (196c <__aeabi_i2d+0x74>)
    1944:	051b      	lsls	r3, r3, #20
    1946:	4014      	ands	r4, r2
    1948:	431c      	orrs	r4, r3
    194a:	0064      	lsls	r4, r4, #1
    194c:	07ed      	lsls	r5, r5, #31
    194e:	0864      	lsrs	r4, r4, #1
    1950:	432c      	orrs	r4, r5
    1952:	1c21      	adds	r1, r4, #0
    1954:	bd38      	pop	{r3, r4, r5, pc}
    1956:	380b      	subs	r0, #11
    1958:	4084      	lsls	r4, r0
    195a:	055b      	lsls	r3, r3, #21
    195c:	0324      	lsls	r4, r4, #12
    195e:	0b24      	lsrs	r4, r4, #12
    1960:	0d5b      	lsrs	r3, r3, #21
    1962:	2200      	movs	r2, #0
    1964:	e7e6      	b.n	1934 <__aeabi_i2d+0x3c>
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	0000041e 	.word	0x0000041e
    196c:	800fffff 	.word	0x800fffff

00001970 <__aeabi_ui2d>:
    1970:	b510      	push	{r4, lr}
    1972:	1e04      	subs	r4, r0, #0
    1974:	d010      	beq.n	1998 <__aeabi_ui2d+0x28>
    1976:	f000 f8bd 	bl	1af4 <__clzsi2>
    197a:	4a14      	ldr	r2, [pc, #80]	; (19cc <__aeabi_ui2d+0x5c>)
    197c:	1a12      	subs	r2, r2, r0
    197e:	280a      	cmp	r0, #10
    1980:	dc1a      	bgt.n	19b8 <__aeabi_ui2d+0x48>
    1982:	230b      	movs	r3, #11
    1984:	1c21      	adds	r1, r4, #0
    1986:	1a1b      	subs	r3, r3, r0
    1988:	40d9      	lsrs	r1, r3
    198a:	3015      	adds	r0, #21
    198c:	030b      	lsls	r3, r1, #12
    198e:	0552      	lsls	r2, r2, #21
    1990:	4084      	lsls	r4, r0
    1992:	0b1b      	lsrs	r3, r3, #12
    1994:	0d52      	lsrs	r2, r2, #21
    1996:	e001      	b.n	199c <__aeabi_ui2d+0x2c>
    1998:	2200      	movs	r2, #0
    199a:	2300      	movs	r3, #0
    199c:	2100      	movs	r1, #0
    199e:	031b      	lsls	r3, r3, #12
    19a0:	1c20      	adds	r0, r4, #0
    19a2:	0b1c      	lsrs	r4, r3, #12
    19a4:	0d0b      	lsrs	r3, r1, #20
    19a6:	051b      	lsls	r3, r3, #20
    19a8:	4323      	orrs	r3, r4
    19aa:	4c09      	ldr	r4, [pc, #36]	; (19d0 <__aeabi_ui2d+0x60>)
    19ac:	0512      	lsls	r2, r2, #20
    19ae:	4023      	ands	r3, r4
    19b0:	4313      	orrs	r3, r2
    19b2:	005b      	lsls	r3, r3, #1
    19b4:	0859      	lsrs	r1, r3, #1
    19b6:	bd10      	pop	{r4, pc}
    19b8:	1c03      	adds	r3, r0, #0
    19ba:	3b0b      	subs	r3, #11
    19bc:	409c      	lsls	r4, r3
    19be:	0552      	lsls	r2, r2, #21
    19c0:	0323      	lsls	r3, r4, #12
    19c2:	0b1b      	lsrs	r3, r3, #12
    19c4:	0d52      	lsrs	r2, r2, #21
    19c6:	2400      	movs	r4, #0
    19c8:	e7e8      	b.n	199c <__aeabi_ui2d+0x2c>
    19ca:	46c0      	nop			; (mov r8, r8)
    19cc:	0000041e 	.word	0x0000041e
    19d0:	800fffff 	.word	0x800fffff

000019d4 <__aeabi_d2f>:
    19d4:	b570      	push	{r4, r5, r6, lr}
    19d6:	030b      	lsls	r3, r1, #12
    19d8:	004d      	lsls	r5, r1, #1
    19da:	0f44      	lsrs	r4, r0, #29
    19dc:	0d6d      	lsrs	r5, r5, #21
    19de:	0a5b      	lsrs	r3, r3, #9
    19e0:	4323      	orrs	r3, r4
    19e2:	1c6c      	adds	r4, r5, #1
    19e4:	0564      	lsls	r4, r4, #21
    19e6:	0fc9      	lsrs	r1, r1, #31
    19e8:	00c2      	lsls	r2, r0, #3
    19ea:	0d64      	lsrs	r4, r4, #21
    19ec:	2c01      	cmp	r4, #1
    19ee:	dd2a      	ble.n	1a46 <__aeabi_d2f+0x72>
    19f0:	4c3b      	ldr	r4, [pc, #236]	; (1ae0 <__aeabi_d2f+0x10c>)
    19f2:	192c      	adds	r4, r5, r4
    19f4:	2cfe      	cmp	r4, #254	; 0xfe
    19f6:	dc1a      	bgt.n	1a2e <__aeabi_d2f+0x5a>
    19f8:	2c00      	cmp	r4, #0
    19fa:	dd35      	ble.n	1a68 <__aeabi_d2f+0x94>
    19fc:	0180      	lsls	r0, r0, #6
    19fe:	1e45      	subs	r5, r0, #1
    1a00:	41a8      	sbcs	r0, r5
    1a02:	00db      	lsls	r3, r3, #3
    1a04:	4303      	orrs	r3, r0
    1a06:	0f52      	lsrs	r2, r2, #29
    1a08:	4313      	orrs	r3, r2
    1a0a:	075a      	lsls	r2, r3, #29
    1a0c:	d004      	beq.n	1a18 <__aeabi_d2f+0x44>
    1a0e:	220f      	movs	r2, #15
    1a10:	401a      	ands	r2, r3
    1a12:	2a04      	cmp	r2, #4
    1a14:	d000      	beq.n	1a18 <__aeabi_d2f+0x44>
    1a16:	3304      	adds	r3, #4
    1a18:	2280      	movs	r2, #128	; 0x80
    1a1a:	04d2      	lsls	r2, r2, #19
    1a1c:	401a      	ands	r2, r3
    1a1e:	d027      	beq.n	1a70 <__aeabi_d2f+0x9c>
    1a20:	3401      	adds	r4, #1
    1a22:	2cff      	cmp	r4, #255	; 0xff
    1a24:	d003      	beq.n	1a2e <__aeabi_d2f+0x5a>
    1a26:	019b      	lsls	r3, r3, #6
    1a28:	0a5b      	lsrs	r3, r3, #9
    1a2a:	b2e4      	uxtb	r4, r4
    1a2c:	e001      	b.n	1a32 <__aeabi_d2f+0x5e>
    1a2e:	24ff      	movs	r4, #255	; 0xff
    1a30:	2300      	movs	r3, #0
    1a32:	025b      	lsls	r3, r3, #9
    1a34:	05e4      	lsls	r4, r4, #23
    1a36:	0a5b      	lsrs	r3, r3, #9
    1a38:	4323      	orrs	r3, r4
    1a3a:	005b      	lsls	r3, r3, #1
    1a3c:	07c9      	lsls	r1, r1, #31
    1a3e:	085b      	lsrs	r3, r3, #1
    1a40:	430b      	orrs	r3, r1
    1a42:	1c18      	adds	r0, r3, #0
    1a44:	bd70      	pop	{r4, r5, r6, pc}
    1a46:	2d00      	cmp	r5, #0
    1a48:	d106      	bne.n	1a58 <__aeabi_d2f+0x84>
    1a4a:	4313      	orrs	r3, r2
    1a4c:	d10e      	bne.n	1a6c <__aeabi_d2f+0x98>
    1a4e:	2400      	movs	r4, #0
    1a50:	025b      	lsls	r3, r3, #9
    1a52:	0a5b      	lsrs	r3, r3, #9
    1a54:	b2e4      	uxtb	r4, r4
    1a56:	e7ec      	b.n	1a32 <__aeabi_d2f+0x5e>
    1a58:	431a      	orrs	r2, r3
    1a5a:	d0e8      	beq.n	1a2e <__aeabi_d2f+0x5a>
    1a5c:	2080      	movs	r0, #128	; 0x80
    1a5e:	00db      	lsls	r3, r3, #3
    1a60:	0480      	lsls	r0, r0, #18
    1a62:	4303      	orrs	r3, r0
    1a64:	24ff      	movs	r4, #255	; 0xff
    1a66:	e7d0      	b.n	1a0a <__aeabi_d2f+0x36>
    1a68:	3417      	adds	r4, #23
    1a6a:	da0c      	bge.n	1a86 <__aeabi_d2f+0xb2>
    1a6c:	2305      	movs	r3, #5
    1a6e:	2400      	movs	r4, #0
    1a70:	08db      	lsrs	r3, r3, #3
    1a72:	2cff      	cmp	r4, #255	; 0xff
    1a74:	d1ec      	bne.n	1a50 <__aeabi_d2f+0x7c>
    1a76:	2b00      	cmp	r3, #0
    1a78:	d02d      	beq.n	1ad6 <__aeabi_d2f+0x102>
    1a7a:	2280      	movs	r2, #128	; 0x80
    1a7c:	03d2      	lsls	r2, r2, #15
    1a7e:	4313      	orrs	r3, r2
    1a80:	025b      	lsls	r3, r3, #9
    1a82:	0a5b      	lsrs	r3, r3, #9
    1a84:	e7d5      	b.n	1a32 <__aeabi_d2f+0x5e>
    1a86:	2480      	movs	r4, #128	; 0x80
    1a88:	4816      	ldr	r0, [pc, #88]	; (1ae4 <__aeabi_d2f+0x110>)
    1a8a:	0424      	lsls	r4, r4, #16
    1a8c:	4323      	orrs	r3, r4
    1a8e:	1b40      	subs	r0, r0, r5
    1a90:	281f      	cmp	r0, #31
    1a92:	dc0d      	bgt.n	1ab0 <__aeabi_d2f+0xdc>
    1a94:	4c14      	ldr	r4, [pc, #80]	; (1ae8 <__aeabi_d2f+0x114>)
    1a96:	46a4      	mov	ip, r4
    1a98:	4465      	add	r5, ip
    1a9a:	40ab      	lsls	r3, r5
    1a9c:	1c1c      	adds	r4, r3, #0
    1a9e:	1c13      	adds	r3, r2, #0
    1aa0:	40ab      	lsls	r3, r5
    1aa2:	1e5d      	subs	r5, r3, #1
    1aa4:	41ab      	sbcs	r3, r5
    1aa6:	40c2      	lsrs	r2, r0
    1aa8:	4323      	orrs	r3, r4
    1aaa:	4313      	orrs	r3, r2
    1aac:	2400      	movs	r4, #0
    1aae:	e7ac      	b.n	1a0a <__aeabi_d2f+0x36>
    1ab0:	1c1e      	adds	r6, r3, #0
    1ab2:	4c0e      	ldr	r4, [pc, #56]	; (1aec <__aeabi_d2f+0x118>)
    1ab4:	1b64      	subs	r4, r4, r5
    1ab6:	40e6      	lsrs	r6, r4
    1ab8:	1c34      	adds	r4, r6, #0
    1aba:	2820      	cmp	r0, #32
    1abc:	d00d      	beq.n	1ada <__aeabi_d2f+0x106>
    1abe:	480c      	ldr	r0, [pc, #48]	; (1af0 <__aeabi_d2f+0x11c>)
    1ac0:	4684      	mov	ip, r0
    1ac2:	4465      	add	r5, ip
    1ac4:	40ab      	lsls	r3, r5
    1ac6:	1c1d      	adds	r5, r3, #0
    1ac8:	432a      	orrs	r2, r5
    1aca:	1e53      	subs	r3, r2, #1
    1acc:	419a      	sbcs	r2, r3
    1ace:	1c13      	adds	r3, r2, #0
    1ad0:	4323      	orrs	r3, r4
    1ad2:	2400      	movs	r4, #0
    1ad4:	e799      	b.n	1a0a <__aeabi_d2f+0x36>
    1ad6:	2300      	movs	r3, #0
    1ad8:	e7ab      	b.n	1a32 <__aeabi_d2f+0x5e>
    1ada:	2500      	movs	r5, #0
    1adc:	e7f4      	b.n	1ac8 <__aeabi_d2f+0xf4>
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	fffffc80 	.word	0xfffffc80
    1ae4:	0000039e 	.word	0x0000039e
    1ae8:	fffffc82 	.word	0xfffffc82
    1aec:	0000037e 	.word	0x0000037e
    1af0:	fffffca2 	.word	0xfffffca2

00001af4 <__clzsi2>:
    1af4:	211c      	movs	r1, #28
    1af6:	2301      	movs	r3, #1
    1af8:	041b      	lsls	r3, r3, #16
    1afa:	4298      	cmp	r0, r3
    1afc:	d301      	bcc.n	1b02 <__clzsi2+0xe>
    1afe:	0c00      	lsrs	r0, r0, #16
    1b00:	3910      	subs	r1, #16
    1b02:	0a1b      	lsrs	r3, r3, #8
    1b04:	4298      	cmp	r0, r3
    1b06:	d301      	bcc.n	1b0c <__clzsi2+0x18>
    1b08:	0a00      	lsrs	r0, r0, #8
    1b0a:	3908      	subs	r1, #8
    1b0c:	091b      	lsrs	r3, r3, #4
    1b0e:	4298      	cmp	r0, r3
    1b10:	d301      	bcc.n	1b16 <__clzsi2+0x22>
    1b12:	0900      	lsrs	r0, r0, #4
    1b14:	3904      	subs	r1, #4
    1b16:	a202      	add	r2, pc, #8	; (adr r2, 1b20 <__clzsi2+0x2c>)
    1b18:	5c10      	ldrb	r0, [r2, r0]
    1b1a:	1840      	adds	r0, r0, r1
    1b1c:	4770      	bx	lr
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	02020304 	.word	0x02020304
    1b24:	01010101 	.word	0x01010101
	...

00001b30 <__divdi3>:
    1b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b32:	4644      	mov	r4, r8
    1b34:	465f      	mov	r7, fp
    1b36:	4656      	mov	r6, sl
    1b38:	464d      	mov	r5, r9
    1b3a:	b4f0      	push	{r4, r5, r6, r7}
    1b3c:	1c1c      	adds	r4, r3, #0
    1b3e:	b085      	sub	sp, #20
    1b40:	2900      	cmp	r1, #0
    1b42:	da00      	bge.n	1b46 <__divdi3+0x16>
    1b44:	e0a9      	b.n	1c9a <__divdi3+0x16a>
    1b46:	1c0f      	adds	r7, r1, #0
    1b48:	2100      	movs	r1, #0
    1b4a:	1c06      	adds	r6, r0, #0
    1b4c:	4688      	mov	r8, r1
    1b4e:	1c10      	adds	r0, r2, #0
    1b50:	1c19      	adds	r1, r3, #0
    1b52:	2c00      	cmp	r4, #0
    1b54:	da00      	bge.n	1b58 <__divdi3+0x28>
    1b56:	e097      	b.n	1c88 <__divdi3+0x158>
    1b58:	1c34      	adds	r4, r6, #0
    1b5a:	1c3d      	adds	r5, r7, #0
    1b5c:	4682      	mov	sl, r0
    1b5e:	4689      	mov	r9, r1
    1b60:	42b9      	cmp	r1, r7
    1b62:	d873      	bhi.n	1c4c <__divdi3+0x11c>
    1b64:	d070      	beq.n	1c48 <__divdi3+0x118>
    1b66:	4649      	mov	r1, r9
    1b68:	4650      	mov	r0, sl
    1b6a:	f000 f985 	bl	1e78 <__clzdi2>
    1b6e:	4683      	mov	fp, r0
    1b70:	1c39      	adds	r1, r7, #0
    1b72:	1c30      	adds	r0, r6, #0
    1b74:	f000 f980 	bl	1e78 <__clzdi2>
    1b78:	465b      	mov	r3, fp
    1b7a:	1a18      	subs	r0, r3, r0
    1b7c:	1c03      	adds	r3, r0, #0
    1b7e:	4683      	mov	fp, r0
    1b80:	3b20      	subs	r3, #32
    1b82:	469c      	mov	ip, r3
    1b84:	d500      	bpl.n	1b88 <__divdi3+0x58>
    1b86:	e09c      	b.n	1cc2 <__divdi3+0x192>
    1b88:	2300      	movs	r3, #0
    1b8a:	2200      	movs	r2, #0
    1b8c:	4651      	mov	r1, sl
    1b8e:	9200      	str	r2, [sp, #0]
    1b90:	9301      	str	r3, [sp, #4]
    1b92:	4663      	mov	r3, ip
    1b94:	4099      	lsls	r1, r3
    1b96:	9101      	str	r1, [sp, #4]
    1b98:	4651      	mov	r1, sl
    1b9a:	4081      	lsls	r1, r0
    1b9c:	9b01      	ldr	r3, [sp, #4]
    1b9e:	9100      	str	r1, [sp, #0]
    1ba0:	42bb      	cmp	r3, r7
    1ba2:	d900      	bls.n	1ba6 <__divdi3+0x76>
    1ba4:	e083      	b.n	1cae <__divdi3+0x17e>
    1ba6:	d100      	bne.n	1baa <__divdi3+0x7a>
    1ba8:	e07e      	b.n	1ca8 <__divdi3+0x178>
    1baa:	9a00      	ldr	r2, [sp, #0]
    1bac:	9b01      	ldr	r3, [sp, #4]
    1bae:	1c34      	adds	r4, r6, #0
    1bb0:	1c3d      	adds	r5, r7, #0
    1bb2:	1aa4      	subs	r4, r4, r2
    1bb4:	419d      	sbcs	r5, r3
    1bb6:	4663      	mov	r3, ip
    1bb8:	2b00      	cmp	r3, #0
    1bba:	da00      	bge.n	1bbe <__divdi3+0x8e>
    1bbc:	e09a      	b.n	1cf4 <__divdi3+0x1c4>
    1bbe:	2600      	movs	r6, #0
    1bc0:	2700      	movs	r7, #0
    1bc2:	9602      	str	r6, [sp, #8]
    1bc4:	9703      	str	r7, [sp, #12]
    1bc6:	3601      	adds	r6, #1
    1bc8:	409e      	lsls	r6, r3
    1bca:	9603      	str	r6, [sp, #12]
    1bcc:	2601      	movs	r6, #1
    1bce:	4086      	lsls	r6, r0
    1bd0:	9602      	str	r6, [sp, #8]
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d100      	bne.n	1bd8 <__divdi3+0xa8>
    1bd6:	e071      	b.n	1cbc <__divdi3+0x18c>
    1bd8:	9900      	ldr	r1, [sp, #0]
    1bda:	9a01      	ldr	r2, [sp, #4]
    1bdc:	07d3      	lsls	r3, r2, #31
    1bde:	4699      	mov	r9, r3
    1be0:	464b      	mov	r3, r9
    1be2:	084e      	lsrs	r6, r1, #1
    1be4:	431e      	orrs	r6, r3
    1be6:	0857      	lsrs	r7, r2, #1
    1be8:	2300      	movs	r3, #0
    1bea:	2201      	movs	r2, #1
    1bec:	e00c      	b.n	1c08 <__divdi3+0xd8>
    1bee:	42af      	cmp	r7, r5
    1bf0:	d101      	bne.n	1bf6 <__divdi3+0xc6>
    1bf2:	42a6      	cmp	r6, r4
    1bf4:	d80a      	bhi.n	1c0c <__divdi3+0xdc>
    1bf6:	1ba4      	subs	r4, r4, r6
    1bf8:	41bd      	sbcs	r5, r7
    1bfa:	1924      	adds	r4, r4, r4
    1bfc:	416d      	adcs	r5, r5
    1bfe:	3801      	subs	r0, #1
    1c00:	18a4      	adds	r4, r4, r2
    1c02:	415d      	adcs	r5, r3
    1c04:	2800      	cmp	r0, #0
    1c06:	d006      	beq.n	1c16 <__divdi3+0xe6>
    1c08:	42af      	cmp	r7, r5
    1c0a:	d9f0      	bls.n	1bee <__divdi3+0xbe>
    1c0c:	3801      	subs	r0, #1
    1c0e:	1924      	adds	r4, r4, r4
    1c10:	416d      	adcs	r5, r5
    1c12:	2800      	cmp	r0, #0
    1c14:	d1f8      	bne.n	1c08 <__divdi3+0xd8>
    1c16:	2220      	movs	r2, #32
    1c18:	9e02      	ldr	r6, [sp, #8]
    1c1a:	9f03      	ldr	r7, [sp, #12]
    1c1c:	465b      	mov	r3, fp
    1c1e:	4252      	negs	r2, r2
    1c20:	1936      	adds	r6, r6, r4
    1c22:	416f      	adcs	r7, r5
    1c24:	1899      	adds	r1, r3, r2
    1c26:	d45a      	bmi.n	1cde <__divdi3+0x1ae>
    1c28:	1c28      	adds	r0, r5, #0
    1c2a:	40c8      	lsrs	r0, r1
    1c2c:	1c2c      	adds	r4, r5, #0
    1c2e:	465b      	mov	r3, fp
    1c30:	40dc      	lsrs	r4, r3
    1c32:	2900      	cmp	r1, #0
    1c34:	db68      	blt.n	1d08 <__divdi3+0x1d8>
    1c36:	1c04      	adds	r4, r0, #0
    1c38:	408c      	lsls	r4, r1
    1c3a:	1c23      	adds	r3, r4, #0
    1c3c:	4659      	mov	r1, fp
    1c3e:	4088      	lsls	r0, r1
    1c40:	1c02      	adds	r2, r0, #0
    1c42:	1ab6      	subs	r6, r6, r2
    1c44:	419f      	sbcs	r7, r3
    1c46:	e003      	b.n	1c50 <__divdi3+0x120>
    1c48:	42b0      	cmp	r0, r6
    1c4a:	d98c      	bls.n	1b66 <__divdi3+0x36>
    1c4c:	2600      	movs	r6, #0
    1c4e:	2700      	movs	r7, #0
    1c50:	4641      	mov	r1, r8
    1c52:	1e4b      	subs	r3, r1, #1
    1c54:	4199      	sbcs	r1, r3
    1c56:	2300      	movs	r3, #0
    1c58:	9100      	str	r1, [sp, #0]
    1c5a:	9301      	str	r3, [sp, #4]
    1c5c:	9a00      	ldr	r2, [sp, #0]
    1c5e:	9b01      	ldr	r3, [sp, #4]
    1c60:	2500      	movs	r5, #0
    1c62:	4254      	negs	r4, r2
    1c64:	419d      	sbcs	r5, r3
    1c66:	1c33      	adds	r3, r6, #0
    1c68:	4063      	eors	r3, r4
    1c6a:	1c18      	adds	r0, r3, #0
    1c6c:	1c3b      	adds	r3, r7, #0
    1c6e:	406b      	eors	r3, r5
    1c70:	1c19      	adds	r1, r3, #0
    1c72:	9b00      	ldr	r3, [sp, #0]
    1c74:	9c01      	ldr	r4, [sp, #4]
    1c76:	18c0      	adds	r0, r0, r3
    1c78:	4161      	adcs	r1, r4
    1c7a:	b005      	add	sp, #20
    1c7c:	bc3c      	pop	{r2, r3, r4, r5}
    1c7e:	4690      	mov	r8, r2
    1c80:	4699      	mov	r9, r3
    1c82:	46a2      	mov	sl, r4
    1c84:	46ab      	mov	fp, r5
    1c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c88:	4643      	mov	r3, r8
    1c8a:	43db      	mvns	r3, r3
    1c8c:	1c0c      	adds	r4, r1, #0
    1c8e:	4698      	mov	r8, r3
    1c90:	1c13      	adds	r3, r2, #0
    1c92:	2100      	movs	r1, #0
    1c94:	4258      	negs	r0, r3
    1c96:	41a1      	sbcs	r1, r4
    1c98:	e75e      	b.n	1b58 <__divdi3+0x28>
    1c9a:	2700      	movs	r7, #0
    1c9c:	4246      	negs	r6, r0
    1c9e:	418f      	sbcs	r7, r1
    1ca0:	2101      	movs	r1, #1
    1ca2:	4249      	negs	r1, r1
    1ca4:	4688      	mov	r8, r1
    1ca6:	e752      	b.n	1b4e <__divdi3+0x1e>
    1ca8:	42b1      	cmp	r1, r6
    1caa:	d800      	bhi.n	1cae <__divdi3+0x17e>
    1cac:	e77d      	b.n	1baa <__divdi3+0x7a>
    1cae:	2600      	movs	r6, #0
    1cb0:	2700      	movs	r7, #0
    1cb2:	9602      	str	r6, [sp, #8]
    1cb4:	9703      	str	r7, [sp, #12]
    1cb6:	2800      	cmp	r0, #0
    1cb8:	d000      	beq.n	1cbc <__divdi3+0x18c>
    1cba:	e78d      	b.n	1bd8 <__divdi3+0xa8>
    1cbc:	9e02      	ldr	r6, [sp, #8]
    1cbe:	9f03      	ldr	r7, [sp, #12]
    1cc0:	e7c6      	b.n	1c50 <__divdi3+0x120>
    1cc2:	2120      	movs	r1, #32
    1cc4:	4653      	mov	r3, sl
    1cc6:	1a09      	subs	r1, r1, r0
    1cc8:	40cb      	lsrs	r3, r1
    1cca:	2200      	movs	r2, #0
    1ccc:	1c19      	adds	r1, r3, #0
    1cce:	2300      	movs	r3, #0
    1cd0:	9200      	str	r2, [sp, #0]
    1cd2:	9301      	str	r3, [sp, #4]
    1cd4:	464b      	mov	r3, r9
    1cd6:	4083      	lsls	r3, r0
    1cd8:	430b      	orrs	r3, r1
    1cda:	9301      	str	r3, [sp, #4]
    1cdc:	e75c      	b.n	1b98 <__divdi3+0x68>
    1cde:	465a      	mov	r2, fp
    1ce0:	2320      	movs	r3, #32
    1ce2:	1a9b      	subs	r3, r3, r2
    1ce4:	1c2a      	adds	r2, r5, #0
    1ce6:	409a      	lsls	r2, r3
    1ce8:	1c20      	adds	r0, r4, #0
    1cea:	1c13      	adds	r3, r2, #0
    1cec:	465a      	mov	r2, fp
    1cee:	40d0      	lsrs	r0, r2
    1cf0:	4318      	orrs	r0, r3
    1cf2:	e79b      	b.n	1c2c <__divdi3+0xfc>
    1cf4:	2620      	movs	r6, #32
    1cf6:	2700      	movs	r7, #0
    1cf8:	1a33      	subs	r3, r6, r0
    1cfa:	2600      	movs	r6, #0
    1cfc:	9602      	str	r6, [sp, #8]
    1cfe:	9703      	str	r7, [sp, #12]
    1d00:	2701      	movs	r7, #1
    1d02:	40df      	lsrs	r7, r3
    1d04:	9703      	str	r7, [sp, #12]
    1d06:	e761      	b.n	1bcc <__divdi3+0x9c>
    1d08:	465b      	mov	r3, fp
    1d0a:	2120      	movs	r1, #32
    1d0c:	465d      	mov	r5, fp
    1d0e:	1ac9      	subs	r1, r1, r3
    1d10:	1c03      	adds	r3, r0, #0
    1d12:	40ac      	lsls	r4, r5
    1d14:	40cb      	lsrs	r3, r1
    1d16:	1c19      	adds	r1, r3, #0
    1d18:	1c23      	adds	r3, r4, #0
    1d1a:	430b      	orrs	r3, r1
    1d1c:	e78e      	b.n	1c3c <__divdi3+0x10c>
    1d1e:	46c0      	nop			; (mov r8, r8)

00001d20 <__udivdi3>:
    1d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d22:	4645      	mov	r5, r8
    1d24:	464e      	mov	r6, r9
    1d26:	4657      	mov	r7, sl
    1d28:	b4e0      	push	{r5, r6, r7}
    1d2a:	1c04      	adds	r4, r0, #0
    1d2c:	b082      	sub	sp, #8
    1d2e:	1c0d      	adds	r5, r1, #0
    1d30:	4691      	mov	r9, r2
    1d32:	4698      	mov	r8, r3
    1d34:	428b      	cmp	r3, r1
    1d36:	d862      	bhi.n	1dfe <__udivdi3+0xde>
    1d38:	d05f      	beq.n	1dfa <__udivdi3+0xda>
    1d3a:	4641      	mov	r1, r8
    1d3c:	4648      	mov	r0, r9
    1d3e:	f000 f89b 	bl	1e78 <__clzdi2>
    1d42:	1c29      	adds	r1, r5, #0
    1d44:	1c06      	adds	r6, r0, #0
    1d46:	1c20      	adds	r0, r4, #0
    1d48:	f000 f896 	bl	1e78 <__clzdi2>
    1d4c:	2320      	movs	r3, #32
    1d4e:	1a31      	subs	r1, r6, r0
    1d50:	425b      	negs	r3, r3
    1d52:	468a      	mov	sl, r1
    1d54:	18c8      	adds	r0, r1, r3
    1d56:	d465      	bmi.n	1e24 <__udivdi3+0x104>
    1d58:	464b      	mov	r3, r9
    1d5a:	4083      	lsls	r3, r0
    1d5c:	1c1f      	adds	r7, r3, #0
    1d5e:	464b      	mov	r3, r9
    1d60:	408b      	lsls	r3, r1
    1d62:	1c1e      	adds	r6, r3, #0
    1d64:	42af      	cmp	r7, r5
    1d66:	d858      	bhi.n	1e1a <__udivdi3+0xfa>
    1d68:	d055      	beq.n	1e16 <__udivdi3+0xf6>
    1d6a:	1ba4      	subs	r4, r4, r6
    1d6c:	41bd      	sbcs	r5, r7
    1d6e:	2800      	cmp	r0, #0
    1d70:	da00      	bge.n	1d74 <__udivdi3+0x54>
    1d72:	e077      	b.n	1e64 <__udivdi3+0x144>
    1d74:	2200      	movs	r2, #0
    1d76:	2300      	movs	r3, #0
    1d78:	9200      	str	r2, [sp, #0]
    1d7a:	9301      	str	r3, [sp, #4]
    1d7c:	3201      	adds	r2, #1
    1d7e:	4082      	lsls	r2, r0
    1d80:	9201      	str	r2, [sp, #4]
    1d82:	2301      	movs	r3, #1
    1d84:	408b      	lsls	r3, r1
    1d86:	9300      	str	r3, [sp, #0]
    1d88:	2900      	cmp	r1, #0
    1d8a:	d03c      	beq.n	1e06 <__udivdi3+0xe6>
    1d8c:	07fb      	lsls	r3, r7, #31
    1d8e:	4698      	mov	r8, r3
    1d90:	4640      	mov	r0, r8
    1d92:	0872      	lsrs	r2, r6, #1
    1d94:	087b      	lsrs	r3, r7, #1
    1d96:	4302      	orrs	r2, r0
    1d98:	2601      	movs	r6, #1
    1d9a:	2700      	movs	r7, #0
    1d9c:	e00c      	b.n	1db8 <__udivdi3+0x98>
    1d9e:	42ab      	cmp	r3, r5
    1da0:	d101      	bne.n	1da6 <__udivdi3+0x86>
    1da2:	42a2      	cmp	r2, r4
    1da4:	d80a      	bhi.n	1dbc <__udivdi3+0x9c>
    1da6:	1aa4      	subs	r4, r4, r2
    1da8:	419d      	sbcs	r5, r3
    1daa:	1924      	adds	r4, r4, r4
    1dac:	416d      	adcs	r5, r5
    1dae:	3901      	subs	r1, #1
    1db0:	19a4      	adds	r4, r4, r6
    1db2:	417d      	adcs	r5, r7
    1db4:	2900      	cmp	r1, #0
    1db6:	d006      	beq.n	1dc6 <__udivdi3+0xa6>
    1db8:	42ab      	cmp	r3, r5
    1dba:	d9f0      	bls.n	1d9e <__udivdi3+0x7e>
    1dbc:	3901      	subs	r1, #1
    1dbe:	1924      	adds	r4, r4, r4
    1dc0:	416d      	adcs	r5, r5
    1dc2:	2900      	cmp	r1, #0
    1dc4:	d1f8      	bne.n	1db8 <__udivdi3+0x98>
    1dc6:	2220      	movs	r2, #32
    1dc8:	9800      	ldr	r0, [sp, #0]
    1dca:	9901      	ldr	r1, [sp, #4]
    1dcc:	4653      	mov	r3, sl
    1dce:	4252      	negs	r2, r2
    1dd0:	1900      	adds	r0, r0, r4
    1dd2:	4169      	adcs	r1, r5
    1dd4:	189e      	adds	r6, r3, r2
    1dd6:	d43a      	bmi.n	1e4e <__udivdi3+0x12e>
    1dd8:	1c2f      	adds	r7, r5, #0
    1dda:	40f7      	lsrs	r7, r6
    1ddc:	4653      	mov	r3, sl
    1dde:	40dd      	lsrs	r5, r3
    1de0:	2e00      	cmp	r6, #0
    1de2:	db29      	blt.n	1e38 <__udivdi3+0x118>
    1de4:	1c3c      	adds	r4, r7, #0
    1de6:	40b4      	lsls	r4, r6
    1de8:	1c23      	adds	r3, r4, #0
    1dea:	4654      	mov	r4, sl
    1dec:	40a7      	lsls	r7, r4
    1dee:	1c3a      	adds	r2, r7, #0
    1df0:	1a80      	subs	r0, r0, r2
    1df2:	4199      	sbcs	r1, r3
    1df4:	9000      	str	r0, [sp, #0]
    1df6:	9101      	str	r1, [sp, #4]
    1df8:	e005      	b.n	1e06 <__udivdi3+0xe6>
    1dfa:	4282      	cmp	r2, r0
    1dfc:	d99d      	bls.n	1d3a <__udivdi3+0x1a>
    1dfe:	2300      	movs	r3, #0
    1e00:	2400      	movs	r4, #0
    1e02:	9300      	str	r3, [sp, #0]
    1e04:	9401      	str	r4, [sp, #4]
    1e06:	9800      	ldr	r0, [sp, #0]
    1e08:	9901      	ldr	r1, [sp, #4]
    1e0a:	b002      	add	sp, #8
    1e0c:	bc1c      	pop	{r2, r3, r4}
    1e0e:	4690      	mov	r8, r2
    1e10:	4699      	mov	r9, r3
    1e12:	46a2      	mov	sl, r4
    1e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e16:	42a3      	cmp	r3, r4
    1e18:	d9a7      	bls.n	1d6a <__udivdi3+0x4a>
    1e1a:	2200      	movs	r2, #0
    1e1c:	2300      	movs	r3, #0
    1e1e:	9200      	str	r2, [sp, #0]
    1e20:	9301      	str	r3, [sp, #4]
    1e22:	e7b1      	b.n	1d88 <__udivdi3+0x68>
    1e24:	2220      	movs	r2, #32
    1e26:	464b      	mov	r3, r9
    1e28:	1a52      	subs	r2, r2, r1
    1e2a:	40d3      	lsrs	r3, r2
    1e2c:	1c1a      	adds	r2, r3, #0
    1e2e:	4643      	mov	r3, r8
    1e30:	408b      	lsls	r3, r1
    1e32:	1c1f      	adds	r7, r3, #0
    1e34:	4317      	orrs	r7, r2
    1e36:	e792      	b.n	1d5e <__udivdi3+0x3e>
    1e38:	4653      	mov	r3, sl
    1e3a:	2420      	movs	r4, #32
    1e3c:	4656      	mov	r6, sl
    1e3e:	1ae4      	subs	r4, r4, r3
    1e40:	1c3b      	adds	r3, r7, #0
    1e42:	40b5      	lsls	r5, r6
    1e44:	40e3      	lsrs	r3, r4
    1e46:	1c1c      	adds	r4, r3, #0
    1e48:	1c2b      	adds	r3, r5, #0
    1e4a:	4323      	orrs	r3, r4
    1e4c:	e7cd      	b.n	1dea <__udivdi3+0xca>
    1e4e:	4652      	mov	r2, sl
    1e50:	2320      	movs	r3, #32
    1e52:	1a9b      	subs	r3, r3, r2
    1e54:	1c2a      	adds	r2, r5, #0
    1e56:	409a      	lsls	r2, r3
    1e58:	1c27      	adds	r7, r4, #0
    1e5a:	1c13      	adds	r3, r2, #0
    1e5c:	4652      	mov	r2, sl
    1e5e:	40d7      	lsrs	r7, r2
    1e60:	431f      	orrs	r7, r3
    1e62:	e7bb      	b.n	1ddc <__udivdi3+0xbc>
    1e64:	2320      	movs	r3, #32
    1e66:	2200      	movs	r2, #0
    1e68:	1a58      	subs	r0, r3, r1
    1e6a:	2300      	movs	r3, #0
    1e6c:	9200      	str	r2, [sp, #0]
    1e6e:	9301      	str	r3, [sp, #4]
    1e70:	3201      	adds	r2, #1
    1e72:	40c2      	lsrs	r2, r0
    1e74:	9201      	str	r2, [sp, #4]
    1e76:	e784      	b.n	1d82 <__udivdi3+0x62>

00001e78 <__clzdi2>:
    1e78:	b510      	push	{r4, lr}
    1e7a:	2900      	cmp	r1, #0
    1e7c:	d103      	bne.n	1e86 <__clzdi2+0xe>
    1e7e:	f7ff fe39 	bl	1af4 <__clzsi2>
    1e82:	3020      	adds	r0, #32
    1e84:	e002      	b.n	1e8c <__clzdi2+0x14>
    1e86:	1c08      	adds	r0, r1, #0
    1e88:	f7ff fe34 	bl	1af4 <__clzsi2>
    1e8c:	bd10      	pop	{r4, pc}
    1e8e:	46c0      	nop			; (mov r8, r8)

00001e90 <lookupTable.12299>:
    1e90:	8d20 ffff ada1 ffff ce64 ffff ef6c ffff      .......d...l...
    1ea0:	10b7 0000 324a 0000 5425 0000 7649 0000     ....J2..%T..Iv..
    1eb0:	98b7 0000 bb72 0000 de79 0000 01d0 0001     ....r...y.......
    1ec0:	2576 0001 496f 0001 6dbc 0001 925e 0001     v%..oI...m..^...
    1ed0:	b758 0001 dcaa 0001 0258 0002 2862 0002     X.......X...b(..
    1ee0:	4ecc 0002 7596 0002 9cc4 0002 c457 0002     .N...u......W...
    1ef0:	ec52 0002 14b7 0003 3d89 0003 66ca 0003     R........=...f..
    1f00:	907d 0003 baa4 0003 e544 0003 105e 0004     }.......D...^...
    1f10:	3bf6 0004 680e 0004 94ac 0004 c1d1 0004     .;...h..........
    1f20:	ef81 0004 1dc1 0005 4c95 0005 7c00 0005     .........L...|..
    1f30:	ac07 0005 dcae 0005 0dfb 0006 3ff2 0006     .............?..
    1f40:	7298 0006 a5f4 0006 da09 0006 0ee0 0007     .r..............
    1f50:	447d 0007 7ae8 0007 b228 0007 ea44 0007     }D...z..(...D...
    1f60:	2344 0008 5d30 0008 9810 0008 d3ef 0008     D#..0]..........
    1f70:	10d6 0009 4ecf 0009 8de5 0009 ce23 0009     .....N......#...
    1f80:	0f98 000a 524f 000a 9657 000a dbbf 000a     ....OR..W.......
    1f90:	2298 000b 6af3 000b b4e2 000b 007b 000c     ."...j......{...
    1fa0:	4dd4 000c 9d03 000c ee23 000c 4150 000d     .M......#...PA..
    1fb0:	96a9 000d ee4e 000d 4865 000e a516 000e     ....N...eH......
    1fc0:	048e 000f 030a 0000 031c 0000 034e 0000     ............N...
    1fd0:	0380 0000 03b2 0000 03d6 0000 03fa 0000     ................
    1fe0:	041e 0000 05be 0000 05d8 0000 05fe 0000     ................
    1ff0:	0612 0000 062c 0000 0652 0000 0666 0000     ....,...R...f...
    2000:	0680 0000 0698 0000 15b0 0000 158e 0000     ................
    2010:	158e 0000 1582 0000 1476 0000 1476 0000     ........v...v...
    2020:	1576 0000 1582 0000 1476 0000 1576 0000     v.......v...v...
    2030:	1476 0000 1582 0000 147a 0000 147a 0000     v.......z...z...
    2040:	147a 0000 1790 0000                         z.......

00002048 <_init>:
    2048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    204e:	bc08      	pop	{r3}
    2050:	469e      	mov	lr, r3
    2052:	4770      	bx	lr

00002054 <__init_array_start>:
    2054:	000000dd 	.word	0x000000dd

00002058 <_fini>:
    2058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    205e:	bc08      	pop	{r3}
    2060:	469e      	mov	lr, r3
    2062:	4770      	bx	lr

00002064 <__fini_array_start>:
    2064:	000000b5 	.word	0x000000b5

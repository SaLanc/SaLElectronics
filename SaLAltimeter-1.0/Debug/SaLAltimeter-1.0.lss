
SaLAltimeter-1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cb0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00001cb0  00001cb0  00009cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000008  20000000  00001cb8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004eac  20000008  00001cc0  00010008  2**2
                  ALLOC
  4 .stack        00002004  20004eb4  00006b6c  00010008  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010008  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY
  7 .debug_info   000135c5  00000000  00000000  0001008b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001cdf  00000000  00000000  00023650  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000178c  00000000  00000000  0002532f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002d0  00000000  00000000  00026abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  00026d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00014c54  00000000  00000000  000270bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006c39  00000000  00000000  0003bd0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006fbbe  00000000  00000000  00042948  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000800  00000000  00000000  000b2508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20006eb8 	.word	0x20006eb8
       4:	00000afd 	.word	0x00000afd
       8:	00000af5 	.word	0x00000af5
       c:	00000af5 	.word	0x00000af5
	...
      2c:	00000af5 	.word	0x00000af5
	...
      38:	00000af5 	.word	0x00000af5
      3c:	00000af5 	.word	0x00000af5
      40:	00000af5 	.word	0x00000af5
      44:	00000af5 	.word	0x00000af5
      48:	00000af5 	.word	0x00000af5
      4c:	000007f9 	.word	0x000007f9
      50:	00000af5 	.word	0x00000af5
      54:	00000af5 	.word	0x00000af5
      58:	00000af5 	.word	0x00000af5
      5c:	00000af5 	.word	0x00000af5
      60:	00000af5 	.word	0x00000af5
      64:	00000af5 	.word	0x00000af5
      68:	00000af5 	.word	0x00000af5
      6c:	00000af5 	.word	0x00000af5
      70:	00000af5 	.word	0x00000af5
      74:	00000af5 	.word	0x00000af5
      78:	00000af5 	.word	0x00000af5
      7c:	00000af5 	.word	0x00000af5
      80:	00000af5 	.word	0x00000af5
      84:	00000af5 	.word	0x00000af5
      88:	00000af5 	.word	0x00000af5
      8c:	00000c59 	.word	0x00000c59
      90:	00000c35 	.word	0x00000c35
	...
      9c:	00000af5 	.word	0x00000af5
      a0:	00000af5 	.word	0x00000af5
      a4:	00000af5 	.word	0x00000af5
      a8:	00000af5 	.word	0x00000af5
      ac:	00000af5 	.word	0x00000af5
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000008 	.word	0x20000008
      d4:	00000000 	.word	0x00000000
      d8:	00001cb8 	.word	0x00001cb8

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00001cb8 	.word	0x00001cb8
     108:	2000000c 	.word	0x2000000c
     10c:	00001cb8 	.word	0x00001cb8
     110:	00000000 	.word	0x00000000

00000114 <getADXL345Event>:
    if (negative) {
        Zaccel = ((_byte6 | ~((1 << 8) - 1)) << 8 ) | _byte5;
    } else {
        Zaccel = (_byte6 << 8) | _byte5;
    }
}
     114:	b570      	push	{r4, r5, r6, lr}
     116:	1c05      	adds	r5, r0, #0
     118:	2280      	movs	r2, #128	; 0x80
     11a:	0252      	lsls	r2, r2, #9


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     11c:	4b0a      	ldr	r3, [pc, #40]	; (148 <getADXL345Event+0x34>)
     11e:	615a      	str	r2, [r3, #20]
}

void getADXL345Event(uint8_t *values) {

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
     120:	200f      	movs	r0, #15
     122:	210d      	movs	r1, #13
     124:	22f2      	movs	r2, #242	; 0xf2
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <getADXL345Event+0x38>)
     128:	4798      	blx	r3
     12a:	1c2c      	adds	r4, r5, #0
     12c:	3506      	adds	r5, #6
    for (uint8_t i = 0; i < 6; i++) {
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
     12e:	4e08      	ldr	r6, [pc, #32]	; (150 <getADXL345Event+0x3c>)
     130:	200f      	movs	r0, #15
     132:	210e      	movs	r1, #14
     134:	47b0      	blx	r6
     136:	7020      	strb	r0, [r4, #0]
     138:	3401      	adds	r4, #1

void getADXL345Event(uint8_t *values) {

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_DATAX0 | 0x80 | 0x40);
    for (uint8_t i = 0; i < 6; i++) {
     13a:	42ac      	cmp	r4, r5
     13c:	d1f8      	bne.n	130 <getADXL345Event+0x1c>
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     13e:	2280      	movs	r2, #128	; 0x80
     140:	0252      	lsls	r2, r2, #9
     142:	4b01      	ldr	r3, [pc, #4]	; (148 <getADXL345Event+0x34>)
     144:	619a      	str	r2, [r3, #24]
        *(values+i) = getByte(ADXL345_SCK_PIN,ADXL345_MISO_PIN);
    }
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
}
     146:	bd70      	pop	{r4, r5, r6, pc}
     148:	41004400 	.word	0x41004400
     14c:	00000599 	.word	0x00000599
     150:	000005f9 	.word	0x000005f9

00000154 <readMS5607AdcResults>:

    return _receive;

}

uint32_t readMS5607AdcResults(){
     154:	b5f0      	push	{r4, r5, r6, r7, lr}
     156:	4647      	mov	r7, r8
     158:	b480      	push	{r7}
     15a:	b082      	sub	sp, #8
    } else {
        port->OUTCLR.reg = pin_mask;
     15c:	4f14      	ldr	r7, [pc, #80]	; (1b0 <readMS5607AdcResults+0x5c>)
     15e:	2380      	movs	r3, #128	; 0x80
     160:	009b      	lsls	r3, r3, #2
     162:	4698      	mov	r8, r3
     164:	617b      	str	r3, [r7, #20]
	
	 SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
	 byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,cmdAdcRead_);
     166:	200f      	movs	r0, #15
     168:	210d      	movs	r1, #13
     16a:	2200      	movs	r2, #0
     16c:	4b11      	ldr	r3, [pc, #68]	; (1b4 <readMS5607AdcResults+0x60>)
     16e:	4798      	blx	r3
	 volatile uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     170:	200f      	movs	r0, #15
     172:	210e      	movs	r1, #14
     174:	4c10      	ldr	r4, [pc, #64]	; (1b8 <readMS5607AdcResults+0x64>)
     176:	47a0      	blx	r4
     178:	466b      	mov	r3, sp
     17a:	1dde      	adds	r6, r3, #7
     17c:	71d8      	strb	r0, [r3, #7]
	 volatile uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     17e:	200f      	movs	r0, #15
     180:	210e      	movs	r1, #14
     182:	47a0      	blx	r4
     184:	466b      	mov	r3, sp
     186:	1d9d      	adds	r5, r3, #6
     188:	7198      	strb	r0, [r3, #6]
	 volatile uint8_t _byte3 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     18a:	200f      	movs	r0, #15
     18c:	210e      	movs	r1, #14
     18e:	47a0      	blx	r4
     190:	466b      	mov	r3, sp
     192:	1d5a      	adds	r2, r3, #5
     194:	7158      	strb	r0, [r3, #5]
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     196:	4643      	mov	r3, r8
     198:	61bb      	str	r3, [r7, #24]
	 SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
	 
	 uint32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     19a:	7830      	ldrb	r0, [r6, #0]
     19c:	782b      	ldrb	r3, [r5, #0]
     19e:	7812      	ldrb	r2, [r2, #0]
     1a0:	0400      	lsls	r0, r0, #16
     1a2:	021b      	lsls	r3, r3, #8
     1a4:	4318      	orrs	r0, r3
     1a6:	4310      	orrs	r0, r2
	 return _receive;
}
     1a8:	b002      	add	sp, #8
     1aa:	bc04      	pop	{r2}
     1ac:	4690      	mov	r8, r2
     1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1b0:	41004400 	.word	0x41004400
     1b4:	00000599 	.word	0x00000599
     1b8:	000005f9 	.word	0x000005f9

000001bc <getMS5607Coeff>:

void getMS5607Coeff(uint16_t *coefficients) {
     1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1be:	465f      	mov	r7, fp
     1c0:	4656      	mov	r6, sl
     1c2:	464d      	mov	r5, r9
     1c4:	4644      	mov	r4, r8
     1c6:	b4f0      	push	{r4, r5, r6, r7}
     1c8:	4681      	mov	r9, r0
     1ca:	2400      	movs	r4, #0

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     1cc:	4f15      	ldr	r7, [pc, #84]	; (224 <getMS5607Coeff+0x68>)
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     1ce:	4b16      	ldr	r3, [pc, #88]	; (228 <getMS5607Coeff+0x6c>)
     1d0:	4698      	mov	r8, r3
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1d2:	4e16      	ldr	r6, [pc, #88]	; (22c <getMS5607Coeff+0x70>)
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     1d4:	2596      	movs	r5, #150	; 0x96
     1d6:	00ad      	lsls	r5, r5, #2
     1d8:	1c28      	adds	r0, r5, #0
     1da:	47b8      	blx	r7
        uint8_t _cmd = MS5607_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     1dc:	1c28      	adds	r0, r5, #0
     1de:	47b8      	blx	r7
    } else {
        port->OUTCLR.reg = pin_mask;
     1e0:	4d13      	ldr	r5, [pc, #76]	; (230 <getMS5607Coeff+0x74>)
     1e2:	2380      	movs	r3, #128	; 0x80
     1e4:	009b      	lsls	r3, r3, #2
     1e6:	469b      	mov	fp, r3
     1e8:	616b      	str	r3, [r5, #20]
     1ea:	1c22      	adds	r2, r4, #0
     1ec:	3a5e      	subs	r2, #94	; 0x5e
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,false);
        byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     1ee:	b2d2      	uxtb	r2, r2
     1f0:	200f      	movs	r0, #15
     1f2:	210d      	movs	r1, #13
     1f4:	47c0      	blx	r8
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1f6:	200f      	movs	r0, #15
     1f8:	210e      	movs	r1, #14
     1fa:	47b0      	blx	r6
     1fc:	4682      	mov	sl, r0
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
     1fe:	200f      	movs	r0, #15
     200:	210e      	movs	r1, #14
     202:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     204:	465b      	mov	r3, fp
     206:	61ab      	str	r3, [r5, #24]
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
     208:	4653      	mov	r3, sl
     20a:	021d      	lsls	r5, r3, #8
     20c:	4328      	orrs	r0, r5
     20e:	464b      	mov	r3, r9
     210:	5318      	strh	r0, [r3, r4]
     212:	3402      	adds	r4, #2
	 return _receive;
}

void getMS5607Coeff(uint16_t *coefficients) {

    for (uint8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     214:	2c0c      	cmp	r4, #12
     216:	d1dd      	bne.n	1d4 <getMS5607Coeff+0x18>
        uint8_t _byte1 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        uint8_t _byte2 = getByte(MS5607_SCK_PIN,MS5607_MISO_PIN);
        SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,true);
        *(coefficients+coeff_num) = (_byte1 << 8) | _byte2;
    }
}
     218:	bc3c      	pop	{r2, r3, r4, r5}
     21a:	4690      	mov	r8, r2
     21c:	4699      	mov	r9, r3
     21e:	46a2      	mov	sl, r4
     220:	46ab      	mov	fp, r5
     222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     224:	00000875 	.word	0x00000875
     228:	00000599 	.word	0x00000599
     22c:	000005f9 	.word	0x000005f9
     230:	41004400 	.word	0x41004400

00000234 <ConvertPressureTemperature>:
uint32_t ConvertPressureTemperature(uint32_t *pressure, uint32_t *temperature, uint16_t *coefficients) {
     234:	b5f0      	push	{r4, r5, r6, r7, lr}
     236:	4657      	mov	r7, sl
     238:	464e      	mov	r6, r9
     23a:	4645      	mov	r5, r8
     23c:	b4e0      	push	{r5, r6, r7}
     23e:	b088      	sub	sp, #32
     240:	4680      	mov	r8, r0
    const uint64_t C1 = (uint64_t)(*coefficients);
     242:	8813      	ldrh	r3, [r2, #0]
     244:	469a      	mov	sl, r3
    const uint64_t C2 = (uint64_t)(*(coefficients + 1));
     246:	8857      	ldrh	r7, [r2, #2]
    const uint64_t C3 = (uint64_t)(*(coefficients + 2));
     248:	8893      	ldrh	r3, [r2, #4]
     24a:	4699      	mov	r9, r3
    const uint64_t C4 = (uint64_t)(*(coefficients + 3));
     24c:	88d4      	ldrh	r4, [r2, #6]
    const uint64_t C5 = (uint64_t)(*(coefficients + 4));
    const uint64_t C6 = (uint64_t)(*(coefficients + 5));
     24e:	8950      	ldrh	r0, [r2, #10]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const volatile int32_t dT    = *temperature - (C5 * 256);
     250:	8913      	ldrh	r3, [r2, #8]
     252:	021b      	lsls	r3, r3, #8
     254:	680a      	ldr	r2, [r1, #0]
     256:	1ad3      	subs	r3, r2, r3
     258:	9307      	str	r3, [sp, #28]
    const volatile int32_t temp  = 2000 + (dT * C6) / (8388608) ;
     25a:	9a07      	ldr	r2, [sp, #28]
     25c:	17d3      	asrs	r3, r2, #31
     25e:	4e26      	ldr	r6, [pc, #152]	; (2f8 <ConvertPressureTemperature+0xc4>)
     260:	2100      	movs	r1, #0
     262:	47b0      	blx	r6
     264:	0249      	lsls	r1, r1, #9
     266:	0dc0      	lsrs	r0, r0, #23
     268:	4308      	orrs	r0, r1
     26a:	23fa      	movs	r3, #250	; 0xfa
     26c:	00db      	lsls	r3, r3, #3
     26e:	469c      	mov	ip, r3
     270:	4460      	add	r0, ip
     272:	9006      	str	r0, [sp, #24]

    const volatile int64_t OFF   = (C2 * (131072)) + ((C4 * dT) / (64));
     274:	9a07      	ldr	r2, [sp, #28]
     276:	17d3      	asrs	r3, r2, #31
     278:	1c20      	adds	r0, r4, #0
     27a:	2100      	movs	r1, #0
     27c:	47b0      	blx	r6
     27e:	068b      	lsls	r3, r1, #26
     280:	0984      	lsrs	r4, r0, #6
     282:	431c      	orrs	r4, r3
     284:	098d      	lsrs	r5, r1, #6
     286:	0bfb      	lsrs	r3, r7, #15
     288:	047a      	lsls	r2, r7, #17
     28a:	1912      	adds	r2, r2, r4
     28c:	416b      	adcs	r3, r5
     28e:	9204      	str	r2, [sp, #16]
     290:	9305      	str	r3, [sp, #20]
    const volatile int64_t SENS  = (C1 * (65536)) + ((C3 * dT) / (128));
     292:	9a07      	ldr	r2, [sp, #28]
     294:	17d3      	asrs	r3, r2, #31
     296:	4648      	mov	r0, r9
     298:	2100      	movs	r1, #0
     29a:	47b0      	blx	r6
     29c:	064c      	lsls	r4, r1, #25
     29e:	09c2      	lsrs	r2, r0, #7
     2a0:	4322      	orrs	r2, r4
     2a2:	09cb      	lsrs	r3, r1, #7
     2a4:	2100      	movs	r1, #0
     2a6:	4654      	mov	r4, sl
     2a8:	0420      	lsls	r0, r4, #16
     2aa:	1812      	adds	r2, r2, r0
     2ac:	414b      	adcs	r3, r1
     2ae:	9202      	str	r2, [sp, #8]
     2b0:	9303      	str	r3, [sp, #12]
    const volatile int32_t press = ((*pressure * SENS / (2097152) - OFF) / (32768));
     2b2:	9a02      	ldr	r2, [sp, #8]
     2b4:	9b03      	ldr	r3, [sp, #12]
     2b6:	9c04      	ldr	r4, [sp, #16]
     2b8:	9d05      	ldr	r5, [sp, #20]
     2ba:	4641      	mov	r1, r8
     2bc:	6808      	ldr	r0, [r1, #0]
     2be:	2100      	movs	r1, #0
     2c0:	47b0      	blx	r6
     2c2:	17ce      	asrs	r6, r1, #31
     2c4:	0af2      	lsrs	r2, r6, #11
     2c6:	2300      	movs	r3, #0
     2c8:	1880      	adds	r0, r0, r2
     2ca:	4159      	adcs	r1, r3
     2cc:	02ce      	lsls	r6, r1, #11
     2ce:	0d42      	lsrs	r2, r0, #21
     2d0:	4332      	orrs	r2, r6
     2d2:	154b      	asrs	r3, r1, #21
     2d4:	1b12      	subs	r2, r2, r4
     2d6:	41ab      	sbcs	r3, r5
     2d8:	17dc      	asrs	r4, r3, #31
     2da:	0c60      	lsrs	r0, r4, #17
     2dc:	2100      	movs	r1, #0
     2de:	1812      	adds	r2, r2, r0
     2e0:	414b      	adcs	r3, r1
     2e2:	045b      	lsls	r3, r3, #17
     2e4:	0bd2      	lsrs	r2, r2, #15
     2e6:	431a      	orrs	r2, r3
     2e8:	9201      	str	r2, [sp, #4]
    return press;
     2ea:	9801      	ldr	r0, [sp, #4]
}
     2ec:	b008      	add	sp, #32
     2ee:	bc1c      	pop	{r2, r3, r4}
     2f0:	4690      	mov	r8, r2
     2f2:	4699      	mov	r9, r3
     2f4:	46a2      	mov	sl, r4
     2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2f8:	00000ff5 	.word	0x00000ff5

000002fc <pascalToCent>:

    double altFeet = (1-pow((pressMillibar/1013.25),(0.190284)))*145366.45;
    return (float)altFeet;
}

uint32_t pascalToCent(const int32_t pressurePa) {
     2fc:	b530      	push	{r4, r5, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    if (pressurePa > PA_INIT)
     2fe:	4b0d      	ldr	r3, [pc, #52]	; (334 <pascalToCent+0x38>)
     300:	4298      	cmp	r0, r3
     302:	dc12      	bgt.n	32a <pascalToCent+0x2e>
        return lookupTable[0];
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
     304:	1a1b      	subs	r3, r3, r0
     306:	129b      	asrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     308:	2b4b      	cmp	r3, #75	; 0x4b
     30a:	dc10      	bgt.n	32e <pascalToCent+0x32>
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     30c:	4c0a      	ldr	r4, [pc, #40]	; (338 <pascalToCent+0x3c>)
     30e:	009a      	lsls	r2, r3, #2
     310:	5912      	ldr	r2, [r2, r4]
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
     312:	029d      	lsls	r5, r3, #10
     314:	4907      	ldr	r1, [pc, #28]	; (334 <pascalToCent+0x38>)
     316:	1b49      	subs	r1, r1, r5
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
     318:	1a08      	subs	r0, r1, r0
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     31a:	3301      	adds	r3, #1
     31c:	009b      	lsls	r3, r3, #2
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
     31e:	591b      	ldr	r3, [r3, r4]
     320:	1a9b      	subs	r3, r3, r2
     322:	4358      	muls	r0, r3
     324:	1280      	asrs	r0, r0, #10
     326:	1880      	adds	r0, r0, r2
     328:	e002      	b.n	330 <pascalToCent+0x34>
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    if (pressurePa > PA_INIT)
        return lookupTable[0];
     32a:	4804      	ldr	r0, [pc, #16]	; (33c <pascalToCent+0x40>)
     32c:	e000      	b.n	330 <pascalToCent+0x34>
    else {
        const int32_t inx = (PA_INIT - pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            return lookupTable[PZLUT_ENTRIES - 1];
     32e:	4804      	ldr	r0, [pc, #16]	; (340 <pascalToCent+0x44>)
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
            return (z1 + (((pa1 - pressurePa) * (z2 - z1)) >> 10));
        }
    }
     330:	bd30      	pop	{r4, r5, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	000199cc 	.word	0x000199cc
     338:	00001b1c 	.word	0x00001b1c
     33c:	ffff8d20 	.word	0xffff8d20
     340:	000f048e 	.word	0x000f048e

00000344 <initAccelerometer>:





void initAccelerometer(struct AccelerometerModule *myAccelerometer) {
     344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     346:	1c07      	adds	r7, r0, #0

    accelSampleState = accelSampleEmpty;
     348:	2200      	movs	r2, #0
     34a:	4b20      	ldr	r3, [pc, #128]	; (3cc <initAccelerometer+0x88>)
     34c:	701a      	strb	r2, [r3, #0]



#ifdef HAS_ADXL345

    SaLPinMode(ADXL345_SLAVE_SELECT_PIN,OUTPUT);
     34e:	2010      	movs	r0, #16
     350:	2101      	movs	r1, #1
     352:	4e1f      	ldr	r6, [pc, #124]	; (3d0 <initAccelerometer+0x8c>)
     354:	47b0      	blx	r6
     356:	4c1f      	ldr	r4, [pc, #124]	; (3d4 <initAccelerometer+0x90>)
     358:	2580      	movs	r5, #128	; 0x80
     35a:	026d      	lsls	r5, r5, #9
     35c:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);
    SaLPinMode(ADXL345_MOSI_PIN,OUTPUT);
     35e:	200d      	movs	r0, #13
     360:	2101      	movs	r1, #1
     362:	47b0      	blx	r6
    SaLPinMode(ADXL345_SCK_PIN,OUTPUT);
     364:	200f      	movs	r0, #15
     366:	2101      	movs	r1, #1
     368:	47b0      	blx	r6
    SaLPinMode(ADXL345_MISO_PIN,INPUT);
     36a:	200e      	movs	r0, #14
     36c:	2100      	movs	r1, #0
     36e:	47b0      	blx	r6

    myAccelerometer->rate_ = MY_ADXL345_DATA_RATE;
     370:	230e      	movs	r3, #14
     372:	707b      	strb	r3, [r7, #1]
    myAccelerometer->range_ = MY_ADXL345_RANGE;
     374:	3b06      	subs	r3, #6
     376:	703b      	strb	r3, [r7, #0]
    } else {
        port->OUTCLR.reg = pin_mask;
     378:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     37a:	200f      	movs	r0, #15
     37c:	210d      	movs	r1, #13
     37e:	222d      	movs	r2, #45	; 0x2d
     380:	4e15      	ldr	r6, [pc, #84]	; (3d8 <initAccelerometer+0x94>)
     382:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x00); // disable
     384:	200f      	movs	r0, #15
     386:	210d      	movs	r1, #13
     388:	2200      	movs	r2, #0
     38a:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     38c:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     38e:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     390:	200f      	movs	r0, #15
     392:	210d      	movs	r1, #13
     394:	222c      	movs	r2, #44	; 0x2c
     396:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->rate_);
     398:	787a      	ldrb	r2, [r7, #1]
     39a:	200f      	movs	r0, #15
     39c:	210d      	movs	r1, #13
     39e:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     3a0:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     3a2:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_BW_RATE);
     3a4:	200f      	movs	r0, #15
     3a6:	210d      	movs	r1, #13
     3a8:	222c      	movs	r2, #44	; 0x2c
     3aa:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,myAccelerometer->range_);
     3ac:	783a      	ldrb	r2, [r7, #0]
     3ae:	200f      	movs	r0, #15
     3b0:	210d      	movs	r1, #13
     3b2:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     3b4:	61a5      	str	r5, [r4, #24]
    } else {
        port->OUTCLR.reg = pin_mask;
     3b6:	6165      	str	r5, [r4, #20]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,false);
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,ADXL345_REG_POWER_CTL);
     3b8:	200f      	movs	r0, #15
     3ba:	210d      	movs	r1, #13
     3bc:	222d      	movs	r2, #45	; 0x2d
     3be:	47b0      	blx	r6
    byteOut(ADXL345_SCK_PIN,ADXL345_MOSI_PIN,0x08); // enable
     3c0:	200f      	movs	r0, #15
     3c2:	210d      	movs	r1, #13
     3c4:	2208      	movs	r2, #8
     3c6:	47b0      	blx	r6
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     3c8:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(ADXL345_SLAVE_SELECT_PIN,true);

#endif

}
     3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3cc:	2000005a 	.word	0x2000005a
     3d0:	000008f5 	.word	0x000008f5
     3d4:	41004400 	.word	0x41004400
     3d8:	00000599 	.word	0x00000599

000003dc <getAccelEvent>:

void getAccelEvent(struct AccelerometerModule *myAccelerometer) {
     3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     3de:	464f      	mov	r7, r9
     3e0:	4646      	mov	r6, r8
     3e2:	b4c0      	push	{r6, r7}
     3e4:	b083      	sub	sp, #12
     3e6:	1c06      	adds	r6, r0, #0

#ifdef HAS_ADXL345

    uint8_t regAccelData[6];
    getADXL345Event(&regAccelData[0]);
     3e8:	4668      	mov	r0, sp
     3ea:	4b2d      	ldr	r3, [pc, #180]	; (4a0 <getAccelEvent+0xc4>)
     3ec:	4798      	blx	r3
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     3ee:	466b      	mov	r3, sp
     3f0:	785b      	ldrb	r3, [r3, #1]
    if (negative) {
     3f2:	b25a      	sxtb	r2, r3
     3f4:	2a00      	cmp	r2, #0
     3f6:	da07      	bge.n	408 <getAccelEvent+0x2c>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     3f8:	482a      	ldr	r0, [pc, #168]	; (4a4 <getAccelEvent+0xc8>)
     3fa:	4303      	orrs	r3, r0
     3fc:	021b      	lsls	r3, r3, #8
     3fe:	466a      	mov	r2, sp
     400:	7810      	ldrb	r0, [r2, #0]
     402:	4303      	orrs	r3, r0
     404:	b29b      	uxth	r3, r3
     406:	e004      	b.n	412 <getAccelEvent+0x36>
    } else {
        result = (*(values + 1) << 8) + *values;
     408:	021b      	lsls	r3, r3, #8
     40a:	466a      	mov	r2, sp
     40c:	7810      	ldrb	r0, [r2, #0]
     40e:	18c3      	adds	r3, r0, r3
     410:	b29b      	uxth	r3, r3
    myAccelerometer->acceleration.X = Convert2C(&regAccelData[0]);
     412:	80b3      	strh	r3, [r6, #4]
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     414:	466a      	mov	r2, sp
     416:	78d4      	ldrb	r4, [r2, #3]
    if (negative) {
     418:	b262      	sxtb	r2, r4
     41a:	2a00      	cmp	r2, #0
     41c:	da07      	bge.n	42e <getAccelEvent+0x52>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     41e:	4821      	ldr	r0, [pc, #132]	; (4a4 <getAccelEvent+0xc8>)
     420:	4304      	orrs	r4, r0
     422:	0224      	lsls	r4, r4, #8
     424:	466a      	mov	r2, sp
     426:	7890      	ldrb	r0, [r2, #2]
     428:	4304      	orrs	r4, r0
     42a:	b2a4      	uxth	r4, r4
     42c:	e004      	b.n	438 <getAccelEvent+0x5c>
    } else {
        result = (*(values + 1) << 8) + *values;
     42e:	0224      	lsls	r4, r4, #8
     430:	466a      	mov	r2, sp
     432:	7890      	ldrb	r0, [r2, #2]
     434:	1904      	adds	r4, r0, r4
     436:	b2a4      	uxth	r4, r4
    myAccelerometer->acceleration.Y = Convert2C(&regAccelData[2]);
     438:	80f4      	strh	r4, [r6, #6]
#define SALCONV2C_H_

static inline int16_t Convert2C(uint8_t *values) {
    int16_t result = 0;

    int16_t negative = (*(values + 1) & (1 <<7)) != 0;
     43a:	466a      	mov	r2, sp
     43c:	7955      	ldrb	r5, [r2, #5]
    if (negative) {
     43e:	b26a      	sxtb	r2, r5
     440:	2a00      	cmp	r2, #0
     442:	da07      	bge.n	454 <getAccelEvent+0x78>
        // if negative then preform 2's complement to int conversion
        result = ((*(values + 1) | ~((1 << 8) - 1)) << 8 ) | *values;
     444:	4817      	ldr	r0, [pc, #92]	; (4a4 <getAccelEvent+0xc8>)
     446:	4305      	orrs	r5, r0
     448:	022d      	lsls	r5, r5, #8
     44a:	466a      	mov	r2, sp
     44c:	7910      	ldrb	r0, [r2, #4]
     44e:	4305      	orrs	r5, r0
     450:	b2ad      	uxth	r5, r5
     452:	e004      	b.n	45e <getAccelEvent+0x82>
    } else {
        result = (*(values + 1) << 8) + *values;
     454:	022d      	lsls	r5, r5, #8
     456:	466a      	mov	r2, sp
     458:	7910      	ldrb	r0, [r2, #4]
     45a:	1945      	adds	r5, r0, r5
     45c:	b2ad      	uxth	r5, r5
    myAccelerometer->acceleration.Z = Convert2C(&regAccelData[4]);
     45e:	8135      	strh	r5, [r6, #8]

    myAccelerometer->acceleration.Xf = myAccelerometer->acceleration.X * ADXL345_MG2G_MULTIPLIER;
     460:	b218      	sxth	r0, r3
     462:	4b11      	ldr	r3, [pc, #68]	; (4a8 <getAccelEvent+0xcc>)
     464:	4698      	mov	r8, r3
     466:	4798      	blx	r3
     468:	4b10      	ldr	r3, [pc, #64]	; (4ac <getAccelEvent+0xd0>)
     46a:	4699      	mov	r9, r3
     46c:	4a10      	ldr	r2, [pc, #64]	; (4b0 <getAccelEvent+0xd4>)
     46e:	4b11      	ldr	r3, [pc, #68]	; (4b4 <getAccelEvent+0xd8>)
     470:	47c8      	blx	r9
     472:	4f11      	ldr	r7, [pc, #68]	; (4b8 <getAccelEvent+0xdc>)
     474:	47b8      	blx	r7
     476:	60f0      	str	r0, [r6, #12]
    myAccelerometer->acceleration.Yf = myAccelerometer->acceleration.Y * ADXL345_MG2G_MULTIPLIER;
     478:	b220      	sxth	r0, r4
     47a:	47c0      	blx	r8
     47c:	4a0c      	ldr	r2, [pc, #48]	; (4b0 <getAccelEvent+0xd4>)
     47e:	4b0d      	ldr	r3, [pc, #52]	; (4b4 <getAccelEvent+0xd8>)
     480:	47c8      	blx	r9
     482:	47b8      	blx	r7
     484:	6130      	str	r0, [r6, #16]
    myAccelerometer->acceleration.Zf = myAccelerometer->acceleration.Z * ADXL345_MG2G_MULTIPLIER;
     486:	b228      	sxth	r0, r5
     488:	47c0      	blx	r8
     48a:	4a09      	ldr	r2, [pc, #36]	; (4b0 <getAccelEvent+0xd4>)
     48c:	4b09      	ldr	r3, [pc, #36]	; (4b4 <getAccelEvent+0xd8>)
     48e:	47c8      	blx	r9
     490:	47b8      	blx	r7
     492:	6170      	str	r0, [r6, #20]

#endif

}
     494:	b003      	add	sp, #12
     496:	bc0c      	pop	{r2, r3}
     498:	4690      	mov	r8, r2
     49a:	4699      	mov	r9, r3
     49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	00000115 	.word	0x00000115
     4a4:	ffffff00 	.word	0xffffff00
     4a8:	000015e9 	.word	0x000015e9
     4ac:	000010b5 	.word	0x000010b5
     4b0:	8e8a71de 	.word	0x8e8a71de
     4b4:	3f6ff2e4 	.word	0x3f6ff2e4
     4b8:	00001661 	.word	0x00001661

000004bc <initBarometer>:
        break;
    };
};


void initBarometer(struct BarometerModule *const myBarometer) {
     4bc:	b538      	push	{r3, r4, r5, lr}

    baroSampleState = baroSampleEmpty;
     4be:	2200      	movs	r2, #0
     4c0:	4b11      	ldr	r3, [pc, #68]	; (508 <initBarometer+0x4c>)
     4c2:	701a      	strb	r2, [r3, #0]

#ifdef HAS_MS5607
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     4c4:	2009      	movs	r0, #9
     4c6:	2101      	movs	r1, #1
     4c8:	4c10      	ldr	r4, [pc, #64]	; (50c <initBarometer+0x50>)
     4ca:	47a0      	blx	r4
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,TRUE);
     4cc:	2009      	movs	r0, #9
     4ce:	2101      	movs	r1, #1
     4d0:	47a0      	blx	r4
    SaLPinMode(MS5607_MOSI_PIN,OUTPUT);
     4d2:	200d      	movs	r0, #13
     4d4:	2101      	movs	r1, #1
     4d6:	47a0      	blx	r4
    SaLPinMode(MS5607_SCK_PIN,OUTPUT);
     4d8:	200f      	movs	r0, #15
     4da:	2101      	movs	r1, #1
     4dc:	47a0      	blx	r4
    SaLPinMode(MS5607_MISO_PIN,INPUT);
     4de:	200e      	movs	r0, #14
     4e0:	2100      	movs	r1, #0
     4e2:	47a0      	blx	r4
    } else {
        port->OUTCLR.reg = pin_mask;
     4e4:	4c0a      	ldr	r4, [pc, #40]	; (510 <initBarometer+0x54>)
     4e6:	2580      	movs	r5, #128	; 0x80
     4e8:	00ad      	lsls	r5, r5, #2
     4ea:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,MS5607_CMD_RES);
     4ec:	200f      	movs	r0, #15
     4ee:	210d      	movs	r1, #13
     4f0:	221e      	movs	r2, #30
     4f2:	4b08      	ldr	r3, [pc, #32]	; (514 <initBarometer+0x58>)
     4f4:	4798      	blx	r3
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     4f6:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
    delay_us(600);
     4f8:	2096      	movs	r0, #150	; 0x96
     4fa:	0080      	lsls	r0, r0, #2
     4fc:	4b06      	ldr	r3, [pc, #24]	; (518 <initBarometer+0x5c>)
     4fe:	4798      	blx	r3
    getMS5607Coeff(&coefficients_[0]);
     500:	4806      	ldr	r0, [pc, #24]	; (51c <initBarometer+0x60>)
     502:	4b07      	ldr	r3, [pc, #28]	; (520 <initBarometer+0x64>)
     504:	4798      	blx	r3
#endif

}
     506:	bd38      	pop	{r3, r4, r5, pc}
     508:	20000070 	.word	0x20000070
     50c:	000008f5 	.word	0x000008f5
     510:	41004400 	.word	0x41004400
     514:	00000599 	.word	0x00000599
     518:	00000875 	.word	0x00000875
     51c:	20000034 	.word	0x20000034
     520:	000001bd 	.word	0x000001bd

00000524 <sendMS5607D2ReadReq>:

void sendMS5607D2ReadReq(uint8_t _cmd) {
     524:	b538      	push	{r3, r4, r5, lr}
     526:	1c02      	adds	r2, r0, #0
    } else {
        port->OUTCLR.reg = pin_mask;
     528:	4c04      	ldr	r4, [pc, #16]	; (53c <sendMS5607D2ReadReq+0x18>)
     52a:	2580      	movs	r5, #128	; 0x80
     52c:	00ad      	lsls	r5, r5, #2
     52e:	6165      	str	r5, [r4, #20]

    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,FALSE);
    byteOut(MS5607_SCK_PIN,MS5607_MOSI_PIN,_cmd);
     530:	200f      	movs	r0, #15
     532:	210d      	movs	r1, #13
     534:	4b02      	ldr	r3, [pc, #8]	; (540 <sendMS5607D2ReadReq+0x1c>)
     536:	4798      	blx	r3
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     538:	61a5      	str	r5, [r4, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
     53a:	bd38      	pop	{r3, r4, r5, pc}
     53c:	41004400 	.word	0x41004400
     540:	00000599 	.word	0x00000599

00000544 <getMS5607PressureSlow>:

void getMS5607PressureSlow(struct BarometerModule *const myBarometer) {
     544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     546:	1c04      	adds	r4, r0, #0

    sendMS5607D2ReadReq(cmdAdcD1_);
     548:	2040      	movs	r0, #64	; 0x40
     54a:	4f0d      	ldr	r7, [pc, #52]	; (580 <getMS5607PressureSlow+0x3c>)
     54c:	47b8      	blx	r7
    delay_us(700);
     54e:	20af      	movs	r0, #175	; 0xaf
     550:	0080      	lsls	r0, r0, #2
     552:	4e0c      	ldr	r6, [pc, #48]	; (584 <getMS5607PressureSlow+0x40>)
     554:	47b0      	blx	r6
    myBarometer->pressure = readMS5607AdcResults();
     556:	4d0c      	ldr	r5, [pc, #48]	; (588 <getMS5607PressureSlow+0x44>)
     558:	47a8      	blx	r5
     55a:	60a0      	str	r0, [r4, #8]

    sendMS5607D2ReadReq(cmdAdcD2_);
     55c:	2050      	movs	r0, #80	; 0x50
     55e:	47b8      	blx	r7
    delay_us(700);
     560:	20af      	movs	r0, #175	; 0xaf
     562:	0080      	lsls	r0, r0, #2
     564:	47b0      	blx	r6
    myBarometer->temperature = readMS5607AdcResults();
     566:	47a8      	blx	r5
     568:	6060      	str	r0, [r4, #4]

    const uint32_t pressConv   = ConvertPressureTemperature(&myBarometer->pressure, &myBarometer->temperature,&coefficients_[0]);
     56a:	1c20      	adds	r0, r4, #0
     56c:	3008      	adds	r0, #8
     56e:	1d21      	adds	r1, r4, #4
     570:	4a06      	ldr	r2, [pc, #24]	; (58c <getMS5607PressureSlow+0x48>)
     572:	4b07      	ldr	r3, [pc, #28]	; (590 <getMS5607PressureSlow+0x4c>)
     574:	4798      	blx	r3

    myBarometer->currentAltInFt = pascalToCent(pressConv);
     576:	4b07      	ldr	r3, [pc, #28]	; (594 <getMS5607PressureSlow+0x50>)
     578:	4798      	blx	r3
     57a:	60e0      	str	r0, [r4, #12]
    //myBarometer->currentAltInFt = paToFeetNOAA(pressConv);
}
     57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     57e:	46c0      	nop			; (mov r8, r8)
     580:	00000525 	.word	0x00000525
     584:	00000875 	.word	0x00000875
     588:	00000155 	.word	0x00000155
     58c:	20000034 	.word	0x20000034
     590:	00000235 	.word	0x00000235
     594:	000002fd 	.word	0x000002fd

00000598 <byteOut>:



void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {
     598:	b570      	push	{r4, r5, r6, lr}
     59a:	09c3      	lsrs	r3, r0, #7
     59c:	2400      	movs	r4, #0
     59e:	2b00      	cmp	r3, #0
     5a0:	d104      	bne.n	5ac <byteOut+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     5a2:	0944      	lsrs	r4, r0, #5
     5a4:	01e4      	lsls	r4, r4, #7
     5a6:	4b13      	ldr	r3, [pc, #76]	; (5f4 <byteOut+0x5c>)
     5a8:	469c      	mov	ip, r3
     5aa:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     5ac:	231f      	movs	r3, #31
     5ae:	4018      	ands	r0, r3
     5b0:	3b1e      	subs	r3, #30
     5b2:	4083      	lsls	r3, r0
     5b4:	1c18      	adds	r0, r3, #0
     5b6:	09cb      	lsrs	r3, r1, #7
     5b8:	2600      	movs	r6, #0
     5ba:	2b00      	cmp	r3, #0
     5bc:	d104      	bne.n	5c8 <byteOut+0x30>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     5be:	094e      	lsrs	r6, r1, #5
     5c0:	01f6      	lsls	r6, r6, #7
     5c2:	4b0c      	ldr	r3, [pc, #48]	; (5f4 <byteOut+0x5c>)
     5c4:	469c      	mov	ip, r3
     5c6:	4466      	add	r6, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     5c8:	231f      	movs	r3, #31
     5ca:	4019      	ands	r1, r3
     5cc:	3b1e      	subs	r3, #30
     5ce:	408b      	lsls	r3, r1
     5d0:	1c19      	adds	r1, r3, #0
     5d2:	2308      	movs	r3, #8


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     5d4:	6160      	str	r0, [r4, #20]

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        if (byte & 0x80) {
     5d6:	b255      	sxtb	r5, r2
     5d8:	2d00      	cmp	r5, #0
     5da:	da01      	bge.n	5e0 <byteOut+0x48>
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     5dc:	61b1      	str	r1, [r6, #24]
     5de:	e000      	b.n	5e2 <byteOut+0x4a>
    } else {
        port->OUTCLR.reg = pin_mask;
     5e0:	6171      	str	r1, [r6, #20]
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     5e2:	61a0      	str	r0, [r4, #24]
            SaLDigitalOut(MOSI_PIN,true);
        } else {
            SaLDigitalOut(MOSI_PIN,false);
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
     5e4:	0052      	lsls	r2, r2, #1
     5e6:	b2d2      	uxtb	r2, r2
     5e8:	3b01      	subs	r3, #1
     5ea:	b2db      	uxtb	r3, r3

void byteOut(uint8_t SCK_PIN,
             uint8_t MOSI_PIN,
             uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     5ec:	2b00      	cmp	r3, #0
     5ee:	d1f1      	bne.n	5d4 <byteOut+0x3c>
        }
        SaLDigitalOut(SCK_PIN,TRUE);
        byte <<= 1;
    }

}
     5f0:	bd70      	pop	{r4, r5, r6, pc}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	41004400 	.word	0x41004400

000005f8 <getByte>:
    }

}

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
     5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fa:	09c3      	lsrs	r3, r0, #7
     5fc:	2400      	movs	r4, #0
     5fe:	2b00      	cmp	r3, #0
     600:	d104      	bne.n	60c <getByte+0x14>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     602:	0944      	lsrs	r4, r0, #5
     604:	01e4      	lsls	r4, r4, #7
     606:	4b12      	ldr	r3, [pc, #72]	; (650 <getByte+0x58>)
     608:	469c      	mov	ip, r3
     60a:	4464      	add	r4, ip

void SaLPinMode(uint8_t pin,uint8_t DIR);

static inline void SaLDigitalOut(uint8_t pin, bool level) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     60c:	251f      	movs	r5, #31
     60e:	4028      	ands	r0, r5
     610:	3d1e      	subs	r5, #30
     612:	4085      	lsls	r5, r0
     614:	09cb      	lsrs	r3, r1, #7
     616:	2600      	movs	r6, #0
     618:	2b00      	cmp	r3, #0
     61a:	d104      	bne.n	626 <getByte+0x2e>
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
        return &(ports[port_index]->Group[group_index]);
     61c:	094e      	lsrs	r6, r1, #5
     61e:	01f6      	lsls	r6, r6, #7
     620:	4b0b      	ldr	r3, [pc, #44]	; (650 <getByte+0x58>)
     622:	469c      	mov	ip, r3
     624:	4466      	add	r6, ip
    }
}

static inline bool SaLDigitalIn(uint8_t pin) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     626:	231f      	movs	r3, #31
     628:	4019      	ands	r1, r3
     62a:	3b1e      	subs	r3, #30
     62c:	408b      	lsls	r3, r1
     62e:	1c19      	adds	r1, r3, #0
     630:	2208      	movs	r2, #8
    uint8_t byte = 0x00;
     632:	2000      	movs	r0, #0


    if (level) {
        port->OUTSET.reg = pin_mask;
    } else {
        port->OUTCLR.reg = pin_mask;
     634:	6165      	str	r5, [r4, #20]
}

static inline bool SaLDigitalIn(uint8_t pin) {
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
    bool level = (port->IN.reg & pin_mask);
     636:	6a33      	ldr	r3, [r6, #32]
     638:	400b      	ands	r3, r1
     63a:	1e5f      	subs	r7, r3, #1
     63c:	41bb      	sbcs	r3, r7

    for (uint8_t i = 0; i<8; ++i) {
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
     63e:	0040      	lsls	r0, r0, #1
     640:	4318      	orrs	r0, r3
     642:	b2c0      	uxtb	r0, r0
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     644:	61a5      	str	r5, [r4, #24]
     646:	3a01      	subs	r2, #1
     648:	b2d2      	uxtb	r2, r2

uint8_t getByte(uint8_t SCK_PIN,
                uint8_t MISO_PIN) {
    uint8_t byte = 0x00;

    for (uint8_t i = 0; i<8; ++i) {
     64a:	2a00      	cmp	r2, #0
     64c:	d1f2      	bne.n	634 <getByte+0x3c>
        SaLDigitalOut(SCK_PIN,FALSE);
        byte = (byte << 1 ) | SaLDigitalIn(MISO_PIN);
        SaLDigitalOut(SCK_PIN,TRUE);
    }
    return byte;
}
     64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     650:	41004400 	.word	0x41004400

00000654 <SalGclkInit>:

#include <SaLClocks.h>


void SalGclkInit() {
     654:	b510      	push	{r4, lr}

    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     656:	4a2a      	ldr	r2, [pc, #168]	; (700 <SalGclkInit+0xac>)
     658:	23c2      	movs	r3, #194	; 0xc2
     65a:	00db      	lsls	r3, r3, #3
     65c:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     65e:	4929      	ldr	r1, [pc, #164]	; (704 <SalGclkInit+0xb0>)
     660:	6848      	ldr	r0, [r1, #4]
     662:	2302      	movs	r3, #2
     664:	4303      	orrs	r3, r0
     666:	604b      	str	r3, [r1, #4]

// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     668:	4b27      	ldr	r3, [pc, #156]	; (708 <SalGclkInit+0xb4>)
     66a:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);
//wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     66c:	1c11      	adds	r1, r2, #0
     66e:	2202      	movs	r2, #2
     670:	68cb      	ldr	r3, [r1, #12]
     672:	421a      	tst	r2, r3
     674:	d0fc      	beq.n	670 <SalGclkInit+0x1c>

//config xosc32k for the dfll via gen1
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(1) |
     676:	4b25      	ldr	r3, [pc, #148]	; (70c <SalGclkInit+0xb8>)
     678:	2202      	movs	r2, #2
     67a:	32ff      	adds	r2, #255	; 0xff
     67c:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(1) |
     67e:	4a24      	ldr	r2, [pc, #144]	; (710 <SalGclkInit+0xbc>)
     680:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_XOSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(1) |
     682:	2282      	movs	r2, #130	; 0x82
     684:	01d2      	lsls	r2, r2, #7
     686:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_ID_DFLL48;

    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(2) |
     688:	2281      	movs	r2, #129	; 0x81
     68a:	0052      	lsls	r2, r2, #1
     68c:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     68e:	4a21      	ldr	r2, [pc, #132]	; (714 <SalGclkInit+0xc0>)
     690:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC32K |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_GEN(2) |
     692:	4a21      	ldr	r2, [pc, #132]	; (718 <SalGclkInit+0xc4>)
     694:	805a      	strh	r2, [r3, #2]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     696:	4b21      	ldr	r3, [pc, #132]	; (71c <SalGclkInit+0xc8>)
     698:	681b      	ldr	r3, [r3, #0]
     69a:	0e9b      	lsrs	r3, r3, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     69c:	2b3f      	cmp	r3, #63	; 0x3f
     69e:	d100      	bne.n	6a2 <SalGclkInit+0x4e>
        coarse = 0x1f;
     6a0:	3b20      	subs	r3, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     6a2:	4a1f      	ldr	r2, [pc, #124]	; (720 <SalGclkInit+0xcc>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     6a4:	6812      	ldr	r2, [r2, #0]
     6a6:	0592      	lsls	r2, r2, #22
     6a8:	0d92      	lsrs	r2, r2, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     6aa:	491e      	ldr	r1, [pc, #120]	; (724 <SalGclkInit+0xd0>)
     6ac:	428a      	cmp	r2, r1
     6ae:	d100      	bne.n	6b2 <SalGclkInit+0x5e>
        fine = 0x1ff;
     6b0:	4a1d      	ldr	r2, [pc, #116]	; (728 <SalGclkInit+0xd4>)
    }
//For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     6b2:	4916      	ldr	r1, [pc, #88]	; (70c <SalGclkInit+0xb8>)
     6b4:	2080      	movs	r0, #128	; 0x80
     6b6:	0040      	lsls	r0, r0, #1
     6b8:	6088      	str	r0, [r1, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     6ba:	481c      	ldr	r0, [pc, #112]	; (72c <SalGclkInit+0xd8>)
     6bc:	6048      	str	r0, [r1, #4]
    GCLK->CLKCTRL.reg = (GCLK_CLKCTRL_GEN(0) | GCLK_CLKCTRL_CLKEN ) ;
     6be:	2080      	movs	r0, #128	; 0x80
     6c0:	01c0      	lsls	r0, r0, #7
     6c2:	8048      	strh	r0, [r1, #2]

    SYSCTRL->DFLLCTRL.reg = (SYSCTRL_DFLLCTRL_ENABLE); //Enable the DFLL
     6c4:	490e      	ldr	r1, [pc, #56]	; (700 <SalGclkInit+0xac>)
     6c6:	2002      	movs	r0, #2
     6c8:	8488      	strh	r0, [r1, #36]	; 0x24
    SYSCTRL->DFLLCTRL.reg |= (SYSCTRL_DFLLCTRL_MODE);
     6ca:	8c8c      	ldrh	r4, [r1, #36]	; 0x24
     6cc:	3002      	adds	r0, #2
     6ce:	4320      	orrs	r0, r4
     6d0:	8488      	strh	r0, [r1, #36]	; 0x24
    SYSCTRL->DFLLMUL.reg = (SYSCTRL_DFLLMUL_CSTEP(coarse) | SYSCTRL_DFLLMUL_FSTEP(fine));
     6d2:	0412      	lsls	r2, r2, #16
     6d4:	069b      	lsls	r3, r3, #26
     6d6:	431a      	orrs	r2, r3
     6d8:	62ca      	str	r2, [r1, #44]	; 0x2c
    SYSCTRL->DFLLMUL.reg |= (SYSCTRL_DFLLMUL_MUL(1280));
     6da:	6acb      	ldr	r3, [r1, #44]	; 0x2c
     6dc:	22a0      	movs	r2, #160	; 0xa0
     6de:	00d2      	lsls	r2, r2, #3
     6e0:	4313      	orrs	r3, r2
     6e2:	62cb      	str	r3, [r1, #44]	; 0x2c

//Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     6e4:	2210      	movs	r2, #16
     6e6:	68cb      	ldr	r3, [r1, #12]
     6e8:	421a      	tst	r2, r3
     6ea:	d0fc      	beq.n	6e6 <SalGclkInit+0x92>


    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(4) |
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <SalGclkInit+0xb8>)
     6ee:	2282      	movs	r2, #130	; 0x82
     6f0:	0052      	lsls	r2, r2, #1
     6f2:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(4) |
     6f4:	4a0e      	ldr	r2, [pc, #56]	; (730 <SalGclkInit+0xdc>)
     6f6:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_TC4_TC5 |
     6f8:	4a0e      	ldr	r2, [pc, #56]	; (734 <SalGclkInit+0xe0>)
     6fa:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_GEN_GCLK3 |
                        GCLK_CLKCTRL_CLKEN;

}
     6fc:	bd10      	pop	{r4, pc}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	40000800 	.word	0x40000800
     704:	41004000 	.word	0x41004000
     708:	0000060e 	.word	0x0000060e
     70c:	40000c00 	.word	0x40000c00
     710:	00010501 	.word	0x00010501
     714:	00010402 	.word	0x00010402
     718:	0000421b 	.word	0x0000421b
     71c:	00806024 	.word	0x00806024
     720:	00806028 	.word	0x00806028
     724:	000003ff 	.word	0x000003ff
     728:	000001ff 	.word	0x000001ff
     72c:	00010700 	.word	0x00010700
     730:	00230604 	.word	0x00230604
     734:	0000431c 	.word	0x0000431c

00000738 <SaLTC4Init>:

void SaLTC4Init() {

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     738:	4a0a      	ldr	r2, [pc, #40]	; (764 <SaLTC4Init+0x2c>)
     73a:	6a13      	ldr	r3, [r2, #32]
     73c:	2180      	movs	r1, #128	; 0x80
     73e:	0149      	lsls	r1, r1, #5
     740:	430b      	orrs	r3, r1
     742:	6213      	str	r3, [r2, #32]

    TC4->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 |
     744:	4b08      	ldr	r3, [pc, #32]	; (768 <SaLTC4Init+0x30>)
     746:	22b0      	movs	r2, #176	; 0xb0
     748:	0112      	lsls	r2, r2, #4
     74a:	801a      	strh	r2, [r3, #0]
                             TC_CTRLA_RUNSTDBY |
                             TC_CTRLA_PRESCALER_DIV8;
    //  TC3->COUNT16.PER.reg = 0xFE;

    TC4->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
     74c:	2201      	movs	r2, #1
     74e:	735a      	strb	r2, [r3, #13]

    TC4->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
     750:	8819      	ldrh	r1, [r3, #0]
     752:	3201      	adds	r2, #1
     754:	430a      	orrs	r2, r1
     756:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     758:	2280      	movs	r2, #128	; 0x80
     75a:	0312      	lsls	r2, r2, #12
     75c:	4b03      	ldr	r3, [pc, #12]	; (76c <SaLTC4Init+0x34>)
     75e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     760:	4770      	bx	lr
     762:	46c0      	nop			; (mov r8, r8)
     764:	40000400 	.word	0x40000400
     768:	42003000 	.word	0x42003000
     76c:	e000e100 	.word	0xe000e100

00000770 <SaLRtcInit>:
}



void SaLRtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     770:	4b19      	ldr	r3, [pc, #100]	; (7d8 <SaLRtcInit+0x68>)
     772:	2281      	movs	r2, #129	; 0x81
     774:	0052      	lsls	r2, r2, #1
     776:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     778:	4a18      	ldr	r2, [pc, #96]	; (7dc <SaLRtcInit+0x6c>)
     77a:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     77c:	1c1a      	adds	r2, r3, #0
     77e:	7853      	ldrb	r3, [r2, #1]
     780:	b25b      	sxtb	r3, r3
     782:	2b00      	cmp	r3, #0
     784:	dbfb      	blt.n	77e <SaLRtcInit+0xe>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     786:	4a16      	ldr	r2, [pc, #88]	; (7e0 <SaLRtcInit+0x70>)
     788:	4b13      	ldr	r3, [pc, #76]	; (7d8 <SaLRtcInit+0x68>)
     78a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16 |
     78c:	4a15      	ldr	r2, [pc, #84]	; (7e4 <SaLRtcInit+0x74>)
     78e:	4b16      	ldr	r3, [pc, #88]	; (7e8 <SaLRtcInit+0x78>)
     790:	801a      	strh	r2, [r3, #0]
                          RTC_MODE1_CTRL_PRESCALER_DIV32;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     792:	1c1a      	adds	r2, r3, #0
     794:	7a93      	ldrb	r3, [r2, #10]
     796:	09db      	lsrs	r3, r3, #7
     798:	d1fc      	bne.n	794 <SaLRtcInit+0x24>

// Prescaler needs to be enabled separately from the mode for some reason
//  RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV1;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     79a:	4a13      	ldr	r2, [pc, #76]	; (7e8 <SaLRtcInit+0x78>)
     79c:	7a93      	ldrb	r3, [r2, #10]
     79e:	09db      	lsrs	r3, r3, #7
     7a0:	d1fc      	bne.n	79c <SaLRtcInit+0x2c>

    RTC->MODE1.PER.reg = 998;
     7a2:	4a12      	ldr	r2, [pc, #72]	; (7ec <SaLRtcInit+0x7c>)
     7a4:	4b10      	ldr	r3, [pc, #64]	; (7e8 <SaLRtcInit+0x78>)
     7a6:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     7a8:	1c1a      	adds	r2, r3, #0
     7aa:	7a93      	ldrb	r3, [r2, #10]
     7ac:	09db      	lsrs	r3, r3, #7
     7ae:	d1fc      	bne.n	7aa <SaLRtcInit+0x3a>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     7b0:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <SaLRtcInit+0x78>)
     7b2:	8859      	ldrh	r1, [r3, #2]
     7b4:	4a0e      	ldr	r2, [pc, #56]	; (7f0 <SaLRtcInit+0x80>)
     7b6:	430a      	orrs	r2, r1
     7b8:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     7ba:	2280      	movs	r2, #128	; 0x80
     7bc:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     7be:	8819      	ldrh	r1, [r3, #0]
     7c0:	2202      	movs	r2, #2
     7c2:	430a      	orrs	r2, r1
     7c4:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     7c6:	1c1a      	adds	r2, r3, #0
     7c8:	7a93      	ldrb	r3, [r2, #10]
     7ca:	09db      	lsrs	r3, r3, #7
     7cc:	d1fc      	bne.n	7c8 <SaLRtcInit+0x58>
     7ce:	2208      	movs	r2, #8
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <SaLRtcInit+0x84>)
     7d2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     7d4:	4770      	bx	lr
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	40000c00 	.word	0x40000c00
     7dc:	00230002 	.word	0x00230002
     7e0:	00004204 	.word	0x00004204
     7e4:	00000504 	.word	0x00000504
     7e8:	40001400 	.word	0x40001400
     7ec:	000003e6 	.word	0x000003e6
     7f0:	00004010 	.word	0x00004010
     7f4:	e000e100 	.word	0xe000e100

000007f8 <RTC_Handler>:

volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     7f8:	4a05      	ldr	r2, [pc, #20]	; (810 <RTC_Handler+0x18>)
     7fa:	6813      	ldr	r3, [r2, #0]
     7fc:	21fa      	movs	r1, #250	; 0xfa
     7fe:	0089      	lsls	r1, r1, #2
     800:	468c      	mov	ip, r1
     802:	4463      	add	r3, ip
     804:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     806:	22ff      	movs	r2, #255	; 0xff
     808:	4b02      	ldr	r3, [pc, #8]	; (814 <RTC_Handler+0x1c>)
     80a:	721a      	strb	r2, [r3, #8]
}
     80c:	4770      	bx	lr
     80e:	46c0      	nop			; (mov r8, r8)
     810:	20000024 	.word	0x20000024
     814:	40001400 	.word	0x40001400

00000818 <millis>:

uint32_t millis(void) {
	uint32_t ms;
	ATOMIC_SECTION_ENTER
     818:	f3ef 8110 	mrs	r1, PRIMASK
     81c:	b672      	cpsid	i
	ms = time_ms + RTC->MODE1.COUNT.reg;
     81e:	4a0b      	ldr	r2, [pc, #44]	; (84c <millis+0x34>)
     820:	8a10      	ldrh	r0, [r2, #16]
     822:	b280      	uxth	r0, r0
     824:	4b0a      	ldr	r3, [pc, #40]	; (850 <millis+0x38>)
     826:	681b      	ldr	r3, [r3, #0]
	if (RTC->MODE1.INTFLAG.bit.OVF)
     828:	7a12      	ldrb	r2, [r2, #8]
     82a:	09d2      	lsrs	r2, r2, #7
}

uint32_t millis(void) {
	uint32_t ms;
	ATOMIC_SECTION_ENTER
	ms = time_ms + RTC->MODE1.COUNT.reg;
     82c:	18c0      	adds	r0, r0, r3
	if (RTC->MODE1.INTFLAG.bit.OVF)
     82e:	2a00      	cmp	r2, #0
     830:	d008      	beq.n	844 <millis+0x2c>
	ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     832:	4b06      	ldr	r3, [pc, #24]	; (84c <millis+0x34>)
     834:	8a1b      	ldrh	r3, [r3, #16]
     836:	4a06      	ldr	r2, [pc, #24]	; (850 <millis+0x38>)
     838:	6810      	ldr	r0, [r2, #0]
     83a:	22fa      	movs	r2, #250	; 0xfa
     83c:	0092      	lsls	r2, r2, #2
     83e:	4694      	mov	ip, r2
     840:	4460      	add	r0, ip
     842:	1818      	adds	r0, r3, r0
	ATOMIC_SECTION_LEAVE
     844:	f381 8810 	msr	PRIMASK, r1
	return ms;
}
     848:	4770      	bx	lr
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	40001400 	.word	0x40001400
     850:	20000024 	.word	0x20000024

00000854 <SaLDelayInit>:
static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void SaLDelayInit(void) {
    cycles_per_ms = 41900000UL;
    cycles_per_ms /= 1000;
     854:	4b04      	ldr	r3, [pc, #16]	; (868 <SaLDelayInit+0x14>)
     856:	4a05      	ldr	r2, [pc, #20]	; (86c <SaLDelayInit+0x18>)
     858:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     85a:	2229      	movs	r2, #41	; 0x29
     85c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     85e:	3a24      	subs	r2, #36	; 0x24
     860:	4b03      	ldr	r3, [pc, #12]	; (870 <SaLDelayInit+0x1c>)
     862:	601a      	str	r2, [r3, #0]
}
     864:	4770      	bx	lr
     866:	46c0      	nop			; (mov r8, r8)
     868:	20000000 	.word	0x20000000
     86c:	0000a3ac 	.word	0x0000a3ac
     870:	e000e010 	.word	0xe000e010

00000874 <delay_us>:
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
     874:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     876:	4b08      	ldr	r3, [pc, #32]	; (898 <delay_us+0x24>)
     878:	685c      	ldr	r4, [r3, #4]
void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     87a:	4a08      	ldr	r2, [pc, #32]	; (89c <delay_us+0x28>)
        SysTick->VAL = 0;
     87c:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     87e:	2180      	movs	r1, #128	; 0x80
     880:	0249      	lsls	r1, r1, #9
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(
    uint32_t n) {
    while (n--) {
     882:	e006      	b.n	892 <delay_us+0x1e>

void SaLDelayInit(void);

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     884:	2c00      	cmp	r4, #0
     886:	d004      	beq.n	892 <delay_us+0x1e>
        SysTick->LOAD = n;
     888:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     88a:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     88c:	6813      	ldr	r3, [r2, #0]
     88e:	420b      	tst	r3, r1
     890:	d0fc      	beq.n	88c <delay_us+0x18>
     892:	3801      	subs	r0, #1
     894:	d2f6      	bcs.n	884 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     896:	bd30      	pop	{r4, r5, pc}
     898:	20000000 	.word	0x20000000
     89c:	e000e010 	.word	0xe000e010

000008a0 <addSampleToVariance>:

#include <SaLMath.h>


void addSampleToVariance(struct sVar *var, uint32_t newSample) {
     8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8a2:	1c05      	adds	r5, r0, #0
     8a4:	1c0f      	adds	r7, r1, #0
    int16_t delta = newSample - var->mean;
     8a6:	6806      	ldr	r6, [r0, #0]
     8a8:	1b8c      	subs	r4, r1, r6
    var->numSamples++;
     8aa:	8901      	ldrh	r1, [r0, #8]
     8ac:	3101      	adds	r1, #1
     8ae:	b289      	uxth	r1, r1
     8b0:	8101      	strh	r1, [r0, #8]
    var->mean += delta/var->numSamples;
     8b2:	b224      	sxth	r4, r4
     8b4:	1c20      	adds	r0, r4, #0
     8b6:	4b05      	ldr	r3, [pc, #20]	; (8cc <addSampleToVariance+0x2c>)
     8b8:	4798      	blx	r3
     8ba:	1986      	adds	r6, r0, r6
     8bc:	602e      	str	r6, [r5, #0]
    var->M2 += delta * (newSample - var->mean);
     8be:	1bbe      	subs	r6, r7, r6
     8c0:	4374      	muls	r4, r6
     8c2:	686b      	ldr	r3, [r5, #4]
     8c4:	469c      	mov	ip, r3
     8c6:	4464      	add	r4, ip
     8c8:	606c      	str	r4, [r5, #4]
}
     8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8cc:	00000dd1 	.word	0x00000dd1

000008d0 <GetVariance>:

uint32_t GetVariance(struct sVar *var, uint32_t *average) {
     8d0:	b538      	push	{r3, r4, r5, lr}
     8d2:	1c04      	adds	r4, r0, #0
     8d4:	1c0d      	adds	r5, r1, #0
    uint16_t variance = var->M2/var->numSamples;
     8d6:	8901      	ldrh	r1, [r0, #8]
     8d8:	6840      	ldr	r0, [r0, #4]
     8da:	4b05      	ldr	r3, [pc, #20]	; (8f0 <GetVariance+0x20>)
     8dc:	4798      	blx	r3
    *average = var->mean;
     8de:	6823      	ldr	r3, [r4, #0]
     8e0:	602b      	str	r3, [r5, #0]

    var->numSamples = 0;
     8e2:	2300      	movs	r3, #0
     8e4:	8123      	strh	r3, [r4, #8]
    var->mean = 0;
     8e6:	6023      	str	r3, [r4, #0]
    var->M2 = 0;
     8e8:	6063      	str	r3, [r4, #4]
     8ea:	0400      	lsls	r0, r0, #16
     8ec:	0c00      	lsrs	r0, r0, #16

    return variance;
     8ee:	bd38      	pop	{r3, r4, r5, pc}
     8f0:	00000dd1 	.word	0x00000dd1

000008f4 <SaLPinMode>:


#include <SaLPort.h>

void SaLPinMode(uint8_t pin,uint8_t DIR) {
     8f4:	b510      	push	{r4, lr}
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     8f6:	09c2      	lsrs	r2, r0, #7
        return &(ports[port_index]->Group[group_index]);
    } else {
        return NULL;
     8f8:	2300      	movs	r3, #0
    uint8_t port_index  = (gpio_pin / 128);
    uint8_t group_index = (gpio_pin / 32);
    /* Array of available ports */
    Port *const ports[PORT_INST_NUM] = PORT_INSTS;

    if (port_index < PORT_INST_NUM) {
     8fa:	2a00      	cmp	r2, #0
     8fc:	d104      	bne.n	908 <SaLPinMode+0x14>
        return &(ports[port_index]->Group[group_index]);
     8fe:	0943      	lsrs	r3, r0, #5
     900:	01db      	lsls	r3, r3, #7
     902:	4a11      	ldr	r2, [pc, #68]	; (948 <SaLPinMode+0x54>)
     904:	4694      	mov	ip, r2
     906:	4463      	add	r3, ip
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));
     908:	221f      	movs	r2, #31
     90a:	4002      	ands	r2, r0
     90c:	2401      	movs	r4, #1
     90e:	4094      	lsls	r4, r2

    if ( DIR == OUTPUT) {
     910:	2901      	cmp	r1, #1
     912:	d105      	bne.n	920 <SaLPinMode+0x2c>
        port->DIRSET.reg = pin_mask;
     914:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0;
     916:	1818      	adds	r0, r3, r0
     918:	3040      	adds	r0, #64	; 0x40
     91a:	2300      	movs	r3, #0
     91c:	7003      	strb	r3, [r0, #0]
     91e:	e012      	b.n	946 <SaLPinMode+0x52>

    } else if(DIR == INPUT) {
     920:	2900      	cmp	r1, #0
     922:	d109      	bne.n	938 <SaLPinMode+0x44>
        port->DIRCLR.reg = pin_mask;
     924:	605c      	str	r4, [r3, #4]
        port->PINCFG[pin].reg = PORT_PINCFG_INEN;
     926:	1818      	adds	r0, r3, r0
     928:	3040      	adds	r0, #64	; 0x40
     92a:	2302      	movs	r3, #2
     92c:	7003      	strb	r3, [r0, #0]
        port->PINCFG[pin].reg |= PORT_PINCFG_PULLEN;
     92e:	7802      	ldrb	r2, [r0, #0]
     930:	3302      	adds	r3, #2
     932:	4313      	orrs	r3, r2
     934:	7003      	strb	r3, [r0, #0]
     936:	e006      	b.n	946 <SaLPinMode+0x52>
    } else if (DIR == OUTSTRONG) {
     938:	2903      	cmp	r1, #3
     93a:	d104      	bne.n	946 <SaLPinMode+0x52>
        port->DIRSET.reg = pin_mask;
     93c:	609c      	str	r4, [r3, #8]
        port->PINCFG[pin].reg = 0x40;
     93e:	1818      	adds	r0, r3, r0
     940:	3040      	adds	r0, #64	; 0x40
     942:	2340      	movs	r3, #64	; 0x40
     944:	7003      	strb	r3, [r0, #0]

    }
     946:	bd10      	pop	{r4, pc}
     948:	41004400 	.word	0x41004400

0000094c <uart_init>:


#include <SaLUSART.h>

void uart_init(uint32_t baud) {
     94c:	b510      	push	{r4, lr}

    uint32_t UART_CLKGEN_F = 8000000UL;
    uint64_t br = (uint64_t)65536 * (UART_CLKGEN_F - 16 * baud) / UART_CLKGEN_F;
     94e:	0100      	lsls	r0, r0, #4
     950:	4b2c      	ldr	r3, [pc, #176]	; (a04 <uart_init+0xb8>)
     952:	1a18      	subs	r0, r3, r0
     954:	0c01      	lsrs	r1, r0, #16
     956:	0400      	lsls	r0, r0, #16
     958:	4a2a      	ldr	r2, [pc, #168]	; (a04 <uart_init+0xb8>)
     95a:	2300      	movs	r3, #0
     95c:	4c2a      	ldr	r4, [pc, #168]	; (a08 <uart_init+0xbc>)
     95e:	47a0      	blx	r4

    //enable GPS pins
    //  SaLPinMode(MTK3339_RX_PIN,INPUT);
    //  SaLPinMode(MTK3339_TX_PIN,OUTPUT);
    SYSCTRL->OSC8M.reg -= SYSCTRL_OSC8M_ENABLE;
     960:	4b2a      	ldr	r3, [pc, #168]	; (a0c <uart_init+0xc0>)
     962:	6a1a      	ldr	r2, [r3, #32]
     964:	3a02      	subs	r2, #2
     966:	621a      	str	r2, [r3, #32]
    SYSCTRL->OSC8M.reg -= SYSCTRL_OSC8M_PRESC_3;
     968:	6a1a      	ldr	r2, [r3, #32]
     96a:	4929      	ldr	r1, [pc, #164]	; (a10 <uart_init+0xc4>)
     96c:	468c      	mov	ip, r1
     96e:	4462      	add	r2, ip
     970:	621a      	str	r2, [r3, #32]
    SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     972:	6a19      	ldr	r1, [r3, #32]
     974:	2202      	movs	r2, #2
     976:	430a      	orrs	r2, r1
     978:	621a      	str	r2, [r3, #32]



    //portB22->PINCFG->reg = 0x44;
    // portB23->PINCFG->reg = 0x44;
    ((Port *)PORT)->Group[1].PINCFG[22].reg = 0x41;
     97a:	4b26      	ldr	r3, [pc, #152]	; (a14 <uart_init+0xc8>)
     97c:	2241      	movs	r2, #65	; 0x41
     97e:	21d6      	movs	r1, #214	; 0xd6
     980:	545a      	strb	r2, [r3, r1]
    ((Port *)PORT)->Group[1].PINCFG[23].reg = 0x41;
     982:	3101      	adds	r1, #1
     984:	545a      	strb	r2, [r3, r1]
    ((Port *)PORT)->Group[1].PMUX[11].reg = 0x32;
     986:	39a5      	subs	r1, #165	; 0xa5
     988:	327a      	adds	r2, #122	; 0x7a
     98a:	5499      	strb	r1, [r3, r2]



    //enable power to sercom 5 module
    PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5;
     98c:	4a22      	ldr	r2, [pc, #136]	; (a18 <uart_init+0xcc>)
     98e:	6a11      	ldr	r1, [r2, #32]
     990:	2380      	movs	r3, #128	; 0x80
     992:	430b      	orrs	r3, r1
     994:	6213      	str	r3, [r2, #32]
    //enable and configure the sercom clock
    GCLK->GENDIV.reg =  GCLK_GENDIV_ID(3) |
     996:	4b21      	ldr	r3, [pc, #132]	; (a1c <uart_init+0xd0>)
     998:	2204      	movs	r2, #4
     99a:	32ff      	adds	r2, #255	; 0xff
     99c:	609a      	str	r2, [r3, #8]
                        GCLK_GENDIV_DIV(1);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(3) |
     99e:	4a20      	ldr	r2, [pc, #128]	; (a20 <uart_init+0xd4>)
     9a0:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC_OSC8M |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOM5_CORE |
     9a2:	4a20      	ldr	r2, [pc, #128]	; (a24 <uart_init+0xd8>)
     9a4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN;
    //     GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_SERCOMX_SLOW |
    //                         GCLK_CLKCTRL_GEN_GCLK3 |
    //                         GCLK_CLKCTRL_CLKEN;
    //configure the sercom module for the gps (sercom 5)
    SERCOM5->USART.CTRLA.reg = SERCOM_USART_CTRLA_DORD |
     9a6:	4a20      	ldr	r2, [pc, #128]	; (a28 <uart_init+0xdc>)
     9a8:	4b20      	ldr	r3, [pc, #128]	; (a2c <uart_init+0xe0>)
     9aa:	601a      	str	r2, [r3, #0]
#include <SaLIo.h>

typedef uint16_t SaLSercomUsartDataReg_t;

static inline void uart_sync(void) {
    while (SERCOM5->USART.SYNCBUSY.bit.CTRLB);
     9ac:	1c19      	adds	r1, r3, #0
     9ae:	2201      	movs	r2, #1
     9b0:	69cb      	ldr	r3, [r1, #28]
     9b2:	089b      	lsrs	r3, r3, #2
     9b4:	421a      	tst	r2, r3
     9b6:	d1fb      	bne.n	9b0 <uart_init+0x64>
                               SERCOM_USART_CTRLA_MODE_USART_INT_CLK |
                               SERCOM_USART_CTRLA_RXPO(3) |
                               SERCOM_USART_CTRLA_TXPO(1);
    uart_sync();
    SERCOM5->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
     9b8:	22c0      	movs	r2, #192	; 0xc0
     9ba:	0292      	lsls	r2, r2, #10
     9bc:	4b1b      	ldr	r3, [pc, #108]	; (a2c <uart_init+0xe0>)
     9be:	605a      	str	r2, [r3, #4]
     9c0:	1c19      	adds	r1, r3, #0
     9c2:	2201      	movs	r2, #1
     9c4:	69cb      	ldr	r3, [r1, #28]
     9c6:	089b      	lsrs	r3, r3, #2
     9c8:	421a      	tst	r2, r3
     9ca:	d1fb      	bne.n	9c4 <uart_init+0x78>
                               SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);
    // SERCOM_USART_CTRLB_SFDE;
    uart_sync();
    SERCOM5->USART.BAUD.reg = (uint16_t)br;
     9cc:	b280      	uxth	r0, r0
     9ce:	4b17      	ldr	r3, [pc, #92]	; (a2c <uart_init+0xe0>)
     9d0:	8198      	strh	r0, [r3, #12]
     9d2:	1c19      	adds	r1, r3, #0
     9d4:	2201      	movs	r2, #1
     9d6:	69cb      	ldr	r3, [r1, #28]
     9d8:	089b      	lsrs	r3, r3, #2
     9da:	421a      	tst	r2, r3
     9dc:	d1fb      	bne.n	9d6 <uart_init+0x8a>
    uart_sync();
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     9de:	4a13      	ldr	r2, [pc, #76]	; (a2c <uart_init+0xe0>)
     9e0:	6811      	ldr	r1, [r2, #0]
     9e2:	2302      	movs	r3, #2
     9e4:	430b      	orrs	r3, r1
     9e6:	6013      	str	r3, [r2, #0]
     9e8:	1c11      	adds	r1, r2, #0
     9ea:	2201      	movs	r2, #1
     9ec:	69cb      	ldr	r3, [r1, #28]
     9ee:	089b      	lsrs	r3, r3, #2
     9f0:	421a      	tst	r2, r3
     9f2:	d1fb      	bne.n	9ec <uart_init+0xa0>
                                 const uint16_t length);

int32_t SaLInitUsart(struct SaLUsartDescriptor *const descr,
                     void *const hw) {

    descr->device.hw = hw;
     9f4:	4b0e      	ldr	r3, [pc, #56]	; (a30 <uart_init+0xe4>)
     9f6:	4a0d      	ldr	r2, [pc, #52]	; (a2c <uart_init+0xe0>)
     9f8:	609a      	str	r2, [r3, #8]
    descr->io.read = SaLUsartDataRead;
     9fa:	4a0e      	ldr	r2, [pc, #56]	; (a34 <uart_init+0xe8>)
     9fc:	605a      	str	r2, [r3, #4]
    descr->io.write = SaLUsartDataWrite;
     9fe:	4a0e      	ldr	r2, [pc, #56]	; (a38 <uart_init+0xec>)
     a00:	601a      	str	r2, [r3, #0]
    SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    uart_sync();

    SaLInitUsart(&USART_0,SERCOM5);

}
     a02:	bd10      	pop	{r4, pc}
     a04:	007a1200 	.word	0x007a1200
     a08:	00000fb5 	.word	0x00000fb5
     a0c:	40000800 	.word	0x40000800
     a10:	fffffd00 	.word	0xfffffd00
     a14:	41004400 	.word	0x41004400
     a18:	40000400 	.word	0x40000400
     a1c:	40000c00 	.word	0x40000c00
     a20:	00230603 	.word	0x00230603
     a24:	00004319 	.word	0x00004319
     a28:	40310004 	.word	0x40310004
     a2c:	42001c00 	.word	0x42001c00
     a30:	2000007c 	.word	0x2000007c
     a34:	00000a4d 	.word	0x00000a4d
     a38:	00000a9d 	.word	0x00000a9d

00000a3c <SaLSyncUsartIo>:
};


void SaLSyncUsartIo(struct SaLUsartDescriptor *const descr,
                    struct IoDescriptor **Io) {
    *Io = &descr->io;
     a3c:	6008      	str	r0, [r1, #0]
};
     a3e:	4770      	bx	lr

00000a40 <_usartByteRecieved>:

bool _usartByteRecieved(const struct _UsartDevice *const device) {
    return _usartGetInteruptRCX(device->hw);
     a40:	6803      	ldr	r3, [r0, #0]
static inline SaLSercomUsartDataReg_t _usartGetDataReg(const void *const hw) {
    return     ((Sercom *)hw)->USART.DATA.reg;
}

static inline bool _usartGetInteruptRCX(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     a42:	7e18      	ldrb	r0, [r3, #24]
     a44:	0740      	lsls	r0, r0, #29
     a46:	0fc0      	lsrs	r0, r0, #31
};
     a48:	4770      	bx	lr
     a4a:	46c0      	nop			; (mov r8, r8)

00000a4c <SaLUsartDataRead>:



static int32_t SaLUsartDataRead(struct IoDescriptor *const ioDescr,
                                uint8_t *const buf,
                                const uint16_t length) {
     a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a4e:	464f      	mov	r7, r9
     a50:	4646      	mov	r6, r8
     a52:	b4c0      	push	{r6, r7}
     a54:	4680      	mov	r8, r0
     a56:	4689      	mov	r9, r1
     a58:	1c17      	adds	r7, r2, #0

    int32_t offset = 0;
     a5a:	2600      	movs	r6, #0
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    do {
        while (!_usartByteRecieved(&descr->device));
     a5c:	1c05      	adds	r5, r0, #0
     a5e:	3508      	adds	r5, #8
     a60:	4c0a      	ldr	r4, [pc, #40]	; (a8c <SaLUsartDataRead+0x40>)
     a62:	1c28      	adds	r0, r5, #0
     a64:	47a0      	blx	r4
     a66:	2800      	cmp	r0, #0
     a68:	d0fb      	beq.n	a62 <SaLUsartDataRead+0x16>
    ((Sercom *)hw)->USART.DATA.reg = data;
    ATOMIC_SECTION_LEAVE
}

static inline SaLSercomUsartDataReg_t _usartGetDataReg(const void *const hw) {
    return     ((Sercom *)hw)->USART.DATA.reg;
     a6a:	4643      	mov	r3, r8
     a6c:	689b      	ldr	r3, [r3, #8]
     a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
bool _usartByteRecieved(const struct _UsartDevice *const device) {
    return _usartGetInteruptRCX(device->hw);
};

uint8_t _usartGetData(const struct _UsartDevice *const device) {
    return _usartGetDataReg(device->hw);
     a70:	464a      	mov	r2, r9
     a72:	5593      	strb	r3, [r2, r6]
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    do {
        while (!_usartByteRecieved(&descr->device));
        buf[offset] = _usartGetData(&descr->device);
    } while (++offset < length);
     a74:	3601      	adds	r6, #1
     a76:	1c38      	adds	r0, r7, #0
     a78:	42be      	cmp	r6, r7
     a7a:	dbf2      	blt.n	a62 <SaLUsartDataRead+0x16>
     a7c:	2f00      	cmp	r7, #0
     a7e:	dc00      	bgt.n	a82 <SaLUsartDataRead+0x36>
     a80:	2001      	movs	r0, #1

    return (int32_t)offset;
}
     a82:	bc0c      	pop	{r2, r3}
     a84:	4690      	mov	r8, r2
     a86:	4699      	mov	r9, r3
     a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	00000a41 	.word	0x00000a41

00000a90 <_usartGetDreInterupt>:
uint8_t _usartGetData(const struct _UsartDevice *const device) {
    return _usartGetDataReg(device->hw);
}

bool _usartGetDreInterupt(const struct _UsartDevice *const device) {
    return _usartGetDreInteruptReg(device->hw);
     a90:	6803      	ldr	r3, [r0, #0]
static inline bool _usartGetInteruptRCX(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;

};
static inline bool _usartGetDreInteruptReg(const void *const hw) {
    return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     a92:	7e18      	ldrb	r0, [r3, #24]
     a94:	2301      	movs	r3, #1
     a96:	4018      	ands	r0, r3
}
     a98:	4770      	bx	lr
     a9a:	46c0      	nop			; (mov r8, r8)

00000a9c <SaLUsartDataWrite>:
    return (int32_t)offset;
}

static int32_t SaLUsartDataWrite(struct IoDescriptor *const ioDescr,
                                 const uint8_t *const buf,
                                 const uint16_t length) {
     a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a9e:	464f      	mov	r7, r9
     aa0:	4646      	mov	r6, r8
     aa2:	b4c0      	push	{r6, r7}
     aa4:	4680      	mov	r8, r0
     aa6:	4689      	mov	r9, r1
     aa8:	1c17      	adds	r7, r2, #0

    int32_t offset = 0;
    struct SaLUsartDescriptor *descr = CONTAINER_OF(ioDescr,struct SaLUsartDescriptor, io);

    while (!_usartGetDreInterupt(&descr->device));
     aaa:	1c05      	adds	r5, r0, #0
     aac:	3508      	adds	r5, #8
     aae:	4e10      	ldr	r6, [pc, #64]	; (af0 <SaLUsartDataWrite+0x54>)
     ab0:	1c2c      	adds	r4, r5, #0
     ab2:	1c28      	adds	r0, r5, #0
     ab4:	47b0      	blx	r6
     ab6:	2800      	cmp	r0, #0
     ab8:	d0fa      	beq.n	ab0 <SaLUsartDataWrite+0x14>
     aba:	2600      	movs	r6, #0
    do {
        _usartSetDataReg(&descr->device,buf[offset]);
        while (!_usartGetDreInterupt(&descr->device));
     abc:	4d0c      	ldr	r5, [pc, #48]	; (af0 <SaLUsartDataWrite+0x54>)

void SaLSyncUsartIo(struct SaLUsartDescriptor *const descr,
                    struct IoDescriptor **Io);

static inline void _usartSetDataReg(const void *const hw, uint8_t data ) {
    ATOMIC_SECTION_ENTER
     abe:	f3ef 8310 	mrs	r3, PRIMASK
     ac2:	b672      	cpsid	i
    ((Sercom *)hw)->USART.DATA.reg = data;
     ac4:	464a      	mov	r2, r9
     ac6:	5d92      	ldrb	r2, [r2, r6]
     ac8:	4641      	mov	r1, r8
     aca:	860a      	strh	r2, [r1, #48]	; 0x30
    ATOMIC_SECTION_LEAVE
     acc:	f383 8810 	msr	PRIMASK, r3
     ad0:	1c20      	adds	r0, r4, #0
     ad2:	47a8      	blx	r5
     ad4:	2800      	cmp	r0, #0
     ad6:	d0fb      	beq.n	ad0 <SaLUsartDataWrite+0x34>
    } while (++offset < length);
     ad8:	3601      	adds	r6, #1
     ada:	1c38      	adds	r0, r7, #0
     adc:	42be      	cmp	r6, r7
     ade:	dbee      	blt.n	abe <SaLUsartDataWrite+0x22>
     ae0:	2f00      	cmp	r7, #0
     ae2:	dc00      	bgt.n	ae6 <SaLUsartDataWrite+0x4a>
     ae4:	2001      	movs	r0, #1
    return offset;

}
     ae6:	bc0c      	pop	{r2, r3}
     ae8:	4690      	mov	r8, r2
     aea:	4699      	mov	r9, r3
     aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	00000a91 	.word	0x00000a91

00000af4 <Dummy_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     af4:	f3ef 8305 	mrs	r3, IPSR
     af8:	e7fc      	b.n	af4 <Dummy_Handler>
     afa:	46c0      	nop			; (mov r8, r8)

00000afc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     afc:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     afe:	4b2e      	ldr	r3, [pc, #184]	; (bb8 <Reset_Handler+0xbc>)
     b00:	4a2e      	ldr	r2, [pc, #184]	; (bbc <Reset_Handler+0xc0>)
     b02:	429a      	cmp	r2, r3
     b04:	d003      	beq.n	b0e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     b06:	4b2e      	ldr	r3, [pc, #184]	; (bc0 <Reset_Handler+0xc4>)
     b08:	4a2b      	ldr	r2, [pc, #172]	; (bb8 <Reset_Handler+0xbc>)
     b0a:	429a      	cmp	r2, r3
     b0c:	d304      	bcc.n	b18 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     b0e:	4b2d      	ldr	r3, [pc, #180]	; (bc4 <Reset_Handler+0xc8>)
     b10:	4a2d      	ldr	r2, [pc, #180]	; (bc8 <Reset_Handler+0xcc>)
     b12:	429a      	cmp	r2, r3
     b14:	d310      	bcc.n	b38 <Reset_Handler+0x3c>
     b16:	e01e      	b.n	b56 <Reset_Handler+0x5a>
     b18:	4a2c      	ldr	r2, [pc, #176]	; (bcc <Reset_Handler+0xd0>)
     b1a:	4b29      	ldr	r3, [pc, #164]	; (bc0 <Reset_Handler+0xc4>)
     b1c:	3303      	adds	r3, #3
     b1e:	1a9b      	subs	r3, r3, r2
     b20:	089b      	lsrs	r3, r3, #2
     b22:	3301      	adds	r3, #1
     b24:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     b26:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     b28:	4823      	ldr	r0, [pc, #140]	; (bb8 <Reset_Handler+0xbc>)
     b2a:	4924      	ldr	r1, [pc, #144]	; (bbc <Reset_Handler+0xc0>)
     b2c:	588c      	ldr	r4, [r1, r2]
     b2e:	5084      	str	r4, [r0, r2]
     b30:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     b32:	429a      	cmp	r2, r3
     b34:	d1fa      	bne.n	b2c <Reset_Handler+0x30>
     b36:	e7ea      	b.n	b0e <Reset_Handler+0x12>
     b38:	4a25      	ldr	r2, [pc, #148]	; (bd0 <Reset_Handler+0xd4>)
     b3a:	4b22      	ldr	r3, [pc, #136]	; (bc4 <Reset_Handler+0xc8>)
     b3c:	3303      	adds	r3, #3
     b3e:	1a9b      	subs	r3, r3, r2
     b40:	089b      	lsrs	r3, r3, #2
     b42:	3301      	adds	r3, #1
     b44:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     b46:	2200      	movs	r2, #0
                *pDest++ = 0;
     b48:	481f      	ldr	r0, [pc, #124]	; (bc8 <Reset_Handler+0xcc>)
     b4a:	2100      	movs	r1, #0
     b4c:	1814      	adds	r4, r2, r0
     b4e:	6021      	str	r1, [r4, #0]
     b50:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     b52:	429a      	cmp	r2, r3
     b54:	d1fa      	bne.n	b4c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     b56:	4a1f      	ldr	r2, [pc, #124]	; (bd4 <Reset_Handler+0xd8>)
     b58:	21ff      	movs	r1, #255	; 0xff
     b5a:	4b1f      	ldr	r3, [pc, #124]	; (bd8 <Reset_Handler+0xdc>)
     b5c:	438b      	bics	r3, r1
     b5e:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     b60:	39fd      	subs	r1, #253	; 0xfd
     b62:	2390      	movs	r3, #144	; 0x90
     b64:	005b      	lsls	r3, r3, #1
     b66:	4a1d      	ldr	r2, [pc, #116]	; (bdc <Reset_Handler+0xe0>)
     b68:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     b6a:	481d      	ldr	r0, [pc, #116]	; (be0 <Reset_Handler+0xe4>)
     b6c:	78c3      	ldrb	r3, [r0, #3]
     b6e:	2403      	movs	r4, #3
     b70:	43a3      	bics	r3, r4
     b72:	2202      	movs	r2, #2
     b74:	4313      	orrs	r3, r2
     b76:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     b78:	78c3      	ldrb	r3, [r0, #3]
     b7a:	260c      	movs	r6, #12
     b7c:	43b3      	bics	r3, r6
     b7e:	2108      	movs	r1, #8
     b80:	430b      	orrs	r3, r1
     b82:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     b84:	4b17      	ldr	r3, [pc, #92]	; (be4 <Reset_Handler+0xe8>)
     b86:	7b98      	ldrb	r0, [r3, #14]
     b88:	2530      	movs	r5, #48	; 0x30
     b8a:	43a8      	bics	r0, r5
     b8c:	1c05      	adds	r5, r0, #0
     b8e:	2020      	movs	r0, #32
     b90:	4328      	orrs	r0, r5
     b92:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     b94:	7b98      	ldrb	r0, [r3, #14]
     b96:	43b0      	bics	r0, r6
     b98:	4301      	orrs	r1, r0
     b9a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     b9c:	7b99      	ldrb	r1, [r3, #14]
     b9e:	43a1      	bics	r1, r4
     ba0:	430a      	orrs	r2, r1
     ba2:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     ba4:	4a10      	ldr	r2, [pc, #64]	; (be8 <Reset_Handler+0xec>)
     ba6:	6851      	ldr	r1, [r2, #4]
     ba8:	2380      	movs	r3, #128	; 0x80
     baa:	430b      	orrs	r3, r1
     bac:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     bae:	4b0f      	ldr	r3, [pc, #60]	; (bec <Reset_Handler+0xf0>)
     bb0:	4798      	blx	r3

        /* Branch to main function */
        main();
     bb2:	4b0f      	ldr	r3, [pc, #60]	; (bf0 <Reset_Handler+0xf4>)
     bb4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     bb6:	e7fe      	b.n	bb6 <Reset_Handler+0xba>
     bb8:	20000000 	.word	0x20000000
     bbc:	00001cb8 	.word	0x00001cb8
     bc0:	20000008 	.word	0x20000008
     bc4:	20004eb4 	.word	0x20004eb4
     bc8:	20000008 	.word	0x20000008
     bcc:	20000004 	.word	0x20000004
     bd0:	2000000c 	.word	0x2000000c
     bd4:	e000ed00 	.word	0xe000ed00
     bd8:	00000000 	.word	0x00000000
     bdc:	41007000 	.word	0x41007000
     be0:	41005000 	.word	0x41005000
     be4:	41004800 	.word	0x41004800
     be8:	41004000 	.word	0x41004000
     bec:	00000d85 	.word	0x00000d85
     bf0:	00000c71 	.word	0x00000c71

00000bf4 <PinConfig>:
uint8_t bytesRead;
bool retrieveSample;
uint32_t index2;


void PinConfig() {
     bf4:	b538      	push	{r3, r4, r5, lr}
    /* temp SS HIGH for other peripherals */
    SaLPinMode(PIN_PA07,INPUT);
     bf6:	2007      	movs	r0, #7
     bf8:	2100      	movs	r1, #0
     bfa:	4c0c      	ldr	r4, [pc, #48]	; (c2c <PinConfig+0x38>)
     bfc:	47a0      	blx	r4
    SaLPinMode(PIN_PA10,OUTPUT);
     bfe:	200a      	movs	r0, #10
     c00:	2101      	movs	r1, #1
     c02:	47a0      	blx	r4
    SaLPinMode(PIN_PA08,OUTPUT);
     c04:	2008      	movs	r0, #8
     c06:	2101      	movs	r1, #1
     c08:	47a0      	blx	r4
    SaLPinMode(BUZZER,OUTSTRONG);
     c0a:	200c      	movs	r0, #12
     c0c:	2103      	movs	r1, #3
     c0e:	47a0      	blx	r4
    PortGroup *const port = SaLGetPort(pin);
    uint32_t pin_mask = (1UL << (pin % 32));


    if (level) {
        port->OUTSET.reg = pin_mask;
     c10:	4d07      	ldr	r5, [pc, #28]	; (c30 <PinConfig+0x3c>)
     c12:	2380      	movs	r3, #128	; 0x80
     c14:	00db      	lsls	r3, r3, #3
     c16:	61ab      	str	r3, [r5, #24]
     c18:	2380      	movs	r3, #128	; 0x80
     c1a:	005b      	lsls	r3, r3, #1
     c1c:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(PIN_PA10,true);
    SaLDigitalOut(PIN_PA08,true);
    SaLPinMode(MS5607_SLAVE_SELECT_PIN,OUTPUT);
     c1e:	2009      	movs	r0, #9
     c20:	2101      	movs	r1, #1
     c22:	47a0      	blx	r4
     c24:	2380      	movs	r3, #128	; 0x80
     c26:	009b      	lsls	r3, r3, #2
     c28:	61ab      	str	r3, [r5, #24]
    SaLDigitalOut(MS5607_SLAVE_SELECT_PIN,TRUE);
}
     c2a:	bd38      	pop	{r3, r4, r5, pc}
     c2c:	000008f5 	.word	0x000008f5
     c30:	41004400 	.word	0x41004400

00000c34 <TC5_Handler>:

void TC5_Handler(void) {
    //SaLPlayTone(400);
    ATOMIC_SECTION_ENTER
     c34:	f3ef 8310 	mrs	r3, PRIMASK
     c38:	b672      	cpsid	i
    index2++;
     c3a:	4905      	ldr	r1, [pc, #20]	; (c50 <TC5_Handler+0x1c>)
     c3c:	680a      	ldr	r2, [r1, #0]
     c3e:	3201      	adds	r2, #1
     c40:	600a      	str	r2, [r1, #0]
    TC5->COUNT8.INTFLAG.reg = 0XFF;
     c42:	21ff      	movs	r1, #255	; 0xff
     c44:	4a03      	ldr	r2, [pc, #12]	; (c54 <TC5_Handler+0x20>)
     c46:	7391      	strb	r1, [r2, #14]
    ATOMIC_SECTION_LEAVE
     c48:	f383 8810 	msr	PRIMASK, r3
}
     c4c:	4770      	bx	lr
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	20001fd0 	.word	0x20001fd0
     c54:	42003400 	.word	0x42003400

00000c58 <TC4_Handler>:

void TC4_Handler(void) {
    retrieveSample = true;
     c58:	2201      	movs	r2, #1
     c5a:	4b03      	ldr	r3, [pc, #12]	; (c68 <TC4_Handler+0x10>)
     c5c:	701a      	strb	r2, [r3, #0]
    TC4->COUNT16.INTFLAG.reg = 0XFF;
     c5e:	32fe      	adds	r2, #254	; 0xfe
     c60:	4b02      	ldr	r3, [pc, #8]	; (c6c <TC4_Handler+0x14>)
     c62:	739a      	strb	r2, [r3, #14]
}
     c64:	4770      	bx	lr
     c66:	46c0      	nop			; (mov r8, r8)
     c68:	2000102c 	.word	0x2000102c
     c6c:	42003000 	.word	0x42003000

00000c70 <main>:


volatile uint32_t counter = 0;

int main(void) {
     c70:	b5f0      	push	{r4, r5, r6, r7, lr}
     c72:	b095      	sub	sp, #84	; 0x54
    // SystemInit();
    SaLDelayInit();
     c74:	4b32      	ldr	r3, [pc, #200]	; (d40 <main+0xd0>)
     c76:	4798      	blx	r3
    SalGclkInit();
     c78:	4b32      	ldr	r3, [pc, #200]	; (d44 <main+0xd4>)
     c7a:	4798      	blx	r3
    SaLRtcInit();
     c7c:	4b32      	ldr	r3, [pc, #200]	; (d48 <main+0xd8>)
     c7e:	4798      	blx	r3
    PinConfig();
     c80:	4b32      	ldr	r3, [pc, #200]	; (d4c <main+0xdc>)
     c82:	4798      	blx	r3
    uart_init(9600);
     c84:	2096      	movs	r0, #150	; 0x96
     c86:	0180      	lsls	r0, r0, #6
     c88:	4b31      	ldr	r3, [pc, #196]	; (d50 <main+0xe0>)
     c8a:	4798      	blx	r3
    SaLTC4Init();
     c8c:	4b31      	ldr	r3, [pc, #196]	; (d54 <main+0xe4>)
     c8e:	4798      	blx	r3
    struct AccelerometerModule myAccelerometer;
    struct BarometerModule myBarometer;
    struct AltimeterModule myAltimeter;
    struct sample currentSample;

    SaLSyncUsartIo(&USART_0, &UsartIoModule);
     c90:	4831      	ldr	r0, [pc, #196]	; (d58 <main+0xe8>)
     c92:	a913      	add	r1, sp, #76	; 0x4c
     c94:	4b31      	ldr	r3, [pc, #196]	; (d5c <main+0xec>)
     c96:	4798      	blx	r3
    initAccelerometer(&myAccelerometer);
     c98:	a80d      	add	r0, sp, #52	; 0x34
     c9a:	4b31      	ldr	r3, [pc, #196]	; (d60 <main+0xf0>)
     c9c:	4798      	blx	r3
    initBarometer(&myBarometer);
     c9e:	a809      	add	r0, sp, #36	; 0x24
     ca0:	4b30      	ldr	r3, [pc, #192]	; (d64 <main+0xf4>)
     ca2:	4798      	blx	r3
    getAccelEvent(&myAccelerometer);
     ca4:	a80d      	add	r0, sp, #52	; 0x34
     ca6:	4b30      	ldr	r3, [pc, #192]	; (d68 <main+0xf8>)
     ca8:	4798      	blx	r3
    myAltimeter.myAltimetersGps = &myGPS;

    //startUpTone();

    //uint32_t index = 0;
    volatile uint32_t milliseconds = 0;
     caa:	2300      	movs	r3, #0
     cac:	9308      	str	r3, [sp, #32]
     cae:	2464      	movs	r4, #100	; 0x64
    uint8_t message[255];

    struct sVar groundHeight;

    for (uint8_t i = 0; i < 100; i++) {
        getMS5607PressureSlow(&myBarometer);
     cb0:	4e2e      	ldr	r6, [pc, #184]	; (d6c <main+0xfc>)
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
     cb2:	4d2f      	ldr	r5, [pc, #188]	; (d70 <main+0x100>)
    uint8_t message[255];

    struct sVar groundHeight;

    for (uint8_t i = 0; i < 100; i++) {
        getMS5607PressureSlow(&myBarometer);
     cb4:	a809      	add	r0, sp, #36	; 0x24
     cb6:	47b0      	blx	r6
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
     cb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     cba:	9301      	str	r3, [sp, #4]
     cbc:	a805      	add	r0, sp, #20
     cbe:	1c19      	adds	r1, r3, #0
     cc0:	47a8      	blx	r5
     cc2:	3c01      	subs	r4, #1
     cc4:	b2e4      	uxtb	r4, r4

    uint8_t message[255];

    struct sVar groundHeight;

    for (uint8_t i = 0; i < 100; i++) {
     cc6:	2c00      	cmp	r4, #0
     cc8:	d1f4      	bne.n	cb4 <main+0x44>
        getMS5607PressureSlow(&myBarometer);
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
    }
    volatile uint32_t variance = GetVariance(&groundHeight,&groundHeight.mean);
     cca:	a805      	add	r0, sp, #20
     ccc:	1c01      	adds	r1, r0, #0
     cce:	4b29      	ldr	r3, [pc, #164]	; (d74 <main+0x104>)
     cd0:	4798      	blx	r3
     cd2:	9004      	str	r0, [sp, #16]
     cd4:	34c8      	adds	r4, #200	; 0xc8


    for (uint8_t i = 0; i < 200; i++) {
        getMS5607PressureSlow(&myBarometer);
     cd6:	4e25      	ldr	r6, [pc, #148]	; (d6c <main+0xfc>)
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
     cd8:	4d25      	ldr	r5, [pc, #148]	; (d70 <main+0x100>)
    }
    volatile uint32_t variance = GetVariance(&groundHeight,&groundHeight.mean);


    for (uint8_t i = 0; i < 200; i++) {
        getMS5607PressureSlow(&myBarometer);
     cda:	a809      	add	r0, sp, #36	; 0x24
     cdc:	47b0      	blx	r6
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);
     cde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     ce0:	9301      	str	r3, [sp, #4]
     ce2:	a805      	add	r0, sp, #20
     ce4:	1c19      	adds	r1, r3, #0
     ce6:	47a8      	blx	r5
     ce8:	3c01      	subs	r4, #1
     cea:	b2e4      	uxtb	r4, r4
        addSampleToVariance(&groundHeight,tempheight);
    }
    volatile uint32_t variance = GetVariance(&groundHeight,&groundHeight.mean);


    for (uint8_t i = 0; i < 200; i++) {
     cec:	2c00      	cmp	r4, #0
     cee:	d1f4      	bne.n	cda <main+0x6a>
        uint32_t tempheight = myBarometer.currentAltInFt;
        addSampleToVariance(&groundHeight,tempheight);

    }

    volatile int32_t groundAlt = groundHeight.mean;
     cf0:	9b05      	ldr	r3, [sp, #20]
     cf2:	9303      	str	r3, [sp, #12]
    variance = GetVariance(&groundHeight,&groundHeight.mean);
     cf4:	a805      	add	r0, sp, #20
     cf6:	1c01      	adds	r1, r0, #0
     cf8:	4b1e      	ldr	r3, [pc, #120]	; (d74 <main+0x104>)
     cfa:	4798      	blx	r3
     cfc:	9004      	str	r0, [sp, #16]

    uint32_t lasttime = millis();
     cfe:	4b1e      	ldr	r3, [pc, #120]	; (d78 <main+0x108>)
     d00:	4798      	blx	r3
    volatile uint16_t mil;
    volatile uint16_t mil2;

    while (1) {

        counter++;
     d02:	4c1e      	ldr	r4, [pc, #120]	; (d7c <main+0x10c>)

                if (retrieveSample) {

        			*/

        getMS5607PressureSlow(&myBarometer);
     d04:	4e19      	ldr	r6, [pc, #100]	; (d6c <main+0xfc>)
       // currentHeight[index2] = groundAlt - myBarometer.currentAltInFt;

        getAccelEvent(myAltimeter.myAltimetersAccelerometer);
     d06:	4d18      	ldr	r5, [pc, #96]	; (d68 <main+0xf8>)
    volatile uint16_t mil;
    volatile uint16_t mil2;

    while (1) {

        counter++;
     d08:	6823      	ldr	r3, [r4, #0]
     d0a:	3301      	adds	r3, #1
     d0c:	6023      	str	r3, [r4, #0]

                if (retrieveSample) {

        			*/

        getMS5607PressureSlow(&myBarometer);
     d0e:	a809      	add	r0, sp, #36	; 0x24
     d10:	47b0      	blx	r6
       // currentHeight[index2] = groundAlt - myBarometer.currentAltInFt;

        getAccelEvent(myAltimeter.myAltimetersAccelerometer);
     d12:	a80d      	add	r0, sp, #52	; 0x34
     d14:	47a8      	blx	r5
      //  accelDataX[index2] = myAccelerometer.acceleration.Xf;
      //  accelDataY[index2] = myAccelerometer.acceleration.Yf;
      //  accelDataZ[index2] = myAccelerometer.acceleration.Zf;
   //     retrieveSample = false;
        index2++;
     d16:	4a1a      	ldr	r2, [pc, #104]	; (d80 <main+0x110>)
     d18:	6813      	ldr	r3, [r2, #0]
     d1a:	3301      	adds	r3, #1
     d1c:	6013      	str	r3, [r2, #0]


        if (index2 > 1000) {
     d1e:	22fa      	movs	r2, #250	; 0xfa
     d20:	0092      	lsls	r2, r2, #2
     d22:	4293      	cmp	r3, r2
     d24:	d9f0      	bls.n	d08 <main+0x98>
            index2 = 0;
     d26:	2200      	movs	r2, #0
     d28:	4b15      	ldr	r3, [pc, #84]	; (d80 <main+0x110>)
     d2a:	601a      	str	r2, [r3, #0]
            mil = millis();
     d2c:	4f12      	ldr	r7, [pc, #72]	; (d78 <main+0x108>)
     d2e:	47b8      	blx	r7
     d30:	b280      	uxth	r0, r0
     d32:	ab02      	add	r3, sp, #8
     d34:	8058      	strh	r0, [r3, #2]
            mil2 = millis();
     d36:	47b8      	blx	r7
     d38:	b280      	uxth	r0, r0
     d3a:	ab02      	add	r3, sp, #8
     d3c:	8018      	strh	r0, [r3, #0]
     d3e:	e7e3      	b.n	d08 <main+0x98>
     d40:	00000855 	.word	0x00000855
     d44:	00000655 	.word	0x00000655
     d48:	00000771 	.word	0x00000771
     d4c:	00000bf5 	.word	0x00000bf5
     d50:	0000094d 	.word	0x0000094d
     d54:	00000739 	.word	0x00000739
     d58:	2000007c 	.word	0x2000007c
     d5c:	00000a3d 	.word	0x00000a3d
     d60:	00000345 	.word	0x00000345
     d64:	000004bd 	.word	0x000004bd
     d68:	000003dd 	.word	0x000003dd
     d6c:	00000545 	.word	0x00000545
     d70:	000008a1 	.word	0x000008a1
     d74:	000008d1 	.word	0x000008d1
     d78:	00000819 	.word	0x00000819
     d7c:	20000028 	.word	0x20000028
     d80:	20001fd0 	.word	0x20001fd0

00000d84 <__libc_init_array>:
     d84:	4b0e      	ldr	r3, [pc, #56]	; (dc0 <__libc_init_array+0x3c>)
     d86:	b570      	push	{r4, r5, r6, lr}
     d88:	2500      	movs	r5, #0
     d8a:	1c1e      	adds	r6, r3, #0
     d8c:	4c0d      	ldr	r4, [pc, #52]	; (dc4 <__libc_init_array+0x40>)
     d8e:	1ae4      	subs	r4, r4, r3
     d90:	10a4      	asrs	r4, r4, #2
     d92:	42a5      	cmp	r5, r4
     d94:	d004      	beq.n	da0 <__libc_init_array+0x1c>
     d96:	00ab      	lsls	r3, r5, #2
     d98:	58f3      	ldr	r3, [r6, r3]
     d9a:	4798      	blx	r3
     d9c:	3501      	adds	r5, #1
     d9e:	e7f8      	b.n	d92 <__libc_init_array+0xe>
     da0:	f000 ff76 	bl	1c90 <_init>
     da4:	4b08      	ldr	r3, [pc, #32]	; (dc8 <__libc_init_array+0x44>)
     da6:	2500      	movs	r5, #0
     da8:	1c1e      	adds	r6, r3, #0
     daa:	4c08      	ldr	r4, [pc, #32]	; (dcc <__libc_init_array+0x48>)
     dac:	1ae4      	subs	r4, r4, r3
     dae:	10a4      	asrs	r4, r4, #2
     db0:	42a5      	cmp	r5, r4
     db2:	d004      	beq.n	dbe <__libc_init_array+0x3a>
     db4:	00ab      	lsls	r3, r5, #2
     db6:	58f3      	ldr	r3, [r6, r3]
     db8:	4798      	blx	r3
     dba:	3501      	adds	r5, #1
     dbc:	e7f8      	b.n	db0 <__libc_init_array+0x2c>
     dbe:	bd70      	pop	{r4, r5, r6, pc}
     dc0:	00001c9c 	.word	0x00001c9c
     dc4:	00001c9c 	.word	0x00001c9c
     dc8:	00001c9c 	.word	0x00001c9c
     dcc:	00001ca0 	.word	0x00001ca0

00000dd0 <__aeabi_idiv>:
     dd0:	4603      	mov	r3, r0
     dd2:	430b      	orrs	r3, r1
     dd4:	d47f      	bmi.n	ed6 <__aeabi_idiv+0x106>
     dd6:	2200      	movs	r2, #0
     dd8:	0843      	lsrs	r3, r0, #1
     dda:	428b      	cmp	r3, r1
     ddc:	d374      	bcc.n	ec8 <__aeabi_idiv+0xf8>
     dde:	0903      	lsrs	r3, r0, #4
     de0:	428b      	cmp	r3, r1
     de2:	d35f      	bcc.n	ea4 <__aeabi_idiv+0xd4>
     de4:	0a03      	lsrs	r3, r0, #8
     de6:	428b      	cmp	r3, r1
     de8:	d344      	bcc.n	e74 <__aeabi_idiv+0xa4>
     dea:	0b03      	lsrs	r3, r0, #12
     dec:	428b      	cmp	r3, r1
     dee:	d328      	bcc.n	e42 <__aeabi_idiv+0x72>
     df0:	0c03      	lsrs	r3, r0, #16
     df2:	428b      	cmp	r3, r1
     df4:	d30d      	bcc.n	e12 <__aeabi_idiv+0x42>
     df6:	22ff      	movs	r2, #255	; 0xff
     df8:	0209      	lsls	r1, r1, #8
     dfa:	ba12      	rev	r2, r2
     dfc:	0c03      	lsrs	r3, r0, #16
     dfe:	428b      	cmp	r3, r1
     e00:	d302      	bcc.n	e08 <__aeabi_idiv+0x38>
     e02:	1212      	asrs	r2, r2, #8
     e04:	0209      	lsls	r1, r1, #8
     e06:	d065      	beq.n	ed4 <__aeabi_idiv+0x104>
     e08:	0b03      	lsrs	r3, r0, #12
     e0a:	428b      	cmp	r3, r1
     e0c:	d319      	bcc.n	e42 <__aeabi_idiv+0x72>
     e0e:	e000      	b.n	e12 <__aeabi_idiv+0x42>
     e10:	0a09      	lsrs	r1, r1, #8
     e12:	0bc3      	lsrs	r3, r0, #15
     e14:	428b      	cmp	r3, r1
     e16:	d301      	bcc.n	e1c <__aeabi_idiv+0x4c>
     e18:	03cb      	lsls	r3, r1, #15
     e1a:	1ac0      	subs	r0, r0, r3
     e1c:	4152      	adcs	r2, r2
     e1e:	0b83      	lsrs	r3, r0, #14
     e20:	428b      	cmp	r3, r1
     e22:	d301      	bcc.n	e28 <__aeabi_idiv+0x58>
     e24:	038b      	lsls	r3, r1, #14
     e26:	1ac0      	subs	r0, r0, r3
     e28:	4152      	adcs	r2, r2
     e2a:	0b43      	lsrs	r3, r0, #13
     e2c:	428b      	cmp	r3, r1
     e2e:	d301      	bcc.n	e34 <__aeabi_idiv+0x64>
     e30:	034b      	lsls	r3, r1, #13
     e32:	1ac0      	subs	r0, r0, r3
     e34:	4152      	adcs	r2, r2
     e36:	0b03      	lsrs	r3, r0, #12
     e38:	428b      	cmp	r3, r1
     e3a:	d301      	bcc.n	e40 <__aeabi_idiv+0x70>
     e3c:	030b      	lsls	r3, r1, #12
     e3e:	1ac0      	subs	r0, r0, r3
     e40:	4152      	adcs	r2, r2
     e42:	0ac3      	lsrs	r3, r0, #11
     e44:	428b      	cmp	r3, r1
     e46:	d301      	bcc.n	e4c <__aeabi_idiv+0x7c>
     e48:	02cb      	lsls	r3, r1, #11
     e4a:	1ac0      	subs	r0, r0, r3
     e4c:	4152      	adcs	r2, r2
     e4e:	0a83      	lsrs	r3, r0, #10
     e50:	428b      	cmp	r3, r1
     e52:	d301      	bcc.n	e58 <__aeabi_idiv+0x88>
     e54:	028b      	lsls	r3, r1, #10
     e56:	1ac0      	subs	r0, r0, r3
     e58:	4152      	adcs	r2, r2
     e5a:	0a43      	lsrs	r3, r0, #9
     e5c:	428b      	cmp	r3, r1
     e5e:	d301      	bcc.n	e64 <__aeabi_idiv+0x94>
     e60:	024b      	lsls	r3, r1, #9
     e62:	1ac0      	subs	r0, r0, r3
     e64:	4152      	adcs	r2, r2
     e66:	0a03      	lsrs	r3, r0, #8
     e68:	428b      	cmp	r3, r1
     e6a:	d301      	bcc.n	e70 <__aeabi_idiv+0xa0>
     e6c:	020b      	lsls	r3, r1, #8
     e6e:	1ac0      	subs	r0, r0, r3
     e70:	4152      	adcs	r2, r2
     e72:	d2cd      	bcs.n	e10 <__aeabi_idiv+0x40>
     e74:	09c3      	lsrs	r3, r0, #7
     e76:	428b      	cmp	r3, r1
     e78:	d301      	bcc.n	e7e <__aeabi_idiv+0xae>
     e7a:	01cb      	lsls	r3, r1, #7
     e7c:	1ac0      	subs	r0, r0, r3
     e7e:	4152      	adcs	r2, r2
     e80:	0983      	lsrs	r3, r0, #6
     e82:	428b      	cmp	r3, r1
     e84:	d301      	bcc.n	e8a <__aeabi_idiv+0xba>
     e86:	018b      	lsls	r3, r1, #6
     e88:	1ac0      	subs	r0, r0, r3
     e8a:	4152      	adcs	r2, r2
     e8c:	0943      	lsrs	r3, r0, #5
     e8e:	428b      	cmp	r3, r1
     e90:	d301      	bcc.n	e96 <__aeabi_idiv+0xc6>
     e92:	014b      	lsls	r3, r1, #5
     e94:	1ac0      	subs	r0, r0, r3
     e96:	4152      	adcs	r2, r2
     e98:	0903      	lsrs	r3, r0, #4
     e9a:	428b      	cmp	r3, r1
     e9c:	d301      	bcc.n	ea2 <__aeabi_idiv+0xd2>
     e9e:	010b      	lsls	r3, r1, #4
     ea0:	1ac0      	subs	r0, r0, r3
     ea2:	4152      	adcs	r2, r2
     ea4:	08c3      	lsrs	r3, r0, #3
     ea6:	428b      	cmp	r3, r1
     ea8:	d301      	bcc.n	eae <__aeabi_idiv+0xde>
     eaa:	00cb      	lsls	r3, r1, #3
     eac:	1ac0      	subs	r0, r0, r3
     eae:	4152      	adcs	r2, r2
     eb0:	0883      	lsrs	r3, r0, #2
     eb2:	428b      	cmp	r3, r1
     eb4:	d301      	bcc.n	eba <__aeabi_idiv+0xea>
     eb6:	008b      	lsls	r3, r1, #2
     eb8:	1ac0      	subs	r0, r0, r3
     eba:	4152      	adcs	r2, r2
     ebc:	0843      	lsrs	r3, r0, #1
     ebe:	428b      	cmp	r3, r1
     ec0:	d301      	bcc.n	ec6 <__aeabi_idiv+0xf6>
     ec2:	004b      	lsls	r3, r1, #1
     ec4:	1ac0      	subs	r0, r0, r3
     ec6:	4152      	adcs	r2, r2
     ec8:	1a41      	subs	r1, r0, r1
     eca:	d200      	bcs.n	ece <__aeabi_idiv+0xfe>
     ecc:	4601      	mov	r1, r0
     ece:	4152      	adcs	r2, r2
     ed0:	4610      	mov	r0, r2
     ed2:	4770      	bx	lr
     ed4:	e05d      	b.n	f92 <__aeabi_idiv+0x1c2>
     ed6:	0fca      	lsrs	r2, r1, #31
     ed8:	d000      	beq.n	edc <__aeabi_idiv+0x10c>
     eda:	4249      	negs	r1, r1
     edc:	1003      	asrs	r3, r0, #32
     ede:	d300      	bcc.n	ee2 <__aeabi_idiv+0x112>
     ee0:	4240      	negs	r0, r0
     ee2:	4053      	eors	r3, r2
     ee4:	2200      	movs	r2, #0
     ee6:	469c      	mov	ip, r3
     ee8:	0903      	lsrs	r3, r0, #4
     eea:	428b      	cmp	r3, r1
     eec:	d32d      	bcc.n	f4a <__aeabi_idiv+0x17a>
     eee:	0a03      	lsrs	r3, r0, #8
     ef0:	428b      	cmp	r3, r1
     ef2:	d312      	bcc.n	f1a <__aeabi_idiv+0x14a>
     ef4:	22fc      	movs	r2, #252	; 0xfc
     ef6:	0189      	lsls	r1, r1, #6
     ef8:	ba12      	rev	r2, r2
     efa:	0a03      	lsrs	r3, r0, #8
     efc:	428b      	cmp	r3, r1
     efe:	d30c      	bcc.n	f1a <__aeabi_idiv+0x14a>
     f00:	0189      	lsls	r1, r1, #6
     f02:	1192      	asrs	r2, r2, #6
     f04:	428b      	cmp	r3, r1
     f06:	d308      	bcc.n	f1a <__aeabi_idiv+0x14a>
     f08:	0189      	lsls	r1, r1, #6
     f0a:	1192      	asrs	r2, r2, #6
     f0c:	428b      	cmp	r3, r1
     f0e:	d304      	bcc.n	f1a <__aeabi_idiv+0x14a>
     f10:	0189      	lsls	r1, r1, #6
     f12:	d03a      	beq.n	f8a <__aeabi_idiv+0x1ba>
     f14:	1192      	asrs	r2, r2, #6
     f16:	e000      	b.n	f1a <__aeabi_idiv+0x14a>
     f18:	0989      	lsrs	r1, r1, #6
     f1a:	09c3      	lsrs	r3, r0, #7
     f1c:	428b      	cmp	r3, r1
     f1e:	d301      	bcc.n	f24 <__aeabi_idiv+0x154>
     f20:	01cb      	lsls	r3, r1, #7
     f22:	1ac0      	subs	r0, r0, r3
     f24:	4152      	adcs	r2, r2
     f26:	0983      	lsrs	r3, r0, #6
     f28:	428b      	cmp	r3, r1
     f2a:	d301      	bcc.n	f30 <__aeabi_idiv+0x160>
     f2c:	018b      	lsls	r3, r1, #6
     f2e:	1ac0      	subs	r0, r0, r3
     f30:	4152      	adcs	r2, r2
     f32:	0943      	lsrs	r3, r0, #5
     f34:	428b      	cmp	r3, r1
     f36:	d301      	bcc.n	f3c <__aeabi_idiv+0x16c>
     f38:	014b      	lsls	r3, r1, #5
     f3a:	1ac0      	subs	r0, r0, r3
     f3c:	4152      	adcs	r2, r2
     f3e:	0903      	lsrs	r3, r0, #4
     f40:	428b      	cmp	r3, r1
     f42:	d301      	bcc.n	f48 <__aeabi_idiv+0x178>
     f44:	010b      	lsls	r3, r1, #4
     f46:	1ac0      	subs	r0, r0, r3
     f48:	4152      	adcs	r2, r2
     f4a:	08c3      	lsrs	r3, r0, #3
     f4c:	428b      	cmp	r3, r1
     f4e:	d301      	bcc.n	f54 <__aeabi_idiv+0x184>
     f50:	00cb      	lsls	r3, r1, #3
     f52:	1ac0      	subs	r0, r0, r3
     f54:	4152      	adcs	r2, r2
     f56:	0883      	lsrs	r3, r0, #2
     f58:	428b      	cmp	r3, r1
     f5a:	d301      	bcc.n	f60 <__aeabi_idiv+0x190>
     f5c:	008b      	lsls	r3, r1, #2
     f5e:	1ac0      	subs	r0, r0, r3
     f60:	4152      	adcs	r2, r2
     f62:	d2d9      	bcs.n	f18 <__aeabi_idiv+0x148>
     f64:	0843      	lsrs	r3, r0, #1
     f66:	428b      	cmp	r3, r1
     f68:	d301      	bcc.n	f6e <__aeabi_idiv+0x19e>
     f6a:	004b      	lsls	r3, r1, #1
     f6c:	1ac0      	subs	r0, r0, r3
     f6e:	4152      	adcs	r2, r2
     f70:	1a41      	subs	r1, r0, r1
     f72:	d200      	bcs.n	f76 <__aeabi_idiv+0x1a6>
     f74:	4601      	mov	r1, r0
     f76:	4663      	mov	r3, ip
     f78:	4152      	adcs	r2, r2
     f7a:	105b      	asrs	r3, r3, #1
     f7c:	4610      	mov	r0, r2
     f7e:	d301      	bcc.n	f84 <__aeabi_idiv+0x1b4>
     f80:	4240      	negs	r0, r0
     f82:	2b00      	cmp	r3, #0
     f84:	d500      	bpl.n	f88 <__aeabi_idiv+0x1b8>
     f86:	4249      	negs	r1, r1
     f88:	4770      	bx	lr
     f8a:	4663      	mov	r3, ip
     f8c:	105b      	asrs	r3, r3, #1
     f8e:	d300      	bcc.n	f92 <__aeabi_idiv+0x1c2>
     f90:	4240      	negs	r0, r0
     f92:	b501      	push	{r0, lr}
     f94:	2000      	movs	r0, #0
     f96:	f000 f80b 	bl	fb0 <__aeabi_idiv0>
     f9a:	bd02      	pop	{r1, pc}

00000f9c <__aeabi_idivmod>:
     f9c:	2900      	cmp	r1, #0
     f9e:	d0f8      	beq.n	f92 <__aeabi_idiv+0x1c2>
     fa0:	b503      	push	{r0, r1, lr}
     fa2:	f7ff ff15 	bl	dd0 <__aeabi_idiv>
     fa6:	bc0e      	pop	{r1, r2, r3}
     fa8:	4342      	muls	r2, r0
     faa:	1a89      	subs	r1, r1, r2
     fac:	4718      	bx	r3
     fae:	46c0      	nop			; (mov r8, r8)

00000fb0 <__aeabi_idiv0>:
     fb0:	4770      	bx	lr
     fb2:	46c0      	nop			; (mov r8, r8)

00000fb4 <__aeabi_uldivmod>:
     fb4:	2b00      	cmp	r3, #0
     fb6:	d111      	bne.n	fdc <__aeabi_uldivmod+0x28>
     fb8:	2a00      	cmp	r2, #0
     fba:	d10f      	bne.n	fdc <__aeabi_uldivmod+0x28>
     fbc:	2900      	cmp	r1, #0
     fbe:	d100      	bne.n	fc2 <__aeabi_uldivmod+0xe>
     fc0:	2800      	cmp	r0, #0
     fc2:	d002      	beq.n	fca <__aeabi_uldivmod+0x16>
     fc4:	2100      	movs	r1, #0
     fc6:	43c9      	mvns	r1, r1
     fc8:	1c08      	adds	r0, r1, #0
     fca:	b407      	push	{r0, r1, r2}
     fcc:	4802      	ldr	r0, [pc, #8]	; (fd8 <__aeabi_uldivmod+0x24>)
     fce:	a102      	add	r1, pc, #8	; (adr r1, fd8 <__aeabi_uldivmod+0x24>)
     fd0:	1840      	adds	r0, r0, r1
     fd2:	9002      	str	r0, [sp, #8]
     fd4:	bd03      	pop	{r0, r1, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	ffffffd9 	.word	0xffffffd9
     fdc:	b403      	push	{r0, r1}
     fde:	4668      	mov	r0, sp
     fe0:	b501      	push	{r0, lr}
     fe2:	9802      	ldr	r0, [sp, #8]
     fe4:	f000 f84c 	bl	1080 <__gnu_uldivmod_helper>
     fe8:	9b01      	ldr	r3, [sp, #4]
     fea:	469e      	mov	lr, r3
     fec:	b002      	add	sp, #8
     fee:	bc0c      	pop	{r2, r3}
     ff0:	4770      	bx	lr
     ff2:	46c0      	nop			; (mov r8, r8)

00000ff4 <__aeabi_lmul>:
     ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff6:	464f      	mov	r7, r9
     ff8:	4646      	mov	r6, r8
     ffa:	0405      	lsls	r5, r0, #16
     ffc:	0c2d      	lsrs	r5, r5, #16
     ffe:	1c2c      	adds	r4, r5, #0
    1000:	b4c0      	push	{r6, r7}
    1002:	0417      	lsls	r7, r2, #16
    1004:	0c16      	lsrs	r6, r2, #16
    1006:	0c3f      	lsrs	r7, r7, #16
    1008:	4699      	mov	r9, r3
    100a:	0c03      	lsrs	r3, r0, #16
    100c:	437c      	muls	r4, r7
    100e:	4375      	muls	r5, r6
    1010:	435f      	muls	r7, r3
    1012:	4373      	muls	r3, r6
    1014:	197d      	adds	r5, r7, r5
    1016:	0c26      	lsrs	r6, r4, #16
    1018:	19ad      	adds	r5, r5, r6
    101a:	469c      	mov	ip, r3
    101c:	42af      	cmp	r7, r5
    101e:	d903      	bls.n	1028 <__aeabi_lmul+0x34>
    1020:	2380      	movs	r3, #128	; 0x80
    1022:	025b      	lsls	r3, r3, #9
    1024:	4698      	mov	r8, r3
    1026:	44c4      	add	ip, r8
    1028:	464b      	mov	r3, r9
    102a:	4351      	muls	r1, r2
    102c:	4343      	muls	r3, r0
    102e:	0424      	lsls	r4, r4, #16
    1030:	0c2e      	lsrs	r6, r5, #16
    1032:	0c24      	lsrs	r4, r4, #16
    1034:	042d      	lsls	r5, r5, #16
    1036:	4466      	add	r6, ip
    1038:	192c      	adds	r4, r5, r4
    103a:	1859      	adds	r1, r3, r1
    103c:	1989      	adds	r1, r1, r6
    103e:	1c20      	adds	r0, r4, #0
    1040:	bc0c      	pop	{r2, r3}
    1042:	4690      	mov	r8, r2
    1044:	4699      	mov	r9, r3
    1046:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001048 <__gnu_ldivmod_helper>:
    1048:	b5f0      	push	{r4, r5, r6, r7, lr}
    104a:	b083      	sub	sp, #12
    104c:	1c16      	adds	r6, r2, #0
    104e:	1c1f      	adds	r7, r3, #0
    1050:	9000      	str	r0, [sp, #0]
    1052:	9101      	str	r1, [sp, #4]
    1054:	f000 fbb2 	bl	17bc <__divdi3>
    1058:	1c04      	adds	r4, r0, #0
    105a:	1c0d      	adds	r5, r1, #0
    105c:	1c22      	adds	r2, r4, #0
    105e:	1c2b      	adds	r3, r5, #0
    1060:	1c30      	adds	r0, r6, #0
    1062:	1c39      	adds	r1, r7, #0
    1064:	f7ff ffc6 	bl	ff4 <__aeabi_lmul>
    1068:	9a00      	ldr	r2, [sp, #0]
    106a:	9b01      	ldr	r3, [sp, #4]
    106c:	1a12      	subs	r2, r2, r0
    106e:	418b      	sbcs	r3, r1
    1070:	9908      	ldr	r1, [sp, #32]
    1072:	1c20      	adds	r0, r4, #0
    1074:	600a      	str	r2, [r1, #0]
    1076:	604b      	str	r3, [r1, #4]
    1078:	1c29      	adds	r1, r5, #0
    107a:	b003      	add	sp, #12
    107c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    107e:	46c0      	nop			; (mov r8, r8)

00001080 <__gnu_uldivmod_helper>:
    1080:	b5f0      	push	{r4, r5, r6, r7, lr}
    1082:	1c14      	adds	r4, r2, #0
    1084:	b083      	sub	sp, #12
    1086:	1c1d      	adds	r5, r3, #0
    1088:	9000      	str	r0, [sp, #0]
    108a:	9101      	str	r1, [sp, #4]
    108c:	f000 fc8e 	bl	19ac <__udivdi3>
    1090:	1c22      	adds	r2, r4, #0
    1092:	1c2b      	adds	r3, r5, #0
    1094:	1c06      	adds	r6, r0, #0
    1096:	1c0f      	adds	r7, r1, #0
    1098:	f7ff ffac 	bl	ff4 <__aeabi_lmul>
    109c:	9a00      	ldr	r2, [sp, #0]
    109e:	9b01      	ldr	r3, [sp, #4]
    10a0:	1a12      	subs	r2, r2, r0
    10a2:	418b      	sbcs	r3, r1
    10a4:	9908      	ldr	r1, [sp, #32]
    10a6:	1c30      	adds	r0, r6, #0
    10a8:	600a      	str	r2, [r1, #0]
    10aa:	604b      	str	r3, [r1, #4]
    10ac:	1c39      	adds	r1, r7, #0
    10ae:	b003      	add	sp, #12
    10b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10b2:	46c0      	nop			; (mov r8, r8)

000010b4 <__aeabi_dmul>:
    10b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10b6:	465f      	mov	r7, fp
    10b8:	4656      	mov	r6, sl
    10ba:	464d      	mov	r5, r9
    10bc:	4644      	mov	r4, r8
    10be:	b4f0      	push	{r4, r5, r6, r7}
    10c0:	1c05      	adds	r5, r0, #0
    10c2:	1c06      	adds	r6, r0, #0
    10c4:	0308      	lsls	r0, r1, #12
    10c6:	b087      	sub	sp, #28
    10c8:	4699      	mov	r9, r3
    10ca:	004f      	lsls	r7, r1, #1
    10cc:	0b03      	lsrs	r3, r0, #12
    10ce:	0fcc      	lsrs	r4, r1, #31
    10d0:	4692      	mov	sl, r2
    10d2:	469b      	mov	fp, r3
    10d4:	0d7f      	lsrs	r7, r7, #21
    10d6:	9401      	str	r4, [sp, #4]
    10d8:	d067      	beq.n	11aa <__aeabi_dmul+0xf6>
    10da:	4b6c      	ldr	r3, [pc, #432]	; (128c <__aeabi_dmul+0x1d8>)
    10dc:	429f      	cmp	r7, r3
    10de:	d036      	beq.n	114e <__aeabi_dmul+0x9a>
    10e0:	2080      	movs	r0, #128	; 0x80
    10e2:	465b      	mov	r3, fp
    10e4:	0340      	lsls	r0, r0, #13
    10e6:	4318      	orrs	r0, r3
    10e8:	00c0      	lsls	r0, r0, #3
    10ea:	0f6b      	lsrs	r3, r5, #29
    10ec:	4318      	orrs	r0, r3
    10ee:	4b68      	ldr	r3, [pc, #416]	; (1290 <__aeabi_dmul+0x1dc>)
    10f0:	4683      	mov	fp, r0
    10f2:	469c      	mov	ip, r3
    10f4:	2300      	movs	r3, #0
    10f6:	4698      	mov	r8, r3
    10f8:	00ee      	lsls	r6, r5, #3
    10fa:	4467      	add	r7, ip
    10fc:	9300      	str	r3, [sp, #0]
    10fe:	464b      	mov	r3, r9
    1100:	4649      	mov	r1, r9
    1102:	031d      	lsls	r5, r3, #12
    1104:	0fc9      	lsrs	r1, r1, #31
    1106:	005b      	lsls	r3, r3, #1
    1108:	4652      	mov	r2, sl
    110a:	0b2d      	lsrs	r5, r5, #12
    110c:	0d5b      	lsrs	r3, r3, #21
    110e:	4689      	mov	r9, r1
    1110:	d100      	bne.n	1114 <__aeabi_dmul+0x60>
    1112:	e06e      	b.n	11f2 <__aeabi_dmul+0x13e>
    1114:	495d      	ldr	r1, [pc, #372]	; (128c <__aeabi_dmul+0x1d8>)
    1116:	428b      	cmp	r3, r1
    1118:	d064      	beq.n	11e4 <__aeabi_dmul+0x130>
    111a:	2080      	movs	r0, #128	; 0x80
    111c:	495c      	ldr	r1, [pc, #368]	; (1290 <__aeabi_dmul+0x1dc>)
    111e:	0340      	lsls	r0, r0, #13
    1120:	468c      	mov	ip, r1
    1122:	2100      	movs	r1, #0
    1124:	4305      	orrs	r5, r0
    1126:	00ed      	lsls	r5, r5, #3
    1128:	0f50      	lsrs	r0, r2, #29
    112a:	4305      	orrs	r5, r0
    112c:	00d2      	lsls	r2, r2, #3
    112e:	4463      	add	r3, ip
    1130:	4648      	mov	r0, r9
    1132:	18ff      	adds	r7, r7, r3
    1134:	1c7b      	adds	r3, r7, #1
    1136:	469a      	mov	sl, r3
    1138:	9b00      	ldr	r3, [sp, #0]
    113a:	4060      	eors	r0, r4
    113c:	9002      	str	r0, [sp, #8]
    113e:	430b      	orrs	r3, r1
    1140:	2b0f      	cmp	r3, #15
    1142:	d900      	bls.n	1146 <__aeabi_dmul+0x92>
    1144:	e0ac      	b.n	12a0 <__aeabi_dmul+0x1ec>
    1146:	4853      	ldr	r0, [pc, #332]	; (1294 <__aeabi_dmul+0x1e0>)
    1148:	009b      	lsls	r3, r3, #2
    114a:	58c3      	ldr	r3, [r0, r3]
    114c:	469f      	mov	pc, r3
    114e:	465b      	mov	r3, fp
    1150:	431d      	orrs	r5, r3
    1152:	d000      	beq.n	1156 <__aeabi_dmul+0xa2>
    1154:	e082      	b.n	125c <__aeabi_dmul+0x1a8>
    1156:	2308      	movs	r3, #8
    1158:	9300      	str	r3, [sp, #0]
    115a:	2300      	movs	r3, #0
    115c:	469b      	mov	fp, r3
    115e:	3302      	adds	r3, #2
    1160:	2600      	movs	r6, #0
    1162:	4698      	mov	r8, r3
    1164:	e7cb      	b.n	10fe <__aeabi_dmul+0x4a>
    1166:	9b02      	ldr	r3, [sp, #8]
    1168:	9301      	str	r3, [sp, #4]
    116a:	4643      	mov	r3, r8
    116c:	2b02      	cmp	r3, #2
    116e:	d159      	bne.n	1224 <__aeabi_dmul+0x170>
    1170:	2401      	movs	r4, #1
    1172:	2500      	movs	r5, #0
    1174:	2600      	movs	r6, #0
    1176:	9b01      	ldr	r3, [sp, #4]
    1178:	401c      	ands	r4, r3
    117a:	4b44      	ldr	r3, [pc, #272]	; (128c <__aeabi_dmul+0x1d8>)
    117c:	2100      	movs	r1, #0
    117e:	032d      	lsls	r5, r5, #12
    1180:	0d0a      	lsrs	r2, r1, #20
    1182:	0512      	lsls	r2, r2, #20
    1184:	0b2d      	lsrs	r5, r5, #12
    1186:	4315      	orrs	r5, r2
    1188:	4a43      	ldr	r2, [pc, #268]	; (1298 <__aeabi_dmul+0x1e4>)
    118a:	051b      	lsls	r3, r3, #20
    118c:	4015      	ands	r5, r2
    118e:	431d      	orrs	r5, r3
    1190:	006d      	lsls	r5, r5, #1
    1192:	07e4      	lsls	r4, r4, #31
    1194:	086d      	lsrs	r5, r5, #1
    1196:	4325      	orrs	r5, r4
    1198:	1c30      	adds	r0, r6, #0
    119a:	1c29      	adds	r1, r5, #0
    119c:	b007      	add	sp, #28
    119e:	bc3c      	pop	{r2, r3, r4, r5}
    11a0:	4690      	mov	r8, r2
    11a2:	4699      	mov	r9, r3
    11a4:	46a2      	mov	sl, r4
    11a6:	46ab      	mov	fp, r5
    11a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11aa:	432b      	orrs	r3, r5
    11ac:	d04e      	beq.n	124c <__aeabi_dmul+0x198>
    11ae:	465b      	mov	r3, fp
    11b0:	2b00      	cmp	r3, #0
    11b2:	d100      	bne.n	11b6 <__aeabi_dmul+0x102>
    11b4:	e185      	b.n	14c2 <__aeabi_dmul+0x40e>
    11b6:	4658      	mov	r0, fp
    11b8:	f000 fae2 	bl	1780 <__clzsi2>
    11bc:	1c02      	adds	r2, r0, #0
    11be:	2328      	movs	r3, #40	; 0x28
    11c0:	1c29      	adds	r1, r5, #0
    11c2:	1a9b      	subs	r3, r3, r2
    11c4:	1c16      	adds	r6, r2, #0
    11c6:	4658      	mov	r0, fp
    11c8:	40d9      	lsrs	r1, r3
    11ca:	3e08      	subs	r6, #8
    11cc:	40b0      	lsls	r0, r6
    11ce:	1c0b      	adds	r3, r1, #0
    11d0:	40b5      	lsls	r5, r6
    11d2:	4303      	orrs	r3, r0
    11d4:	469b      	mov	fp, r3
    11d6:	1c2e      	adds	r6, r5, #0
    11d8:	2300      	movs	r3, #0
    11da:	4f30      	ldr	r7, [pc, #192]	; (129c <__aeabi_dmul+0x1e8>)
    11dc:	9300      	str	r3, [sp, #0]
    11de:	1abf      	subs	r7, r7, r2
    11e0:	4698      	mov	r8, r3
    11e2:	e78c      	b.n	10fe <__aeabi_dmul+0x4a>
    11e4:	4651      	mov	r1, sl
    11e6:	4329      	orrs	r1, r5
    11e8:	d12e      	bne.n	1248 <__aeabi_dmul+0x194>
    11ea:	2500      	movs	r5, #0
    11ec:	2200      	movs	r2, #0
    11ee:	2102      	movs	r1, #2
    11f0:	e79e      	b.n	1130 <__aeabi_dmul+0x7c>
    11f2:	4651      	mov	r1, sl
    11f4:	4329      	orrs	r1, r5
    11f6:	d023      	beq.n	1240 <__aeabi_dmul+0x18c>
    11f8:	2d00      	cmp	r5, #0
    11fa:	d100      	bne.n	11fe <__aeabi_dmul+0x14a>
    11fc:	e154      	b.n	14a8 <__aeabi_dmul+0x3f4>
    11fe:	1c28      	adds	r0, r5, #0
    1200:	f000 fabe 	bl	1780 <__clzsi2>
    1204:	1c03      	adds	r3, r0, #0
    1206:	2128      	movs	r1, #40	; 0x28
    1208:	4650      	mov	r0, sl
    120a:	1ac9      	subs	r1, r1, r3
    120c:	1c1a      	adds	r2, r3, #0
    120e:	40c8      	lsrs	r0, r1
    1210:	4651      	mov	r1, sl
    1212:	3a08      	subs	r2, #8
    1214:	4091      	lsls	r1, r2
    1216:	4095      	lsls	r5, r2
    1218:	1c0a      	adds	r2, r1, #0
    121a:	4305      	orrs	r5, r0
    121c:	481f      	ldr	r0, [pc, #124]	; (129c <__aeabi_dmul+0x1e8>)
    121e:	2100      	movs	r1, #0
    1220:	1ac3      	subs	r3, r0, r3
    1222:	e785      	b.n	1130 <__aeabi_dmul+0x7c>
    1224:	2b03      	cmp	r3, #3
    1226:	d100      	bne.n	122a <__aeabi_dmul+0x176>
    1228:	e1c2      	b.n	15b0 <__aeabi_dmul+0x4fc>
    122a:	2b01      	cmp	r3, #1
    122c:	d000      	beq.n	1230 <__aeabi_dmul+0x17c>
    122e:	e16d      	b.n	150c <__aeabi_dmul+0x458>
    1230:	4644      	mov	r4, r8
    1232:	9b01      	ldr	r3, [sp, #4]
    1234:	2500      	movs	r5, #0
    1236:	401c      	ands	r4, r3
    1238:	b2e4      	uxtb	r4, r4
    123a:	2300      	movs	r3, #0
    123c:	2600      	movs	r6, #0
    123e:	e79d      	b.n	117c <__aeabi_dmul+0xc8>
    1240:	2500      	movs	r5, #0
    1242:	2200      	movs	r2, #0
    1244:	2101      	movs	r1, #1
    1246:	e773      	b.n	1130 <__aeabi_dmul+0x7c>
    1248:	2103      	movs	r1, #3
    124a:	e771      	b.n	1130 <__aeabi_dmul+0x7c>
    124c:	2304      	movs	r3, #4
    124e:	9300      	str	r3, [sp, #0]
    1250:	2300      	movs	r3, #0
    1252:	469b      	mov	fp, r3
    1254:	3301      	adds	r3, #1
    1256:	2600      	movs	r6, #0
    1258:	4698      	mov	r8, r3
    125a:	e750      	b.n	10fe <__aeabi_dmul+0x4a>
    125c:	230c      	movs	r3, #12
    125e:	9300      	str	r3, [sp, #0]
    1260:	3b09      	subs	r3, #9
    1262:	4698      	mov	r8, r3
    1264:	e74b      	b.n	10fe <__aeabi_dmul+0x4a>
    1266:	2580      	movs	r5, #128	; 0x80
    1268:	2400      	movs	r4, #0
    126a:	032d      	lsls	r5, r5, #12
    126c:	2600      	movs	r6, #0
    126e:	4b07      	ldr	r3, [pc, #28]	; (128c <__aeabi_dmul+0x1d8>)
    1270:	e784      	b.n	117c <__aeabi_dmul+0xc8>
    1272:	464b      	mov	r3, r9
    1274:	46ab      	mov	fp, r5
    1276:	1c16      	adds	r6, r2, #0
    1278:	9301      	str	r3, [sp, #4]
    127a:	4688      	mov	r8, r1
    127c:	e775      	b.n	116a <__aeabi_dmul+0xb6>
    127e:	9b02      	ldr	r3, [sp, #8]
    1280:	46ab      	mov	fp, r5
    1282:	1c16      	adds	r6, r2, #0
    1284:	9301      	str	r3, [sp, #4]
    1286:	4688      	mov	r8, r1
    1288:	e76f      	b.n	116a <__aeabi_dmul+0xb6>
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	000007ff 	.word	0x000007ff
    1290:	fffffc01 	.word	0xfffffc01
    1294:	00001c50 	.word	0x00001c50
    1298:	800fffff 	.word	0x800fffff
    129c:	fffffc0d 	.word	0xfffffc0d
    12a0:	0c33      	lsrs	r3, r6, #16
    12a2:	0436      	lsls	r6, r6, #16
    12a4:	0c36      	lsrs	r6, r6, #16
    12a6:	469c      	mov	ip, r3
    12a8:	1c33      	adds	r3, r6, #0
    12aa:	0c14      	lsrs	r4, r2, #16
    12ac:	0412      	lsls	r2, r2, #16
    12ae:	0c12      	lsrs	r2, r2, #16
    12b0:	4353      	muls	r3, r2
    12b2:	4698      	mov	r8, r3
    12b4:	4663      	mov	r3, ip
    12b6:	4353      	muls	r3, r2
    12b8:	4699      	mov	r9, r3
    12ba:	4663      	mov	r3, ip
    12bc:	4363      	muls	r3, r4
    12be:	9301      	str	r3, [sp, #4]
    12c0:	1c33      	adds	r3, r6, #0
    12c2:	4641      	mov	r1, r8
    12c4:	4363      	muls	r3, r4
    12c6:	0c09      	lsrs	r1, r1, #16
    12c8:	444b      	add	r3, r9
    12ca:	185b      	adds	r3, r3, r1
    12cc:	4599      	cmp	r9, r3
    12ce:	d905      	bls.n	12dc <__aeabi_dmul+0x228>
    12d0:	2080      	movs	r0, #128	; 0x80
    12d2:	0240      	lsls	r0, r0, #9
    12d4:	4681      	mov	r9, r0
    12d6:	9901      	ldr	r1, [sp, #4]
    12d8:	4449      	add	r1, r9
    12da:	9101      	str	r1, [sp, #4]
    12dc:	0c19      	lsrs	r1, r3, #16
    12de:	9103      	str	r1, [sp, #12]
    12e0:	4641      	mov	r1, r8
    12e2:	0409      	lsls	r1, r1, #16
    12e4:	0c09      	lsrs	r1, r1, #16
    12e6:	041b      	lsls	r3, r3, #16
    12e8:	185b      	adds	r3, r3, r1
    12ea:	9304      	str	r3, [sp, #16]
    12ec:	0c2b      	lsrs	r3, r5, #16
    12ee:	4698      	mov	r8, r3
    12f0:	1c33      	adds	r3, r6, #0
    12f2:	042d      	lsls	r5, r5, #16
    12f4:	0c29      	lsrs	r1, r5, #16
    12f6:	434b      	muls	r3, r1
    12f8:	4660      	mov	r0, ip
    12fa:	9300      	str	r3, [sp, #0]
    12fc:	4643      	mov	r3, r8
    12fe:	4665      	mov	r5, ip
    1300:	4358      	muls	r0, r3
    1302:	435e      	muls	r6, r3
    1304:	9b00      	ldr	r3, [sp, #0]
    1306:	434d      	muls	r5, r1
    1308:	0c1b      	lsrs	r3, r3, #16
    130a:	4699      	mov	r9, r3
    130c:	19ae      	adds	r6, r5, r6
    130e:	444e      	add	r6, r9
    1310:	4684      	mov	ip, r0
    1312:	42b5      	cmp	r5, r6
    1314:	d903      	bls.n	131e <__aeabi_dmul+0x26a>
    1316:	2380      	movs	r3, #128	; 0x80
    1318:	025b      	lsls	r3, r3, #9
    131a:	4699      	mov	r9, r3
    131c:	44cc      	add	ip, r9
    131e:	0c35      	lsrs	r5, r6, #16
    1320:	1c2b      	adds	r3, r5, #0
    1322:	9803      	ldr	r0, [sp, #12]
    1324:	4463      	add	r3, ip
    1326:	4684      	mov	ip, r0
    1328:	9305      	str	r3, [sp, #20]
    132a:	9b00      	ldr	r3, [sp, #0]
    132c:	0436      	lsls	r6, r6, #16
    132e:	041b      	lsls	r3, r3, #16
    1330:	0c1b      	lsrs	r3, r3, #16
    1332:	18f3      	adds	r3, r6, r3
    1334:	449c      	add	ip, r3
    1336:	4660      	mov	r0, ip
    1338:	9003      	str	r0, [sp, #12]
    133a:	4658      	mov	r0, fp
    133c:	0405      	lsls	r5, r0, #16
    133e:	0c06      	lsrs	r6, r0, #16
    1340:	0c28      	lsrs	r0, r5, #16
    1342:	4684      	mov	ip, r0
    1344:	4350      	muls	r0, r2
    1346:	1c35      	adds	r5, r6, #0
    1348:	4681      	mov	r9, r0
    134a:	4660      	mov	r0, ip
    134c:	4365      	muls	r5, r4
    134e:	4344      	muls	r4, r0
    1350:	4648      	mov	r0, r9
    1352:	0c00      	lsrs	r0, r0, #16
    1354:	4683      	mov	fp, r0
    1356:	4372      	muls	r2, r6
    1358:	1914      	adds	r4, r2, r4
    135a:	445c      	add	r4, fp
    135c:	42a2      	cmp	r2, r4
    135e:	d903      	bls.n	1368 <__aeabi_dmul+0x2b4>
    1360:	2280      	movs	r2, #128	; 0x80
    1362:	0252      	lsls	r2, r2, #9
    1364:	4693      	mov	fp, r2
    1366:	445d      	add	r5, fp
    1368:	0c22      	lsrs	r2, r4, #16
    136a:	18ad      	adds	r5, r5, r2
    136c:	464a      	mov	r2, r9
    136e:	0412      	lsls	r2, r2, #16
    1370:	0c12      	lsrs	r2, r2, #16
    1372:	0424      	lsls	r4, r4, #16
    1374:	4640      	mov	r0, r8
    1376:	18a4      	adds	r4, r4, r2
    1378:	4662      	mov	r2, ip
    137a:	434a      	muls	r2, r1
    137c:	4371      	muls	r1, r6
    137e:	4346      	muls	r6, r0
    1380:	4660      	mov	r0, ip
    1382:	9600      	str	r6, [sp, #0]
    1384:	4646      	mov	r6, r8
    1386:	4370      	muls	r0, r6
    1388:	4680      	mov	r8, r0
    138a:	0c10      	lsrs	r0, r2, #16
    138c:	4684      	mov	ip, r0
    138e:	4488      	add	r8, r1
    1390:	44e0      	add	r8, ip
    1392:	4541      	cmp	r1, r8
    1394:	d905      	bls.n	13a2 <__aeabi_dmul+0x2ee>
    1396:	2180      	movs	r1, #128	; 0x80
    1398:	0249      	lsls	r1, r1, #9
    139a:	468c      	mov	ip, r1
    139c:	9900      	ldr	r1, [sp, #0]
    139e:	4461      	add	r1, ip
    13a0:	9100      	str	r1, [sp, #0]
    13a2:	9801      	ldr	r0, [sp, #4]
    13a4:	9903      	ldr	r1, [sp, #12]
    13a6:	4684      	mov	ip, r0
    13a8:	4461      	add	r1, ip
    13aa:	4299      	cmp	r1, r3
    13ac:	419b      	sbcs	r3, r3
    13ae:	425b      	negs	r3, r3
    13b0:	4699      	mov	r9, r3
    13b2:	9805      	ldr	r0, [sp, #20]
    13b4:	4643      	mov	r3, r8
    13b6:	4684      	mov	ip, r0
    13b8:	0412      	lsls	r2, r2, #16
    13ba:	0c12      	lsrs	r2, r2, #16
    13bc:	041b      	lsls	r3, r3, #16
    13be:	189b      	adds	r3, r3, r2
    13c0:	4463      	add	r3, ip
    13c2:	469c      	mov	ip, r3
    13c4:	46ab      	mov	fp, r5
    13c6:	4283      	cmp	r3, r0
    13c8:	419b      	sbcs	r3, r3
    13ca:	4640      	mov	r0, r8
    13cc:	190a      	adds	r2, r1, r4
    13ce:	44cc      	add	ip, r9
    13d0:	42a2      	cmp	r2, r4
    13d2:	4189      	sbcs	r1, r1
    13d4:	44e3      	add	fp, ip
    13d6:	45cc      	cmp	ip, r9
    13d8:	41b6      	sbcs	r6, r6
    13da:	465c      	mov	r4, fp
    13dc:	0c00      	lsrs	r0, r0, #16
    13de:	4680      	mov	r8, r0
    13e0:	4249      	negs	r1, r1
    13e2:	4276      	negs	r6, r6
    13e4:	425b      	negs	r3, r3
    13e6:	1864      	adds	r4, r4, r1
    13e8:	4333      	orrs	r3, r6
    13ea:	4498      	add	r8, r3
    13ec:	428c      	cmp	r4, r1
    13ee:	4189      	sbcs	r1, r1
    13f0:	45ab      	cmp	fp, r5
    13f2:	419b      	sbcs	r3, r3
    13f4:	4249      	negs	r1, r1
    13f6:	425b      	negs	r3, r3
    13f8:	4319      	orrs	r1, r3
    13fa:	1c0d      	adds	r5, r1, #0
    13fc:	9b00      	ldr	r3, [sp, #0]
    13fe:	4445      	add	r5, r8
    1400:	18ee      	adds	r6, r5, r3
    1402:	0276      	lsls	r6, r6, #9
    1404:	0de5      	lsrs	r5, r4, #23
    1406:	432e      	orrs	r6, r5
    1408:	46b3      	mov	fp, r6
    140a:	9b04      	ldr	r3, [sp, #16]
    140c:	0256      	lsls	r6, r2, #9
    140e:	431e      	orrs	r6, r3
    1410:	1e73      	subs	r3, r6, #1
    1412:	419e      	sbcs	r6, r3
    1414:	465b      	mov	r3, fp
    1416:	0dd2      	lsrs	r2, r2, #23
    1418:	4332      	orrs	r2, r6
    141a:	0266      	lsls	r6, r4, #9
    141c:	4316      	orrs	r6, r2
    141e:	01db      	lsls	r3, r3, #7
    1420:	d50a      	bpl.n	1438 <__aeabi_dmul+0x384>
    1422:	2301      	movs	r3, #1
    1424:	4033      	ands	r3, r6
    1426:	0876      	lsrs	r6, r6, #1
    1428:	431e      	orrs	r6, r3
    142a:	465b      	mov	r3, fp
    142c:	07db      	lsls	r3, r3, #31
    142e:	431e      	orrs	r6, r3
    1430:	465b      	mov	r3, fp
    1432:	085b      	lsrs	r3, r3, #1
    1434:	469b      	mov	fp, r3
    1436:	4657      	mov	r7, sl
    1438:	4b63      	ldr	r3, [pc, #396]	; (15c8 <__aeabi_dmul+0x514>)
    143a:	18fb      	adds	r3, r7, r3
    143c:	2b00      	cmp	r3, #0
    143e:	dd5a      	ble.n	14f6 <__aeabi_dmul+0x442>
    1440:	0772      	lsls	r2, r6, #29
    1442:	d009      	beq.n	1458 <__aeabi_dmul+0x3a4>
    1444:	220f      	movs	r2, #15
    1446:	4032      	ands	r2, r6
    1448:	2a04      	cmp	r2, #4
    144a:	d005      	beq.n	1458 <__aeabi_dmul+0x3a4>
    144c:	1d32      	adds	r2, r6, #4
    144e:	42b2      	cmp	r2, r6
    1450:	41b6      	sbcs	r6, r6
    1452:	4276      	negs	r6, r6
    1454:	44b3      	add	fp, r6
    1456:	1c16      	adds	r6, r2, #0
    1458:	465a      	mov	r2, fp
    145a:	01d2      	lsls	r2, r2, #7
    145c:	d506      	bpl.n	146c <__aeabi_dmul+0x3b8>
    145e:	465a      	mov	r2, fp
    1460:	4b5a      	ldr	r3, [pc, #360]	; (15cc <__aeabi_dmul+0x518>)
    1462:	401a      	ands	r2, r3
    1464:	2380      	movs	r3, #128	; 0x80
    1466:	4693      	mov	fp, r2
    1468:	00db      	lsls	r3, r3, #3
    146a:	18fb      	adds	r3, r7, r3
    146c:	4a58      	ldr	r2, [pc, #352]	; (15d0 <__aeabi_dmul+0x51c>)
    146e:	4293      	cmp	r3, r2
    1470:	dd34      	ble.n	14dc <__aeabi_dmul+0x428>
    1472:	2401      	movs	r4, #1
    1474:	9b02      	ldr	r3, [sp, #8]
    1476:	2500      	movs	r5, #0
    1478:	401c      	ands	r4, r3
    147a:	2600      	movs	r6, #0
    147c:	4b55      	ldr	r3, [pc, #340]	; (15d4 <__aeabi_dmul+0x520>)
    147e:	e67d      	b.n	117c <__aeabi_dmul+0xc8>
    1480:	2080      	movs	r0, #128	; 0x80
    1482:	465b      	mov	r3, fp
    1484:	0300      	lsls	r0, r0, #12
    1486:	4203      	tst	r3, r0
    1488:	d008      	beq.n	149c <__aeabi_dmul+0x3e8>
    148a:	4205      	tst	r5, r0
    148c:	d106      	bne.n	149c <__aeabi_dmul+0x3e8>
    148e:	4305      	orrs	r5, r0
    1490:	032d      	lsls	r5, r5, #12
    1492:	0b2d      	lsrs	r5, r5, #12
    1494:	464c      	mov	r4, r9
    1496:	1c16      	adds	r6, r2, #0
    1498:	4b4e      	ldr	r3, [pc, #312]	; (15d4 <__aeabi_dmul+0x520>)
    149a:	e66f      	b.n	117c <__aeabi_dmul+0xc8>
    149c:	465d      	mov	r5, fp
    149e:	4305      	orrs	r5, r0
    14a0:	032d      	lsls	r5, r5, #12
    14a2:	0b2d      	lsrs	r5, r5, #12
    14a4:	4b4b      	ldr	r3, [pc, #300]	; (15d4 <__aeabi_dmul+0x520>)
    14a6:	e669      	b.n	117c <__aeabi_dmul+0xc8>
    14a8:	4650      	mov	r0, sl
    14aa:	f000 f969 	bl	1780 <__clzsi2>
    14ae:	1c03      	adds	r3, r0, #0
    14b0:	3320      	adds	r3, #32
    14b2:	2b27      	cmp	r3, #39	; 0x27
    14b4:	dc00      	bgt.n	14b8 <__aeabi_dmul+0x404>
    14b6:	e6a6      	b.n	1206 <__aeabi_dmul+0x152>
    14b8:	4655      	mov	r5, sl
    14ba:	3808      	subs	r0, #8
    14bc:	4085      	lsls	r5, r0
    14be:	2200      	movs	r2, #0
    14c0:	e6ac      	b.n	121c <__aeabi_dmul+0x168>
    14c2:	1c28      	adds	r0, r5, #0
    14c4:	f000 f95c 	bl	1780 <__clzsi2>
    14c8:	1c02      	adds	r2, r0, #0
    14ca:	3220      	adds	r2, #32
    14cc:	2a27      	cmp	r2, #39	; 0x27
    14ce:	dc00      	bgt.n	14d2 <__aeabi_dmul+0x41e>
    14d0:	e675      	b.n	11be <__aeabi_dmul+0x10a>
    14d2:	3808      	subs	r0, #8
    14d4:	4085      	lsls	r5, r0
    14d6:	2600      	movs	r6, #0
    14d8:	46ab      	mov	fp, r5
    14da:	e67d      	b.n	11d8 <__aeabi_dmul+0x124>
    14dc:	465a      	mov	r2, fp
    14de:	08f6      	lsrs	r6, r6, #3
    14e0:	0752      	lsls	r2, r2, #29
    14e2:	4316      	orrs	r6, r2
    14e4:	465a      	mov	r2, fp
    14e6:	2401      	movs	r4, #1
    14e8:	0255      	lsls	r5, r2, #9
    14ea:	9a02      	ldr	r2, [sp, #8]
    14ec:	055b      	lsls	r3, r3, #21
    14ee:	0b2d      	lsrs	r5, r5, #12
    14f0:	0d5b      	lsrs	r3, r3, #21
    14f2:	4014      	ands	r4, r2
    14f4:	e642      	b.n	117c <__aeabi_dmul+0xc8>
    14f6:	4d38      	ldr	r5, [pc, #224]	; (15d8 <__aeabi_dmul+0x524>)
    14f8:	1bed      	subs	r5, r5, r7
    14fa:	2d38      	cmp	r5, #56	; 0x38
    14fc:	dd0a      	ble.n	1514 <__aeabi_dmul+0x460>
    14fe:	2401      	movs	r4, #1
    1500:	9b02      	ldr	r3, [sp, #8]
    1502:	2500      	movs	r5, #0
    1504:	401c      	ands	r4, r3
    1506:	2600      	movs	r6, #0
    1508:	2300      	movs	r3, #0
    150a:	e637      	b.n	117c <__aeabi_dmul+0xc8>
    150c:	9b01      	ldr	r3, [sp, #4]
    150e:	4657      	mov	r7, sl
    1510:	9302      	str	r3, [sp, #8]
    1512:	e791      	b.n	1438 <__aeabi_dmul+0x384>
    1514:	2d1f      	cmp	r5, #31
    1516:	dc25      	bgt.n	1564 <__aeabi_dmul+0x4b0>
    1518:	4b30      	ldr	r3, [pc, #192]	; (15dc <__aeabi_dmul+0x528>)
    151a:	1c32      	adds	r2, r6, #0
    151c:	469c      	mov	ip, r3
    151e:	4467      	add	r7, ip
    1520:	40be      	lsls	r6, r7
    1522:	465b      	mov	r3, fp
    1524:	40bb      	lsls	r3, r7
    1526:	1c37      	adds	r7, r6, #0
    1528:	40ea      	lsrs	r2, r5
    152a:	1e7e      	subs	r6, r7, #1
    152c:	41b7      	sbcs	r7, r6
    152e:	4313      	orrs	r3, r2
    1530:	433b      	orrs	r3, r7
    1532:	1c1e      	adds	r6, r3, #0
    1534:	465b      	mov	r3, fp
    1536:	40eb      	lsrs	r3, r5
    1538:	1c1d      	adds	r5, r3, #0
    153a:	0773      	lsls	r3, r6, #29
    153c:	d009      	beq.n	1552 <__aeabi_dmul+0x49e>
    153e:	230f      	movs	r3, #15
    1540:	4033      	ands	r3, r6
    1542:	2b04      	cmp	r3, #4
    1544:	d005      	beq.n	1552 <__aeabi_dmul+0x49e>
    1546:	1d33      	adds	r3, r6, #4
    1548:	42b3      	cmp	r3, r6
    154a:	41b6      	sbcs	r6, r6
    154c:	4276      	negs	r6, r6
    154e:	19ad      	adds	r5, r5, r6
    1550:	1c1e      	adds	r6, r3, #0
    1552:	022b      	lsls	r3, r5, #8
    1554:	d520      	bpl.n	1598 <__aeabi_dmul+0x4e4>
    1556:	2401      	movs	r4, #1
    1558:	9b02      	ldr	r3, [sp, #8]
    155a:	2500      	movs	r5, #0
    155c:	401c      	ands	r4, r3
    155e:	2600      	movs	r6, #0
    1560:	2301      	movs	r3, #1
    1562:	e60b      	b.n	117c <__aeabi_dmul+0xc8>
    1564:	465a      	mov	r2, fp
    1566:	4b1e      	ldr	r3, [pc, #120]	; (15e0 <__aeabi_dmul+0x52c>)
    1568:	1bdb      	subs	r3, r3, r7
    156a:	40da      	lsrs	r2, r3
    156c:	1c13      	adds	r3, r2, #0
    156e:	2d20      	cmp	r5, #32
    1570:	d01c      	beq.n	15ac <__aeabi_dmul+0x4f8>
    1572:	4a1c      	ldr	r2, [pc, #112]	; (15e4 <__aeabi_dmul+0x530>)
    1574:	4694      	mov	ip, r2
    1576:	465a      	mov	r2, fp
    1578:	4467      	add	r7, ip
    157a:	40ba      	lsls	r2, r7
    157c:	1c17      	adds	r7, r2, #0
    157e:	433e      	orrs	r6, r7
    1580:	1e72      	subs	r2, r6, #1
    1582:	4196      	sbcs	r6, r2
    1584:	431e      	orrs	r6, r3
    1586:	2307      	movs	r3, #7
    1588:	2500      	movs	r5, #0
    158a:	4033      	ands	r3, r6
    158c:	d007      	beq.n	159e <__aeabi_dmul+0x4ea>
    158e:	230f      	movs	r3, #15
    1590:	2500      	movs	r5, #0
    1592:	4033      	ands	r3, r6
    1594:	2b04      	cmp	r3, #4
    1596:	d1d6      	bne.n	1546 <__aeabi_dmul+0x492>
    1598:	076b      	lsls	r3, r5, #29
    159a:	026d      	lsls	r5, r5, #9
    159c:	0b2d      	lsrs	r5, r5, #12
    159e:	2401      	movs	r4, #1
    15a0:	08f6      	lsrs	r6, r6, #3
    15a2:	431e      	orrs	r6, r3
    15a4:	9b02      	ldr	r3, [sp, #8]
    15a6:	401c      	ands	r4, r3
    15a8:	2300      	movs	r3, #0
    15aa:	e5e7      	b.n	117c <__aeabi_dmul+0xc8>
    15ac:	2700      	movs	r7, #0
    15ae:	e7e6      	b.n	157e <__aeabi_dmul+0x4ca>
    15b0:	2580      	movs	r5, #128	; 0x80
    15b2:	465b      	mov	r3, fp
    15b4:	2401      	movs	r4, #1
    15b6:	032d      	lsls	r5, r5, #12
    15b8:	431d      	orrs	r5, r3
    15ba:	9b01      	ldr	r3, [sp, #4]
    15bc:	032d      	lsls	r5, r5, #12
    15be:	4023      	ands	r3, r4
    15c0:	1c1c      	adds	r4, r3, #0
    15c2:	0b2d      	lsrs	r5, r5, #12
    15c4:	4b03      	ldr	r3, [pc, #12]	; (15d4 <__aeabi_dmul+0x520>)
    15c6:	e5d9      	b.n	117c <__aeabi_dmul+0xc8>
    15c8:	000003ff 	.word	0x000003ff
    15cc:	feffffff 	.word	0xfeffffff
    15d0:	000007fe 	.word	0x000007fe
    15d4:	000007ff 	.word	0x000007ff
    15d8:	fffffc02 	.word	0xfffffc02
    15dc:	0000041e 	.word	0x0000041e
    15e0:	fffffbe2 	.word	0xfffffbe2
    15e4:	0000043e 	.word	0x0000043e

000015e8 <__aeabi_i2d>:
    15e8:	b538      	push	{r3, r4, r5, lr}
    15ea:	1e04      	subs	r4, r0, #0
    15ec:	d016      	beq.n	161c <__aeabi_i2d+0x34>
    15ee:	0fc5      	lsrs	r5, r0, #31
    15f0:	d000      	beq.n	15f4 <__aeabi_i2d+0xc>
    15f2:	4244      	negs	r4, r0
    15f4:	1c20      	adds	r0, r4, #0
    15f6:	f000 f8c3 	bl	1780 <__clzsi2>
    15fa:	4b17      	ldr	r3, [pc, #92]	; (1658 <__aeabi_i2d+0x70>)
    15fc:	1a1b      	subs	r3, r3, r0
    15fe:	280a      	cmp	r0, #10
    1600:	dc21      	bgt.n	1646 <__aeabi_i2d+0x5e>
    1602:	1c02      	adds	r2, r0, #0
    1604:	1c21      	adds	r1, r4, #0
    1606:	3215      	adds	r2, #21
    1608:	4091      	lsls	r1, r2
    160a:	1c0a      	adds	r2, r1, #0
    160c:	210b      	movs	r1, #11
    160e:	1a08      	subs	r0, r1, r0
    1610:	40c4      	lsrs	r4, r0
    1612:	055b      	lsls	r3, r3, #21
    1614:	0324      	lsls	r4, r4, #12
    1616:	0b24      	lsrs	r4, r4, #12
    1618:	0d5b      	lsrs	r3, r3, #21
    161a:	e003      	b.n	1624 <__aeabi_i2d+0x3c>
    161c:	2500      	movs	r5, #0
    161e:	2300      	movs	r3, #0
    1620:	2400      	movs	r4, #0
    1622:	2200      	movs	r2, #0
    1624:	2100      	movs	r1, #0
    1626:	1c10      	adds	r0, r2, #0
    1628:	0324      	lsls	r4, r4, #12
    162a:	0d0a      	lsrs	r2, r1, #20
    162c:	0512      	lsls	r2, r2, #20
    162e:	0b24      	lsrs	r4, r4, #12
    1630:	4314      	orrs	r4, r2
    1632:	4a0a      	ldr	r2, [pc, #40]	; (165c <__aeabi_i2d+0x74>)
    1634:	051b      	lsls	r3, r3, #20
    1636:	4014      	ands	r4, r2
    1638:	431c      	orrs	r4, r3
    163a:	0064      	lsls	r4, r4, #1
    163c:	07ed      	lsls	r5, r5, #31
    163e:	0864      	lsrs	r4, r4, #1
    1640:	432c      	orrs	r4, r5
    1642:	1c21      	adds	r1, r4, #0
    1644:	bd38      	pop	{r3, r4, r5, pc}
    1646:	380b      	subs	r0, #11
    1648:	4084      	lsls	r4, r0
    164a:	055b      	lsls	r3, r3, #21
    164c:	0324      	lsls	r4, r4, #12
    164e:	0b24      	lsrs	r4, r4, #12
    1650:	0d5b      	lsrs	r3, r3, #21
    1652:	2200      	movs	r2, #0
    1654:	e7e6      	b.n	1624 <__aeabi_i2d+0x3c>
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	0000041e 	.word	0x0000041e
    165c:	800fffff 	.word	0x800fffff

00001660 <__aeabi_d2f>:
    1660:	b570      	push	{r4, r5, r6, lr}
    1662:	030b      	lsls	r3, r1, #12
    1664:	004d      	lsls	r5, r1, #1
    1666:	0f44      	lsrs	r4, r0, #29
    1668:	0d6d      	lsrs	r5, r5, #21
    166a:	0a5b      	lsrs	r3, r3, #9
    166c:	4323      	orrs	r3, r4
    166e:	1c6c      	adds	r4, r5, #1
    1670:	0564      	lsls	r4, r4, #21
    1672:	0fc9      	lsrs	r1, r1, #31
    1674:	00c2      	lsls	r2, r0, #3
    1676:	0d64      	lsrs	r4, r4, #21
    1678:	2c01      	cmp	r4, #1
    167a:	dd2a      	ble.n	16d2 <__aeabi_d2f+0x72>
    167c:	4c3b      	ldr	r4, [pc, #236]	; (176c <__aeabi_d2f+0x10c>)
    167e:	192c      	adds	r4, r5, r4
    1680:	2cfe      	cmp	r4, #254	; 0xfe
    1682:	dc1a      	bgt.n	16ba <__aeabi_d2f+0x5a>
    1684:	2c00      	cmp	r4, #0
    1686:	dd35      	ble.n	16f4 <__aeabi_d2f+0x94>
    1688:	0180      	lsls	r0, r0, #6
    168a:	1e45      	subs	r5, r0, #1
    168c:	41a8      	sbcs	r0, r5
    168e:	00db      	lsls	r3, r3, #3
    1690:	4303      	orrs	r3, r0
    1692:	0f52      	lsrs	r2, r2, #29
    1694:	4313      	orrs	r3, r2
    1696:	075a      	lsls	r2, r3, #29
    1698:	d004      	beq.n	16a4 <__aeabi_d2f+0x44>
    169a:	220f      	movs	r2, #15
    169c:	401a      	ands	r2, r3
    169e:	2a04      	cmp	r2, #4
    16a0:	d000      	beq.n	16a4 <__aeabi_d2f+0x44>
    16a2:	3304      	adds	r3, #4
    16a4:	2280      	movs	r2, #128	; 0x80
    16a6:	04d2      	lsls	r2, r2, #19
    16a8:	401a      	ands	r2, r3
    16aa:	d027      	beq.n	16fc <__aeabi_d2f+0x9c>
    16ac:	3401      	adds	r4, #1
    16ae:	2cff      	cmp	r4, #255	; 0xff
    16b0:	d003      	beq.n	16ba <__aeabi_d2f+0x5a>
    16b2:	019b      	lsls	r3, r3, #6
    16b4:	0a5b      	lsrs	r3, r3, #9
    16b6:	b2e4      	uxtb	r4, r4
    16b8:	e001      	b.n	16be <__aeabi_d2f+0x5e>
    16ba:	24ff      	movs	r4, #255	; 0xff
    16bc:	2300      	movs	r3, #0
    16be:	025b      	lsls	r3, r3, #9
    16c0:	05e4      	lsls	r4, r4, #23
    16c2:	0a5b      	lsrs	r3, r3, #9
    16c4:	4323      	orrs	r3, r4
    16c6:	005b      	lsls	r3, r3, #1
    16c8:	07c9      	lsls	r1, r1, #31
    16ca:	085b      	lsrs	r3, r3, #1
    16cc:	430b      	orrs	r3, r1
    16ce:	1c18      	adds	r0, r3, #0
    16d0:	bd70      	pop	{r4, r5, r6, pc}
    16d2:	2d00      	cmp	r5, #0
    16d4:	d106      	bne.n	16e4 <__aeabi_d2f+0x84>
    16d6:	4313      	orrs	r3, r2
    16d8:	d10e      	bne.n	16f8 <__aeabi_d2f+0x98>
    16da:	2400      	movs	r4, #0
    16dc:	025b      	lsls	r3, r3, #9
    16de:	0a5b      	lsrs	r3, r3, #9
    16e0:	b2e4      	uxtb	r4, r4
    16e2:	e7ec      	b.n	16be <__aeabi_d2f+0x5e>
    16e4:	431a      	orrs	r2, r3
    16e6:	d0e8      	beq.n	16ba <__aeabi_d2f+0x5a>
    16e8:	2080      	movs	r0, #128	; 0x80
    16ea:	00db      	lsls	r3, r3, #3
    16ec:	0480      	lsls	r0, r0, #18
    16ee:	4303      	orrs	r3, r0
    16f0:	24ff      	movs	r4, #255	; 0xff
    16f2:	e7d0      	b.n	1696 <__aeabi_d2f+0x36>
    16f4:	3417      	adds	r4, #23
    16f6:	da0c      	bge.n	1712 <__aeabi_d2f+0xb2>
    16f8:	2305      	movs	r3, #5
    16fa:	2400      	movs	r4, #0
    16fc:	08db      	lsrs	r3, r3, #3
    16fe:	2cff      	cmp	r4, #255	; 0xff
    1700:	d1ec      	bne.n	16dc <__aeabi_d2f+0x7c>
    1702:	2b00      	cmp	r3, #0
    1704:	d02d      	beq.n	1762 <__aeabi_d2f+0x102>
    1706:	2280      	movs	r2, #128	; 0x80
    1708:	03d2      	lsls	r2, r2, #15
    170a:	4313      	orrs	r3, r2
    170c:	025b      	lsls	r3, r3, #9
    170e:	0a5b      	lsrs	r3, r3, #9
    1710:	e7d5      	b.n	16be <__aeabi_d2f+0x5e>
    1712:	2480      	movs	r4, #128	; 0x80
    1714:	4816      	ldr	r0, [pc, #88]	; (1770 <__aeabi_d2f+0x110>)
    1716:	0424      	lsls	r4, r4, #16
    1718:	4323      	orrs	r3, r4
    171a:	1b40      	subs	r0, r0, r5
    171c:	281f      	cmp	r0, #31
    171e:	dc0d      	bgt.n	173c <__aeabi_d2f+0xdc>
    1720:	4c14      	ldr	r4, [pc, #80]	; (1774 <__aeabi_d2f+0x114>)
    1722:	46a4      	mov	ip, r4
    1724:	4465      	add	r5, ip
    1726:	40ab      	lsls	r3, r5
    1728:	1c1c      	adds	r4, r3, #0
    172a:	1c13      	adds	r3, r2, #0
    172c:	40ab      	lsls	r3, r5
    172e:	1e5d      	subs	r5, r3, #1
    1730:	41ab      	sbcs	r3, r5
    1732:	40c2      	lsrs	r2, r0
    1734:	4323      	orrs	r3, r4
    1736:	4313      	orrs	r3, r2
    1738:	2400      	movs	r4, #0
    173a:	e7ac      	b.n	1696 <__aeabi_d2f+0x36>
    173c:	1c1e      	adds	r6, r3, #0
    173e:	4c0e      	ldr	r4, [pc, #56]	; (1778 <__aeabi_d2f+0x118>)
    1740:	1b64      	subs	r4, r4, r5
    1742:	40e6      	lsrs	r6, r4
    1744:	1c34      	adds	r4, r6, #0
    1746:	2820      	cmp	r0, #32
    1748:	d00d      	beq.n	1766 <__aeabi_d2f+0x106>
    174a:	480c      	ldr	r0, [pc, #48]	; (177c <__aeabi_d2f+0x11c>)
    174c:	4684      	mov	ip, r0
    174e:	4465      	add	r5, ip
    1750:	40ab      	lsls	r3, r5
    1752:	1c1d      	adds	r5, r3, #0
    1754:	432a      	orrs	r2, r5
    1756:	1e53      	subs	r3, r2, #1
    1758:	419a      	sbcs	r2, r3
    175a:	1c13      	adds	r3, r2, #0
    175c:	4323      	orrs	r3, r4
    175e:	2400      	movs	r4, #0
    1760:	e799      	b.n	1696 <__aeabi_d2f+0x36>
    1762:	2300      	movs	r3, #0
    1764:	e7ab      	b.n	16be <__aeabi_d2f+0x5e>
    1766:	2500      	movs	r5, #0
    1768:	e7f4      	b.n	1754 <__aeabi_d2f+0xf4>
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	fffffc80 	.word	0xfffffc80
    1770:	0000039e 	.word	0x0000039e
    1774:	fffffc82 	.word	0xfffffc82
    1778:	0000037e 	.word	0x0000037e
    177c:	fffffca2 	.word	0xfffffca2

00001780 <__clzsi2>:
    1780:	211c      	movs	r1, #28
    1782:	2301      	movs	r3, #1
    1784:	041b      	lsls	r3, r3, #16
    1786:	4298      	cmp	r0, r3
    1788:	d301      	bcc.n	178e <__clzsi2+0xe>
    178a:	0c00      	lsrs	r0, r0, #16
    178c:	3910      	subs	r1, #16
    178e:	0a1b      	lsrs	r3, r3, #8
    1790:	4298      	cmp	r0, r3
    1792:	d301      	bcc.n	1798 <__clzsi2+0x18>
    1794:	0a00      	lsrs	r0, r0, #8
    1796:	3908      	subs	r1, #8
    1798:	091b      	lsrs	r3, r3, #4
    179a:	4298      	cmp	r0, r3
    179c:	d301      	bcc.n	17a2 <__clzsi2+0x22>
    179e:	0900      	lsrs	r0, r0, #4
    17a0:	3904      	subs	r1, #4
    17a2:	a202      	add	r2, pc, #8	; (adr r2, 17ac <__clzsi2+0x2c>)
    17a4:	5c10      	ldrb	r0, [r2, r0]
    17a6:	1840      	adds	r0, r0, r1
    17a8:	4770      	bx	lr
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	02020304 	.word	0x02020304
    17b0:	01010101 	.word	0x01010101
	...

000017bc <__divdi3>:
    17bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17be:	4644      	mov	r4, r8
    17c0:	465f      	mov	r7, fp
    17c2:	4656      	mov	r6, sl
    17c4:	464d      	mov	r5, r9
    17c6:	b4f0      	push	{r4, r5, r6, r7}
    17c8:	1c1c      	adds	r4, r3, #0
    17ca:	b085      	sub	sp, #20
    17cc:	2900      	cmp	r1, #0
    17ce:	da00      	bge.n	17d2 <__divdi3+0x16>
    17d0:	e0a9      	b.n	1926 <__divdi3+0x16a>
    17d2:	1c0f      	adds	r7, r1, #0
    17d4:	2100      	movs	r1, #0
    17d6:	1c06      	adds	r6, r0, #0
    17d8:	4688      	mov	r8, r1
    17da:	1c10      	adds	r0, r2, #0
    17dc:	1c19      	adds	r1, r3, #0
    17de:	2c00      	cmp	r4, #0
    17e0:	da00      	bge.n	17e4 <__divdi3+0x28>
    17e2:	e097      	b.n	1914 <__divdi3+0x158>
    17e4:	1c34      	adds	r4, r6, #0
    17e6:	1c3d      	adds	r5, r7, #0
    17e8:	4682      	mov	sl, r0
    17ea:	4689      	mov	r9, r1
    17ec:	42b9      	cmp	r1, r7
    17ee:	d873      	bhi.n	18d8 <__divdi3+0x11c>
    17f0:	d070      	beq.n	18d4 <__divdi3+0x118>
    17f2:	4649      	mov	r1, r9
    17f4:	4650      	mov	r0, sl
    17f6:	f000 f985 	bl	1b04 <__clzdi2>
    17fa:	4683      	mov	fp, r0
    17fc:	1c39      	adds	r1, r7, #0
    17fe:	1c30      	adds	r0, r6, #0
    1800:	f000 f980 	bl	1b04 <__clzdi2>
    1804:	465b      	mov	r3, fp
    1806:	1a18      	subs	r0, r3, r0
    1808:	1c03      	adds	r3, r0, #0
    180a:	4683      	mov	fp, r0
    180c:	3b20      	subs	r3, #32
    180e:	469c      	mov	ip, r3
    1810:	d500      	bpl.n	1814 <__divdi3+0x58>
    1812:	e09c      	b.n	194e <__divdi3+0x192>
    1814:	2300      	movs	r3, #0
    1816:	2200      	movs	r2, #0
    1818:	4651      	mov	r1, sl
    181a:	9200      	str	r2, [sp, #0]
    181c:	9301      	str	r3, [sp, #4]
    181e:	4663      	mov	r3, ip
    1820:	4099      	lsls	r1, r3
    1822:	9101      	str	r1, [sp, #4]
    1824:	4651      	mov	r1, sl
    1826:	4081      	lsls	r1, r0
    1828:	9b01      	ldr	r3, [sp, #4]
    182a:	9100      	str	r1, [sp, #0]
    182c:	42bb      	cmp	r3, r7
    182e:	d900      	bls.n	1832 <__divdi3+0x76>
    1830:	e083      	b.n	193a <__divdi3+0x17e>
    1832:	d100      	bne.n	1836 <__divdi3+0x7a>
    1834:	e07e      	b.n	1934 <__divdi3+0x178>
    1836:	9a00      	ldr	r2, [sp, #0]
    1838:	9b01      	ldr	r3, [sp, #4]
    183a:	1c34      	adds	r4, r6, #0
    183c:	1c3d      	adds	r5, r7, #0
    183e:	1aa4      	subs	r4, r4, r2
    1840:	419d      	sbcs	r5, r3
    1842:	4663      	mov	r3, ip
    1844:	2b00      	cmp	r3, #0
    1846:	da00      	bge.n	184a <__divdi3+0x8e>
    1848:	e09a      	b.n	1980 <__divdi3+0x1c4>
    184a:	2600      	movs	r6, #0
    184c:	2700      	movs	r7, #0
    184e:	9602      	str	r6, [sp, #8]
    1850:	9703      	str	r7, [sp, #12]
    1852:	3601      	adds	r6, #1
    1854:	409e      	lsls	r6, r3
    1856:	9603      	str	r6, [sp, #12]
    1858:	2601      	movs	r6, #1
    185a:	4086      	lsls	r6, r0
    185c:	9602      	str	r6, [sp, #8]
    185e:	2800      	cmp	r0, #0
    1860:	d100      	bne.n	1864 <__divdi3+0xa8>
    1862:	e071      	b.n	1948 <__divdi3+0x18c>
    1864:	9900      	ldr	r1, [sp, #0]
    1866:	9a01      	ldr	r2, [sp, #4]
    1868:	07d3      	lsls	r3, r2, #31
    186a:	4699      	mov	r9, r3
    186c:	464b      	mov	r3, r9
    186e:	084e      	lsrs	r6, r1, #1
    1870:	431e      	orrs	r6, r3
    1872:	0857      	lsrs	r7, r2, #1
    1874:	2300      	movs	r3, #0
    1876:	2201      	movs	r2, #1
    1878:	e00c      	b.n	1894 <__divdi3+0xd8>
    187a:	42af      	cmp	r7, r5
    187c:	d101      	bne.n	1882 <__divdi3+0xc6>
    187e:	42a6      	cmp	r6, r4
    1880:	d80a      	bhi.n	1898 <__divdi3+0xdc>
    1882:	1ba4      	subs	r4, r4, r6
    1884:	41bd      	sbcs	r5, r7
    1886:	1924      	adds	r4, r4, r4
    1888:	416d      	adcs	r5, r5
    188a:	3801      	subs	r0, #1
    188c:	18a4      	adds	r4, r4, r2
    188e:	415d      	adcs	r5, r3
    1890:	2800      	cmp	r0, #0
    1892:	d006      	beq.n	18a2 <__divdi3+0xe6>
    1894:	42af      	cmp	r7, r5
    1896:	d9f0      	bls.n	187a <__divdi3+0xbe>
    1898:	3801      	subs	r0, #1
    189a:	1924      	adds	r4, r4, r4
    189c:	416d      	adcs	r5, r5
    189e:	2800      	cmp	r0, #0
    18a0:	d1f8      	bne.n	1894 <__divdi3+0xd8>
    18a2:	2220      	movs	r2, #32
    18a4:	9e02      	ldr	r6, [sp, #8]
    18a6:	9f03      	ldr	r7, [sp, #12]
    18a8:	465b      	mov	r3, fp
    18aa:	4252      	negs	r2, r2
    18ac:	1936      	adds	r6, r6, r4
    18ae:	416f      	adcs	r7, r5
    18b0:	1899      	adds	r1, r3, r2
    18b2:	d45a      	bmi.n	196a <__divdi3+0x1ae>
    18b4:	1c28      	adds	r0, r5, #0
    18b6:	40c8      	lsrs	r0, r1
    18b8:	1c2c      	adds	r4, r5, #0
    18ba:	465b      	mov	r3, fp
    18bc:	40dc      	lsrs	r4, r3
    18be:	2900      	cmp	r1, #0
    18c0:	db68      	blt.n	1994 <__divdi3+0x1d8>
    18c2:	1c04      	adds	r4, r0, #0
    18c4:	408c      	lsls	r4, r1
    18c6:	1c23      	adds	r3, r4, #0
    18c8:	4659      	mov	r1, fp
    18ca:	4088      	lsls	r0, r1
    18cc:	1c02      	adds	r2, r0, #0
    18ce:	1ab6      	subs	r6, r6, r2
    18d0:	419f      	sbcs	r7, r3
    18d2:	e003      	b.n	18dc <__divdi3+0x120>
    18d4:	42b0      	cmp	r0, r6
    18d6:	d98c      	bls.n	17f2 <__divdi3+0x36>
    18d8:	2600      	movs	r6, #0
    18da:	2700      	movs	r7, #0
    18dc:	4641      	mov	r1, r8
    18de:	1e4b      	subs	r3, r1, #1
    18e0:	4199      	sbcs	r1, r3
    18e2:	2300      	movs	r3, #0
    18e4:	9100      	str	r1, [sp, #0]
    18e6:	9301      	str	r3, [sp, #4]
    18e8:	9a00      	ldr	r2, [sp, #0]
    18ea:	9b01      	ldr	r3, [sp, #4]
    18ec:	2500      	movs	r5, #0
    18ee:	4254      	negs	r4, r2
    18f0:	419d      	sbcs	r5, r3
    18f2:	1c33      	adds	r3, r6, #0
    18f4:	4063      	eors	r3, r4
    18f6:	1c18      	adds	r0, r3, #0
    18f8:	1c3b      	adds	r3, r7, #0
    18fa:	406b      	eors	r3, r5
    18fc:	1c19      	adds	r1, r3, #0
    18fe:	9b00      	ldr	r3, [sp, #0]
    1900:	9c01      	ldr	r4, [sp, #4]
    1902:	18c0      	adds	r0, r0, r3
    1904:	4161      	adcs	r1, r4
    1906:	b005      	add	sp, #20
    1908:	bc3c      	pop	{r2, r3, r4, r5}
    190a:	4690      	mov	r8, r2
    190c:	4699      	mov	r9, r3
    190e:	46a2      	mov	sl, r4
    1910:	46ab      	mov	fp, r5
    1912:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1914:	4643      	mov	r3, r8
    1916:	43db      	mvns	r3, r3
    1918:	1c0c      	adds	r4, r1, #0
    191a:	4698      	mov	r8, r3
    191c:	1c13      	adds	r3, r2, #0
    191e:	2100      	movs	r1, #0
    1920:	4258      	negs	r0, r3
    1922:	41a1      	sbcs	r1, r4
    1924:	e75e      	b.n	17e4 <__divdi3+0x28>
    1926:	2700      	movs	r7, #0
    1928:	4246      	negs	r6, r0
    192a:	418f      	sbcs	r7, r1
    192c:	2101      	movs	r1, #1
    192e:	4249      	negs	r1, r1
    1930:	4688      	mov	r8, r1
    1932:	e752      	b.n	17da <__divdi3+0x1e>
    1934:	42b1      	cmp	r1, r6
    1936:	d800      	bhi.n	193a <__divdi3+0x17e>
    1938:	e77d      	b.n	1836 <__divdi3+0x7a>
    193a:	2600      	movs	r6, #0
    193c:	2700      	movs	r7, #0
    193e:	9602      	str	r6, [sp, #8]
    1940:	9703      	str	r7, [sp, #12]
    1942:	2800      	cmp	r0, #0
    1944:	d000      	beq.n	1948 <__divdi3+0x18c>
    1946:	e78d      	b.n	1864 <__divdi3+0xa8>
    1948:	9e02      	ldr	r6, [sp, #8]
    194a:	9f03      	ldr	r7, [sp, #12]
    194c:	e7c6      	b.n	18dc <__divdi3+0x120>
    194e:	2120      	movs	r1, #32
    1950:	4653      	mov	r3, sl
    1952:	1a09      	subs	r1, r1, r0
    1954:	40cb      	lsrs	r3, r1
    1956:	2200      	movs	r2, #0
    1958:	1c19      	adds	r1, r3, #0
    195a:	2300      	movs	r3, #0
    195c:	9200      	str	r2, [sp, #0]
    195e:	9301      	str	r3, [sp, #4]
    1960:	464b      	mov	r3, r9
    1962:	4083      	lsls	r3, r0
    1964:	430b      	orrs	r3, r1
    1966:	9301      	str	r3, [sp, #4]
    1968:	e75c      	b.n	1824 <__divdi3+0x68>
    196a:	465a      	mov	r2, fp
    196c:	2320      	movs	r3, #32
    196e:	1a9b      	subs	r3, r3, r2
    1970:	1c2a      	adds	r2, r5, #0
    1972:	409a      	lsls	r2, r3
    1974:	1c20      	adds	r0, r4, #0
    1976:	1c13      	adds	r3, r2, #0
    1978:	465a      	mov	r2, fp
    197a:	40d0      	lsrs	r0, r2
    197c:	4318      	orrs	r0, r3
    197e:	e79b      	b.n	18b8 <__divdi3+0xfc>
    1980:	2620      	movs	r6, #32
    1982:	2700      	movs	r7, #0
    1984:	1a33      	subs	r3, r6, r0
    1986:	2600      	movs	r6, #0
    1988:	9602      	str	r6, [sp, #8]
    198a:	9703      	str	r7, [sp, #12]
    198c:	2701      	movs	r7, #1
    198e:	40df      	lsrs	r7, r3
    1990:	9703      	str	r7, [sp, #12]
    1992:	e761      	b.n	1858 <__divdi3+0x9c>
    1994:	465b      	mov	r3, fp
    1996:	2120      	movs	r1, #32
    1998:	465d      	mov	r5, fp
    199a:	1ac9      	subs	r1, r1, r3
    199c:	1c03      	adds	r3, r0, #0
    199e:	40ac      	lsls	r4, r5
    19a0:	40cb      	lsrs	r3, r1
    19a2:	1c19      	adds	r1, r3, #0
    19a4:	1c23      	adds	r3, r4, #0
    19a6:	430b      	orrs	r3, r1
    19a8:	e78e      	b.n	18c8 <__divdi3+0x10c>
    19aa:	46c0      	nop			; (mov r8, r8)

000019ac <__udivdi3>:
    19ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ae:	4645      	mov	r5, r8
    19b0:	464e      	mov	r6, r9
    19b2:	4657      	mov	r7, sl
    19b4:	b4e0      	push	{r5, r6, r7}
    19b6:	1c04      	adds	r4, r0, #0
    19b8:	b082      	sub	sp, #8
    19ba:	1c0d      	adds	r5, r1, #0
    19bc:	4691      	mov	r9, r2
    19be:	4698      	mov	r8, r3
    19c0:	428b      	cmp	r3, r1
    19c2:	d862      	bhi.n	1a8a <__udivdi3+0xde>
    19c4:	d05f      	beq.n	1a86 <__udivdi3+0xda>
    19c6:	4641      	mov	r1, r8
    19c8:	4648      	mov	r0, r9
    19ca:	f000 f89b 	bl	1b04 <__clzdi2>
    19ce:	1c29      	adds	r1, r5, #0
    19d0:	1c06      	adds	r6, r0, #0
    19d2:	1c20      	adds	r0, r4, #0
    19d4:	f000 f896 	bl	1b04 <__clzdi2>
    19d8:	2320      	movs	r3, #32
    19da:	1a31      	subs	r1, r6, r0
    19dc:	425b      	negs	r3, r3
    19de:	468a      	mov	sl, r1
    19e0:	18c8      	adds	r0, r1, r3
    19e2:	d465      	bmi.n	1ab0 <__udivdi3+0x104>
    19e4:	464b      	mov	r3, r9
    19e6:	4083      	lsls	r3, r0
    19e8:	1c1f      	adds	r7, r3, #0
    19ea:	464b      	mov	r3, r9
    19ec:	408b      	lsls	r3, r1
    19ee:	1c1e      	adds	r6, r3, #0
    19f0:	42af      	cmp	r7, r5
    19f2:	d858      	bhi.n	1aa6 <__udivdi3+0xfa>
    19f4:	d055      	beq.n	1aa2 <__udivdi3+0xf6>
    19f6:	1ba4      	subs	r4, r4, r6
    19f8:	41bd      	sbcs	r5, r7
    19fa:	2800      	cmp	r0, #0
    19fc:	da00      	bge.n	1a00 <__udivdi3+0x54>
    19fe:	e077      	b.n	1af0 <__udivdi3+0x144>
    1a00:	2200      	movs	r2, #0
    1a02:	2300      	movs	r3, #0
    1a04:	9200      	str	r2, [sp, #0]
    1a06:	9301      	str	r3, [sp, #4]
    1a08:	3201      	adds	r2, #1
    1a0a:	4082      	lsls	r2, r0
    1a0c:	9201      	str	r2, [sp, #4]
    1a0e:	2301      	movs	r3, #1
    1a10:	408b      	lsls	r3, r1
    1a12:	9300      	str	r3, [sp, #0]
    1a14:	2900      	cmp	r1, #0
    1a16:	d03c      	beq.n	1a92 <__udivdi3+0xe6>
    1a18:	07fb      	lsls	r3, r7, #31
    1a1a:	4698      	mov	r8, r3
    1a1c:	4640      	mov	r0, r8
    1a1e:	0872      	lsrs	r2, r6, #1
    1a20:	087b      	lsrs	r3, r7, #1
    1a22:	4302      	orrs	r2, r0
    1a24:	2601      	movs	r6, #1
    1a26:	2700      	movs	r7, #0
    1a28:	e00c      	b.n	1a44 <__udivdi3+0x98>
    1a2a:	42ab      	cmp	r3, r5
    1a2c:	d101      	bne.n	1a32 <__udivdi3+0x86>
    1a2e:	42a2      	cmp	r2, r4
    1a30:	d80a      	bhi.n	1a48 <__udivdi3+0x9c>
    1a32:	1aa4      	subs	r4, r4, r2
    1a34:	419d      	sbcs	r5, r3
    1a36:	1924      	adds	r4, r4, r4
    1a38:	416d      	adcs	r5, r5
    1a3a:	3901      	subs	r1, #1
    1a3c:	19a4      	adds	r4, r4, r6
    1a3e:	417d      	adcs	r5, r7
    1a40:	2900      	cmp	r1, #0
    1a42:	d006      	beq.n	1a52 <__udivdi3+0xa6>
    1a44:	42ab      	cmp	r3, r5
    1a46:	d9f0      	bls.n	1a2a <__udivdi3+0x7e>
    1a48:	3901      	subs	r1, #1
    1a4a:	1924      	adds	r4, r4, r4
    1a4c:	416d      	adcs	r5, r5
    1a4e:	2900      	cmp	r1, #0
    1a50:	d1f8      	bne.n	1a44 <__udivdi3+0x98>
    1a52:	2220      	movs	r2, #32
    1a54:	9800      	ldr	r0, [sp, #0]
    1a56:	9901      	ldr	r1, [sp, #4]
    1a58:	4653      	mov	r3, sl
    1a5a:	4252      	negs	r2, r2
    1a5c:	1900      	adds	r0, r0, r4
    1a5e:	4169      	adcs	r1, r5
    1a60:	189e      	adds	r6, r3, r2
    1a62:	d43a      	bmi.n	1ada <__udivdi3+0x12e>
    1a64:	1c2f      	adds	r7, r5, #0
    1a66:	40f7      	lsrs	r7, r6
    1a68:	4653      	mov	r3, sl
    1a6a:	40dd      	lsrs	r5, r3
    1a6c:	2e00      	cmp	r6, #0
    1a6e:	db29      	blt.n	1ac4 <__udivdi3+0x118>
    1a70:	1c3c      	adds	r4, r7, #0
    1a72:	40b4      	lsls	r4, r6
    1a74:	1c23      	adds	r3, r4, #0
    1a76:	4654      	mov	r4, sl
    1a78:	40a7      	lsls	r7, r4
    1a7a:	1c3a      	adds	r2, r7, #0
    1a7c:	1a80      	subs	r0, r0, r2
    1a7e:	4199      	sbcs	r1, r3
    1a80:	9000      	str	r0, [sp, #0]
    1a82:	9101      	str	r1, [sp, #4]
    1a84:	e005      	b.n	1a92 <__udivdi3+0xe6>
    1a86:	4282      	cmp	r2, r0
    1a88:	d99d      	bls.n	19c6 <__udivdi3+0x1a>
    1a8a:	2300      	movs	r3, #0
    1a8c:	2400      	movs	r4, #0
    1a8e:	9300      	str	r3, [sp, #0]
    1a90:	9401      	str	r4, [sp, #4]
    1a92:	9800      	ldr	r0, [sp, #0]
    1a94:	9901      	ldr	r1, [sp, #4]
    1a96:	b002      	add	sp, #8
    1a98:	bc1c      	pop	{r2, r3, r4}
    1a9a:	4690      	mov	r8, r2
    1a9c:	4699      	mov	r9, r3
    1a9e:	46a2      	mov	sl, r4
    1aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aa2:	42a3      	cmp	r3, r4
    1aa4:	d9a7      	bls.n	19f6 <__udivdi3+0x4a>
    1aa6:	2200      	movs	r2, #0
    1aa8:	2300      	movs	r3, #0
    1aaa:	9200      	str	r2, [sp, #0]
    1aac:	9301      	str	r3, [sp, #4]
    1aae:	e7b1      	b.n	1a14 <__udivdi3+0x68>
    1ab0:	2220      	movs	r2, #32
    1ab2:	464b      	mov	r3, r9
    1ab4:	1a52      	subs	r2, r2, r1
    1ab6:	40d3      	lsrs	r3, r2
    1ab8:	1c1a      	adds	r2, r3, #0
    1aba:	4643      	mov	r3, r8
    1abc:	408b      	lsls	r3, r1
    1abe:	1c1f      	adds	r7, r3, #0
    1ac0:	4317      	orrs	r7, r2
    1ac2:	e792      	b.n	19ea <__udivdi3+0x3e>
    1ac4:	4653      	mov	r3, sl
    1ac6:	2420      	movs	r4, #32
    1ac8:	4656      	mov	r6, sl
    1aca:	1ae4      	subs	r4, r4, r3
    1acc:	1c3b      	adds	r3, r7, #0
    1ace:	40b5      	lsls	r5, r6
    1ad0:	40e3      	lsrs	r3, r4
    1ad2:	1c1c      	adds	r4, r3, #0
    1ad4:	1c2b      	adds	r3, r5, #0
    1ad6:	4323      	orrs	r3, r4
    1ad8:	e7cd      	b.n	1a76 <__udivdi3+0xca>
    1ada:	4652      	mov	r2, sl
    1adc:	2320      	movs	r3, #32
    1ade:	1a9b      	subs	r3, r3, r2
    1ae0:	1c2a      	adds	r2, r5, #0
    1ae2:	409a      	lsls	r2, r3
    1ae4:	1c27      	adds	r7, r4, #0
    1ae6:	1c13      	adds	r3, r2, #0
    1ae8:	4652      	mov	r2, sl
    1aea:	40d7      	lsrs	r7, r2
    1aec:	431f      	orrs	r7, r3
    1aee:	e7bb      	b.n	1a68 <__udivdi3+0xbc>
    1af0:	2320      	movs	r3, #32
    1af2:	2200      	movs	r2, #0
    1af4:	1a58      	subs	r0, r3, r1
    1af6:	2300      	movs	r3, #0
    1af8:	9200      	str	r2, [sp, #0]
    1afa:	9301      	str	r3, [sp, #4]
    1afc:	3201      	adds	r2, #1
    1afe:	40c2      	lsrs	r2, r0
    1b00:	9201      	str	r2, [sp, #4]
    1b02:	e784      	b.n	1a0e <__udivdi3+0x62>

00001b04 <__clzdi2>:
    1b04:	b510      	push	{r4, lr}
    1b06:	2900      	cmp	r1, #0
    1b08:	d103      	bne.n	1b12 <__clzdi2+0xe>
    1b0a:	f7ff fe39 	bl	1780 <__clzsi2>
    1b0e:	3020      	adds	r0, #32
    1b10:	e002      	b.n	1b18 <__clzdi2+0x14>
    1b12:	1c08      	adds	r0, r1, #0
    1b14:	f7ff fe34 	bl	1780 <__clzsi2>
    1b18:	bd10      	pop	{r4, pc}
    1b1a:	46c0      	nop			; (mov r8, r8)

00001b1c <lookupTable.12169>:
    1b1c:	8d20 ffff ada1 ffff ce64 ffff ef6c ffff      .......d...l...
    1b2c:	10b7 0000 324a 0000 5425 0000 7649 0000     ....J2..%T..Iv..
    1b3c:	98b7 0000 bb72 0000 de79 0000 01d0 0001     ....r...y.......
    1b4c:	2576 0001 496f 0001 6dbc 0001 925e 0001     v%..oI...m..^...
    1b5c:	b758 0001 dcaa 0001 0258 0002 2862 0002     X.......X...b(..
    1b6c:	4ecc 0002 7596 0002 9cc4 0002 c457 0002     .N...u......W...
    1b7c:	ec52 0002 14b7 0003 3d89 0003 66ca 0003     R........=...f..
    1b8c:	907d 0003 baa4 0003 e544 0003 105e 0004     }.......D...^...
    1b9c:	3bf6 0004 680e 0004 94ac 0004 c1d1 0004     .;...h..........
    1bac:	ef81 0004 1dc1 0005 4c95 0005 7c00 0005     .........L...|..
    1bbc:	ac07 0005 dcae 0005 0dfb 0006 3ff2 0006     .............?..
    1bcc:	7298 0006 a5f4 0006 da09 0006 0ee0 0007     .r..............
    1bdc:	447d 0007 7ae8 0007 b228 0007 ea44 0007     }D...z..(...D...
    1bec:	2344 0008 5d30 0008 9810 0008 d3ef 0008     D#..0]..........
    1bfc:	10d6 0009 4ecf 0009 8de5 0009 ce23 0009     .....N......#...
    1c0c:	0f98 000a 524f 000a 9657 000a dbbf 000a     ....OR..W.......
    1c1c:	2298 000b 6af3 000b b4e2 000b 007b 000c     ."...j......{...
    1c2c:	4dd4 000c 9d03 000c ee23 000c 4150 000d     .M......#...PA..
    1c3c:	96a9 000d ee4e 000d 4865 000e a516 000e     ....N...eH......
    1c4c:	048e 000f 12a0 0000 127e 0000 127e 0000     ........~...~...
    1c5c:	1272 0000 1166 0000 1166 0000 1266 0000     r...f...f...f...
    1c6c:	1272 0000 1166 0000 1266 0000 1166 0000     r...f...f...f...
    1c7c:	1272 0000 116a 0000 116a 0000 116a 0000     r...j...j...j...
    1c8c:	1480 0000                                   ....

00001c90 <_init>:
    1c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c96:	bc08      	pop	{r3}
    1c98:	469e      	mov	lr, r3
    1c9a:	4770      	bx	lr

00001c9c <__init_array_start>:
    1c9c:	000000dd 	.word	0x000000dd

00001ca0 <_fini>:
    1ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ca6:	bc08      	pop	{r3}
    1ca8:	469e      	mov	lr, r3
    1caa:	4770      	bx	lr

00001cac <__fini_array_start>:
    1cac:	000000b5 	.word	0x000000b5
